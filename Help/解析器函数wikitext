{{更新|time=2018-09-05}}
{{Wikipedia how-to|H:PF|H:FUNC}} 
{{NoteTA
|G1 = IT
|G2 = MediaWiki
}}
{{Mediawiki|Help:Extension:ParserFunctions/zh}}
'''解析器函数'''是一个MediaWiki扩展，由[[mw:Extension:ParserFunctions|mw:Extension:ParserFunctions]]提供，包含多个解析函数解释器。本扩展的典型语法是：

<pre>-{}-
{{#函数名:参数1|参数2|参数3|...}}
</pre>

目前有预定义的函数：<code>expr</code>、<code>if</code>、<code>ifeq</code>、<code>ifexpr</code>、<code>switch</code>（<code>rand</code>暂时被废除）。

各函数名都对大小写不敏感。

语句中的空格、换行等空白字符将被省略。

== 函数 ==
=== <tt>expr</tt> ===
{{See also|Help:计算}}

<code>expr</code>函数，计算[[数学|数学]]表达式。语法为：

<pre>-{}-
{{#expr:表达式}}
</pre>

表达式支持的运算符有：

{| class="wikitable"
! 运算符 || 名称 || 优先级 || 元数 || 结合性 || 样例
|-
| <code>+</code> || [[正|正]] || 9 || 1 || 右 || {{tlxm|#expr|+ 7}} = {{#expr:+ 7}}
|-
| <code>-</code> || [[负|负]] || 9 || 1 || 右 || {{tlxm|#expr|- 7}} = {{#expr:- 7}}
|-
| <code>not</code> || [[逻辑非|逻辑非]] || 9 || 1 || 右 || {{tlxm|#expr|not 7}} = {{#expr:not 7}}
|-
| <code>*</code> || [[乘|乘]] || 8 || 2 || 左 || {{tlxm|#expr|30 * 7}} = {{#expr:30 * 7}}
|-
| <code>/</code> || [[除|除]] || 8 || 2 || 左 || {{tlxm|#expr|30 / 7}} = {{#expr:30 / 7}}
|-
| <code>div</code> || 除 || 8 || 2 || 左 || {{tlxm|#expr|30 div 7}} = {{#expr:30 div 7}}
|-
| <code>mod</code> || [[同餘|模]] || 8 || 2 || 左 || {{tlxm|#expr|30 mod 7}} = {{#expr:30 mod 7}}
|-
| <code>+</code> || [[加|加]] || 6 || 2 || 左 || {{tlxm|#expr|30 + 7}} = {{#expr:30 + 7}}
|-
| <code>-</code> || [[减|减]] || 6 || 2 || 左 || {{tlxm|#expr|30 - 7}} = {{#expr:30 - 7}}
|-
| <code>round</code> || [[舍入|舍入]]（最大9） || 5 || 2 || 左 || {{tlxm|#expr|30 / 7 round 7}} = {{#expr:30 / 7 round 7}}
|-
| <code>=</code> || [[等于|等于]] || 4 || 2 || 左 || <code><nowiki>{{#expr:30 = 7}}</nowiki></code> = {{#expr:30 = 7}}
|-
| <code><</code> || 小于 || 4 || 2 || 左 || {{tlxm|#expr|30 < 7}} = {{#expr:30 < 7}}
|-
| <code>></code> || 大于 || 4 || 2 || 左 || {{tlxm|#expr|30 > 7}} = {{#expr:30 > 7}}
|-
| <code><=</code> || 小于等于 || 4 || 2 || 左 || <code><nowiki>{{#expr:30 <= 7}}</nowiki></code> = {{#expr:30 <= 7}}
|-
| <code>>=</code> || 大于等于 || 4 || 2 || 左 || <code><nowiki>{{#expr:30 >= 7}}</nowiki></code> = {{#expr:30 >= 7}}
|-
| <code><></code> || [[不等于|不等于]] || 4 || 2 || 左 || {{tlxm|#expr|30 <> 7}} = {{#expr:30 <> 7}}
|-
| <code>!=</code> || 不等于 || 4 || 2 || 左 || <code><nowiki>{{#expr:30 != 7}}</nowiki></code> = {{#expr:30 != 7}}
|-
| <code>and</code> || [[逻辑与|逻辑与]] || 3 || 2 || 左 || {{tlxm|#expr|30 and 7}} = {{#expr:30 and 7}}
|-
| <code>or</code> || [[逻辑或|逻辑或]] || 2 || 2 || 左 || {{tlxm|#expr|30 or 7}} = {{#expr:30 or 7}}
|}

<code>round</code>运算对运算数正负，位数正负都有不同的表现，参见下例。

逻辑运算符把假映射为0，把真映射为非0，且返回值只有0或1。

同一表达式中先计算高优先级运算。括号优先级高于一切。

=== <tt>if</tt> ===
<code>if</code>函数是一个<code>if-then-else</code>（如果、那么、否则）结构，和[[Excel|Excel]]的<code>if</code>函数类似。语法是：

<pre>-{}-
{{#if:判断字符串|那么字符串|否则字符串}}
{{#if:判断字符串|那么字符串}}
</pre>

若“判断字符串”为非空字符串（忽略前导或后缀空格），则函数返回“那么字符串”；若“判断字符串”是空字符串，则返回“否则字符串”。“否则字符串”可被省略而不会造成错误，但函数在“判断字符串”为空时便会返回空字符串。

if函数还可用在模板语法中检查某个参数是否被使用。若满足条件，可在调用此模板的页面中显示或不显示特定内容。
<pre>-{}-
{{#if:{{{1|}}}|匿名参数1不为空时输出的结果|匿名参数1为空时输出的结果}}
{{#if:{{{xx|}}}{{{yy|}}}|xx或yy参数不为空时输出的结果|xx和yy参数都为空时输出的结果}}
</pre>

=== <tt>ifeq</tt> ===
<code>ifeq</code>比较两个字符串，返回比较结果。语法为：

<pre>-{}-
{{#ifeq:字符串1|字符串2|相等时返回的字符串|不相等时返回的字符串}}
</pre>

注意：两个空字符串是相等的。

示例：

假设模板{{tlc|Ifeq test}}的内容是

<pre>
{{#ifeq:{{{lang}}}|zh|我使用中文|I don't use Chinese}}
</pre>

则{{tlc|Ifeq test|lang{{=}}zh}}的结果是“我使用中文”；而{{tlc|Ifeq test|lang{{=}}en}}的结果是“I don't use Chinese”。

=== <tt>ifexist</tt> ===
<code>ifexist</code>根據指定名稱的頁面是否存在，返回兩個參數中的一個。用法：

<pre>-{}-
{{#ifexist:待測頁面標題|存在文字|不存在文字}}
</pre>

注意不能跨维基使用。

<code>ifexist</code>是一个高开销方法，如果超过调用次数限制，超出部分的调用默认为输出不存在时的内容。

示例：

首先，我们已经知道[[test|test]]页面不存在，[[User:用户名|User:用户名]]不存在，[[维基百科|维基百科]]页面存在，英文维基百科的页面[[:en:Minecraft|:en:Minecraft]]存在，维基词典里面[[wikt:hello|wikt:hello]]存在。
* {{tlxm|#ifexist|test|有test頁面|無test頁面}} → {{#ifexist:test|有test頁面|無test頁面}}
* {{tlxm|#ifexist|User:用户名|該用戶頁存在|該用戶頁不存在}} → {{#ifexist:User:用户名|該用戶頁存在|該用戶頁不存在}}
* {{tlxm|#ifexist|维基百科|'''✓'''|'''✗'''}} → {{#ifexist:维基百科|'''✓'''|'''✗'''}}
* {{tlxm|#ifexist|en:Minecraft|1|0}} → {{#ifexist:en:User:Sex|1|0}}
* {{tlxm|#ifexist|wikt:hello|1|0}} → {{#ifexist:wikt:hello|1|0}}

=== <tt>ifexpr</tt> ===
<code>ifexpr</code>计算数学表达式，并根据计算结果返回字符串。

<pre>-{}-
{{#ifexpr:表达式|表达式不为0的结果|表达式为0的结果}}
</pre>

表达式语法与<code>expr</code>相同。

=== <tt>switch</tt> ===
<code>switch</code>将一个值与多个预设值比较，若有匹配时则返回指定字符串，即[[双射|双射]]。语法是：

<pre>-{}-
{{#switch:比较值
|预设值1 = 结果1
|预设值2 = 结果2
|...
|预设值n = 结果n
|#default = 缺省结果
}}
</pre>

<code>switch</code>将从左往右逐一尝试，直到出现匹配。函数将返回第一个匹配值对应的结果，而忽略后面的匹配值。如果没有匹配，函数将返回缺省结果。缺省结果是指的#default=后面的内容。其中#default=在结果不包含等号时是可以省略的。如果缺省结果没有设置，函数将返回空串。

注意：“缺省结果”是'''最后一个没有等号'''的预设值或“#default”预设值对应的结果；如果期望把一个包含“=”号的字符串作为缺省结果，则必须采用“#default”预设值形式。例如：

<pre>#default = <span style="color:red;">red</span></pre>

<code>switch</code>也可用作[[满射|满射]]（多对一，避免重复设置结果）。即某预设值后未设置结果，这样如果该预设值与比较值匹配，则函数返回'''第一个有结果的'''预设值的结果。例如：

<pre>-{}-
{{#switch:比较值
|预设值1
|预设值2
|预设值3 = 结果3
|缺省结果
}}
</pre>

如果比较值与预设值1、预设值2或预设值3匹配，都将返回结果3。注意：“#default”后必须有“=”，但其他预设值可以使用“#default”的结果。

<code>switch</code>也可以与<code>invoke</code>搭配，来完成随机显示的功能，详见'''[[Help:隨機顯示|Help:隨機顯示]]'''。

=== <tt>time</tt> ===
<code>time</code>是一个时间日期格式化函数，它的语法为：

<pre>-{}-
{{#time:格式参数}}
</pre>

或者

<pre>-{}-
{{#time:格式参数|时间参数}}
</pre>

如果'''时间参数'''未指定，则使用该条目被转换为HTML的时间（值）。注意到由于缓存的缘故，这与条目被浏览的时间可能会有高达1星期的偏差。因此可能需要手工更新，方法是加上action=purge参数访问页面。

'''格式参数'''是一种格式字符，与在[http://php.net/date PHP的date]中的用法相似。

下列格式代码与在PHP中的意义一样。所不同的是：如果時間未被指定，则显示文章最后一次被转换成HTML的时间。由于缓存的关系，此时间和你浏览文章的时间可能有最长一个星期的差别。所以有时可能需要人工更新数据，方法是编辑文章但不做任何修改即保存。

以下格式代码和PHP中<code>date()</code>函数意义相同。除了国际化（主要是语言）造成的差别以外，所有和PHP的不同点都应当作为软件的错误进行报告。其中所有的数字输出都会被替换成当地语言的时间格式，可以使用<code>xn</code>（见下文）恢复成显示原来的数字。

{| class="wikitable"
! 代码 !! 描述 !! 输出（示例）
|-
| <code>d</code> || 一个月中的第 n 天，不足两位补充0 || 04
|-
| <code>D</code> || 星期的缩写，通常不国际化 || {{#time:D}}
|-
| <code>j</code> || 一个月中的第 n 天，不足两位不补0 || 3
|-
| <code>l</code> || 星期的全称，通常不国际化 || {{#time:l}}
|-
| <code>F</code> || 月份的的全称，通常需要国际化 || {{#time:F}}
|-
| <code>m</code> || 数字表示的月份，不足两位补充0 || 01－12
|-
| <code>M</code> || 月份的的缩写，通常需要国际化 || {{#time:M}}
|-
| <code>n</code> || 数字表示的月份，不足两位不补0 || 1－12
|-
| <code>Y</code> || 四位年份 || {{#time:Y}}
|-
| <code>y</code> || 二位年份 || {{#time:y}}
|-
| <code>H</code> || 小时，不足两位补充0 || 00－23
|-
| <code>i</code> || 分钟，不足两位补充0 || 00－59
|-
| <code>s</code> || 秒，不足两位补充0 || 00－59
|}

以下代码是对PHP作出的扩展：

{| class="wikitable"
! 代码 !! 描述
|-
| <code>xn</code> || 将接下来的数字代码恢复成[[ASCII|ASCII]]中的阿拉伯数字例如，在[[印地语|印地语]]中，{{tlxm|#time|H, xnH}}输出“०६, 06”。
|-
| <code>xr</code> || 将接下来的数字代码显示成罗马数字。
|-
| <code>xg</code> || 输出月份名字的[[属格|属格]]，只针对那些区分主格和属格的语言。
|-
| <code>xx</code> || 输出“x”。
|}
任何其他字符都将不做处理直接输出。你也可以用引号来输出未经处理的字符串。

* 引号中的字符直接输出（但不输出引号），没有配对的引号也直接输出。例如：
** {{tlxm|#time|"现在是"F}} → {{#time:"现在是"F}}
** {{tlxm|#time|i's"}} → {{#time:i's"}}
** {{tlxm|#time|Y-m-d"T"H:i:s"Z"}} → {{#time:Y-m-d"T"H:i:s"Z"}} ([[ISO_8601|ISO 8601]])
* 像PHP的<code>date()</code>函数一样的反斜杠转义也是支持的。<code>\H</code>直接输出<code>H</code>，<code>\"</code>直接输出<code>"</code>。

未来可能会增加更多格式代码，可能是完善PHP中已有功能，也可能是增加新功能。

时间参数的格式参照PHP的<code>strtotime()</code>函数。它同时支持相对时间，如"+10 hours"，用来表示时区转换。更多信息参见[http://www.gnu.org/software/tar/manual/html_node/tar_109.html the GNU tar manual]{{dead link}}。

下表以國際協調时间（UTC）{{#time:Y年n月j日（l）H時i分s秒}}（北京時間{{#time:Y年n月j日（l）H時i分s秒|+8 hours}}）为例说明各格式参数的作用。

{| class="wikitable"
! 格式参数 !! 说明 !! 显示结果
|-
| <code>A</code> || 显示AM或PM || {{#time:A}}
|-
| <code>a</code> || 显示am或pm || {{#time:a}}
|-
| <code>c</code> || 显示长日期 || {{#time:c}}
|-
| <code>D</code> || 星期数，以一个汉字显示 || {{#time:D}}
|-
| <code>d</code> || 日期日数，有0补齐 || {{#time:d}}
|-
| <code>F</code>或<code>M</code> || 月份 || {{#time:F}}
|-
| <code>G</code>或<code>g</code> || 当前UTC时间小时数，1位或2位数字 || {{#time:G}}
|-
| <code>H</code> || 小时数，2位数字（24小时制） || {{#time:H}}
|-
| <code>h</code> || 小时数，2位数字 （12小时制）|| {{#time:h}}
|-
| <code>i</code> || 分钟数，2位数字 || {{#time:i}}
|-
| <code>j</code> || 日数，2位数字 || {{#time:j}}
|-
| <code>L</code> || 日期星期数，1位数字，星期日为1，星期六为7 || {{#time:L}}
|-
| <code>l</code> || 日期星期数，3位汉字 || {{#time:l}}
|-
| <code>m</code> || 月份数，2位数字 || {{#time:m}}
|-
| <code>N</code> || 星期数，星期一为1，星期日为7 || {{#time:N}}
|-
| <code>n</code> || 月份数，1位或2位数字 || {{#time:n}}
|-
| <code>r</code> || 英文长日期格式 || {{#time:r}}
|-
| <code>s</code> || 秒数 || {{#time:s}}
|-
| <code>T</code> || UTC ||{{#time:T}}
|-
| <code>t</code> || 该月天数 || {{#time:t}}
|-
| <code>U</code> || [[Help:時間序號|時間序號]]，1970-1-1 0:0:1为1，參見[[UNIX時間|UNIX時間]] || {{#time:U}}
|-
| <code>W</code> || 日期周数，显示日期为当年第几周 || {{#time:W}}
|-
| <code>w</code> || 星期数，星期日为0，星期六为6 || {{#time:w}}
|-
| <code>Y</code> || 日期年份，4位数字 || {{#time:Y}}
|-
| <code>y</code> || 日期年份，2位数字 || {{#time:y}}
|-
| <code>z</code> || 显示日期为当年第几日 || {{#time:z}}
|}

系统默认的时间参数为当前UTC+0时间，可以使用{{tlxm|#time|参数|+8 hours}}得到当前北京时间（UTC+8时间）。

时间参数可以使用绝对时间，如“<code>2008-12-31 23:59:59</code>”，也可以使用相对时间，如“<code>+7 days</code>”或者“<code>-5 hours</code>”得到默认时间7日之后或默认时间5小时之前的时间。也可以二者混合使用，比如{{tlxm|#time|Y-m-d H:i:s|2001-2-3 04:05:06 +1 year +2 months +3 days +4 hours +5 minutes +6 seconds}}返回“{{#time:Y-m-d H:i:s|2001-2-3 04:05:06 +1 year +2 months +3 days +4 hours +5 minute +6 seconds}}”。

使用<code>xr</code>可以在其后显示罗马数字，如{{tlxm|#time|'''xr'''Y年'''xr'''m月'''xr'''d日|2008-12-31}}显示为“{{#time:xrY年xrm月xrd日|2008-12-31}}”。

產生與簽名格式相同的時間語法為：{{tlxm|#time|Y年n月j日 (D) H:i (\U\TC)}}，顯示為「{{#time:Y年n月j日 (D) H:i (\U\TC)}}」（亦可將UTC直接放在<code>time</code>外面，如<code>{{tlm|#time|Y年n月j日 (D) H:i}} (UTC)</code>或使用參數<code>T</code>：{{tlxm|#time|Y年n月j日 (D) H:i (T)}}）。

=== <tt>language</tt> ===
<code>#language</code>得到指定語言代碼的該語言名稱（以当地语言表示）。
* {{tlxm|#language|de}} → {{#language:de}}
* {{tlxm|#language|en}} → {{#language:en}}
* {{tlxm|#language|ja}} → -{ {{#language:ja}}}-
* {{tlxm|#language|nl}} → {{#language:nl}}
* {{tlxm|#language|zh}} → -{ {{#language:zh}}}-
* {{tlxm|#language|zh-cn}} → -{ {{#language:zh-cn}}}-
* {{tlxm|#language|zh-tw}} → -{ {{#language:zh-tw}}}-
* {{tlxm|#language|zh-hk}} → -{ {{#language:zh-hk}}}-
* {{tlxm|#language|zh-sg}} → -{ {{#language:zh-sg}}}-

加入第二参数时，显示该语言在第二参数语言中的名称。
* {{tlxm|#language|de|en}} → -{ {{#language:de|en}} }-
* {{tlxm|#language|en|ja}} → -{ {{#language:en|ja}} }-
* {{tlxm|#language|ja|nl}} → -{ {{#language:ja|nl}} }-
* {{tlxm|#language|nl|zh}} → -{ {{#language:nl|zh}} }-
* {{tlxm|#language|zh|de}} → -{ {{#language:zh|de}} }-

=== <tt>babel</tt> ===
* {{tlxm|#babel|''babelcode1''|''babelcode2''|...}}
替换为{{tlx|babel}}模板，见[[mw:Extension:Babel#Usage|Extension:Babel]]。

=== <tt>invoke</tt> ===
* <code>{{#invoke:''module''|''function''|''arg1''|''arg2''|...}}</code>
调用位于[[mw:Extension:Scribunto|Scribunto]]中的模块，见[[维基百科:Lua|维基百科:Lua]]。

== <tt>subst</tt> ==
{{main|Help:替换引用}}
应用subst:到解析器函数，必须在subst:和#之间不能有空格，才可以正常工作。

== 表格 ==
解析器函数中由于使用了1<code>|</code>管道符做参数分隔符，所以不能包括表格所需要的<code>|</code>符。要想在输出前来中包含表格，可以通过以下两个办法达到：
# 通过嵌套模板来达到隐藏<code>|</code>的目的。比如：{{tlx|!}}
# 使用HTML语法。1

== 参见 ==
{{mediawiki|Help:Extension:ParserFunctions}}
* [[Help:计算|Help:计算]]
* [[Help:模板|Help:模板]]
* [https://www.mediawiki.org/wiki/Help:Extension:ParserFunctions/zh MediaWiki上更为详细的解析器函數幫助]

{{H-f Help}}

[[Category:維基百科模板|MBKZYF]]