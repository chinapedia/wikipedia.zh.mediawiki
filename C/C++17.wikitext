{{noteTA
|G1=IT
|1=zh-hans:数组;zh-hant:陣列;
|2=zh-hans:构造函数;zh-hant:建構子;
|3=zh-hans:构造函数;zh-hant:建構式;
|4=zh-hans:构造函数;zh-hant:构造式;
|5=zh-hans:构造;zh-hant:建構;
|6=zh-hans:指针;zh-hant:指標;
|7=zh-hans:函数;zh-hant:函式;
|8=zh-hans:调用;zh-hant:呼叫;
|9=zh-hans:调用;zh-hant:喚起;
|10=zh-hans:变量;zh-hant:變數;
|11=zh-hans:声明;zh-hant:宣告;
|12=zh-hans:引用;zh-hant:引數;
|13=zh-hans:引用;zh-hant:參考;
|14=zh-hans:列表;zh-hant:串列;
|15=zh-hans:回返;zh-hant:返回;
|16=zh-hans:实现;zh-hant:實做;
|17=zh-hans:派生;zh-hant:衍伸;
|18=zh-hans:布尔;zh-hant:布林;
|19=zh-hans:转义;zh-hant:跳脫;
|20=zh-hans:线程;zh-hant:緒程;
|21=zh-hans:预处理器;zh-hant:前處理器;
|22=zh-hans:模式;zh-hant:樣式;
|23=zh-hans:实体;zh-hant:實體;
|24=zh-hans:标准;zh-hant:規格;
|25=zh-hans:字符串;zh-hant:字元序列;
|26=zh-hans:字符;zh-hant:字元;
|27=zh-hans:类型;zh-hant:型别;
|28=zh-hans:语句;zh-hant:述句;
|29=zh-hans:算法;zh-hant:演算法;
|30=zh-hans:头文件;zh-hant:標頭檔;
}}

'''C++17'''又稱'''C++1z'''，是C++的現行標準的非正式名稱，正式名稱為"International Standard ISO/IEC Programming Language C++"。C++17旨在作為大型擴充功能，最終的投票期將於2017年結束。

目前不少著名C++編譯器已支持C++17仍未定案的草案（draft），例如最新的GCC6已支持C++ concept的C++事务型内存（Transactional Memory），Visual Studio與Clang目前都提供了modules。

==新功能==
* 靜態斷言<code>static_assert</code>無需提供出錯信息<ref>{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3928.pdf|title=N3928: Extending static_assert, v2 (Walter E. Brown)|accessdate=2015-07-16|archive-date=2015-08-11|archive-url=https://web.archive.org/web/20150811125019/http://open-std.org/JTC1/SC22/WG21/docs/papers/2014/n3928.pdf|dead-url=no}}</ref>
* 新增<code>std::basic_string_view</code>, 對外部字元序列或字串片斷（string-slice）的引用<ref>{{Cite web|url=http://en.cppreference.com/w/cpp/string/basic_string_view|title=std::basic_string_view - cppreference.com|website=en.cppreference.com|access-date=2016-06-23|archive-date=2016-06-17|archive-url=https://web.archive.org/web/20160617220428/http://en.cppreference.com/w/cpp/string/basic_string_view|dead-url=no}}</ref>
* 移除 trigraphs<ref>{{cite web|title=N3981: Removing trigraphs??! (Richard Smith)|url=http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2014/n3981.html|date=2014-05-06|accessdate=2015-07-16|archive-date=2018-07-09|archive-url=https://web.archive.org/web/20180709123422/http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2014/n3981.html|dead-url=no}}</ref><ref>[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4210.pdf IBM comment on preparing for a Trigraph-adverse future in C++17] {{Wayback|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4210.pdf |date=20180911053619 }}, IBM paper N4210, 2014-10-10. Authors: Michael Wong, Hubert Tong, Rajan Bhakta, Derek Inglis</ref>
* 具有模板形式的模板（template template）参数允许使用 typename（之前仅允许使用 class）<ref>{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4051.html|title=N4051: Allow typename in a template template parameter (Richard Smith)|accessdate=2015-07-16|archive-date=2015-08-11|archive-url=https://web.archive.org/web/20150811124402/http://open-std.org/JTC1/SC22/WG21/docs/papers/2014/n4051.html|dead-url=no}}</ref>
* <code>[[类型推论|auto]]</code>之新規定並簡化在括弧內初始化的定義<ref>{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3922.html|title=N3922: New Rules for auto deduction from braced-init-list (James Dennett)|accessdate=2015-07-16|archive-date=2015-08-10|archive-url=https://web.archive.org/web/20150810183244/http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3922.html|dead-url=no}}</ref><ref name="isocpp-update">{{cite web|title=Updates to my trip report|url=http://isocpp.org/blog/2014/11/updates-to-my-trip-report|accessdate=2015-07-16|archive-date=2015-03-19|archive-url=https://web.archive.org/web/20150319164316/https://isocpp.org/blog/2014/11/updates-to-my-trip-report|dead-url=no}}</ref>
* 嵌套的 namespace的定義<ref name="isocpp-update" /><ref>{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4230.html|title=N4230: Nested namespace definition (Robert Kawulak, Andrew Tomazos)|accessdate=2015-07-16|archive-date=2015-08-03|archive-url=https://web.archive.org/web/20150803104044/http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4230.html|dead-url=no}}</ref>
* std::uncaught_exceptions 取代 std::uncaught_exception<ref>{{cite web|url=http://isocpp.org/files/papers/n4259.pdf|title=N4259: Wording for std::uncaught_exceptions (Herb Sutter)|accessdate=2015-07-16|archive-date=2014-11-29|archive-url=https://web.archive.org/web/20141129022746/http://isocpp.org/files/papers/n4259.pdf|dead-url=yes}}</ref><ref name="isocpp-core">{{cite web|title=New core language papers adopted for C++17|url=https://isocpp.org/blog/2014/11/new-papers-adopted-for-cpp17|accessdate=2015-07-16|archive-date=2015-04-27|archive-url=https://web.archive.org/web/20150427234634/https://isocpp.org/blog/2014/11/new-papers-adopted-for-cpp17|dead-url=no}}</ref>
* 支持UTF-8字元<ref name="isocpp-core" /><ref>{{cite web|url=http://isocpp.org/files/papers/n4267.html|title=N4267: Adding u8 character literals (Richard Smith)|accessdate=2015-07-16|archive-date=2015-10-28|archive-url=https://web.archive.org/web/20151028205257/https://isocpp.org/files/papers/n4267.html|dead-url=no}}</ref>
* 变长参数模板的Folding运算<ref name="isocpp-core" /><ref>{{cite web|url=http://isocpp.org/files/papers/n4295.html|title=N4295: Folding expressions (Andrew Sutton, Richard Smith)|accessdate=2015-07-16|archive-date=2015-04-04|archive-url=https://web.archive.org/web/20150404075316/https://isocpp.org/files/papers/n4295.html|dead-url=no}}</ref>
* 为 <code>std::map</code> 與 <code>std::unordered_map</code>增加了基于结点的插入操作<ref>{{cite web|url=https://isocpp.org/files/papers/n4279.html|title=N4279: Improved insertion interface for unique-key maps (Thomas Köppe)|accessdate=2015-07-16|archive-date=2015-04-27|archive-url=https://web.archive.org/web/20150427234153/https://isocpp.org/files/papers/n4279.html|dead-url=no}}</ref><ref name="isocpp-stdlib">{{cite web|title=New standard library papers adopted for C++17|url=https://isocpp.org/blog/2014/11/new-standard-library-papers-adopted-for-cpp17|accessdate=2015-07-16|archive-date=2014-11-29|archive-url=https://web.archive.org/web/20141129022647/https://isocpp.org/blog/2014/11/new-standard-library-papers-adopted-for-cpp17|dead-url=no}}</ref>
* 容器存取操作表示方法的统一化（Uniform container access）<ref name="isocpp-stdlib" /><ref>{{cite web|title=N4280: Non-member size() and more (Riccardo Marcangelo)|url=https://isocpp.org/files/papers/n4280.pdf|accessdate=2015-07-16|archive-date=2015-03-09|archive-url=https://web.archive.org/web/20150309065322/http://isocpp.org/files/papers/n4280.pdf|dead-url=no}}</ref>
* 连续型迭代器（Contiguous Iterators）<ref name="isocpp-stdlib" /><ref>{{cite web|title=N4284: Contiguous Iterators (Jens Maurer)|url=https://isocpp.org/files/papers/n4284.html|accessdate=2015-07-16|archive-date=2014-11-29|archive-url=https://web.archive.org/web/20141129022748/https://isocpp.org/files/papers/n4284.html|dead-url=yes}}</ref>
* <code>if</code>與<code>switch</code>述句內的初始化
* 基于<code>boost::filesystem</code>新增处理文件路径的<code>std::filesystem</code><ref>{{cite web|title=Filesystem Library Proposal (Beman Dawes)|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3505.html|accessdate=2016-08-02|archive-date=2016-07-20|archive-url=https://web.archive.org/web/20160720075346/http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3505.html|dead-url=no}}</ref>
* 具有并行處理功能的STL 演算法<ref>{{cite web|title=The Parallelism TS Should be Standardized|url=https://isocpp.org/files/papers/P0024R2.html|accessdate=2016-08-02|archive-date=2016-04-05|archive-url=https://web.archive.org/web/20160405100743/https://isocpp.org/files/papers/P0024R2.html|dead-url=no}}</ref>
* 新增特殊數學函數<ref>{{cite web|title=Mathematical Special Functions for C++17, v5|url=https://isocpp.org/files/papers/P0226R1.pdf|accessdate=2016-08-02|archive-date=2016-04-05|archive-url=https://web.archive.org/web/20160405090715/https://isocpp.org/files/papers/P0226R1.pdf|dead-url=no}}</ref>
* 引进Library Fundamentals TS I中的内容<ref>{{cite web|title=Adopt Library Fundamentals V1 TS Components for C++17 (R1)|url=https://isocpp.org/files/papers/p0220r1.html|accessdate=2016-08-02|archive-date=2016-04-05|archive-url=https://web.archive.org/web/20160405060908/https://isocpp.org/files/papers/p0220r1.html|dead-url=no}}</ref>
* <code>std::variant</code>，可作为型別安全（type-safe）的聯合所使用的容器（union container）
* 編譯期靜態确定的 if判斷式<code>if constexpr(expression)</code>
* 結構化綁定，允許<code>auto [a, b] = getTwoReturnValues();</code>
* 簡化模板之建構函式，例如允許以<code>pair(5.0, false)</code> 取代<code>pair<double,bool>(5.0, false)</code>
* 內聯式（Inline）變數，允許在標頭檔（header files）宣告變數

==注釋==
{{reflist|2}}
==另見==
*[[C++|C++]]
*[[C++14|C++14]]
*[[C++11|C++11]]

{{C++}}

[[category:C++|category:C++]]
[[Category:程式語言標準|Category:程式語言標準]]