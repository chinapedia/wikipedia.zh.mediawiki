{{NoteTA|G1=IT}}
{{Sidebar
|name = C語言標準
|style = width:auto;background:#f5faff;font-size:90%;line-height:1.6em;
|titlestyle = font-size:130%;padding-left:0.4em;padding-right:0.4em;background:#cee0f2; <!--(gap before first heading/content:)-->display:block;margin-bottom:6px;
|title = [[C語言#歷史|C語言標準]]
|headingstyle = padding:0.1em 0.25em 0.15em;{{{headingstyle|}}}
|heading1 = [[K&R_C|K&R C]] • [[ANSI_C|ANSI C]] • [[C99|C99]] • [[C11_(C语言标准)|C11]] • [[C18_(C語言標準)|C18]] • [[C2x|C2x]]
|navbar = none
}}
'''C11'''（也被称为C1X）指ISO标准'''''ISO/IEC 9899:2011'''''<ref>{{Cite web|url = http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=57853|title = ISO/IEC 9899:2011|accessdate = 2011-12-08|author = ISO|date = 2011-12-08|publisher = |language = en|archive-date = 2011-12-27|archive-url = https://web.archive.org/web/20111227220239/http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=57853|dead-url = no}}</ref>，在它之前的[[C语言|C语言]][[标准|标准]]为[[C99|C99]]。这次修订新增了被主流C语言[[编译器|编译器]](如[[GNU_C_Compiler|GCC]],[[Clang|Clang]],[[Microsoft_Visual_C++|Visual C++]]等)增加的内容，和引入了細部的[[内存|内存]]模型以更好的执行[[多线程|多线程]]。之前[[C99|C99]]的一些被推迟的计划在C11中增加了，但是对C99仍保留向后兼容。<ref>{{Cite web |url=http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1250.pdf |title=存档副本 |accessdate=2015-09-02 |archive-date=2015-09-24 |archive-url=https://web.archive.org/web/20150924060848/http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1250.pdf |dead-url=yes }}</ref>

GCC从4.6版本开始，已经可以支持一些C11的特性<ref>{{Cite news|url = http://gcc.gnu.org/gcc-4.6/changes.html#c|title = GCC 4.6 Release Series — Changes, New Features, and Fixes - GNU Project - Free Software Foundation (FSF)|last = |first = |date = |work = |accessdate = |archive-date = 2015-11-04|archive-url = https://web.archive.org/web/20151104124659/http://gcc.gnu.org/gcc-4.6/changes.html#c|dead-url = yes}}</ref>，Clang则是从3.1版本开始<ref>{{Cite news|url=http://llvm.org/releases/3.1/docs/ClangReleaseNotes.html#cchanges|title=Clang 3.1 Release Notes|last=|first=|date=|work=|accessdate=|archive-date=2016-03-04|archive-url=https://web.archive.org/web/20160304013843/http://llvm.org/releases/3.1/docs/ClangReleaseNotes.html#cchanges|dead-url=no}}</ref>；[[GNU_C函式庫|glibc]]自2.28版本起支持多线程<ref name=":0" />。

== 新特性 ==
* [[对齐|对齐]]处理（{{lang|en|Alignment}}）的标准化（包括<code>_Alignas</code>标志符，<code>alignof</code>[[运算符|运算符]]，<code>aligned_alloc</code>[[函数|函数]]以及<code><stdalign.h></code>[[头文件|头文件]]）。
* <code>_Noreturn</code> 函数标记，类似于 gcc 的 <code>__attribute__((noreturn))</code>。
* <code>_Generic</code> [[泛型|泛型]]巨集关键字。
* [[多线程|多线程]]（{{lang|en|Multithreading}}）支持，包括：
** <code>_Thread_local</code>存储类型标识符，<code><threads.h></code>头文件，里面包含了线程的创建和管理函数。
** <code>_Atomic</code>类型修饰符和<code><stdatomic.h></code>头文件。
* 增强的Unicode的支持。基于C Unicode技术报告ISO/IEC TR 19769:2004，增强了对Unicode的支持。包括为UTF-16/UTF-32编码增加了<code>char16_t</code>和<code>char32_t</code>数据类型，提供了包含unicode字符串转换函数的头文件<code><uchar.h></code>.
* 删除了 <code>gets()</code> 函数，使用一个新的更安全的函数<code>gets_s()</code>替代。
* 增加了[[边界检查|边界检查]]函数接口，定义了新的安全的函数，例如 <code>fopen_s()</code>，<code>strcat_s()</code> 等等。<ref name="N1570-K">[http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf WG14 N1570 Committee Draft — April 12, 2011] {{Wayback|url=http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf |date=20180329042731 }} Annex K ''Bounds-checking interfaces''</ref>
* 增加了更多浮点处理巨集。
* 匿名结构体/联合体支持。这个在gcc早已存在，C11将其引入标准。
* 静态断言（{{lang|en|Static assertions}}），<code>_Static_assert()</code>，在解释 <code>#if</code> 和 <code>#error</code> 之后被处理。
* 新的 <code>fopen()</code> 模式，<code>(“…x”)</code>。类似 POSIX 中的 <code>O_CREAT|O_EXCL</code>，在文件锁中比较常用。
* 新增 <code>quick_exit()</code> 函数作为第三种终止程序的方式。当 <code>exit()</code>失败时可以做最少的清理工作。

== 支援 ==
在語言層級，[[Microsoft_Visual_C++|MSVC]]<ref>{{cite web |author1=Elnar |title=C11 and C17 Standard Support Arriving in MSVC |url=https://devblogs.microsoft.com/cppblog/c11-and-c17-standard-support-arriving-in-msvc/ |access-date=2021-07-11 |archive-date=2021-05-11 |archive-url=https://web.archive.org/web/20210511115738/https://devblogs.microsoft.com/cppblog/c11-and-c17-standard-support-arriving-in-msvc/ }}</ref>、[[GCC|GCC]] 與 [[Clang|Clang]] 皆已支援 C11。

== 参考 ==
<references />

{{CProLang}}

[[Category:C語言|Category:C語言]]
[[Category:程式語言標準|Category:程式語言標準]]