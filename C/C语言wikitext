{{redirect2|C程序设计语言|书籍|C程序设计语言 (书)}}
{{Multiple issues|
{{too many sections}}
{{verylong}}
{{Trivia|time=2020-06-18T02:37:08+00:00}}
}}
{{noteTA
|G1=IT
|1=zh:文件; zh-hans:文件; zh-hant:檔案;
|2=zh:递归; zh-hans:递归; zh-hant:遞迴;
|3=zh:无符号整数; zh-hans:无符号整数; zh-hant:無號整數;
|4=zh:表达式; zh-hans:表达式; zh-hant:運算式;
|5=zh:循环; zh-hans:循环; zh-hant:迴圈;
|6=zh:字符串; zh-hans:字符串; zh-hant:字串;
|7=zh:头文件; zh-hans:头文件; zh-hant:標頭檔;
|8=zh:过程式; zh-hans:过程式; zh-hant:程序式;
|9=zh:预处理器; zh-hans:预处理器; zh-hant:前置處理器;
|10=zh:巨集; zh-hans:宏; zh-hant:巨集;
|11=zh:陣列; zh-hans:数组; zh-hant:陣列;
}}
{{Infobox programming language
|name = C語言  
|logo = File:The C Programming Language logo.svg
|logo_size = 220px
|logo caption =《[[C程序设计语言_(书)|C程序设计语言]]》，第一部介绍C语言的书籍
|paradigm = 程序式[[指令式编程|指令式编程]]（[[过程式编程|过程式]]）、[[结构化编程|结构化编程]]
|year = 1972年
|designer = [[丹尼斯·里奇|丹尼斯·里奇]]（Dennis Ritchie）
|developer = [[丹尼斯·里奇|丹尼斯·里奇]]（Dennis Ritchie）和[[肯·汤普逊|肯·汤普逊]]（Ken Thompson）
|latest_release_version = [https://www.iso.org/standard/74528.html ISO/IEC 9899:2018]（[[#C18|C18]]）
|latest_release_date = 2018年6月
|implementations        = [[Clang|Clang]]、[[GCC|GCC]]、[[Microsoft_Visual_C++|MSVC]]、[[Turbo_C|Turbo C]]、[[Watcom_c|Watcom C]]
|influenced_by = [[B語言|B]]（[[BCPL|BCPL]]、[[CPL_(程式語言)|CPL]]）、[[ALGOL_68|ALGOL 68]]<ref name="dottcl"/>、[[組合語言|組合語言]]、[[PL/I|PL/I]]、[[FORTRAN|FORTRAN]]
|influenced = [[:Category:C語言家族|大量]]，<br />如：[[awk|awk]]、{{le|BitC|BitC}}、[[C_shell|csh]]、[[C++|C++]]、[[C♯|C#]]、<br />[[D語言|D]]、[[Java|Java]]、[[JavaScript|JavaScript]]、[[Objective-C|Objective-C]]、[[Perl|Perl]]、[[PHP|PHP]]、[[Rust|Rust]]等
|operating_system = [[跨平台|跨平台]]
|wikibooks = C Programming
}}
'''C'''是一种通用的、[[过程式编程|过程式编程]][[程式語言|程式語言]]，支持[[结构化编程|结构化编程]]、词法作用域和[[递归|递归]]，使用静态类型系统，并且广泛用于[[系统软件|系统软件]]与[[应用软件|应用软件]]的开发。

C语言于1969年至1973年間，為了移植與開發[[UNIX|UNIX]][[作業系統|作業系統]]，由[[丹尼斯·里奇|丹尼斯·里奇]]與[[肯·汤普逊|肯·汤普逊]]，以[[B语言|B语言]]为基础，在[[贝尔实验室|贝尔实验室]]設計、开发出來。二十世纪八十年代，C语言应用日渐广泛。為了避免各開發廠商用的C語言的語法產生差異，[[美國國家標準局|美國國家標準局]]為C語言訂定了一套完整的國際標準語法，稱為[[ANSI_C|ANSI C]]，作為C語言的標準。与此同时，[[国际标准化组织|国际标准化组织]]也接受该标准为国际标准。因此，ANSI C也同时被称为ISO C。二十世纪八十年代至今的有关程式開發工具，一般都支持符合[[ANSI_C|ANSI C]]的語法。

C语言具有高效、灵活、功能丰富、表达力强和較高的[[移植_(軟體)|可移植性]]等特点，在[[程序设计|程式設計]]中备受青睐，成为最近25年使用最为广泛的编程语言<ref name="AutoTX-3">{{cite web
 |url          = http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html
 |title        = TIOBE Programming Community Index
 |year         = 2012
 |accessdate   = 2012-11-03
 |language     = en
 |trans_title  = TIOBE编程社区指数
 |archive-date = 2018-12-25
 |archive-url  = https://web.archive.org/web/20181225175216/https://www.tiobe.com/tiobe-index/index/
 |dead-url     = yes
}}</ref>。目前，C语言[[編譯器|編譯器]]普遍存在於各種不同的[[操作系统|操作系统]]中，例如[[Microsoft_Windows|Microsoft Windows]]、[[Mac_OS_X|macOS]]、[[Linux|Linux]]、[[Unix|Unix]]等。C語言的設計影響了众多後來的程式語言，例如[[C++|C++]]、[[Objective-C|Objective-C]]、[[Java|Java]]、[[C♯|C#]]等。现行的许多软件都是由C语言或者其影响和衍生的编程语言开发出来的。

<!--== 設計 ==
C語言設計目標是提供一種能以簡易的方式編譯、處理低階記憶體、產生少量的[[機械碼|機械碼]]以及不需要任何執行環境支援便能執行的程式語言。C語言也很適合搭配[[汇编语言|-{zh-hans:汇编语言; zh-hant:組合語言;}-]]來使用。儘管C語言提供許多低階處理的功能，但仍保持良好[[跨平台|跨平台]]的特性，以一個標準規格寫出的C語言程式可在許多電腦平台上進行編譯，甚至包含一些嵌入式处理器（[[微控制器|微控制器]]或称MCU）以及[[超級電腦|超級電腦]]等作業平台。-->

== 概述 ==
与[[ALGOL|ALGOL]]一族的大多数过程式编程语言类似，C語言是一個有結構化程式設計、具有变量作用域（variable scope）以及遞迴功能的程序式語言。其采用的静态类型系统可以防止无意的程序设计操作。C语言中所有的可执行代码都被包含在[[子程序|子程序]]（函数）里。其傳遞參數均是以值傳遞（pass by value）<ref>{{ Cite book | author = Brian W. Kernighan and Dennis M. Ritchie | title = The C programming Language | publisher = Prentice-Hall | date = 1988 | ISBN = 0-13-110362-8 | language = en | quote = In C, all function arguments are passed ``by value.'' }}</ref>，另外也可以傳遞指针（a pointer passed by value）。C语言是自由形式语言，即其源代码的缩进并不影响程序的功能，而是使用[[分号|分号]]作为[[陈述式|语句]]的结尾，[[大括号|大括号]]来表示[[代码块|代码块]]。

由于C语言的语言规模较小，若干高层的机制需要使用定义的函数来提供。比如，C语言并没有直接处理复合对象（例如[[字符串|字符串]]、集合、列表、数组等）的操作，也没有对于[[存储器|存储器]]分配工具和内存回收工具的直接定义，同时也本身不具有输入和输出以及文件访问的方法。然而，用户定义的函数和C语言[[标准库|标准库]]中的函数为这些高层的机制提供了可能性。<ref name="k&r中文"/>

C语言也具有以下的特性：<ref name="k&r中文"> {{Cite book | author = Dennis M. Ritchie,Brian W. Kernighan | title = C程序设计语言 | url = https://archive.org/details/cchengxushejiyuy0000kern | location = 北京 | publisher = 机械工业出版社 | date = 2004年1月 | ISBN = 9787111128069 | accessdate = 2020-06-10  | language = 中文 }} </ref>

* 基本数据类型包括字符、整型和浮点数等。另外也有派生的各种数据类型，如[[指针|指针]]、[[数组|数组]]、结构和联合。
* 部份的变量類型可以轉換，例如整數型和字符型变量。
* 通過[[指標_(電腦科學)|指標]]（pointer），C語言可以容易的對記憶體進行低階控制。
* 不同的變數類型可以用結構体（struct）組合在一起。
* 具有基本的控制流：语句组、条件判断、多路选择、循环等。
* 函数可以返回各种数据类型的值，并且都可以递归调用。每次调用函数会重新创建变量。
* C语言只有32個保留字（reserved keywords），使变量、函數命名有更多彈性。
* 编译预处理（preprocessor）讓C語言的編譯更具有彈性。

== 歷史 ==
{{main|C语言的历史}}

20世纪70年代，肯·汤姆森为了使其设计的Unix系统更加高效，使用B语言的变种（即C语言）在DEC PDP-7计算机上重写了Unix。C语言中许多重要概念来源于[[BCPL|BCPL]]语言，其对C语言的影响也间接地来源于[[B语言|B语言]]。在1978年，[[丹尼斯·里奇|丹尼斯·里奇]]和[[布萊恩·柯林漢|布萊恩·柯林漢]]合作出版了《[[C程序设计语言_(书)|C程序设计语言]]》第一版，事实上即为K&R C标准<ref> {{Cite book | author = Stephen Prata | title = C Primer Plus(第5版) | url = https://archive.org/details/cprimerplusdiwub0005unse | location = 北京 | publisher = 人民邮电出版社 | date = 2005年2月 | pages = [https://archive.org/details/cprimerplusdiwub0005unse/page/3 3]-4 | ISBN = 9787115130228 | accessdate = 2020-07-15  | language = 中文 }} </ref>。1983年，为了制定一个独立于具体机器且无歧义的C语言标准，[[美国国家标准协会|美国国家标准协会]]成立了一个委员会，并在1988年完成了该标准的制定，即ANSI C。此标准同时被[[国际标准化组织|国际标准化组织]]所采纳，也被称作ISO C。

其后，C语言至今经历了几次标准更新，诞生了[[C99|C99]]、[[C11_(C语言标准)|C11]]和目前最新的标准[[C18_(C语言标准)|C18]]。C语言标准的下一次更新C2x目前正在起草中。

== 語法 ==

{{Main|C语言语法}}

{{expand section}}

C语言的[[形式文法|形式文法]]由[[国际标准化组织|国际标准化组织]]所制定。<ref name="isowg">{{Cite web |url=http://www.open-std.org/jtc1/sc22/wg14/ |title=ISO/IEC JTC1/SC22/WG14 - C |language=en |accessdate=2022-04-02 |archive-date=2018-02-12 |archive-url=https://web.archive.org/web/20180212100115/http://www.open-std.org/jtc1/sc22/wg14/ }}</ref>C语言的源代码包含声明和函数定义。函数定义又包含声明和语句。声明可以定义一个新的类型，比如结构（<code>struct</code>）、联合（<code>union</code>）和枚举（<code>enum</code>），也可以为变量赋予类型和预留内存。复合语句由一对花括号包含，可以使得几个语句从文法上变成一个语句。

作为一种[[指令式编程|指令式编程]]语言，C语言使用语句执行操作。最常见的语句是[[表达式|表达式]]语句，由一个表达式后加一个分号组成，可以令系统调用函数和为变量赋值。C语言也提供各种用保留关键字组成的控制流语句，以达到[[结构化编程|结构化编程]]的效果，例如选择语句（<code>if</code>和<code>else</code>）、循环语句（<code>for</code>循环、<code>while</code>循环和<code>do</code>...<code>while</code>循环）和跳转语句（<code>goto</code>、<code>break</code>和<code>continue</code>）。表达式可以包含不同的运算符，也可以调用函数。

== Hello World 程序 ==
{{main|Hello World}}
[[File:Hello_World_Brian_Kernighan_1978.jpg|缩略图]]

{{Quote box|
 width=25%
|align=right
|quote="对于所有语言的初学者来说，编写的第一个程序几乎都是相同的，即‘请打印出下列内容 hello, world’"
|source=– 《C程序设计语言》<ref name="k&r中文"/>}}

现在广泛被编程初学者使用的"hello, world"程序实例最初就是出现在《[[C程序设计语言|C程序设计语言]]》第一版中。下面是一個在標準輸出設備（stdout）上打印出 "[[Hello_World程序|Hello, world!]]" 字串的簡單程式。類似的程式，通常作為初學程式語言時的第一個程式：

<syntaxhighlight lang="c" line="1o">

#include <stdio.h>

int main(void) {
    printf("Hello, world!\n");
    return 0;
}

</syntaxhighlight>

其中只有int，void，return为C语言的关键字，[[C预处理器|预处理器]]会将<code>#include <stdio.h></code>替换为stdio.h文件的内容。

main函数是C语言程序的[[入口点|入口点]]。

<code>"Hello, world!\n"</code>中的<code>\n</code>是一个[[转义字符|转义字符]]，形式为<code>\</code>加上一个字符。所起的作用在[[ASCII|ASCII]]码中规定。

printf是声明于stdio.h的函数，关于printf的更多细节，参见[[printf|printf]]；

关于格式化字符串的更多信息，参见[[格式化字符串|格式化字符串]]。

== 内存管理 ==
C语言的特色之一是：程序员必须亲自处理内存的分配细节。语言不负责内存边界检查，这是因为在运行时进行内存边界检查会造成[[性能问题|性能问题]]，与[[Unix哲学|UNIX哲学]]不符。此特性容易导致[[缓冲区溢出|缓冲区溢出]]问题。然而，部分编译器（如英特尔编译器）会出于安全性的考量，提供方法以进行运行时内存边界检查<ref>{{cite web |title=check-pointers, Qcheck-pointers |url=https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/compiler-options/compiler-option-details/data-options/check-pointers-qcheck-pointers.html |website=Intel |accessdate=2021-06-01 |language=en |archive-date=2021-02-15 |archive-url=https://web.archive.org/web/20210215091914/https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/compiler-options/compiler-option-details/data-options/check-pointers-qcheck-pointers.html }}</ref>。

大多数C语言实现使用栈（Stack）来保存函数返回地址／栈帧基址、完成函数的参数传递和函数局部变量的存储。然而，在部分极特殊的平台上，使用栈并不能获得最大效率。此时的实现由编译器决定<ref name="C18">{{Cite web |url =http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2310.pdf |accessdate =2020-06-10 |title =ISO/IEC 9899:2018 |archive-date =2020-07-22 |archive-url =https://web.archive.org/web/20200722132012/http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2310.pdf |dead-url =no }}</ref>。
如果程序需要在运行的过程中动态分配内存，可以利用[[堆|堆]]（Heap）来实现。

基本上C程序的元素存储在内存的时候有3种分配策略：

* 静态分配
如果一个变量声明为[[全局变量|全局变量]]或者是函数的[[静态变量|静态变量]]，这个变量的存储将使用静态分配方式。静态分配的内存一般会被编译器放在[[数据段|数据段]]或[[代码段|代码段]]来存储，具体取决于实现。这样做的前提是，在'''编译时'''就必须确定变量的大小。
以IA32的x86平台及gcc编译器为例，全局及静态变量放在数据段的低端；全局及静态常量放在代码段的高端。

* 自动分配
函数的自动局部变量应该随着函数的返回会自动释放（失效），这个要求在一般的体系中都是利用栈（Stack）来满足的。相比于静态分配，这时候，就不必绝对要求这个变量在'''编译时'''就必须确定变量的大小，'''运行时'''才决定也不迟，但是C89仍然要求在'''编译时'''就要确定，而C99放松了这个限制。但无论是C89还是C99，都不允许一个已经分配的自动变量运行时改变大小。

所以说'''C函数永远不应该返回一个局部变量的地址'''。

要指出的是，自动分配也属于动态分配，甚至可以用alloca函数来像分配堆（Heap）一样进行分配，而且释放是自动的。

* 动态分配
还有一种更加特殊的情况，变量的大小在运行时有可能改变，或者虽然单个变量大小不变，变量的数目却有很大弹性，不能静态分配或者自动分配，这时候可以使用[[堆|堆]]（Heap）来满足要求。ANSI C定义的堆操作函数是malloc、calloc、realloc和free。

使用[[堆|堆]]（Heap）内存将带来额外的开销和风险。

== 库 ==
{{main|C 標準函式庫}}
C語言的标准文档要求了一个平台移植C语言的时候至少要实现的一些功能和封装的集合，称为“标准库”，标准庫的声明头部通過[[预处理器|预处理器]]命令#include進行引用。

在C89標準中：

{| class="wikitable"
|-
!文件!!简介说明
|-
|<assert.h>||断言相关
|-
|<ctype.h>||字符类型判断
|-
|<errno.h>||标准报错机制
|-
|<float.h>||浮点运算
|-
|<limits.h>||各种体系结构限制
|-
|<locale.h>||本地化接口
|-
|<math.h>||数学函数
|-
|<setjmp.h>||跨函数跳转
|-
|<signal.h>||信号（类似[[UNIX|UNIX]]的[[信号_(Unix)|信号]]定义，但是差很远）
|-
|<stdarg.h>||可变参处理
|-
|<stddef.h>||一些标准宏定义
|-
|<stdio.h>||标准I/O库
|-
|<stdlib.h>||标准工具库函数
|-
|<string.h>||ASCII字符串及任意内存处理函数
|-
|<nowiki><time.h></nowiki>||时间相关
|}

在94年的修正版中

<tt>
* <iso646.h>
* <wchar.h>
* <wctype.h>
</tt>

在C99中增加了六個函式庫

<tt>
* <complex.h>
* <fenv.h>
* <inttypes.h>
* <stdbool.h>
* <stdint.h>
* <tgmath.h>
</tt>

以上是C语言的标准。各个系统各自又对C库函数进行的各种扩充，就浩如烟海了。如[[POSIX_C|POSIX C]]、[[GNU_C|GNU C]]等。

== 工具軟體 ==
工具軟體可以幫助程式設計者避免一些程式中潛藏或容易出現的問題，例如常會造成程式未預期動作或是執行期錯誤的程式碼。

許多語言都有自動源代碼檢查及審計工具，C語言也有類似工具，像是[[Lint|Lint]]。可以在程式剛寫好時用Lint找出可能有問題的程式，通過Lint後再用C編譯器進行編譯，許多編譯器也可以設定是否要針對一些可能有問題的程式碼提出警告。[[MISRA_C|MISRA C]]是一套針對[[嵌入式系統|嵌入式系統]]的法則，可主要也是避免一些可能有問題的程式碼。

也有一些編譯器、程式庫或作業系統可以處理一些非標準C語言的功能，例如邊界值檢查、[[缓存溢出|缓存溢出]]偵測、[[序列化|序列化]]及[[垃圾回收_(計算機科學)|自動垃圾回收]]功能。

使用像[[Valgrind|Valgrind]]或{{link-en|IBM Rational Purify|Purify}}等軟體工具，或者連結有特別[[malloc|malloc]]函式的程式庫，有助於找出一些運行期記憶體使用的問題。

== 經典錯誤 ==
“void main()”的用法并不是任何标准制定的<ref>[http://www.stroustrup.com/bs_faq2.html#void-main Can I write "void main()"?] {{Wayback|url=http://www.stroustrup.com/bs_faq2.html#void-main |date=20200702224848 }}The definition <code>void main() { /* ... */ }</code> is not and never has been C++, nor has it even been C.</ref><ref>{{Cite web |url=http://www.ibm.com/developerworks/cn/linux/l-c99/index.html |title=用 C99 进行开放源代码的开发 |accessdate=2011-01-21 |archive-date=2011-08-12 |archive-url=https://web.archive.org/web/20110812155028/http://www.ibm.com/developerworks/cn/linux/l-c99/index.html |dead-url=no }}</ref>。 C語言标准語法是“int main()”，任何实现都必须支持<code>int main(void) { /* ... */ }</code>和<code>int main(int argc, char* argv[]) { /* ... */ }</code><ref>「The function called at program startup is named '''main'''. The implementation declares no prototype for this function. It shall be defined with a return type of '''int''' and with no parameters: <code>int main(void) { /* ... */ }</code> or with two parameters (referred to here as '''argc''' and '''argv''', though any names may be used, as they are local to the function in which they are declared): <code>int main(int argc, char *argv[]) { /* ... */ }</code> or equivalent; or in some other implementation-defined manner.」，引自ISO/IEC 9899:1999, Section 5.1.2.2.1 Program startup</ref>。 在 C++ 標準中，main的標準型態應是int，否则类型是由实现定义的。任何实现都必须支持<code>int main() { /* ... */ }</code>和<code>int main(int argc, char* argv[]) { /* ... */ }</code><ref>「An implementation shall not predefine the '''main''' function. This function shall not be overloaded. It shall have a return type of type '''int''', but otherwise its type is implementation-defined. All implementations shall allow both of the following definitions of '''main''': <code>int main() { /* ... */ }</code> and <code>int main(int argc, char* argv[]) { /* ... */ }</code>.」，引自 ISO/IEC 14882, 第一版(1998)、第二版(2003)與第三版(2011), section 3.6.1 Main function</ref>。

== 参见 ==
* [[块_(C语言扩展)|块 (C语言扩展)]]

==註腳==
=== 注解 ===
{{NoteFoot}}

===參考資料===
{{Reflist|30em|refs=
<ref name="dottcl">{{cite web |url=http://cm.bell-labs.com/cm/cs/who/dmr/chist.html |title=The Development of the C Language |quote=The scheme of type composition adopted by C owes considerable debt to Algol 68, although it did not, perhaps, emerge in a form that Algol's adherents would approve of. |last=Ritchie |first=Dennis M. |authorlink=Dennis Ritchie |date=January 1993 |accessdate=2008-01-01 |archive-date=2015-02-03 |archive-url=https://wayback.archive-it.org/all/20150203070752/http://cm.bell-labs.com/cm/cs/who/dmr/chist.html |dead-url=no }}</ref>
}}

==參考資料==
{{div ref|
* [[Brian_Kernighan|Brian Kernighan]], [[Dennis_Ritchie|Dennis Ritchie]]: ''[[C程序设计语言_(书)|The C Programming Language]]''. 亦被称作K&R，第一部介绍C语言的书籍。
** 第一版, Prentice Hall 1978; ISBN 978-0-13-110163-0. ANSI/ISO标准化之前的C。
** 第二版, Prentice Hall 1988; ISBN 978-0-13-110362-7. ANSI/ISO C。
** 中译本第二版，机械工业出版社 2004; ISBN 978-7-11-112806-9。 
* [http://www.open-std.org/JTC1/SC22/WG14/www/standards ISO/IEC 9899]. The official C:1999 standard, along with technical corrigenda and a rationale. As of 2005 the latest version is [http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf ISO/IEC 9899:TC2].
* [[Samuel_P._Harbison|Samuel P. Harbison]], [[Guy_L._Steele|Guy L. Steele]]: ''C: A Reference Manual''. This book is excellent as a definitive reference manual, and for those working on C [[compiler|compiler]]s. The book contains a [[Backus-Naur_form|BNF]] grammar for C.
** 4th, Prentice Hall 1994; ISBN 978-0-13-326224-7.
** 5th, Prentice Hall 2002; ISBN 978-0-13-089592-9.
* [[Derek_M._Jones|Derek M. Jones]]: ''The New C Standard: A Cultural and Economic Commentary'', Addison-Wesley, ISBN 978-0-201-70917-9, [http://www.knosof.co.uk/cbook/cbook.html online material]
* [[Robert_Sedgewick_(computer_scientist)|Robert Sedgewick]]: ''Algorithms in C'', Addison-Wesley, ISBN 978-0-201-31452-6 (Part 1–4) and ISBN 978-0-201-31663-6 (Part 5)
* William H. Press, Saul A. Teukolsky, William T. Vetterling, Brian P. Flannery: [[Numerical_Recipes|Numerical Recipes]] in C (The Art of Scientific Computing), ISBN 978-0-521-43108-8
}}

== 外部連結 ==
{{Commons|The C Programming Language}}
* [http://code-reference.com/c Coding Programmer Page / C Library Reference and Examples<nowiki></nowiki>]{{Wayback|url=http://code-reference.com/c |date=20130121220502 }} (english)
* [http://gcc.gnu.org/ GCC 首页]{{Wayback|url=http://gcc.gnu.org/ |date=20120111104818 }}
* [http://www.gnu.org/software/libc/ GLIBC2 首页]{{WebCite|url=https://www.webcitation.org/6I3qrgbid?url=http://www.gnu.org/software/libc/ |date=20130712170209 |dateformat=iso }}
* [http://www.microsoft.com/taiwan/vstudio/express/ Visual Studio Express 首頁]{{Wayback|url=http://www.microsoft.com/taiwan/vstudio/express/ |date=20070812203722 }}
* [http://www.open-std.org/JTC1/SC22/WG14/www/standards ISO/IEC 9899]{{Wayback|url=http://www.open-std.org/JTC1/SC22/WG14/www/standards |date=20150523043258 }}。C99标准的官方网站。目前（2020年）可直接下载的标准文本是 [http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2479.pdf ISO/IEC 9899:202x]{{Wayback|url=http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2479.pdf |date=20200610113538 }}。

{{-}}
{{CProLang}}
{{程序设计语言|C}}
{{肯·汤普逊}}
{{Authority control}}

[[Category:C語言|]]
[[Category:C語言家族|Category:C語言家族]]
[[Category:美国发明|Category:美国发明]]
[[Category:跨平台軟體|Category:跨平台軟體]]
[[Category:过程式编程语言|Category:过程式编程语言]]
[[Category:静态类型编程语言|Category:静态类型编程语言]]
[[Category:系統程式語言|Category:系統程式語言]]
[[Category:ISO标准化编程语言|Category:ISO标准化编程语言]]
[[Category:1972年建立的程式語言|Category:1972年建立的程式語言]]