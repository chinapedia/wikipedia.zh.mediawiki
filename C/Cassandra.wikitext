{{noteTA
|G1=IT
|2=zh-hans:关系模型; zh-hant:關聯模型;
|3=zh-hans:关系; zh-hant:關聯;
|4=zh-hans:数据; zh-hant:資料;
|5=zh-hans:分布式; zh-hant:分散式;
|6=zh-hans:文件系统; zh-hant:檔案系統;
|7=zh:流行; zh-tw:流行;
|8=zh:排行; zh-tw:排行;
|9=zh:进行; zh-tw:進行;
|10=zh:列表; zh-tw:列表;
|11=zh:行; zh-tw:列;
|12=zh:列; zh-tw:欄;
}}
{{Infobox software
| name                   = Apache Cassandra
| logo                   = [[File:Cassandra_logo.svg|frameless]]
| author                 = Avinash Lakshman、Prashant Malik
| developer              = [[Apache软件基金会|Apache软件基金会]]
| released               = {{start date and age|2008|7}}
| latest release version = {{wikidata|property|reference|edit|P548=Q2804309|P348}}
| latest release date    = {{wikidata|qualifier|P548=Q2804309|P348|P577}}，{{Time ago|{{wikidata|qualifier|raw|P548=Q2804309|P348|P577}}}}
| programming language   = [[Java|Java]]
| operating system       = [[跨平台|跨平台]]
| language               = [[英文|英文]]
| genre                  = [[NoSQL|NoSQL]][[数据库|数据库]]
| license                = [[Apache许可证|Apache许可证2.0]]
}}

{{dablink|此條目講述的是[[Apache基金會|Apache基金會]]開發的[[NoSQL|NoSQL]]數據庫，不是[[希臘神話|希臘神話]]中的「[[卡珊德拉|卡珊德拉]]」。}}

'''Apache Cassandra'''（社区内一般简称为C*）是一套开源分布式[[NoSQL|NoSQL]]数据库系统。它最初由[[Facebook|Facebook]]开发，用于改善電子郵件系統的搜尋效能的简单格式数据，集[[Google|Google]] [[BigTable|BigTable]]的数据模型与[[Amazon|Amazon]] [[Dynamo|Dynamo]]的完全分布式架构于一身。Facebook于2008将 Cassandra 开源，此后，由于Cassandra良好的[[可扩展性|可扩展性]]和性能，被 Apple<ref>{{Citation|last=PlanetCassandra|title=Apple Inc.: Cassandra at Apple for Massive Scale|date=2015-03-03|url=https://www.youtube.com/watch?v=Bc4ql9TDzyg|accessdate=2016-06-27|archive-date=2016-03-24|archive-url=https://web.archive.org/web/20160324015928/https://www.youtube.com/watch?v=Bc4ql9TDzyg|dead-url=no}}</ref>, Comcast<ref>{{Cite web|url=http://www.planetcassandra.org/blog/interview/comcast-messaging-infrastructure-chooses-linearly-scaling-apache-cassandra-as-nosql-solution/|title=Comcast messaging infrastructure chooses linearly scaling Apache Cassandra as NoSQL solution|accessdate=2016-06-27|work=www.planetcassandra.org|archive-date=2016-06-26|archive-url=https://web.archive.org/web/20160626005804/http://planetcassandra.org/blog/interview/comcast-messaging-infrastructure-chooses-linearly-scaling-apache-cassandra-as-nosql-solution/|dead-url=no}}</ref>,Instagram<ref>{{Cite web|url=http://planetcassandra.org/blog/interview/facebooks-instagram-making-the-switch-to-cassandra-from-redis-a-75-insta-savings/|title=Facebook’s Instagram: Making the Switch to Cassandra from Redis, a 75% ‘Insta’ Savings|accessdate=2016-06-27|work=planetcassandra.org|archive-date=2016-07-02|archive-url=https://web.archive.org/web/20160702031931/http://planetcassandra.org/blog/interview/facebooks-instagram-making-the-switch-to-cassandra-from-redis-a-75-insta-savings/|dead-url=no}}</ref>, Spotify<ref>{{Cite web|url=http://planetcassandra.org/blog/interview/spotify-scales-to-the-top-of-the-charts-with-apache-cassandra-at-40k-requestssecond/|title=Spotify scales to the top of the charts with Apache Cassandra at 40k requests/second|accessdate=2016-06-27|work=planetcassandra.org|archive-date=2016-07-18|archive-url=https://web.archive.org/web/20160718035932/http://planetcassandra.org/blog/interview/spotify-scales-to-the-top-of-the-charts-with-apache-cassandra-at-40k-requestssecond/|dead-url=no}}</ref>, eBay<ref>{{Citation|last=PlanetCassandra|title=eBay: Apache Cassandra Best Practices at Ebay|date=2014-10-10|url=https://www.youtube.com/watch?v=gn4MDRmrfKo|accessdate=2016-06-27|archive-date=2017-03-29|archive-url=https://web.archive.org/web/20170329030331/https://www.youtube.com/watch?v=gn4MDRmrfKo|dead-url=no}}</ref>, Rackspace<ref>{{Cite web|url=http://planetcassandra.org/blog/post/rackspace-monitors-the-cloud-with-cassandra-35-million-writes-180-million-samples-per-hour|title=Rackspace Monitors the Cloud with Cassandra: 35 Million Writes, 180 Million Samples per Hour|accessdate=2016-06-27|date=2013-10-08|archive-date=2014-04-03|archive-url=https://web.archive.org/web/20140403193025/http://planetcassandra.org/blog/post/rackspace-monitors-the-cloud-with-cassandra-35-million-writes-180-million-samples-per-hour/|dead-url=no}}</ref>, Netflix<ref>{{Cite web|url=http://www.datastax.com/resources/casestudies/netflix|title=Case Study: Netflix|accessdate=2016-06-27|work=DataStax|archive-date=2016-06-18|archive-url=https://web.archive.org/web/20160618033812/http://www.datastax.com/resources/casestudies/netflix|dead-url=no}}</ref>等知名网站所采用，成为了一种流行的分布式结构化数据存储方案。

在数据库排行榜“DB-Engines Ranking”中，Cassandra排在第十位，是非关系型数据库中排名第四高<ref name="db-rank"></ref>。

== 历史 ==
Cassandra 的名称来源于[[希腊神话|希腊神话]]，是[[特洛伊|特洛伊]]的一位悲剧性的女先知的名字，因此项目的[[Logo|Logo]]是一只放光的眼睛。

这个项目由就职于[[Facebook|Facebook]]的Avinash Lakshman（也是[[Amazon|Amazon]] [[Amazon_DynamoDB|Dynamo]]的作者之一）和Prashant Malik在为[[Facebook|Facebook]]的Inbox编写。2008年，[[Facebook|Facebook]]将项目开源，Cassandra在2009年成为了[[Apache软件基金会|Apache软件基金会]]的Incubator项目，并在2010年2月走出孵化器，成为正式的基金会项目。目前这个项目主要由专门进行Cassandra商业化运作的[http://www.datastax.com/ DataStax]{{Wayback|url=http://www.datastax.com/ |date=20130126051417 }}公司来开发，也有一些来自其他公司或独立的开发者<ref>{{cite web|title=Cassandra Committers|url=http://wiki.apache.org/cassandra/Committers|accessdate=2014-08-17|archive-url=https://web.archive.org/web/20140819085223/http://wiki.apache.org/cassandra/Committers|archive-date=2014-08-19|dead-url=yes}}</ref>。

===主要版本和主要改进<ref>{{cite web |url=https://github.com/apache/cassandra/blob/trunk/CHANGES.txt |title=Cassandra Changes |accessdate=2014-08-17 |archive-date=2010-05-27 |archive-url=https://web.archive.org/web/20100527012944/http://github.com/apache/cassandra/blob/trunk/CHANGES.txt |dead-url=no }}</ref>===
* 0.6，2010年4月发布，支持内置的缓存。
* 0.7，2011年1月发布，支持按列建二级索引(secondary indexes)及在线修改表的结构定义
* 0.8，2011年6月发布，支持CQL语言和零停机的在线升级
* 1.0，2011年10月发布，支持数据压缩，level compaction和提高读取性能
* 1.1，2012年4月发布，支持ssd和机械硬盘混合使用
* 1.2，2013年1月发布，支持虚拟节点(一个机器在一致性哈希环中拥有多个节点)、原子性的批处理
* 2.0，2013年9月发布，支持轻量级事务、触发器、改进compaction性能，强制使用[[Java7|Java7]]
* 2.1，2014年9月10日发布
* 2.2 , 2015年7月20日发布
* 3.0 , 2015年11月11日发布
* 3.1 , 同样 3.10版本，使用类tick-tock发布模式，每月发布一次 , 偶数编号版本提供新功能和错误修正，而奇数编号版本只包括错误修正。
* 3.11 ，2017年6月23日发布，作为稳定的3.11版本系列，修复了上一个tick-tock功能版本的错误。

==数据模型==
Cassandra使用了[[Google|Google]] 设计的 [[BigTable|BigTable]]的数据模型，与面向行(row)的传统的[[关系型数据库|关系型数据库]]或[[键值存储|键值存储]]的key-value数据库不同，Cassandra使用的是[[宽列存储模型|宽列存储模型]](Wide Column Stores)<ref name="db-rank">{{cite web|url=http://db-engines.com/en/ranking|title=DB-Engines Ranking|date=2016-06-27|accessdate=2014-08-17|archive-date=2020-02-21|archive-url=https://web.archive.org/web/20200221093447/https://db-engines.com/en/ranking|dead-url=no}}</ref>，每行数据由row key唯一标识之后，可以有最多20亿个列<ref>{{cite web |url=http://wiki.apache.org/cassandra/CassandraLimitations |title=CassandraLimitations |access-date=2014-08-17 |archive-url=https://web.archive.org/web/20140818132625/http://wiki.apache.org/cassandra/CassandraLimitations |archive-date=2014-08-18 |dead-url=yes }}</ref>，每个列有一个column key标识，每个column key下对应若干value。这种模型可以理解为是一个二维的key-value存储，即整个数据模型被定义成一个类似map<key1, map<key2,value>>的类型。

旧版的Cassandra与客户端交互的方法是通过[[thrift|thrift]]，而目前新版本的Cassandra采用与SQL语言类似的CQL语言<ref>{{cite web |url=https://cassandra.apache.org/doc/cql/CQL.html |title=Cassandra Query Language (CQL) v2.0 |date=2014-08-18 |deadurl=yes |archiveurl=https://web.archive.org/web/20140815040820/http://cassandra.apache.org/doc/cql/CQL.html |archivedate=2014-08-15 |accessdate=2014-08-17 }}</ref>来实现数据模型的定义和数据的读写。其中BigTable中的列族(Column Family)在Cassandra中被称作类似关系型数据库中的称呼——表(table)，而Cassandra/BigTable中的row key和column key并称为主键(primary key)。<ref name="cqldoc">{{cite web |url=http://www.datastax.com/documentation/cql/3.1/cql/ddl/ddl_intro_c.html |title=cql document |access-date=2014-08-17 |archive-url=https://web.archive.org/web/20140819084919/http://www.datastax.com/documentation/cql/3.1/cql/ddl/ddl_intro_c.html |archive-date=2014-08-19 |dead-url=yes }}</ref>

Cassandra的row key决定了该行数据存储在哪些节点中，因此row key需要按哈希来存储，不能顺序的扫描或读取，而一个row内的column key是顺序存储的，可以进行有序的扫描或范围查找<ref name="cqldoc"></ref>。

==存储模型==
与BigTable和其模仿者[[HBase|HBase]]不同，Cassandra的数据并不存储在分布式文件系统如[[Google檔案系統|GFS]]或[[HDFS|HDFS]]中，而是直接存于本地。与BigTable一样，Cassandra也是日志型数据库，即把新写入的数据存储在内存的Memtable中并通过磁盘中的CommitLog来做持久化，内存填满后将数据按照key的顺序写进一个只读文件SSTable中，每次读取数据时将所有SSTable和内存中的数据进行查找和合并<ref>{{cite web|title=Bigtable: A Distributed Storage System for Structured Data|url=http://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf|accessdate=2014-08-17|archive-date=2014-07-23|archive-url=https://web.archive.org/web/20140723061001/http://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf|dead-url=no}}</ref><ref>{{cite web|title=MemtableSSTable|url=http://wiki.apache.org/cassandra/MemtableSSTable|access-date=2014-08-17|archive-url=https://web.archive.org/web/20140819085851/http://wiki.apache.org/cassandra/MemtableSSTable|archive-date=2014-08-19|dead-url=yes}}</ref>。这种系统的特点是写入比读取更快<ref name=benchmark>{{cite web|title=nosql-performance-benchmarks|url=http://planetcassandra.org/nosql-performance-benchmarks/|accessdate=2014-08-17|archive-date=2014-09-07|archive-url=https://web.archive.org/web/20140907205921/http://planetcassandra.org/nosql-performance-benchmarks/|dead-url=no}}</ref>，因为写入一条数据是顺序计入commit log中，不需要随机读取磁盘以及搜索。

== 分布式架构 ==
Cassandra的系统架构与[[Dynamo|Dynamo]]类似，是基于[[一致性哈希|一致性哈希]]的完全[[P2P|P2P]]架构，每行数据通过哈希来决定应该存在哪个或哪些节点中<ref>{{cite web|author=Amazon|title=Dynamo: Amazon’s Highly Available Key-value Store|url=http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf|accessdate=2014-08-17|archive-date=2011-03-04|archive-url=https://web.archive.org/web/20110304082936/http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf|dead-url=yes}}</ref>。集群没有master的概念，所有节点都是同样的角色，彻底避免了整个系统的单点问题导致的不稳定性，集群间的状态同步通过[[Gossip协议|Gossip协议]]来进行P2P的通信。每个节点都把数据存储在本地，每个节点都接受来自客户端的请求。每次客户端随机选择集群中的一个节点来请求数据，对应接受请求的节点将对应的key在一致性哈希的环上定位是哪些节点应该存储这个数据，将请求转发到对应的节点上，并将对应若干节点的查询反馈返回给客户端。

在一致性、可用性和分区耐受能力（[[CAP|CAP]]）的折衷问题上，Cassandra和Dynamo一样比较灵活。Cassandra的每个keyspace可配置一行数据会写入多少个节点(设这个数为N)，来保证数据不因为机器宕机或磁盘损坏而丢失数据，即保证了CAP中的P。用户在读写数据时可以指定要求成功写到多少个节点才算写入成功(设为W)，以及成功从多少个节点读取到了数据才算成功(设为R)。可推理得出，当W+R>N时，读到的数据一定是上一次写入的，即维护了[[强一致性|强一致性]]，确保了CAP中的C。当W+R<=N时，数据是[[最终一致性|最终一致性]]因为存在一段时间可能读到的并不是最新版的数据。当W=N或R=N时，意味着系统只要有一个节点无响应或宕机，就有一部分数据无法成功写或者读，即失去了CAP中的可用性A。因此，大多数系统中，都将N设为3，W和R设为QUORUM，即“过半数”——在N为3时QUORUM是2。

==支持的操作==
Cassandra支持对一列数据进行insert、update、或delete操作。其中insert和update虽然语法略有区别，但语义上等价，即可以针对已经存在的行进行update或insert一个不存在的行。
=== 轻量级事务 ===
从2.0版开始，Cassandra支持轻量级事务。这种事务被称为“compare-and-set”，简称CAS。通过[[paxos算法|paxos算法]]实现在满足某条件后才修改数据否则不修改。目前支持"insert if not exist"、"update if col=value"、"delete if exist"等几种操作。

==数据类型==
Cassandra在CQL语言层面支持多种数据类型<ref>{{cite web|title=cql data types|url=http://www.datastax.com/documentation/cql/3.1/cql/cql_reference/cql_data_types_c.html|access-date=2014-08-18|archive-url=https://web.archive.org/web/20140929225604/http://www.datastax.com/documentation/cql/3.1/cql/cql_reference/cql_data_types_c.html|archive-date=2014-09-29|dead-url=yes}}</ref>。
{| class="wikitable sortable"
|-
! CQL类型!! 对应Java类型 !! 描述
|-
| ascii || String || ascii字符串
|-
| bigint || long || 64位整数
|-
| blob || ByteBuffer/byte[] || 二进制数组
|-
| boolean || boolean || 布林
|-
| counter || long || 计数器，支持原子性的增减，不支持直接赋值
|-
| decimal || BigDecimal || 高精度小数
|-
| double || double || 64位浮点数
|-
| float || float || 32位浮点数
|-
| inet || InetAddress || [[ipv4|ipv4]]或[[ipv6|ipv6]]协议的ip地址
|-
| int || int || 32位整数
|-
| list || List || 有序的列表
|-
| map || Map || 键值对
|-
| set || Set || 集合
|-
| text || String || [[utf-8|utf-8]]编码的字符串
|-
| timestamp || Date || 日期
|-
| uuid || UUID || [[UUID|UUID]]类型
|-
| timeuuid || UUID || 时间相关的UUID
|-
| varchar || string || text的别名
|-
| varint || BigInteger || 高精度整型
|}

== 与类似开源系统的比较 ==
=== Apache HBase ===
[[HBase|HBase]]是Apache Hadoop项目的一个子项目，是[[Google|Google]] BigTable的一个克隆，与Cassandra一样，它们都使用了BigTable的列族式的数据模型，但是：
* Cassandra只有一种节点，而HBase有多种不同角色，除了处理读写请求的region server之外，其架构在一套完整的[[HDFS|HDFS]]分布式文件系统之上，并需要[[ZooKeeper|ZooKeeper]]来同步集群状态，部署上Cassandra更简单。
* Cassandra的数据一致性策略是可配置的，可选择是强一致性还是性能更高的最终一致性；而HBase总是强一致性的。
* Cassandra通过一致性哈希来决定一行数据存储在哪些节点，靠概率上的平均来实现负载均衡；而HBase每段数据(region)只有一个节点负责处理，由master来动态分配一个region是否大到需要拆分成两个，同时会将过热的节点上的一些region动态的分配给负载较低的节点，因此实现动态的负载均衡。
* 因为每个region同时只能有一个节点处理，一旦这个节点无响应，在系统将这个节点的所有region转移到其他节点之前这些数据便无法读写，加上master也只有一个节点，备用master的恢复也需要时间，因此HBase在一定程度上有单点问题；而Cassandra无单点问题。
* Cassandra的读写性能优于HBase<ref name=benchmark></ref>。

== 参考文献 ==
{{refs}}

== 相关阅读 ==
{{NoSQL}}
{{Apache}}

[[Category:開源資料庫管理系統|Category:開源資料庫管理系統]]
[[Category:键-值数据库|Category:键-值数据库]]