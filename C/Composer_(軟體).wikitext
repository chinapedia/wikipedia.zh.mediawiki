{{expand|time=2015-02-24T08:07:51+00:00}}
{{Infobox software
| name = Composer
| screenshot = 
| caption = 
| author = 
| developer = Nils Adermann<br />Jordi Boggiano
| released = 
| latest release version = 2.2.3
| latest release date = {{release date and age|2021|12|31}}
| latest preview version = 
| latest preview date = 
| programming language = [[PHP|PHP]]
| operating system = [[Cross-platform|Cross-platform]]
| platform = 
| language = 
| genre = [[软件包管理系统|软件包管理系统]]
| license = [[MIT許可證|MIT許可證]]
| website = {{URL|http://getcomposer.org/}}
| logo = Logo-composer-transparent.png
| logo size = 120px
}}
'''Composer'''是[[PHP|PHP]]的[[软件包管理系统|软件包管理系统]]，它提供用于管理PHP软件和依赖库关系的标准格式。 它由[[Nils_Adermann|Nils Adermann]]和[[Jordi_Boggiano|Jordi Boggiano]]开发。 他们于2011年4月开始开发，并于2012年3月1日首次发布第一个版本。<ref>{{Cite web|title=Release 1.0.0-alpha1 · composer/composer|url=https://github.com/composer/composer/releases/tag/1.0.0-alpha1|accessdate=2020-08-06|work=GitHub|language=en|archive-date=2019-03-27|archive-url=https://web.archive.org/web/20190327033249/https://github.com/composer/composer/releases/tag/1.0.0-alpha1|dead-url=no}}</ref>Composer 的产生是由于受到了 [[Node.js|Node.js]] 的 [[npm|npm]] 以及 [[Ruby|Ruby]] 的 [[Bundler_(软件)|bundler]] 的启发。<ref>{{Cite web|title=Introduction - Composer|url=https://getcomposer.org/doc/00-intro.md#dependency-management|accessdate=2020-08-06|work=getcomposer.org|archive-date=2018-02-12|archive-url=https://web.archive.org/web/20180212220302/https://getcomposer.org/doc/00-intro.md#dependency-management|dead-url=yes}}</ref> 该项目的依赖关系解决算法最初是来自[[openSUSE|openSUSE]]的[[libzypp|libzypp]]包管理器。

== 使用语法 ==

=== 命令 ===
Composer 提供了几个参数，包括<ref>{{Cite web|title=Command-line interface / Commands - Composer|url=https://getcomposer.org/doc/03-cli.md|accessdate=2020-08-06|work=getcomposer.org|archive-date=2020-08-04|archive-url=https://web.archive.org/web/20200804024041/https://getcomposer.org/doc/03-cli.md|dead-url=yes}}</ref>：

* <code>require</code>：向[[JSON|composer.json]]添加一个依赖库，并且安装它
* <code>install</code>：从composer.json安装依赖库，通常在下载一个PHP项目的所有依赖时使用
* <code>update</code>：根据composer.json中允许的版本范围更新依赖库
* <code>remove</code>：删除一个依赖库，并将其从composer.json中移除

=== 依赖库定义 ===
<syntaxhighlight>
composer require monolog/monolog
</syntaxhighlight>以上命令会在composer.json中生成<syntaxhighlight lang="json">
{
    "require": {
        "monolog/monolog": "1.2.*"
    }
}
</syntaxhighlight>

=== 指定版本 ===
所安装依赖库的版本可以由以下几种运算符定义：<ref>{{Cite web|title=Versions and constraints - Composer|url=https://getcomposer.org/doc/articles/versions.md|accessdate=2020-08-06|work=getcomposer.org|archive-date=2020-09-14|archive-url=https://web.archive.org/web/20200914183055/https://getcomposer.org/doc/articles/versions.md|dead-url=no}}</ref>
{| class="wikitable"
|+
!运算符
!作用 (放置在版本号前时)
!示例
|-
|<code>>=</code>
|允许高于此版本的依赖
以此类推，我们可以使用<code>></code>、<code><</code>和<code><=</code>
|<code>"php": ">=5.5.9"</code> 包括 PHP 7
|-
|<code>!=</code>
|排除一个版本的依赖
|
|-
|<code>-</code>
|定义一个依赖的范围
|
|-
|<code><nowiki>||</nowiki></code>
|或运算符，寻找二者中存在的版本
|<code>"symfony/symfony": "2.8 ¦¦ 3.0"</code> 将查找该依赖的2.8或3.0版本
|-
|<code>*</code>
|通配符，允许一切符合要求的子版本
|<code>"symfony/symfony": "3.1.*"</code> 包括 3.1.1 版本
|-
|<code>~</code>
|允许同级别的下一个版本
|<code>"doctrine/orm": "~2.5"</code> 包括 2.6，但是不包括 2.4 或 3.0.
|-
|<code>^</code>
|类似于<code>~</code>，但是只允许[[向下兼容|向后兼容]]的版本
|
|}

== 支持的框架 ==

* [[Symfony|Symfony]] ≥ 2
* [[Laravel|Laravel]] ≥ 4
* [[CodeIgniter|CodeIgniter]] ≥ 3.0
* [[CakePHP|CakePHP]] ≥ 3.0
* [[FuelPHP|FuelPHP]] ≥ 2.0
* [[Drupal|Drupal]] ≥ 8
* [[TYPO3|TYPO3]] ≥ 6.2
* [[SilverStripe|SilverStripe]] ≥ 3.0
* [[Magento|Magento]] ≥ 2.0
* [[Yii|Yii]] ≥ 1.1
* [[Zend_framework|Zend Framework]] ≥ 1
* [[Silex|Silex]]
* [[Lumen_(网站框架)|Lumen]]

== 註解 ==
{{Reflist|2}}

== 外部連結 ==
* {{Official|https://getcomposer.org/}}

[[Category:软件包管理系统|Category:软件包管理系统]]
[[Category:PHP|Category:PHP]]