{{NoteTA
|T = zh-hans:C#与Visual Basic .NET的比较; zh-hant:C#與Visual Basic .NET的比較;
|G1 = IT
}}
{{Expand language|en}}
[[C_Sharp|C#]]和[[Visual_Basic_.NET|VB.NET]]是[[微軟|微軟]]公司開發的[[.NET框架|.NET框架]]中，两种[[面向对象|面向对象]]的[[编程语言|编程语言]]，分別衍生自[[C++語言|C++語言]]及[[Visual_Basic|Visual Basic]]，因此在語法，[[註解|註解]]方式都有許多的差異。

==語言歷史==
C#和VB.NET各自有其不同的歷史，在語法上也有很大的差異。C#語法的基礎是衍生自1970年代[[丹尼斯·里奇|丹尼斯·里奇]]在[[貝爾實驗室|貝爾實驗室]]（AT&T）發展的[[C語言|C語言]]<ref>{{cite web |url=http://cm.bell-labs.com/cm/cs/who/dmr/chist.html |title=Chistory |publisher=Cm.bell-labs.com |date= |accessdate=2013-08-18 |archive-date=2015-02-03 |archive-url=https://wayback.archive-it.org/all/20150203070752/http://cm.bell-labs.com/cm/cs/who/dmr/chist.html |dead-url=no }}</ref>，其中也包括了完全物件導向的[[C++|C++]]，許多[[Java|Java]]語言語法的基礎也是來自C++語言<ref>{{cite web |url=http://www.freejavaguide.com/history.html |title=History of Java programming language |publisher=www.freejavaguide.com |date= |accessdate=2013-08-18 |archive-date=2013-08-14 |archive-url=https://web.archive.org/web/20130814000429/http://www.freejavaguide.com/history.html |dead-url=no }}</ref>，這也是C#和Java有許多相近之處的原因。

VB.NET是來自1960年代的[[BASIC|BASIC]]語言，是「Beginner's All-purpose Symbolic Instruction Code」的縮寫，一開始BASIC在學校中教授，而且如它的名字所述的，被視為是一個基礎的程式語言。1970年代微電腦的製造商將BASIC用來做電腦系統的程式語言，以及有簡單輸入輸出控制的半作業系統。1980年代微軟也開始使用將一此語言，1990年代發展為[[Visual_basic|Visual basic]]，用在window系統的快速應用程式開發<ref>{{cite web |url=http://www.forestmoon.com/BIRTHofVB/BIRTHofVB.html |title=The Birth of Visual Basic |publisher=Forestmoon.com |date= |accessdate=2013-08-18 |archive-date=2010-06-07 |archive-url=https://web.archive.org/web/20100607125234/http://www.forestmoon.com/BIRTHofVB/BIRTHofVB.html |dead-url=no }}</ref>，Visual basic打敗了當時像PowerBuilder等快速應用程式開發工具<ref>{{cite web |url=http://www.lannigan.org/powersoft_powerbuilder_history.htm |title=Powersoft History PowerBuilder History |publisher=Lannigan.org |date= |accessdate=2013-08-18 |archive-date=2013-09-01 |archive-url=https://web.archive.org/web/20130901201040/http://www.lannigan.org/powersoft_powerbuilder_history.htm |dead-url=no }}</ref>。雖然Visual Basic如此的成功，但在2000年代初期微軟提出.NET框架及對應的Visual Studio開發平台，而Visual Basic也在第六版（VB6）畫下句點。

==語言比較==
雖然C#和VB.NET在語法上有相當的不同，但因為都是微軟開發的.NET框架下的程式語言，而且是由同一個開發團隊進行開發、管理及維護，因此會有不少的共通點<ref>{{cite web|last=Krill |first=Paul |url=http://www.infoworld.com/article/0/02/27/Microsoft_converging_programming_languages_1.html?R=printThis&A=/article/09/02/27/Microsoft_converging_programming_languages_1.html |title=Microsoft converging programming languages | Developer World |publisher=InfoWorld |date=2009-02-27 |accessdate=2013-08-18}}</ref>。C#和VB.NET會[[編譯|編譯]]為同一種中介語言，在同一種.NET框架下的執行期函式庫下執行<ref>{{cite web |url=http://www.dotnet-guide.com/msintermediate.html |title=Microsoft Intermediate Language |publisher=Dotnet-guide.com |date= |accessdate=2013-08-18 |archive-date=2013-06-02 |archive-url=https://web.archive.org/web/20130602151947/http://www.dotnet-guide.com/msintermediate.html |dead-url=no }}</ref>。C#和VB.NET在語言結構上有一些差異，差異主要都是語法上的差異，但不要使用微軟提供，方便和VB6轉換的相容性函式庫，幾乎每一個VB.NET中的指令都有對應的C#的指令，反之亦然。為了延伸其機能，兩種語言也參考同一個.NET框架下的基礎類別。因此大多數用其中一個語言寫的程式可以用語法轉換程式轉換為另一種語言，只有少數例外，而已有許多開源軟體及商業軟體有這類的功能。

===语言特性===
从技术角度来看，C＃和VB.NET之间的大部分差异都是[[语法糖|语法糖]]。也就是说，大多数特性都存在于两种语言，但有些任务在一种语言中比另一种语言更容易完成。

====存在于Visual Basic .NET但不存在于C#的特性====
* 可以使用<code>WithEvents</code>结构声明变量。此结构令程序员可以从“类名”下拉列表中选择一个对象，然后从“声明”下拉列表中选择一个方法以自动插入[[方法签名|方法签名]]。
* 自动连接事件。VB.NET支持事件的<code>Handles</code>语法，它将事件处理程序连接到对象变量而不是对象。
* 使用<code>RaiseEvent</code>关键字引发事件，IDE在此关键字后会显示可用的事件列表。<code>RaiseEvent</code>隐式检查事件处理程序是否为Nothing。（在C＃中引发事件在语法上与调用过程完全相同，并且需要额外的代码行来检查有线事件处理程序）
* 事件代理被隐式声明。
* 在<code>With ... End With</code>结构内，点操作符前可不写出对象名。
* XML文本<ref name="csharpxml">{{cite web | url = http://www.infoq.com/news/2007/03/CSharp-XML | title = Does C# Need VB9's XML Literals? | author = Jonathan Allen | accessdate = 2009-01-13 | archive-date = 2009-02-14 | archive-url = https://web.archive.org/web/20090214181107/http://www.infoq.com/news/2007/03/CSharp-XML | dead-url = no }}</ref><ref>{{cite web |title=XML 文本概述 (Visual Basic) |url=https://docs.microsoft.com/zh-cn/dotnet/visual-basic/programming-guide/language-features/xml/xml-literals-overview |accessdate=2019-08-26 |archive-date=2019-08-26 |archive-url=https://web.archive.org/web/20190826233456/https://docs.microsoft.com/zh-cn/dotnet/visual-basic/programming-guide/language-features/xml/xml-literals-overview |dead-url=no }}</ref>
* date文本常量，如<code>#12/31/2000#</code>
* <code>Module</code>语句（虽然C#的静态类更容易理解，但静态类里每个成员都必须显示声明为<code>static</code>。）
* 当前文件导入模块后，该模块的成员可以无需限定符进行访问。<ref>{{cite web |url=http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.dateandtime.now.aspx |title=DateAndTime.Now Property (Microsoft.VisualBasic) |publisher=Msdn.microsoft.com |date=2015-02-18 |accessdate=2015-02-24 |archive-date=2015-09-28 |archive-url=https://web.archive.org/web/20150928000617/https://msdn.microsoft.com/en-us/library/microsoft.visualbasic.dateandtime.now.aspx |dead-url=no }}</ref> 
* <code>My</code>命名空间<ref>{{cite web |url=http://msdn.microsoft.com/en-us/library/5btzf5yk.aspx |title=Development with My (Visual Basic) |publisher=Msdn.microsoft.com |date=2015-02-18 |accessdate=2015-02-24 |archive-date=2015-01-10 |archive-url=https://web.archive.org/web/20150110011250/http://msdn.microsoft.com/en-us/library/5btzf5yk.aspx |dead-url=no }}</ref> 
* [[组件对象模型|COM组件]]和互操作性更强，因为对象类型是运行时绑定的。<ref name="early-binding">{{cite web|url=http://visualbasic.about.com/od/usingvbnet/a/earlybind.htm|title=Early vs. Late Binding|publisher=Visualbasic.about.com|accessdate=24 February 2015|archive-url=https://web.archive.org/web/20150225004949/http://visualbasic.about.com/od/usingvbnet/a/earlybind.htm|archive-date=2015-02-25|dead-url=yes}}</ref> C# 4.0的<code>dynamic</code>关键字提供了相同的便利。
* 可以在项目级别导入命名空间，这样一来该项目的每个文件都可访问该命名空间。
* 使用<code>#Const</code>指令定义条件编译器常量。<code>#Const</code>常量一般在<code>#If</code>语句中使用。
* 属性可以携带参数。
* 属性可以直接按引用（<code>ByRef</code>）传入方法。在C#里属性必须先赋值给局部变量，再传入。
* 接口里可定义枚举。
* <code>Case</code>语句可接不等式，如<code>Select x: Case Is >= 3</code>。 (在C#里必须用<code>if ... else</code>实现。)
* 子类若有与父类同名的方法，则子类方法必须被<code>Overloads</code>关键字修饰。(C＃中缺少此关键字可能会导致意外重载)
* <code>Like</code>运算符支持模式比较。（C#只能访问<code>Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString</code>方法)
* <code>Return</code>语句可省略。也可向当前方法赋值来设置返回值。
* Visual basic有不少内置常量，如<code>vbCrLf</code>、<code>vbTab</code>。
* 没有用于修饰参数的<code>out</code>关键字。
* <code>MyClass</code>关键字的行为类似于引用最初实现的类的当前实例。<code>MyClass</code>类似于<code>Me</code>，但是对它的所有方法调用都被视为方法被NotOverridable修饰。
* <code>MyBase.New</code>用来调用父类的构造函数。
* 局部变量自动初始化。
* 方法内的静态局部变量在方法调用多次时可保持原来的值。
* <code>End</code>语句直接终止程序。
* 可对Lambda表达式推断类型，如<code>Dim x = Function(n As Integer) n + 1</code>
* 成员名可以与其所在的类型名相同。
<!--
* <code>Implements</code>关键词可以修饰一个方法，表示该方法实现哪个接口的哪个方法。 to indicate which interfaces a class member implements. In C# a similar syntax exist, but it is optional and it can only be applied if the member implements a single interface.
* The <code>Default</code> declaration makes a property an index and able to use the shorter syntax for collection retrievals like <code>MyCollection(5)</code>. C# has a similar construct but it can only declare a single default indexer. In VB one could, for instance, have two indexers <code>MyCollection(5)</code> or <code>MyCollection("Bob")</code> on a collection with Integer keys and String values.
* C# lacks the <code>DirectCast</code> (mapping to a single CLR instruction), strict type conversion can be achieved by the <code>as</code> operator which includes an additional runtime error protection.
-->

====存在于C#但不存在于Visual Basic .NET的特性====
* 多行注释。
* 静态类。
* C#和VB都可以在项目属性里开启或禁用溢出检查，但C#提供<code>checked</code>、<code>unchecked</code>关键字进行精细控制。
* for语句可以有多个条件，如<code>for(int i = 0; i < 10 && somethingTrue; i++)</code>。
* 属性的getter和setter可以实现不同的接口。VB里必须定义两个属性。
* 隐式接口实现。
* null条件运算符<code>??</code>返回第一个非null值（如<code>null ?? null ?? 1</code>返回<code>1</code>）。
* 可在<code>unsafe</code>环境使用指针
* 条件运算符<code>?</code>: <code>someThingTrueOrFalse ? whenTrue() : whenFalse();</code>

====存在于Visual Basic .NET但无法应用到C#的特性====
* 转换布尔值True到Integer可能会产生-1或1，具体取决于所使用的转换。
* 变量赋值和比较使用相同的符号：<code>=</code>。C#用不同的符号：<code>==</code>和<code>=</code>，这允许在条件语句中先赋值，再比较。
* VB.NET标识符不区分大小写。
* 当为具有不同[[數據類型|数据类型]]的变量赋值（并且<code>Option Strict</code>未打开时），VB.NET将尽可能强制转换该值。这种自动强制转换有时会导致意想不到的结果，比如
<syntaxhighlight lang="vb">
Dim i As Integer = "1" '编译器插入一个从String到Integer的转换方法
Dim j As String = 1 '编译器插入一个从Integer到String的转换方法
If i = j Then '编译器插入一个从String到double的转换方法
    MsgBox("Avoid using, but this message will appear!")
End If
</syntaxhighlight>
为了向后兼容，<code>Option Strict</code>的默认值是关闭，但微软建议将其开启<ref>{{cite web |url=http://msdn.microsoft.com/en-us/library/zcd4xwzs.aspx |title=Option Strict Statement |publisher=Msdn.microsoft.com |date=2015-02-18 |accessdate=2015-02-24 |archive-date=2015-01-14 |archive-url=https://web.archive.org/web/20150114062419/http://msdn.microsoft.com/en-us/library/zcd4xwzs.aspx |dead-url=no }}</ref><ref>GetDotNetCode.com:{{cite web|url=http://www.getdotnetcode.com/gdncstore/free/Articles/OPTION%20STRICT%20ON.htm|title=Option Strict On|publisher=Getdotnetcode.com|accessdate=24 February 2015|deadurl=yes|archiveurl=https://web.archive.org/web/20120313000454/http://www.getdotnetcode.com/gdncstore/free/Articles/OPTION%20STRICT%20ON.htm|archivedate=2012-03-13|df=}}</ref>
* 内置函数<code>Val()</code>的参数可以是null。
* 有大量内置的类型转换函数：CInt, CStr, CByte, CDbl, CBool, CDate, CLng, CCur, CObj。

====存在于C#但无法应用到Visual Basic .NET的特性====
* C＃标识符区分大小写。
* 可将同一值赋给多个变量：<code>a=b=c</code>。

==兩種語言的HelloWorld==
以下是兩種語言的[[HelloWorld|HelloWorld]]：

'''VB.NET'''
<syntaxhighlight lang="vbnet">
Imports System

Module HelloWorldApp
    ' VB.NET Console 主程序
    Sub Main()
        ' 輸出 Hello World! 至 Console
        Console.WriteLine("Hello World!")
        ' ReadKey 用來暫停避免直接關閉 Console 視窗
        Console.ReadKey()
    End Sub
End Module
</syntaxhighlight>

'''C#'''
<syntaxhighlight lang="csharp">
using System;

namespace HelloWorldApp
{
    class Program
    {
        // C# Console 主程序
        static void Main(string[] args)
        {
            // 輸出 Hello World! 至 Console
            Console.WriteLine("Hello World");
            // ReadKey 用來暫停避免直接關閉 Console 視窗
            Console.ReadKey();
        }
    }
}
</syntaxhighlight>

==相關條目==
{{reflist}}

[[Category:.NET|Category:.NET]]
[[Category:BASIC程序设计语言家族|Category:BASIC程序设计语言家族]]