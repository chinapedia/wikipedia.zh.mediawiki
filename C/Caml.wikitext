{{Infobox programming language
| name                   = Caml
| logo                   = 
| paradigm               = [[编程范型|多范型]]: [[函数式编程|函数式]], [[指令式编程|指令式]]
| family = [[ML语言|ML]]
| year                   = 1985年
| typing                 = [[类型推论|类型推论]], [[类型系统|静态]], [[类型系统|强类型]]
| designer               = {{en-link|Gérard Huet}}, Guy Cousineau, Ascánder Suárez, Pierre Weis, Michel Mauny (Heavy Caml),<br /> {{en-link|Xavier Leroy}} (Caml Light)
| developer              = 
| latest release version = 0.75
| latest release date    = {{start date and age|2002|01|26}}
| latest test version    = 
| latest test date       = 
| dialects               = 
| influenced by          = [[ML语言|ML]]
| influenced             = [[OCaml|OCaml]]
| operating system       = [[跨平台|跨平台]]
| license                =
| website                = {{URL|caml.inria.fr}}}}
'''Caml'''（{{lang-en|'''C'''ategorical '''A'''bstract '''M'''achine '''L'''anguage}}：範疇抽象機語言），是一種[[函數式編程|函數式]]、[[指令式编程|指令式]]的程式語言。最早由法國的[[法國國立計算機及自動化研究院|INRIA]]和[[巴黎高等師範學院|ENS]]联合的Formel项目發展出來，是[[ML语言|ML语言]]的两种方言之一，現在主要由[[法國國立計算機及自動化研究院|INRIA]]負責維護與發展。

==历史==
在1981年，[[法国国家信息与自动化研究所|INRIA]]的{{en-link|Gérard Huet}}，将最初的{{en-link|可计算函数逻辑|Logic for Computable Functions|LCF}} [[ML语言|ML]]适配到[[Multics|Multics]]系统的[[Maclisp|Maclisp]]下，并且增加了编译器<ref name="caml-doc" />。这个实现被描述于[[法国国家信息与自动化研究所|INRIA]]内部文档“ML手册”之中<ref name="handbook">{{cite book|title=The ML Handbook, Version 6.2|series=Internal document|author= G. Cousineau, M. Gordon, G. Huet, R. Milner, L. C. Paulson, C. Wadsworth |publisher=Project Formel, INRIA|date=July 1985}}<br />{{cite web|title=Introduction to Classic ML|author=Christoph Kreitz, Vincent Rahli|year=2011|url=http://www.nuprl.org/crash/eventml/KreitzandRahli-ClassicML.pdf|quote=This handbook is a revised edition of Section 2 of ‘Edinburgh LCF’, by M. Gordon, R. Milner, and C. Wadsworth, published in 1979 as Springer Verlag Lecture Notes in Computer Science no 78. ……The language is somewhere in between the original ML from LCF and standard ML, since Guy Cousineau added the constructors and call by patterns. This is a LISP based implementation, compatible for Maclisp on Multics, Franzlisp on VAX under Unix, Zetalisp on Symbolics 3600, and Le Lisp on 68000, VAX, Multics, Perkin-Elmer, etc... Video interfaces have been implemented by Philippe Le Chenadec on Multics, and by Maurice Migeon on Symbolics 3600. The ML system is maintained and distributed jointly by INRIA and the University of Cambridge.|access-date=2021-09-09|archive-date=2022-01-29|archive-url=https://web.archive.org/web/20220129103018/http://www.nuprl.org/crash/eventml/KreitzandRahli-ClassicML.pdf}}</ref>，它被开发者自称为“Le_ML”<ref name="caml-hist">{{cite web|url=https://caml.inria.fr/about/history.en.html|title=A History of Caml|quote=The Formel team became interested in the ML language in 1980-81. ……Gérard Huet decided to make the ML implementation compatible with various Lisp compilers (MacLisp, FranzLisp, LeLisp, ZetaLisp). This work involved Guy Cousineau and Larry Paulson. ……Guy Cousineau also added algebraic data types and pattern-matching, following ideas from Robin Milner ……. At some point, this implementation was called Le_ML, a name that did not survive. It was used by Larry Paulson to develop Cambridge LCF and by Mike Gordon for the first version of HOL ……. ……<br />Our main reason for developing Caml was to use it for sofware development inside Formel. Indeed, it was used for developing the Coq system ……. We were reluctant to adopt a standard that could later prevent us from adapting the language to our programming needs. ……We did incorporate into Caml most of the improvements brought by Standard ML over Edinburgh ML. ……The first implementation of Caml appeared in 1987 and was further developed until 1992. It was created mainly by Ascander Suarez. ……<br />In 1990 and 1991, Xavier Leroy designed a completely new implementation of Caml, based on a bytecode interpreter written in C. Damien Doligez provided an excellent memory management system. ……In 1995, Xavier Leroy released Caml Special Light, which improved over Caml Light in several ways. First, an optimizing native-code compiler was added to the bytecode compiler. ……Second, Caml Special Light offered a high-level module system, designed by Xavier Leroy and inspired by the module system of Standard ML. ……Didier Rémy, later joined by Jérôme Vouillon, designed an elegant and highly expressive type system for objects and classes. This design was integrated and implemented within Caml Special Light, leading to the Objective Caml language and implementation, first released in 1996 and renamed to OCaml in 2011.|access-date=2021-09-06|archive-date=2022-04-13|archive-url=https://web.archive.org/web/20220413084146/https://caml.inria.fr/about/history.en.html}}</ref>。[[剑桥大学|剑桥大学]]的{{en-link|Lawrence Paulson}}用它开发了Cambridge LCF，而[[剑桥大学|剑桥大学]]的{{en-link|Michael J. C. Gordon}}用它开发了第一版的{{en-link|HOL|HOL (proof assistant)|HOL}}<ref name="Gordon1996">{{cite web | author={{en-link|Michael J. C. Gordon}} | year=1996 | title=From LCF to HOL: a short history | url=http://www.cl.cam.ac.uk/~mjcg/papers/HolHistory.html | access-date=2007-10-11 | archive-date=2016-09-05 | archive-url=https://web.archive.org/web/20160905201847/http://www.cl.cam.ac.uk/~mjcg/papers/HolHistory.html }}</ref>。这个ML系统由[[法国国家信息与自动化研究所|INRIA]]和[[剑桥大学|剑桥大学]]联合维护和发行<ref name="handbook" />。

基于{{en-link|Thierry Coquand}}在1985年的关于[[构造演算|构造演算]]的论文<ref>{{cite web|author={{en-link|Thierry Coquand|Thierry Coquand|T. Coquand}}, {{en-link|Gérard Huet}}|title=Constructions: a higher order proof system for mechanizing mathematics|url=https://hal.inria.fr/inria-00076155/document|publisher=RR-0401, INRIA. 1985. inria-00076155|access-date=2021-09-09|archive-date=2022-01-30|archive-url=https://web.archive.org/web/20220130135622/https://hal.inria.fr/inria-00076155/document}}</ref>，[[法国国家信息与自动化研究所|INRIA]]的Formel项目开始致力于参与[[Coq|Coq]]的开发。在1987年，[[法国国家信息与自动化研究所|INRIA]]的Ascánder Suárez，基于[[巴黎第七大学|巴黎第七大学]]的{{fr-link|Guy Cousineau}}的“{{en-link|范畴抽象机器|Categorical abstract machine}}”（CAM）<ref>{{cite web|author=G. Cousineau, P.-L. Curien, M. Mauny|title=The categorical abstract machine|year=1985|url=https://www.sciencedirect.com/science/article/pii/0167642387900207|access-date=2021-09-05|archive-date=2021-09-03|archive-url=https://web.archive.org/web/20210903015705/https://www.sciencedirect.com/science/article/pii/0167642387900207}} LNCS, 201, Functional programming languages computer architecture, pp.~50-64.<br />{{cite web|title=Implementing functional languages in the Categorical Abstract Machine|author=Michel Mauny, Ascánder Suárez|year=1986|url=http://michel.mauny.net/data/papers/mauny-suarez-1986.pdf|access-date=2021-09-06|archive-date=2022-01-28|archive-url=https://web.archive.org/web/20220128115221/http://michel.mauny.net/data/papers/mauny-suarez-1986.pdf}} LFP '86: Proceedings of the 1986 ACM conference on LISP and functional programming, Pages 266–278.</ref>，利用[[Le_Lisp|Le Lisp]]的运行时间系统重新实现了Le_ML，并正式命名为“Caml”<ref name="caml-doc">{{cite web|title=The CAML primer Version 2.6.1|author=Guy Cousineau, {{en-link|Gérard Huet}}|url=https://hal.inria.fr/inria-00070045/document|year=1990|access-date=2021-09-02|archive-date=2022-05-04|archive-url=https://web.archive.org/web/20220504232145/https://hal.inria.fr/inria-00070045/document}} RT-0122, INRIA. pp.78.<br />{{cite web|title=The CAML reference manual Version 2.6.1|url=https://hal.inria.fr/inria-00070046/document|author=Pierre Weis, Maria Virginia Aponte, Alain Laville, Michel Mauny, Ascander Suarez|year=1990|access-date=2021-09-02|archive-date=2022-04-06|archive-url=https://web.archive.org/web/20220406231614/https://hal.inria.fr/inria-00070046/document}} [Research Report] RT-0121, INRIA. pp.491.</ref>。

在1990年和1991年，[[法国国家信息与自动化研究所|INRIA]]的{{en-link|Xavier Leroy}}基于用[[C语言|C]]实现的字节码解释器<ref>{{cite web|author=Xavier Leroy|title=The ZINC experiment : an economical implementation of the ML language|year=1990|url=https://hal.inria.fr/inria-00070049/document|access-date=2021-09-06|archive-date=2022-04-06|archive-url=https://web.archive.org/web/20220406232126/https://hal.inria.fr/inria-00070049/document}} RT-0117, INRIA.</ref>，利用{{en-link|Damien Doligez}}提供的内存管理系统重新实现了Caml，并称其为“Caml Light”<ref>{{cite web|url=https://caml.inria.fr/pub/docs/manual-caml-light/|title=The Caml Light system Release 0.74, documentation and user's guide|author={{en-link|Xavier Leroy}}|year=1997|access-date=2021-09-06|archive-date=2022-03-08|archive-url=https://web.archive.org/web/20220308045958/https://caml.inria.fr/pub/docs/manual-caml-light/}}</ref>。在1995年，Xavier Leroy又增加了本机代码编译器和高层模块系统<ref name=“module”>{{cite web|author=Xavier Leroy|title=Manifest types, modules, and separate compilation|publisher=Principles of Programming Languages|year=1994|url=https://caml.inria.fr/pub/papers/xleroy-manifest_types-popl94.pdf|access-date=2021-09-07|archive-date=2021-10-22|archive-url=https://web.archive.org/web/20211022073638/https://caml.inria.fr/pub/papers/xleroy-manifest_types-popl94.pdf}}</ref>，这个版本也称为“Caml Special Light”。在1996年，[[法国国家信息与自动化研究所|INRIA]]的Didier Rémy和Jérôme Vouillon，向Caml Special Light增加了[[面向对象编程|面向对象]]特征<ref>{{cite web|author=Didier Rémy|title=Type inference for records in a natural extension of ML|publisher=Research Report RR-1431, INRIA|year=1991|url=https://hal.inria.fr/inria-00075129/document|access-date=2021-09-10|archive-date=2022-04-06|archive-url=https://web.archive.org/web/20220406233611/https://hal.inria.fr/inria-00075129/document}}<br />{{cite web|author=Didier Rémy, Jérôme Vouillon|title=Objective ML: a simple object-oriented extension of ML|url=http://gallium.inria.fr/~remy/ftp/objective-ml!popl97.pdf|year=1997|access-date=2021-09-06|archive-date=2022-01-21|archive-url=https://web.archive.org/web/20220121031810/http://gallium.inria.fr/~remy/ftp/objective-ml!popl97.pdf}}<br />{{cite web|author=Didier Rémy, Jérôme Vouillon|title=Objective ML: An effective object-oriented extension to ML|url=https://caml.inria.fr/pub/papers/remy_vouillon-objective_ml-tapos98.pdf|year=1998|access-date=2021-09-06|archive-date=2022-01-20|archive-url=https://web.archive.org/web/20220120081109/https://caml.inria.fr/pub/papers/remy_vouillon-objective_ml-tapos98.pdf}}</ref>，从而创建了[[OCaml|OCaml]]<ref>{{cite web|title=The Objective Caml system release 1.07, Documentation and user's manual|url=https://caml.inria.fr/pub/distrib/ocaml-1.07/ocaml-1.07-refman.txt|author=Xavier Leroy|year=1997|access-date=2021-09-06|archive-date=2022-01-23|archive-url=https://web.archive.org/web/20220123211218/https://caml.inria.fr/pub/distrib/ocaml-1.07/ocaml-1.07-refman.txt}}</ref>。

==範例==
===Hello World===
下面的程序<code>hello.ml</code>:
<syntaxhighlight lang="OCaml">
print_endline "Hello World!"
</syntaxhighlight>

===阶乘函数===
很多数学函数，比如[[阶乘|阶乘]]，可以很自然的表示为纯粹的函数形式：
<syntaxhighlight lang="OCaml">
let rec fact n =
  if n=0 then 1 else n * fact(n - 1);;
</syntaxhighlight>
这个函数可以使用[[模式匹配|模式匹配]]等价的写为：
<syntaxhighlight lang="OCaml">
let rec fact = function
  | 0 -> 1
  | n -> n * fact(n - 1);;
</syntaxhighlight>
后者形式是阶乘作为[[递推关系|递推关系]]的数学定义。

编译器将这个函数的类型推论为<code>int -> int</code>，意味着这个函数将<code>int</code>映射到<code>int</code>。例如，<code>12!</code>：
<syntaxhighlight lang="OCaml" highlight="2">
# fact 12;;
- : int = 479001600
</syntaxhighlight>

==引用==
{{reflist|2}}

[[Category:ML語言家族|Category:ML語言家族]]
[[Category:程序设计语言|Category:程序设计语言]]
[[Category:1985年建立的程式語言|Category:1985年建立的程式語言]]