{{NoteTA
|T=zh-cn:C和C++运算符;zh-tw:C和C++運算子
|G1=IT
|zh-cn:运算符;zh-tw:運算子}}
所有的[[C语言|C语言]]'''运算符'''都被[[C++语言|C++语言]]支持。C语言不支持[[运算符重载|运算符重载]]。

在不重载时，运算符<code>&&</code>、<code>||</code>、<code>,</code>（[[逗号运算符|逗号运算符]]），在第一个操作数求值之后有一个[[顺序点|顺序点]]。 

大部分C与C++运算符也可用于其它程序设计语言如[[C♯|C#]]、[[Java|Java]]、[[Perl|Perl]]、[[PHP|PHP]]等，具有相同的优先级、结合性与语义。

== 運算子優先級 ==
以下是C++程式語言中的所有運算子的[[運算次序|優先級]]和[[結合性|結合性]]列表。

{| class="wikitable"
|-
! style="text-align: left" | 优先级
! style="text-align: left" | 運算子
! style="text-align: left" | 敘述
! style="text-align: left" | 示例
! style="text-align: left" | 重载性
! style="text-align: left" | 結合性
|-
| <code>1</code>
| <code>::</code>
| 作用域解析(C++专有)
| <code>Class::age = 2;</code>
| 否
| style="vertical-align: center" rowspan="12"| 由左至右
|-
| style="vertical-align: center" rowspan="11"| <code>2</code>
| <code>++</code>
| 后缀递增
| <code>i++</code>
|
|-
| <code>--</code>
| 后缀递减
| <code>i--</code>
|
|-
| <code>()</code>
| 函数调用或函数调用形式的类型转换
| <code>int x = f();</code>
|
|-
| <code>[]</code>
| 数组访问
| <code>array[4] = 2;</code>
|
|-
| <code>.</code>
| 以对象方式访问成员
| <code>obj.age = 34;</code>
| 否
|-
| <code>-></code>
| 以指针方式访问成员
| <code>ptr->age = 34;</code>
|
|-
| <code>dynamic_cast</code>
| 运行时检查类型转换(C++专有)
| <code>Y& y = dynamic_cast<Y&>(x);</code>
| 否
|-
| <code>static_cast</code>
| 未经检查的类型转换(C++专有)
| <code>Y& y = static_cast<Y&>(x);</code>
| 否
|-
| <code>reinterpret_cast</code>
| 重定义类型转换(C++专有)
| <code>int const* p = reinterpret_cast<int const*>(0x1234);</code>
| 否
|-
| <code>const_cast</code>
| 更改非常量属性(C++专有)
| <code>int* q = const_cast<int*>(p);</code>
| 否
|-
| <code>typeid</code>
| 获取类型信息(C++专有)
| <code>std::type_info const& t = typeid(x);</code>
| 否
|-
| style="vertical-align: center" rowspan="14"| <code>3</code>
| <code>++</code>
| 前缀递增
| <code>++i</code>
|
| style="vertical-align: center" rowspan="14"|由右至左
|-
| <code>--</code>
| 前缀递减
| <code>--i</code>
|
|-
| <code>+</code>
| 一元正号
| <code>int i = +1;</code>
|
|-
| <code>-</code>
| 一元负号
| <code>int i = -1;</code>
|
|-
| <code>!</code><br><code>not</code>
| 逻辑非<br><code>!</code>的备用拼写
| <code>if (!done) …</code>
|
|-
| <code>~</code><br><code>compl</code>
| 按位取反<br><code>~</code>的备用拼写
| <code>flag1 = ~flag2;</code>
|
|-
| <code>(''type'')</code>
|强制类型转换
| <code>int i = (int)floatNum;</code>
|
|-
| <code>*</code>
| 取指针指向的值
| <code>int data = *intPtr;</code>
|
|-
| <code>&</code>
| 取变量的地址
| <code>int *intPtr = &data;</code>
|
|-
| <code>sizeof</code>
| 某某的大小
| <code>size_t s = sizeof(int);</code>
| 否
|-
| <code>new</code>
| 动态内存分配(C++专有)
| <code>long* pVar = new long;</code>
|
|-
| <code>new[]</code>
| 动态数组内存分配(C++专有)
| <code>long* array = new long[20];</code>
|
|-
| <code>delete</code>
| 动态内存释放(C++专有)
| <code>delete pVar;</code>
|
|-
| <code>delete[]</code>
| 动态数组内存释放(C++专有)
| <code>delete [] array;</code>
|
|-
| style="vertical-align: center" rowspan="2"| <code>4</code>
| <code>.*</code>
| 成员对象选择(C++专有)
| <code>obj.*var = 24;</code>
| 否
| style="vertical-align: center" rowspan="20"|由左至右
|-
| <code>->*</code>
| 成员指针选择(C++专有)
| <code>ptr->*var = 24;</code>
|
|-
| style="vertical-align: center" rowspan="3"| <code>5</code>
| <code>*</code>
| 乘法
| <code>int i = 2 * 4;</code>
|
|-
| <code>/</code>
| 除法
| <code>float f = 10.0 / 3.0;</code>
|
|-
| <code>%</code>
| 模数（取[[余数|余数]]）
| <code>int rem = 4 % 3;</code>
|
|-
| style="vertical-align: center" rowspan="2"| <code>6</code>
| <code>+</code>
| 加法
| <code>int i = 2 + 3;</code>
|
|-
| <code>-</code>
| 減法
| <code>int i = 5 - 1;</code>
|
|-
| style="vertical-align: center" rowspan="2"| <code>7</code>
| <code><<</code>
| 位元左移
| <code>int flags = 33 << 1;</code>
|
|-
| <code>>></code>
| 位元右移
| <code>int flags = 33 >> 1;</code>
| 
|-
| style="vertical-align: center" rowspan="1"| <code>8</code>
| <code><=></code>
| 三路比较（[[C++20|C++20]]）
| <code>auto flags = 33 <=> 1;</code>
|
|-
| style="vertical-align: center" rowspan="4"| <code>9</code>
| <code><</code>
| 小于关系
| <code>if (i < 42) …</code>
| 
|-
| <code><=</code>
| 小于等于关系
| <code>if (i <= 42) ...</code>
| 
|-
| <code>></code>
| 大于关系
| <code>if (i > 42) …</code>
| 
|-
| <code>>=</code>
| 大于等于关系
| <code>if (i >= 42) ...</code>
| 
|-
| style="vertical-align: center" rowspan="2"| <code>10</code>
| <code>==</code>
| 等于关系
| <code>if (i == 42) ...</code>
|
|-
| <code>!=</code><br><code>not_eq</code>
| 不等于关系<br><code>!=</code>的备用拼写
| <code>if (i != 42) …</code>
|
|-
| <code>11</code>
| <code>&</code><br><code>bitand</code>
| 位元 AND<br><code>&</code>的备用拼写
| <code>flag1 = flag2 & 42;</code>
|
|-
| <code>12</code>
| <code>^</code><br><code>xor</code>
| 位元 XOR(独占or)<br><code>^</code>的备用拼写
| <code>flag1 = flag2 ^ 42;</code>
|
|-
| <code>13</code>
| <code><nowiki>|</nowiki></code><br><code>bitor</code>
| 位元 OR(包含or)<br><code><nowiki>|</nowiki></code>的备用拼写
| <code>flag1 = flag2 <nowiki>|</nowiki> 42;</code>
|
|-
| <code>14</code>
| <code>&&</code><br><code>and</code>
| 逻辑 AND<br><code>&&</code>的备用拼写
| <code>if (conditionA && conditionB) …</code>
|
|-
| <code>15</code>
| <code><nowiki>||</nowiki></code><br><code>or</code>
| 逻辑 OR<br><code><nowiki>||</nowiki></code>的备用拼写
| <code>if (conditionA <nowiki>||</nowiki> conditionB) ...</code>
|
|-
| <code>16</code>
| <code>''c''?''t'':''f''</code>
| 三元条件运算
| <code>int i = a > b ? a : b;</code>
| 否
| style="vertical-align: center" rowspan="12"| 由右至左
|-
| style="vertical-align: center" rowspan="11"| <code>17</code>
| <code>=</code>
| 直接赋值
|<code> int a = b;</code>
|
|-
| <code>+=</code>
| 以和赋值
| <code>a += 3;</code>
|
|-
| <code>-=</code>
| 以差赋值
| <code>b -= 4;</code>
|
|-
| <code>*=</code>
| 以積赋值
| <code>a *= 5;</code>
|
|-
| <code>/=</code>
| 以商赋值
| <code>a /= 2;</code>
|
|-
| <code>%=</code>
| 以取余数赋值
| <code>a %= 3;</code>
|
|-
| <code><<=</code>
| 以位元左移赋值
| <code>flags <<= 2;</code>
|
|-
| <code>>>=</code>
| 以位元右移赋值
| <code>flags >>= 2;</code>
|
|-
| <code>&=</code><br><code>and_eq</code>
| 以位元AND赋值<br><code>&=</code>的备用拼写
| <code>flags &= new_flags;</code>
|
|-
| <code>^=</code><br><code>xor_eq</code>
| 以位元XOR赋值<br><code>^=</code>的备用拼写
| <code>flags ^= new_flags;</code>
|
|-
| <code><nowiki>|</nowiki>=</code><br><code>or_eq</code>
| 以位元OR赋值<br><code><nowiki>|</nowiki>=</code>的备用拼写
| <code>flags <nowiki>|</nowiki>= new_flags;</code>
|
|-
| <code>18</code>
| <code>throw</code>
| 抛出异常
| <code>throw EClass("Message");</code>
| 否
| 
|-
| <code>19</code>
| <code>,</code>
| 逗號運算子
| <code>for (i = 0, j = 0; i < 10; i++, j++) …</code>
|
| style="vertical-align: top"| 由左至右
|-
|}

== 列表 ==
在本表中，<code>a</code>、<code>b</code>和<code>c</code>代表有效值（來自變數或返回值的逐字常數或數值）、物件名稱，或適當的左值。

=== 算術運算子 ===
{| class="wikitable" style="text-align: center"
|-
! style="text-align: left" | 運算子名稱
! 語法
! 可重載
! [[C语言|C语言]]裡有
|- 
| style="text-align: left" | 一元正號 || <code>'''+'''a</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 加法（總和）|| <code>a '''+''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 前綴遞增 || <code>'''++'''a</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 後綴遞增 || <code>a'''++'''</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 以加法賦值 || <code>a '''+=''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 一元負號（取反）|| <code>'''-'''a</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 減法（差）|| <code>a '''-''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 前綴遞減 || <code>'''--'''a</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 後綴遞減 || <code>a'''--'''</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 以減法賦值 || <code>a '''-=''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 乘法（乘積）|| <code>a '''*''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 以乘法賦值 || <code>a '''*=''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 除法（分之）|| <code>a '''/''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 以除法賦值 || <code>a '''/=''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 模數（餘數）|| <code>a '''%''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 以模數賦值 || <code>a '''%=''' b</code> || {{yes}} || {{yes}}
|}

=== 比較運算子 ===
{| class="wikitable" style="text-align: center"
|-
! style="text-align: left" | 運算子名稱
! 語法
! 可重載
! [[C语言|C语言]]裡有
|-
| style="text-align: left" | 小於 || <code>a '''<''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 小於或等於 || <code>a '''<=''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 大於 || <code>a '''>''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 大於或等於 || <code>a '''>=''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 不等於 || <code>a '''!=''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 等於 || <code>a '''==''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 邏輯取反 || <code>'''!'''a</code>|| {{yes}} || {{yes}}
|-
| style="text-align: left" | 邏輯 AND || <code>a '''&&''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 邏輯 OR || <code>a '''<nowiki>||</nowiki>''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 三路比较 || <code>a '''<=>''' b</code> || {{yes}} || {{no}}
|}

=== 位元運算子 ===
{| class="wikitable" style="text-align: center"
|-
! style="text-align: left" | 運算子名稱
! 語法
! 可重載
! [[C语言|C语言]]裡有
|-
| style="text-align: left" | 位元左移 || <code>a '''<<''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 以位元左移賦值 || <code>a '''<<=''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 位元右移 || <code>a '''>>''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 以位元右移賦值 || <code>a '''>>=''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 位元一的補數 || <code>'''~'''a</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 位元 AND || <code>a '''&''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 以位元 AND 賦值 || <code>a '''&=''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 位元 OR || <code>a '''<nowiki>|</nowiki>''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 以位元 OR 賦值 || <code>a '''<nowiki>|</nowiki>=''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 位元 XOR || <code>a '''^''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 以位元 XOR 賦值 || <code>a '''^=''' b</code> || {{yes}} || {{yes}}
|}

=== 其它運算子 ===
{| class="wikitable" style="text-align: center"|
|-
! style="text-align: left" | 運算子名稱
! 語法
! 可重載
! [[C语言|C语言]]裡有
|-
| style="text-align: left" | 基本[[C++設定運算子|賦值]] || <code>a '''=''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 函式呼叫 || <code>a'''()'''</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 陣列下標 || <code>a'''['''b''']'''</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 間接（向下參考）|| <code>'''*'''a</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 的位址（參考）|| <code>'''&'''a</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 成員指標 || <code>a'''->'''b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 成員 || <code>a'''.'''b</code> || {{no}} || {{yes}}
|-
| style="text-align: left" | 間接成員指標 || <code>a'''->*'''b</code> || {{yes}} || {{no}}
|-
| style="text-align: left" | 間接成員 || <code>a'''.*'''b</code> || {{no}} || {{no}}
|-
| style="text-align: left" | 轉換 || <code>(''[[資料型別|type]]'') a</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 逗號 || <code>a ''',''' b</code> || {{yes}} || {{yes}}
|-
| style="text-align: left" | 三元條件 || <code>a '''?''' b ''':''' c</code> || {{no}} || {{yes}}
|-
| style="text-align: left" | 作用域解析 || <code>a'''::'''b</code> || {{no}} || {{no}}
|-
| style="text-align: left" | 的大小 || <code>'''sizeof''' a</code> || {{no}} || {{yes}}
|-
| style="text-align: left" | 類型識別 || <code>'''typeid''' ''[[資料型別|type]]''</code> || {{no}} || {{no}}
|-
| style="text-align: left" | 分配儲存區 || <code>'''new''' ''[[資料型別|type]]''</code> || {{yes}} || {{no}}
|-
| style="text-align: left" | 解除分配儲存區 || <code>'''delete''' a</code> || {{yes}} || {{no}}
|}

=== 語言擴展 ===
{| class="wikitable" style="text-align: center"
|-
! style="text-align: left" | 運算子名稱
! 語法
! 可重載
! [[C语言|C语言]]裡有
! 提供者
|-
| style="text-align: left" | [[Label_Value_Operator|標籤值]] || <code>'''&&''' label</code> || {{no}} || {{Yes}} || GCC
|-
| style="text-align: left" | 取得型態 || <code>'''typeof''' a</code><br /><code>'''typeof'''(''expr'')</code> || {{no}} || {{yes}} || GCC
|-
| style="text-align: left" | 最小／最大值 || <code>a '''<?''' b</code><br /><code>a '''>?''' b</code> || {{no}} || {{no}} || GCC < 4.3
|}

== 註解 ==

在C和C++中對運算子的約束，是語言的語法規範因素所指定的（在對應的標準中），而不是優先級列表。這造成了一些微妙的衝突。例如，在C中，條件表達式的語法是：
    邏輯-OR-表達式 ? 表達式 : 條件-表達式
在C++中則是：
    邏輯-or-表達式 ? 表達式 : 賦值-表達式
因此，這個表達式：
    e = a ? b : c = d
兩個語言的語法分析結果並不相同。在C中，這個表達式被解析為：
    e = ((a ? b : c) = d)
這是一個錯誤的語義，因為條件-表達式的結果並不是一個左值。在C++中，則解析為：
    e = (a ? b : (c = d))
這是一個有效的表達式。

位元邏輯運算子的優先級一直受到批評<ref>{{cite web|url=http://cm.bell-labs.com/cm/cs/who/dmr/chist.html|archiveurl=https://wayback.archive-it.org/all/20150203070752/http://cm.bell-labs.com/cm/cs/who/dmr/chist.html|title=The Development of the C Language|archivedate=2015-02-03|accessdate=2007-03-01|dead-url=no}}</ref>。在觀念裡，&和|是類似於+和*的數值運算子。但是，表達式
    a & b == 7
意謂
    a & (b == 7)
而
    a + b == 7
意謂
    (a + b) == 7
這就需要經常使用圓括號，以免有意料之外的結果。

一元正号运算符可用于操作数表达式的类型提升。例如下例：
<syntaxhighlight lang="cpp">
template <class T> void f(T const& a, T const& b){};

int main() {
	int a[2];
	int b[3];
	f(a, b); // won't work! different values for "T"!
	f(+a, +b); // works! T is "int*" both  
}
</syntaxhighlight>
==安全问题==
下表指出了各个运算符可能导致的安全问题：
{| class="wikitable"
!符號
!安全性
!符號
!安全性
!符號
!安全性
!符號
!安全性
|-
| +
|溢位,包裹,循環
| -=
|溢位,包裹,循環,截裁
|>>
|無
|>=
|無
|-
| -
|溢位,包裹,循環
|*=
|溢位,包裹,循環,截裁
|&
|無
|<nowiki>==</nowiki>
|無
|-
|*
|溢位,包裹,循環
|/=
|溢位,截裁
|~
|無
|!=
|無
|-
|%
|溢位
|<<=
|溢位,包裹,循環,截裁
|!
|無
|&&
|無
|-
| ++
|
|>>=
|截裁
|un+
|無
|<nowiki>||</nowiki>
|無
|-
| --
|
|&=
|截裁
|un-
|溢位,包裹,截裁
|?:
|無
|-
|=
|
|<nowiki>|=</nowiki>
|截裁
|<
|無
|<=>
|
|-
| +=
|
|<<
|溢位,包裹,截裁
|>
|無
|
|
|}

== 參閱 ==

* [[C语言|C]]
* [[C++|C++]]

== 參考資料 ==
{{reflist}}

== 外部連結 ==
* [http://www.knosof.co.uk/cbook/accu06a.pdf Experimental results]{{Wayback|url=http://www.knosof.co.uk/cbook/accu06a.pdf |date=20070714010745 }} showing that developers have poor knowledge of binary operator precedence.
* [http://www.mycplus.com/tutorial.asp?TID=304 Basic types & Operators]{{Wayback|url=http://www.mycplus.com/tutorial.asp?TID=304 |date=20061113162549 }}

{{C++}}

[[Category:C語言|Category:C語言]]
[[Category:C++|Category:C++]]
[[Category:运算符_(编程)|Category:运算符_(编程)]]