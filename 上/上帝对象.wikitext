在-{zh-hans:[[面向对象编程|面向对象编程]]; zh-hant:[[物件導向程式設計|物件導向程式設計]]}-领域中, 一个'''-{zh-hans:上帝对象; zh-hant:上帝物件}-'''('''God object''')是一个''了解过多''或者''负责过多''的-{zh-hans:[[对象_(计算机科学)|对象]]; zh-hant:[[物件_(電腦科學)|物件]]}-。 -{zh-hans:上帝对象; zh-hant:上帝物件}-是[[反面模式|反面模式]]的一个例子。

-{zh-hans:[[结构化编程|结构化编程]]; zh-hant:[[結構化程式設計|結構化程式設計]]}-背后的基本概念是一个大型的问题应该被分解成为多个较小的问题中（[[分治算法|分而治之]]的策略）并且针对每个较小的问题提出解决方案。当每个小问题都得到解决后，大问题本体就得到了解决。因此-{zh-hans:对象; zh-hant:物件}-应该知道的一切就是''它本身''。类似的，-{zh-hans:对象; zh-hant:物件}-应该解决的问题是它''所属的''问题。

基于-{zh-hans:上帝对象; zh-hant:上帝物件}--{zh-hans:编写; zh-hant:撰寫}-的-{zh-hans:代码; zh-hant:程式碼}-并不遵从上述的方式。取而代之的是-{zh-hans:程序; zh-hant:程式}-的整体功能都被-{zh-hans:编程; zh-hant:撰寫}-到一个单一的"了解全部"的-{zh-hans:对象; zh-hant:物件}-当中，这个-{zh-hans:对象; zh-hant:物件}-维护了整个-{zh-hans:程序; zh-hant:程式}-的大部分-{zh-hans:信息; zh-hant:資訊}-并且提供了操作数据的大部分[[方法|方法]]。所以这个-{zh-hans:对象; zh-hant:物件}-持有过多的数据以及负责过多的方法，它在-{zh-hans:程序; zh-hant:程式}-中的角色就如同上帝一般。不同于-{zh-hans:编写; zh-hant:撰寫}-直接在彼此之间进行交互的-{zh-hans:对象; zh-hant:物件}-，其他-{zh-hans:程序; zh-hant:程式}-中的-{zh-hans:对象; zh-hant:物件}-都依赖于这个-{zh-hans:上帝对象; zh-hant:上帝物件}-获得-{zh-hans:信息; zh-hant:資訊}-以及交互。由于-{zh-hans:上帝对象; zh-hant:上帝物件}-被过多的其他-{zh-hans:代码; zh-hant:程式碼}-所引用，相比一个进行了均匀切分的-{zh-hans:程序; zh-hant:程式}-而言维护变得更加的困难。

在-{zh-hans:[[过程化编程|过程化编程语言]]; zh-hant:[[程序式程式設計|程序式程式設計]]}-中没有使用-{zh-hans:[[子程序|子程序]]; zh-hant:[[次程式|副程式]]}-或者过多的使用了-{zh-hans:[[全局变量|全局变量]]; zh-hant:[[全域變數|全域變數]]}-进行-{zh-hans:信息存储; zh-hant:儲存資訊}-，都是在-{zh-hans:面向对象编程; zh-hant:物件導向程式設計}-中的-{zh-hans:上帝对象; zh-hant:上帝物件}-的一个类似物。

创造一个-{zh-hans:上帝对象; zh-hant:上帝物件}-通常都被认为是一个不好的-{zh-hans:編程實現; zh-hant:程式設計實作}-，这种技术偶尔会在紧耦合的-{zh-hans:編程; zh-hant:程式設計}-环境中（如[[微处理器|微处理器]]）被使用。在这些环境中相较于维护以及-{zh-hans:編程; zh-hant:程式設計}-的优雅而言，微小的性能提升以及控制集中是更加重要的。

== 参考文献 ==
{{Reflist|2}}

==深度阅读==
*{{cite book |last=Riel |first=Arthur J. |title=Object-Oriented Design Heuristics |url=https://archive.org/details/objectorientedde0000riel |year=1996 |publisher=Addison-Wesley |location=Boston, MA |isbn=020163385X |chapter=Chapter 3: Topologies of Action-Oriented Vs. Object-Oriented Applications |quote=3.2: Do not create god classes/objects in your system. Be very suspicious of an abstraction whose name contains Driver, Manager, System, or Subsystem.}} 
*[http://www.lostechies.com/blogs/chrismissal/archive/2009/05/28/anti-patterns-and-worst-practices-monster-objects.aspx Anti-Patterns and Worst Practices – Monster Objects] {{Wayback|url=http://www.lostechies.com/blogs/chrismissal/archive/2009/05/28/anti-patterns-and-worst-practices-monster-objects.aspx |date=20210224215337 }}

==参见==
*[[餛飩式代碼|餛飩式代碼]]：和-{zh-hans:上帝对象; zh-hant:上帝物件}-恰好相反的反模式

[[Category:反模式|Category:反模式]]