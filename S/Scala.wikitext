{{noteTA
|G1=IT
|G2=FL
|1=zh-cn:类型;zh-tw:型別;
}}
{{Infobox programming language
| name = Scala
| logo = Scala-full-color.svg
| logo size = 200px
| paradigm = [[多范式|多范式]]：[[函数式编程|函数式]]，[[面向对象编程|面向对象]]，[[指令式编程|指令式]]
| year = {{Start date and age|2004|01|20}}
| designer = {{link-en|Martin Odersky|Martin Odersky}}
| developer = [[洛桑联邦理工学院|洛桑联邦理工学院]]编程方法实验室
| programming_language   = Scala
| latest release version = {{wikidata|property|edit|reference|P548=Q2804309|P348}}
| latest release date = {{wikidata|qualifier|single|P548=Q2804309|P348|P577}}，{{Time ago|{{wikidata|qualifier|single|raw|P548=Q2804309|P348|P577}}}}
| typing = [[静态类型|静态]]，[[强类型|强]]，[[类型推断|类型推断]], {{link-en|结构化类型系统|Structural type system|结构化}}
| influenced_by          = [[Eiffel|Eiffel]], [[Erlang|Erlang]], [[Haskell|Haskell]],<ref>{{cite web|url=http://blog.fogus.me/2010/08/06/martinodersky-take5-tolist/|title=MartinOdersky take(5) toList|last=Fogus|first=Michael|date=6 August 2010|work=Send More Paramedics|accessdate=2012-02-09|archive-date=2012-02-14|archive-url=https://web.archive.org/web/20120214225555/http://blog.fogus.me/2010/08/06/martinodersky-take5-tolist/|dead-url=no}}</ref> [[Java|Java]],<ref name="popl06">{{cite web |url=http://lampwww.epfl.ch/~odersky/talks/popl06.pdf |title=The Scala Experiment - Can We Provide Better Language Support for Component Systems? |last=Odersky |first=Martin |date=11 January 2006 |accessdate=2016-06-22 |archive-date=2016-06-23 |archive-url=https://web.archive.org/web/20160623183933/http://lampwww.epfl.ch/~odersky/talks/popl06.pdf |dead-url=no }}</ref> [[Lisp|Lisp]],<ref name="Scala Macros">{{cite web |title=Scala Macros |url=http://scalamacros.org |accessdate=2020-09-26 |archive-date=2020-02-05 |archive-url=https://web.archive.org/web/20200205040737/http://scalamacros.org/ |dead-url=no }}</ref> {{link-en|Pizza (编程语言)|Pizza (programming language)|Pizza}},<ref name="overview">Martin Odersky et al., An Overview of the Scala Programming Language, 2nd Edition</ref> [[Standard_ML|Standard ML]],<ref name="popl06"/> [[OCaml|OCaml]],<ref name="popl06"/> [[Scheme|Scheme]],<ref name="popl06"/> [[Smalltalk|Smalltalk]], [[Oz_(编程语言)|Oz]]
| influenced             = {{link-en|Ceylon (编程语言)|Ceylon (programming language)|Ceylon}}, {{link-en|Fantom (编程语言)|Fantom (programming language)|Fantom}}, [[F♯|F#]], [[Kotlin|Kotlin]], {{link-en|Lasso (编程语言)|Lasso (programming language)|Lasso}}, {{link-en|Red (编程语言)|Red (programming language)|Red}}, [[Swift_(程式語言)|Swift]]{{citation needed|date=January 2016}}
| platform               = [[Java虚拟机|JVM]]、[[JavaScript|JavaScript]]<ref>{{cite web |url=http://www.scala-js.org/ |title=Scala.js |accessdate=2015-07-27 |archive-date=2015-08-10 |archive-url=https://web.archive.org/web/20150810105029/http://www.scala-js.org/ |dead-url=yes }}</ref>、[[LLVM|LLVM]]（實驗性）<ref>{{cite web |url=http://www.scala-native.org/ |title=Scala Native |accessdate=2015-07-27 |archive-date=2016-04-22 |archive-url=https://web.archive.org/web/20160422082009/http://www.scala-native.org/ |dead-url=no }}</ref>
| license                = [[BSD许可证|3句版BSD授權條款]]<ref>{{cite web|title=Scala 2.11.1 is now available!|url=http://scala-lang.org/news/2.11.1|accessdate=2016-08-29|archive-date=2016-08-27|archive-url=https://web.archive.org/web/20160827192412/http://scala-lang.org/news/2.11.1|dead-url=no}}</ref>
| website                = {{URL|www.scala-lang.org}}
| wikibooks              = Scala
| file_ext               = .scala, .sc
}}

'''Scala'''（{{pron-en|ˈskɑːlə, ˈskeɪlə}}）是一门[[多范式|多范式]]的编程语言，设计初衷是要整合面向对象编程和[[函数式编程|函数式编程]]的各种特性。<ref name="overview"></ref>

== 平台和许可证 ==
Scala运行于[[Java平台|Java平台]]（[[Java虚拟机|Java虚拟机]]），并兼容现有的[[Java|Java]]程序。它也能运行于[[CLDC|CLDC]]配置的[[Java_ME|Java ME]]中。曾经有过另一[[.NET|.NET]]平台的实现<ref name=".netsupport">{{cite web
 |url         = http://www.scala-lang.org/docu/clr/
 |title       = Scala on .NET
 |publisher   = [[洛桑联邦理工学院|洛桑联邦理工学院]]编程方法实验室
 |quote       = ''Scala is primarily developed for the JVM and embodies some of its features. Nevertheless, its .NET support is designed to make it as portable across the two platforms as possible.''
 |date        = 2008-01-07
 |accessdate  = 2008-01-15
 |deadurl     = yes
 |archiveurl  = https://web.archive.org/web/20071009010727/http://www.scala-lang.org/docu/clr/
 |archivedate = 2007-10-09
}}</ref>，不过该版本已被放弃。<ref>{{Cite web |url=https://github.com/scala/scala/pull/1718 |title=存档副本 |accessdate=2019-08-10 |archive-date=2017-07-29 |archive-url=https://web.archive.org/web/20170729100404/https://github.com/scala/scala/pull/1718 |dead-url=no }}</ref>

Scala的编译模型（独立编译，动态类加载）与[[Java|Java]]和[[C＃|C#]]一样，所以Scala代码可以调用Java类库（对于.NET实现则可调用.NET类库）。

Scala套件包括编译器和类库，以[[BSD许可证|BSD许可证]]发布。<ref>{{Cite web |url=http://www.scala-lang.org/node/146 |title=存档副本 |accessdate=2009-07-22 |archive-date=2009-08-21 |archive-url=https://web.archive.org/web/20090821142934/http://www.scala-lang.org/node/146 |dead-url=no }}</ref>

== 历史 ==
[[洛桑联邦理工学院|洛桑联邦理工学院]]的Martin Odersky于2001年基于{{link-en|Funnel (并行计算)|Funnel (concurrent computing)|Funnel}}的工作开始设计Scala。Funnel是把[[函数式编程|函数式编程]]思想和[[佩特里网|佩特里网]]相结合的一种编程语言。<ref name="history-of-scala">Martin Odersky, [http://www.artima.com/weblogs/viewpost.jsp?thread=163733 "A Brief History of Scala"] {{Wayback|url=http://www.artima.com/weblogs/viewpost.jsp?thread=163733 |date=20090925144957 }}, Artima.com weblogs, June 9, 2006</ref> Odersky之前工作于{{link-en|Java泛型|Generic Java}}和[[javac|javac]]。Java平台的Scala于2003年底/2004年初发布。<ref name="history-of-scala"/>.NET平台的Scala发布于2004年6月。<ref name="overview"/><ref name="history-of-scala"/><ref name="spec">Martin Odersky, "The Scala Language Specification Version 2.7"</ref>该语言第二个版本，v2.0，发布于2006年3月。<ref name="overview"/>

Scala 2.8的特性包括重写的Scala容器庫、命名参数和默认参数、-{zh-hans:包对象; zh-hant:套件物件}-，以及[[Continuation|Continuation]].<ref>{{Cite web |url=http://www.scala-lang.org/node/1564 |title=Scala 2.8 Preview |accessdate=2009-07-22 |archive-date=2009-04-26 |archive-url=https://web.archive.org/web/20090426054159/http://www.scala-lang.org/node/1564 |dead-url=no }}</ref>

2012年1月，发布版本2.9.1。

2012年4月，发布版本2.9.2。

== 使用Scala的软件 ==
* 2009年4月，[[Twitter|Twitter]]宣布他们已经把大部分後端程式从[[Ruby|Ruby]]迁移到Scala，其余部分也打算要迁移。<ref>{{cite web
  | last = Greene
  | first = Kate
  | title = The Secret Behind Twitter's Growth, How a new Web programming language is helping the company handle its increasing popularity.
  | work = Technology Review
  | publisher = MIT
  | date = April 1, 2009
  | url = http://www.technologyreview.com/blog/editors/23282/?nlid=1908
  | accessdate = April 6, 2009
  | archive-date = 2012-04-17
  | archive-url = https://web.archive.org/web/20120417050138/http://www.technologyreview.com/blog/editors/23282/?nlid=1908
  }}</ref>
* {{link-en|Wattzon|Wattzon}}已经公开宣称，其整个平台都已经是基于Scala基础设施编写的。<ref>{{cite web
  | last = Cloud
  | first = Jeremy
  | title = Scala + WattzOn, sitting in a tree...
  | date = March 10, 2009
  | url = http://www.slideshare.net/raffikrikorian/scala-wattzon-sitting-in-a-tree
  | accessdate = 2009-07-22
  | archive-date = 2009-04-09
  | archive-url = https://web.archive.org/web/20090409143910/http://www.slideshare.net/raffikrikorian/scala-wattzon-sitting-in-a-tree
  | dead-url = no
  }}</ref>
* [[瑞银集团|瑞银集团]]把Scala用于一般产品中。<ref>{{Cite web |url=http://drdobbs.com/article/print?articleId=231001802&siteSectionName= |title=存档副本 |accessdate=2012-01-14 |archive-date=2011-07-19 |archive-url=https://web.archive.org/web/20110719103933/http://drdobbs.com/article/print?articleId=231001802&siteSectionName= |dead-url=no }}</ref>
* [[Coursera|Coursera]]把Scala作为服务器语言使用。<ref>{{Cite web |url=https://tech.coursera.org/blog/2014/02/18/why-we-love-scala-at-coursera/ |title=存档副本 |accessdate=2014-04-15 |archive-date=2014-04-01 |archive-url=https://web.archive.org/web/20140401215910/http://tech.coursera.org/blog/2014/02/18/why-we-love-scala-at-coursera/ |dead-url=no }}</ref>
* [[多鄰國|多鄰國]]，一個線上的免費語言學習平台，使用 Scala編寫。

== 特性 ==
=== 支持的编程范式 ===
==== 面向对象特性 ====
Scala是一种纯[[面向对象程序设计|面向对象]]的语言，每个值都是[[对象|对象]]。对象的数据类型以及行为由[[类_(计算机科学)|-{zh-hans:类; zh-hant:類別;}-]]和[[特质_(程序设计)|特质]]描述。类抽象机制的扩展有两种途径。一种途径是子类[[继承_(计算机科学)|继承]]，另一种途径是灵活的[[混入|混入]]机制。这两种途径能避免多重继承的种种问题。

==== 函数式编程 ====
Scala也是一种函数式语言，其函数也能当成值来使用。Scala提供了轻量级的语法用以定义匿名函数，支持高阶函数，允许嵌套多层函数，并支持[[柯里化|柯里化]]。Scala的'''case class'''及其内置的[[模式匹配|模式匹配]]相当于函数式编程语言中常用的{{link-en|代数类型|Algebraic type}}。

更进一步，程序员可以利用Scala的模式匹配，编写类似[[正则表达式|正则表达式]]的代码处理XML数据。在这些情形中，[[列表推导式|列表推导式]]功能对编写公式化查询非常有用。

由于JVM不支持[[尾调用|尾调用]]，Scala也不能完全支持尾调用-{zh-hans:优化; zh-hant:最佳化}-。不过，Scala编译器可以把某些简单的[[尾递归|尾递归]]-{zh-hans:优化; zh-hant:最佳化}-成循环。<ref>{{Cite web |url=http://blog.richdougherty.com/2009/04/tail-calls-tailrec-and-trampolines.html |title=Tail calls, @tailrec and trampolines |accessdate=2009-07-22 |archive-date=2011-08-12 |archive-url=https://web.archive.org/web/20110812160543/http://blog.richdougherty.com/2009/04/tail-calls-tailrec-and-trampolines.html |dead-url=no }}</ref>

以下代码以函数式风格实现了[[快速排序|快速排序]]算法，可以与[[Erlang|Erlang]]快速排序的例子做个比较：

<syntaxhighlight lang="scala">
def qsort(list: List[Int]): List[Int] = list match {
  case Nil => Nil
  case pivot :: tail =>
    val(smaller, rest) = tail.partition(_ < pivot)
    qsort(smaller) ::: pivot :: qsort(rest)
}
</syntaxhighlight>

=== 静态类型 ===
Scala具备[[类型系统|类型系统]]，通过编译时检查，保证代码的安全性和一致性。类型系统具体支持以下特性：
*[[泛型|泛型]]類別，
*[[协变和逆变_(计算机科学)|协变和逆变]]，
*{{link-en|标注|Annotation}}，
*类型参数的上下限约束，
*把类別和抽象类型作为对象成员，
*复合类型，
*引用自己时显式指定类型，
*视图，
*[[多型_(物件導向程式設計)|多态]]方法。

=== 扩展性 ===
Scala的设计秉承一项事实，即在实践中，某个领域特定的应用程序开发往往需要特定于该领域的语言扩展。Scala提供了许多独特的语言机制，可以以库的形式轻易无缝添加新的语言结构：

*任何方法可用作前缀或后缀操作符，
*可以根据预期类型自动构造[[闭包_(计算机科学)|闭包]]。

联合使用以上两个特性，使你可以定义新的语句而无须扩展语法也无须使用宏之类的元编程特性。

=== 并发性 ===
Scala使用[[演员模型|演员模型]]作为其并发模型，Actor是类似线程的实体，通过邮箱发收消息。Actor可以复用线程，因此可以在程序中可以使用数百万个Actor,而线程只能创建数千个。在2.10之后的版本中，使用Akka作为其默认Actor实现。<ref>{{Cite web |url=http://zh.scala-tour.com/#/using-actor |title=存档副本 |accessdate=2013-05-08 |archive-date=2013-06-07 |archive-url=https://web.archive.org/web/20130607043531/http://zh.scala-tour.com/#/using-actor |dead-url=no }}</ref>
以下代码是使用Actor模式的EchoServer实现
<syntaxhighlight lang="scala">
val echoServer = actor(new Act {
  become {
    case msg => println("echo " + msg)
  }
})
echoServer ! "hi"
</syntaxhighlight>
Actor模式可以简化并发编程，好利用多核CPU的能力。

== 使用Scala的框架 ==

[[Lift_(Web应用框架)|Lift]]是开源的Web应用框架，旨在提供类似[[Ruby_on_Rails|Ruby on Rails]]的东西。因为Lift使用了Scala，所以Lift应用程序可以使用目前所有的Java库和Web容器。

== [[Hello_World|Hello World]]范例 ==
以下是用Scala编写的典型Hello World程式：

<syntaxhighlight lang="scala">
 object HelloWorld extends App {
   println("Hello, world!")
 }
</syntaxhighlight>
或
<syntaxhighlight lang="scala">
 object HelloWorld {
   def main(args: Array[String]) {
     println("Hello, world!")
   }
 }
</syntaxhighlight>

请注意它与[[Java|Java]]的Hello World应用程序有哪些相似之处。一处显著区别在于，Scala版的Hello World程序不通过'''static'''关键字把'''main'''[[方法_(電腦科學)|方法]]标记为静态方法，而是用'''object'''关键字创建了[[单件|单件]]。

假设该程序保存为HelloWorld.scala文件，接下来可以通过以下命令行进行编译：

 > scalac HelloWorld.scala

若要运行：
 > scala -classpath . HelloWorld

这与编译和运行[[Java|Java]]的“Hello World”程序是不是很像呢？事实上，Scala的编译和执行模型与[[Java|Java]]是等效的，因而它也兼容于[[Java|Java]]的构建工具，比如[[Apache_Ant|Ant]].

直接使用Scala[[解释器|解释器]]也可以运行该程序，使用选项'''-i'''（从文件加载代码）和选项'''-e'''（若要运行额外的代码，就得实际执行HelloWorld对象的方法）即可：

 > scala -i HelloWorld.scala -e 'HelloWorld.main(null)'

== 测试 ==
以下是测试Scala代码的一些方式：
*[http://www.artima.com/scalatest/ ScalaTest]{{Wayback|url=http://www.artima.com/scalatest/ |date=20090722083651 }}
*[http://www.scalacheck.org/ ScalaCheck]{{Wayback|url=http://www.scalacheck.org/ |date=20140201213917 }}，类似于Haskell的[http://quviq.com/ QuickCheck]{{Wayback|url=http://quviq.com/ |date=20090830043351 }}的库
*[http://code.google.com/p/specs/ specs]{{Wayback|url=http://code.google.com/p/specs/ |date=20090927151609 }}，用于Scala的行为驱动的开发工具库
*[[JUnit|JUnit]]

内置的Scala库'''SUnit'''已经不赞成使用，已在2.8.0版中移除。

== 参考文献 ==
{{reflist|2}}

== 图书 ==
* [http://www.artima.com/shop/programming_in_scala Programming in Scala]{{Wayback|url=http://www.artima.com/shop/programming_in_scala |date=20090719003351 }}(ISBN 978-0-9815316-0-1)  - A comprehensive step-by-step guide by {{link-en|Martin Odersky|Martin Odersky}}, Lex Spoon, and Bill Venners.
* [https://web.archive.org/web/20090714112635/http://www.apress.com/book/view/9781430219897 Beginning Scala](ISBN 978-1-4302-1989-7) - A down–to–earth approach to teaching Scala by David Pollak.
* [https://web.archive.org/web/20101219213320/http://pragprog.com/titles/vsscala/programming-scala Programming Scala](ISBN 978-1-934356-31-9) - Creating highly scalable, highly concurrent applications on the Java platform by Venkat Subramaniam.
* [http://programming-scala.labs.oreilly.com/index.html Programming Scala (ebook)]{{Wayback|url=http://programming-scala.labs.oreilly.com/index.html |date=20100310121405 }}

== 外部链接 ==
* [http://www.scala-lang.org/ Scala website]{{Wayback|url=http://www.scala-lang.org/ |date=20100705234019 }}
* [http://www.scalachina.com/ Scalachina]{{Wayback|url=http://www.scalachina.com/ |date=20131224111911 }}
* [https://web.archive.org/web/20130808005731/http://www.scala-tour.com/ Scala Tour],开源Scala指南 
*[https://tw511.com/2/29/1078.html Scala教學]{{Wayback|url=https://tw511.com/2/29/1078.html |date=20200630231143 }}
{{-}}
{{程序設計語言}}

[[Category:函数式编程语言|Category:函数式编程语言]]
[[Category:面向对象的编程语言|Category:面向对象的编程语言]]
[[Category:静态类型编程语言|Category:静态类型编程语言]]
[[Category:模式匹配编程语言|Category:模式匹配编程语言]]
[[Category:JVM编程语言|Category:JVM编程语言]]
[[Category:.NET编程语言|Category:.NET编程语言]]
[[Category:JVM程式語言|Category:JVM程式語言]]
[[Category:2003年建立的程式語言|Category:2003年建立的程式語言]]