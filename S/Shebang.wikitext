{{noteTA
|G1=IT
|1=zh-hant:驚嘆號; zh-hans:叹号;
}}

在[[计算|计算]]领域中，'''Shebang'''（也称为'''Hashbang'''）是一个由[[井号|井号]]和[[叹号|叹号]]构成的字符序列''<code>#!</code>''，其出现在文本文件的第一行的前两个字符。
在文件中存在Shebang的情况下，[[类Unix操作系统|类Unix操作系统]]的[[程序载入器|程序载入器]]会分析Shebang后的内容，将这些内容作为解释器指令，并调用该指令，并将载有Shebang的文件路径作为该解释器的参数<ref name="absg_shabang">{{cite web|title=Advanced Bash Scripting Guide: Chapter 2. Starting Off With a Sha-Bang|url=http://tldp.org/LDP/abs/html/sha-bang.html|accessdate=2019-12-10|dead-url=no|archive-url=https://web.archive.org/web/20191210080709/http://tldp.org/LDP/abs/html/sha-bang.html|archive-date=2019-12-10}}</ref><ref>{{cite web|title=execve(2) - Linux man page|url=http://linux.die.net/man/2/execve|accessdate=2010-10-21|archive-date=2010-11-02|archive-url=https://web.archive.org/web/20101102030248/http://linux.die.net/man/2/execve|dead-url=no}}</ref>。

例如，以指令{{code|#!/bin/sh}}开头的文件在执行时会实际调用''/bin/sh''程序（通常是[[Bourne_shell|Bourne shell]]或兼容的[[Unix_shell|shell]]，例如[[bash|bash]]、[[Debian_Almquist_shell|dash]]等）来执行。这行内容也是[[shell脚本|shell脚本]]的标准起始行。

由于<code>#</code>符号在许多[[脚本语言|脚本语言]]中都是注释标识符，Shebang的内容会被这些脚本解释器自动忽略。
在<code>#</code>字符不是注释标识符的语言中，例如[[Scheme|Scheme]]，解释器也可能忽略以<code>#!</code>开头的首行内容，以提供与Shebang的兼容性<ref>{{cite web|url=http://srfi.schemers.org/srfi-22/|title=SRFI 22: Running Scheme Scripts on Unix|author=Martin Gasbichler and Michael Sperber|accessdate=2011-03-19|archive-date=2011-02-27|archive-url=https://web.archive.org/web/20110227192431/http://srfi.schemers.org/srfi-22/|dead-url=no}}</ref>。

"Shebang"或者说"Hashbang"的名字有时也被当做[[Ajax|Ajax]]应用程序中的[[分段标识符|分段标识符]]，用于浏览器的状态保存；Google网站站长中心提到，以[[叹号|叹号]]开头的分段标识符（即...url#!state...）会为Google的网页爬虫所索引。

== 语法 ==
Shebang这一语法特性由<code>#!</code>开头，即[[井号|井号]]和[[叹号|叹号]]。
在开头字符之后，可以有一个或数个空白字符，后接解释器的[[绝对路径|绝对路径]]，用于调用解释器。
在直接调用脚本时，调用者会利用Shebang提供的信息调用相应的解释器，从而使得脚本文件的调用方式与普通的可执行文件类似。

== 词源与历史 ==
Shebang的名字来自于[[升音符|SHArp]]和[[叹号|bang]]，或''haSH bang''的[[缩写|缩写]]，指代Shebang中<code>#!</code>两个符号的典型Unix名称。
Unix术语中，井号通常称为''sharp''，''hash''或''mesh''；而叹号则常常称为''bang''。也有看法认为，shebang名字中的''sh''来自于默认[[Unix_shell|shell]]————[[Bourne_shell|Bourne shell]]的名称，<code>sh</code>，因为常常使用shebang调用之。<ref>{{cite web |url=http://catb.org/jargon/html/S/shebang.html |title=Jargon File entry for shebang |publisher=Catb.org |date= |accessdate=2010-06-16 |archive-date=2011-06-04 |archive-url=https://web.archive.org/web/20110604153025/http://catb.org/jargon/html/S/shebang.html |dead-url=no }}</ref><ref name="absg_shabang" />

在2010年版的[http://tldp.org/LDP/abs/html/ Advanced bash scripting guide]{{Wayback|url=http://tldp.org/LDP/abs/html/ |date=20110408201305 }}（revision 6.2）中，shebang被称为"sha-bang"，同时提到"也写作she-bang或sh-bang"，但该文件中没有提到"shebang"这一形式。<ref name="absg_shabang" />

[[丹尼斯·里奇|丹尼斯·里奇]]在被问及他会如何称呼这一特性时，他答道：

{{quote|发信人："Ritchie, Dennis M (Dennis)** CTR **" <dmr@[redacted]>

收信人：<[redacted]@talisman.org>

日期：Thu, 19 Nov 2009 18:37:37 -0600

主题：RE: What do -you- call your #!<something> line?

我不记得我们曾经给它取过一个适当的名字。导入这一特性已经是相当晚了--我觉得我是从关于伯克利Unix的UCB会议上的某人那里得到的这一灵感；我可能是首先实现它的人之一，但这个创意是来自于别人的。

至于它的名字：可能是类似于"hash-bang"的英国风描述性文字，但我没有在任何场合使用类似宠物的名字来描述它。

此致,

Dennis
}}

== 例子 ==
下面列出了一些典型的 shebang 解释器指令：
* <code>#!/bin/sh</code>—使用<code>sh</code>，即[[Bourne_shell|Bourne shell]]或其它兼容shell执行脚本
* <code>#!/bin/csh</code>—使用<code>csh</code>，即[[C_shell|C shell]]执行
* <code>#!/usr/bin/perl -w</code>—使用带警告的[[Perl|Perl]]执行
* <code>#!/usr/bin/python -O</code>—使用具有代码优化的[[Python|Python]]执行
* <code>#!/usr/bin/php</code>—使用[[PHP|PHP]]的命令行解释器执行

在许多系统上，<code>/bin/sh</code>[[软链接|软链接]]或[[硬链接|硬链接]]到[[Bash|Bash]]，而<code>/bin/csh</code>则链接到[[tcsh|tcsh]]，因此设定前面的解释器实际上是运行的与之兼容的，或改进的版本。

Shebang行也可以包含需要传递到解释器的特定选项（见下文的Perl例子）。然而，选项传递的方式随实现的不同而不同。

== 用途 ==
解释器指令允许脚本和数据文件充当系统命令，无需在调用时由用户指定解释器，从而对用户和其它程序隐藏其实现细节。

假设<code>/usr/local/bin/foo</code>中有一以下行开头的[[Bourne_shell|Bourne shell]]脚本
<code>#!/bin/sh -x</code>
而它被如此调用（"$"是命令提示符）
$ <code>foo bar</code>
该命令的输出等同于
$ <code>/bin/sh -x /usr/local/bin/foo bar</code>
除了argv[0]被设定为脚本的文件名，而非解释器的文件名外。

由于<code>sh</code>从其命令行指定的文件中读取命令，上面的命令就会执行<code>/usr/local/bin/foo</code>中的命令，同时，将<code>bar</code>作为<code>foo</code>命令的参数<code>$1</code>。

由于shebang开头的井号也是[[Bourne_shell|Bourne shell]]和许多其它解释性语言的注释符，因此在这些语言中，解释器指令本身会被解释器认为是单纯的注释而跳过。
然而，并不是每一种解释器都会自动忽略shebang行，例如对于下面的脚本，<code>cat</code>会把文件中的两行都输出到[[标准输出|标准输出]]中。

<syntaxhighlight lang="shell" line="1o">

#!/bin/cat
Hello world!

</syntaxhighlight>

使用<code>#!/usr/bin/env 脚本解释器名称</code>是一种常见的在不同平台上都能正确找到解释器的办法。

Linux的操作系统的文件一般是UTF-8编码。如果脚本文件是以UTF-8的<code>[[字节顺序标记|BOM]]（0xEF 0xBB 0xBF）</code>开头的，那么exec函数将不会启动shebang指定的解释器来执行该脚本。因此，Linux的脚本文件不应在文件开头包含UTF-8的[[字节顺序标记|BOM]]。

== 参见 ==
*[[CrunchBang_Linux|CrunchBang Linux]]，一种GNU/Linux发行版
*[[文件关联|文件关联]]

== 参考文献 ==
{{Reflist}}

== 外部链接 ==
*[http://www.in-ulm.de/~mascheck/various/shebang/ Details about the shebang mechanism on various Unix flavours]{{Wayback|url=http://www.in-ulm.de/~mascheck/various/shebang/ |date=20110525021314 }}
*[http://homepages.cwi.nl/~aeb/std/hashexclam.html #! - the Unix truth as far as I know it]{{Wayback|url=http://homepages.cwi.nl/~aeb/std/hashexclam.html |date=20110605012903 }}（a more generic approach）
*[http://foldoc.org/index.cgi?query=shebang&action=Search FOLDOC shebang article]

[[Category:Unix|Category:Unix]]