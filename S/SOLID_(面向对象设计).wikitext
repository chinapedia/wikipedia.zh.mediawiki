{{NoteTA|G1=IT}}
在[[程序设计|程序设计]]领域， '''SOLID'''（'''单一功能、开闭原则、里氏替换、接口隔离'''以及'''依赖反转'''）是由[[Robert_C._Martin|罗伯特·C·马丁]]在21世纪早期<ref name="metz-presentation-2009">[http://goruco2009.confreaks.com/30-may-2009-15-40-solid-object-oriented-design-sandi-metz.html “SOLID Object-Oriented Design”] {{Wayback|url=http://goruco2009.confreaks.com/30-may-2009-15-40-solid-object-oriented-design-sandi-metz.html |date=20100207164329 }}, Sandi Metz (Duke University), Talk given at the 2009 Gotham [[Ruby|Ruby]] Conference in May, 2009. Last verified 2009-01-15.</ref> 引入的[[记忆术|记忆术]][[首字母缩略字|首字母缩略字]]<ref name="ub-old-web-solid">[http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod “Principles Of OOD”] {{Wayback|url=http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod |date=20161025223509 }}, [[Robert_C._Martin|Robert C. Martin]] (“Uncle Bob”), butunclebob.com, Last verified 2009-01-14. (Note the “first five principles”, though the acronym is not used in this article.)  Dates back to at least 2003.</ref><ref name="ub-solid">[http://blog.objectmentor.com/articles/2009/02/12/getting-a-solid-start “Getting a SOLID start.”] {{Wayback|url=http://blog.objectmentor.com/articles/2009/02/12/getting-a-solid-start |date=20090215230911 }}, [[Robert_C._Martin|Robert C. Martin]] (“Uncle Bob”), objectmentor.com.  Last verified 2009-01-14.</ref>，指代了[[面向对象编程|面向对象编程]]和[[面向对象设计|面向对象设计]]的五个基本原则。当这些原则被一起应用时，它们使得一个[[程序员|程序员]]开发一个容易进行[[软件维护|软件维护]]和扩展的系统变得更加可能。<ref name="metz-presentation-2009"/> SOLID所包含的原则是通过引发程式設計者进行软件[[源代码|源代码]]的[[代码重构|代码重构]]进行软件的[[代码异味|代码异味]]清扫，从而使得软件清晰可读以及可扩展时可以应用的指南。SOLID被典型的应用在[[测试驱动开发|测试驱动开发]]上，并且是[[敏捷开发|敏捷开发]]以及[[adaptive_programming|自适应软件开发]]的基本原则的重要组成部分。<ref name="metz-presentation-2009"/><ref name="schmitz-presentation-2009">[http://nonprofits.accesscomm.ca/springseminar/nug/Introducing_SOLID.ppt “Introducing SOLID Object-Oriented Design Principles and Microsoft Unity”]{{dead link|date=2017年11月 |bot=InternetArchiveBot |fix-attempted=yes }}, Uwe Schmitz, Presentation given at the Regina .NET User Group in May, 2009. Last verified 2009-01-14.</ref>

==概述==

{| class="wikitable" style="width: auto; font-size: 95%; table-layout: fixed; line-height:1.25; margin-left: auto; margin-right: auto;"
|-
! 首字母 !! 指代 !! 概念
|-
! S 
| [[单一功能原则|单一功能原则]] 
| 认为“[[对象_(计算机科学)|对象]]应该仅具有一种单一功能”的概念。
|-
! O 
| [[开闭原则|开闭原则]] 
| 认为“软件应该是对于扩展开放的，但是对于修改封闭的”的概念。
|-
! L 
| [[里氏替换原则|里氏替换原则]] 
| 认为“程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的”的概念。
参考[[契约式设计|契约式设计]]。
|-
! I 
| [[接口隔离原则|接口隔离原则]] 
| 认为“多个特定客户端接口要好于一个宽泛用途的接口”<ref name="martin-design-principles">[http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf “Design Principles and Design Patterns”] {{Wayback|url=http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf |date=20150906155800 }}, [[Robert_C._Martin|Robert C. Martin]] (“Uncle Bob”), objectmentor.com.  Last verified 2009-01-14.</ref> 的概念。
|-
! D 
| [[依赖反转原则|依赖反转原则]] 
| 认为一个方法应该遵从“依赖于抽象而不是一个实例”<ref name="martin-design-principles"/> 的概念。<br />[[依赖注入|依赖注入]]是该原则的一种实现方式。
|}

==参考==
===基本概念以及相关主题===
* [[自适应软件开发|自适应软件开发]]<!--Adaptive Software Development-->
* [[敏捷软件开发|敏捷软件开发]]
* [[代码复用|代码复用]]
* [[程序设计|程序设计]]
* [[面向对象程序设计|面向对象程序设计]]
** [[继承_(计算机科学)|继承 (计算机科学)]]
* [[奥卡姆剃刀|奥卡姆剃刀]]

===设计和开发原则===
* [[不要重复你自己|不要重复你自己]]
* [[GRASP_(面向对象设计)|GRASP (面向对象设计)]]
* [[KISS原则|KISS原则]]

==引用==
<references/>

[[Category:軟體設計|Category:軟體設計]]
[[Category:面向对象的程序设计|Category:面向对象的程序设计]]