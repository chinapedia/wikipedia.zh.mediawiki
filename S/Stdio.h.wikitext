{{lowercase|title=stdio.h}}
{{C_Standard_library}}

<code><nowiki>stdio.h</nowiki></code>是[[C语言|C语言]]为输入输出提供的[[C标准库|标准库]][[头文件|头文件]]，其前身是[[迈克·莱斯克|迈克·莱斯克]]20世纪70年代编写的“可移植输入输出程序库”<ref>{{cite book |last1=Kernighan |first1=Brian |last2=Pike |first2=Rob |title=The UNIX Programming Environment |url=https://archive.org/details/unixprogramminge0000kern |publisher=[[Prentice_Hall|Prentice Hall]] |location=Englewood Cliffs |year=1984 |page=[https://archive.org/details/unixprogramminge0000kern/page/200 200]}}</ref>。

C语言中的所有输入和输出都由抽象的字节流来完成，对文件的访问也通过关联的输入或输出流进行。这一模式随UNIX操作系统而普及，在现代操作系统和编程语言中仍被广泛应用。

==头文件内容==
===类型===
{| class="wikitable"
|-
!标识符!!说明
|-
|<code>size_t</code>||用于表示大小的数据类型
|-
|<code>FILE</code>||记录流的信息的数据结构
|-
|<code>fpos_t</code>||用于在文件中定位的数据类型
|}
===宏===
{| class="wikitable"
|-
!标识符!!说明
|-
|<code>NULL</code>||空指针
|-
|<code>_IOFBF</code>||rowspan="3"|用于控制缓冲方式的参数
|-
|<code>_IOLBF</code>
|-
|<code>_IONBF</code>
|-
|<code>BUFSIZ</code>||<code>setbuf</code>函数使用的缓冲区大小
|-
|<code>EOF</code>||文件结尾标志
|-
|<code>FOPEN_MAX</code>||实现保证能够同时打开的文件数量
|-
|<code>FILENAME_MAX</code>||实现保证支持的最长文件名的字符数
|-
|<code>L_tmpnam</code>||存放<code>tmpnam</code>函数生成的临时文件名的<code>char</code>数组的大小
|-
|<code>SEEK_CUR</code>||rowspan="3"|用于控制文件定位方式的参数
|-
|<code>SEEK_END</code>
|-
|<code>SEEK_SET</code>
|-
||<code>TMP_MAX</code>||实现保证能生成的临时文件名个数
|}

===标准流===
{| class="wikitable"
|-
!标识符!!说明
|-
|<code>stderr</code>||标准错误流
|-
|<code>stdin</code>||标准输入流
|-
|<code>stdout</code>||标准输出流
|}
===函数===
{| class="wikitable"
|-
!类型!!函数原型
|-
|rowspan="10"|文件操作||<code>int remove(const char *filename);</code>
|-
|<code>int rename(const char *old, const char *new);</code>
|-
|<code>FILE *tmpfile(void);</code>
|-
|<code>char *tmpnam(char *s);</code>
|-
|<code>int fclose(FILE *stream);</code>
|-
|<code>int fflush(FILE *stream);</code>
|-
|<code>FILE *fopen(const char * restrict filename, const char * restrict mode);</code>
|-
|<code>FILE *freopen(const char * restrict filename, const char * restrict mode, FILE * restrict stream);</code>
|-
|<code>void setbuf(FILE * restrict stream, char * restrict buf);</code>
|-
|<code>int setvbuf(FILE * restrict stream, char * restrict buf, int mode, size_t size);</code>
|-
|rowspan="14"|格式化输入输出||<code>int fprintf(FILE * restrict stream, const char * restrict format, ...);</code>
|-
|<code>int fscanf(FILE * restrict stream, const char * restrict format, ...);</code>
|-
|<code>int printf(const char * restrict format, ...);</code>
|-
|<code>int scanf(const char * restrict format, ...);</code>
|-
|<code>int snprintf(char * restrict s, size_t n, const char * restrict format, ...);</code>
|-
|<code>int sprintf(char * restrict s, const char * restrict format, ...);</code>
|-
|<code>int sscanf(const char * restrict s, const char * restrict format, ...);</code>
|-
|<code>int vfprintf(FILE * restrict stream, const char * restrict format, va_list arg);</code>
|-
|<code>int vfscanf(FILE * restrict stream, const char * restrict format, va_list arg);</code>
|-
|<code>int vprintf(const char * restrict format, va_list arg);</code>
|-
|<code>int vscanf(const char * restrict format, va_list arg);</code>
|-
|<code>int vsnprintf(char * restrict s, size_t n, const char * restrict format, va_list arg);</code>
|-
|<code>int vsprintf(char * restrict s, const char * restrict format, va_list arg);</code>
|-
|<code>int vsscanf(const char * restrict s, const char * restrict format, va_list arg);</code>
|-
|rowspan="10"|字符输入输出||<code>int fgetc(FILE *stream);</code>
|-
|<code>char *fgets(char * restrict s, int n, FILE * restrict stream);</code>
|-
|<code>int fputc(int c, FILE *stream);</code>
|-
|<code>int fputs(const char * restrict s, FILE * restrict stream);</code>
|-
|<code>int getc(FILE *stream);</code>
|-
|<code>int getchar(void);</code>
|-
|<code>int putc(int c, FILE *stream);</code>
|-
|<code>int putchar(int c);</code>
|-
|<code>int puts(const char *s);</code>
|-
|<code>int ungetc(int c, FILE *stream);</code>
|-
|rowspan="2"|直接输入输出||<code>size_t fread(void * restrict ptr, size_t size, size_t nmemb, FILE * restrict stream);</code>
|-
|<code>size_t fwrite(const void * restrict ptr, size_t size, size_t nmemb, FILE * restrict stream);</code>
|-
|rowspan="5"|文件内定位||<code>int fgetpos(FILE * restrict stream, fpos_t * restrict pos);</code>
|-
|<code>int fseek(FILE *stream, long int offset, int whence);</code>
|-
|<code>int fsetpos(FILE *stream, const fpos_t *pos);</code>
|-
|<code>long int ftell(FILE *stream);</code>
|-
|<code>void rewind(FILE *stream);</code>
|-
|rowspan="4"|错误处理||<code>void clearerr(FILE *stream);</code>
|-
|<code>int feof(FILE *stream);</code>
|-
|<code>int ferror(FILE *stream);</code>
|-
|<code>void perror(const char *s);</code>
|}
==相关库==
[[C++|C++]]引入了<code>[[iostream|iostream]]</code>进行输入输出，但仍保留了<code>stdio.h</code>的功能。

[[贝尔实验室|贝尔实验室]]开发了Sfio库，旨在弥补<code>stdio.h</code>在功能、速度和安全性上的不足。<ref>{{cite conference |title=SFIO: Safe/Fast String/File IO |first1=David G. |last1=Korn |first2=Kiem-Phong |last2=Vo |conference=Proc. Summer USENIX Conf. |year=1991}}</ref>
==参见==
*[[I/O|I/O]]
*[[wchar.h|wchar.h]]
== 参考文献 ==
{{Reflist}}
{{Refbegin}}
*{{cite book|author=ISO/IEC JTC 1/SC 22|title=ISO/IEC 9899:2018, Information technology — Programming languages — C|url=https://www.iso.org/standard/74528.html|access-date=2018-08-19|archive-date=2018-08-10|archive-url=https://web.archive.org/web/20180810010929/https://www.iso.org/standard/74528.html|dead-url=yes}}
{{Refend}}
==外部链接==
*[http://zh.cppreference.com/w/c/io C语言输入/输出参考手册]{{Wayback|url=http://zh.cppreference.com/w/c/io |date=20180219090533 }}

[[Category:C标准库头文件|Category:C标准库头文件]]
[[Category:输入/输出|Category:输入/输出]]