{{Infobox programming language
|name = SAC
|logo = 
|paradigm = [[阵列编程|阵列式]], [[函数式编程|函数式]]
|year = {{start date and age|1994}}
|designer = Sven-Bodo Scholz, Clemens Grelck 等
|developer = 
|latest release version = v1.3.3-581-1
|latest release date = {{start date and age|2021|04|08}}
|typing = [[静态类型|静态]], [[强类型|强类型]]
|implementations =
|dialects = 
|influenced_by = [[APL语言|APL]], [[SISAL|SISAL]], [[C语言|C]]
|influenced = 
|operating_system = [[POSIX|POSIX兼容]] [[UNIX|UNIX]]
|license = 专有[https://github.com/SacBase/Stdlib/blob/master/LICENSE.txt]
|website = http://www.sac-home.org
}}
'''SAC'''（[[单赋值|Single Assignment]] C）是一门严格的[[纯函数式编程|纯函数式编程]]语言，以满足[[数值计算|数值计算]]领域的需求为主要目的。怎样实现对多维数组的高效计算是SAC的核心部分。效率在程序设计领域可以有两方面的理解。一方面是提供高级的数组运算操作，以加快开发程序，另一方面是在某种模式下优化编译程序，以减少其所需的运行时间和存储容量。作为一门成功的计算机语言，必须满足第二个条件。

为了能够编译出高效的可执行代码，某些对数值计算不重要的函数式语言的特征（到目前为止）还不被SAC支持，比如[[高阶函数|高阶函数]]，[[多态_(计算机科学)|多态]]，以及[[惰性求值|惰性求值]]。而像[[Haskell|Haskell]]、[[Clean_(编程语言)|Clean]]、[[Miranda_(编程语言)|Miranda]]或者[[ML语言|ML]]却拥有这些特征。

== 参见 ==
* [[SISAL|SISAL]]语言
* {{en-link|SA-C (编程语言)|SA-C (programming language)}}

== 外部链接 ==
* [http://www.sac-home.org/ SAC主页]{{Wayback|url=http://www.sac-home.org/ |date=20060924095823 }}

{{程序设计语言|Logo}}

[[Category:阵列编程语言|Category:阵列编程语言]]
[[Category:C语言家族|Category:C语言家族]]