{{補充來源|time=2014-09-21T03:31:21+00:00}}
{{NoteTA
|G1 = IT
|1 = 夾帶=>zh-cn:注入; 夾帶=>zh-sg:注入; 夾帶=>zh-my:注入;
}}
{{各地中文名
|cn = SQL注入
|tw = SQL注入、SQL隱碼、SQL注碼<ref>{{URL|http://terms.naer.edu.tw/detail/2425092/|國家教育研究院雙語詞彙、學術名詞暨辭書資訊網}}</ref>
}}
'''SQL注入'''（{{lang-en|SQL injection}}），也稱'''SQL隱碼'''或'''SQL注碼'''，是發生於應用程式與資料庫層的[[安全漏洞|安全漏洞]]。簡而言之，是在輸入的字串之中夾帶[[SQL|SQL]]指令，在設計不良的[[计算机程序|程式]]當中忽略了字元檢查，那麼這些夾帶進去的惡意指令就會被[[資料庫|資料庫]][[伺服器|伺服器]]誤認為是正常的SQL指令而執行，因此遭到破壞或是入侵。<ref>{{cite web | url = https://technet.microsoft.com/en-us/library/ms161953%28v=SQL.105%29.aspx | title = SQL Injection | accessdate = 2013-08-04 | author = Microsoft | quote = SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. Any procedure that constructs SQL statements should be reviewed for injection vulnerabilities because SQLi Server will execute all syntactically valid queries that it receives. Even parameterized data can be manipulated by a skilled and determined attacker. | deadurl = no | archiveurl = https://web.archive.org/web/20130802094425/http://technet.microsoft.com/en-us/library/ms161953(v=sql.105).aspx | archivedate = 2013-08-02 }}</ref>

有部份人認為SQL注入是只針對[[Microsoft_SQL_Server|Microsoft SQL Server]]，但只要是支援處理SQL指令的資料庫伺服器，都有可能受到此種手法的攻擊。

== 原因 ==
[[File:Why_your_extension_will_not_be_enabled_on_Wikimedia_wikis_in_its_current_state_and_what_you_can_do_about_it.pdf|page=4]]上的一幅漫画。该学生的姓名为“{{lang|en|Robert'); DROP TABLE students;--}}”，导致students表被删除。<ref>{{Cite web |url=https://xkcd.com/327/ |title=存档副本 |accessdate=2016-12-16 |archive-date=2016-12-17 |archive-url=https://web.archive.org/web/20161217113755/http://www.xkcd.com/327/ |dead-url=no }}</ref>]]
在應用程式中若有下列狀況，則可能應用程式正暴露在SQL Injection的高風險情況下：

# 在應用程式中使用字串聯結方式或聯合查詢方式組合SQL指令。
# 在應用程式連結資料庫時使用權限過大的帳戶（例如很多開發人員都喜歡用最高權限的系統管理員帳戶（如常见的root，sa等）連接資料庫）。
# 在資料庫中開放了不必要但權力過大的功能（例如在[[Microsoft_SQL_Server|Microsoft SQL Server]]資料庫中的xp_cmdshell延伸預存程序或是OLE Automation預存程序等）
# 太過於信任使用者所輸入的資料，未限制輸入的特殊字元，以及未對使用者輸入的資料做潛在指令的檢查。

== 作用原理 ==
# SQL命令可查詢、插入、更新、刪除等，命令的串接。而以分號字元為不同命令的區別。（原本的作用是用於SubQuery或作為查詢、插入、更新、刪除……等的條件式）
# SQL命令對於傳入的字串參數是用單引號字元所包起來。（但連續2個單引號字元，在SQL資料庫中，則視為字串中的一個單引號字元）
# SQL命令中，可以夾帶註解（連續2個減號字元 <code>--</code> 後的文字為註解，或“<code>/*</code>”與“<code>*/</code>”所包起來的文字為注解）
# 因此，如果在組合SQL的命令字串時，未針對單引號字元作跳脫處理的話，將導致該字元變數在填入命令字串時，被惡意竄改原本的SQL語法的作用。

== 例子 ==
某個網站的登入驗證的SQL查詢代碼為
<syntaxhighlight lang="sql">strSQL = "SELECT * FROM users WHERE (name = '" + userName + "') and (pw = '"+ passWord +"');"</syntaxhighlight>
惡意填入
<syntaxhighlight lang="sql">userName = "1' OR '1'='1";</syntaxhighlight>
與
<syntaxhighlight lang="sql">passWord = "1' OR '1'='1";</syntaxhighlight>
時，將導致原本的SQL字串被填為
<syntaxhighlight lang="sql">strSQL = "SELECT * FROM users WHERE (name = '1' OR '1'='1') and (pw = '1' OR '1'='1');"</syntaxhighlight>
也就是實際上运行的SQL命令會變成下面這樣的
<syntaxhighlight lang="sql">strSQL = "SELECT * FROM users;"</syntaxhighlight>
因此達到無帳號密碼，亦可登入網站。所以SQL注入被俗稱為駭客的填空遊戲。

== 可能造成的傷害 ==
# 資料表中的資料外洩，例如企業及個人機密資料，帳戶資料，密碼等。
# 資料結構被駭客探知，得以做進一步攻擊（例如SELECT * FROM sys.tables）。
# 資料庫伺服器被攻擊，系統管理員帳戶被竄改（例如ALTER LOGIN sa WITH PASSWORD='xxxxxx'）。
# 取得系統較高權限後，有可能得以在網頁加入惡意連結、[[惡意代碼|惡意代碼]]以及[[Phishing|Phishing]]等。
# 經由資料庫伺服器提供的作業系統支援，讓駭客得以修改或控制作業系統（例如xp_cmdshell "net stop iisadmin"可停止伺服器的IIS服務）。
# 攻击者利用数据库提供的各种功能操纵文件系统，写入Webshell，最终导致攻击者攻陷系统
# 破壞硬碟資料，癱瘓全系統（例如xp_cmdshell "FORMAT C:"）。
# 取得系統最高權限後，可針對企業內部的任一管理系統做大規模破壞，甚至讓其企業倒閉。
# 網站首頁被竄改，导致声誉受到损害。

== 避免的方法 ==
# 在設計應用程式時，完全使用[[參數化查詢|參數化查詢]]（Parameterized Query）來設計資料存取功能。
# 在組合SQL字串時，先針對所傳入的參數加入其他字元（將單引號字元前加上跳脫字元）。
# 如果使用[[PHP|PHP]]開發網頁程式的話，需加入跳脫字元之功能（自動將所有的網頁傳入參數，將單引號字元前加上跳脫字元）。
# 使用php開發，可寫入html特殊函式，可正確阻擋[[XSS|XSS]]攻擊。
# 其他，使用其他更安全的方式連接SQL資料庫。例如已修正過SQL注入問題的資料庫連接元件，例如[[ASP.NET|ASP.NET]]的SqlDataSource物件或是 [[语言集成查询|LINQ]] to SQL。
# 增強{{tsl|en|Web_application_firewall||WAF}}的防禦力

== 歷史 ==

有關SQL注入的首次公開討論始於1998年左右。<ref>{{cite web |title= How Was SQL Injection Discovered? The researcher once known as Rain Forrest Puppy explains how he discovered the first SQL injection more than 15 years ago. |author= Sean Michael Kerner |date= November 25, 2013 |url= http://www.esecurityplanet.com/network-security/how-was-sql-injection-discovered.html |archive-url= https://web.archive.org/web/20140318224250/http://www.esecurityplanet.com/network-security/how-was-sql-injection-discovered.html |archive-date= 2014-03-18 |accessdate= 2020-05-29 |dead-url= no }}</ref>例如，{{tsl|en|Phrack Magazine|}}中的1998年文章。<ref>{{cite journal |title= NT Web Technology Vulnerabilities |author= Jeff Forristal (signing as rain.forest.puppy) |journal= {{tsl|en|Phrack Magazine|}} |volume= 8 |issue= 54 (article 8) |date= Dec 25, 1998 |url= http://www.phrack.com/issues.html?issue=54&id=8#article |archive-url= https://web.archive.org/web/20140319065810/http://www.phrack.com/issues.html?issue=54&id=8#article |archive-date= 2014-03-19 |access-date= 2020-05-29 |dead-url= no }}</ref>

== 参考文献 ==
{{reflist}}

== 外部連結 ==
* [https://web.archive.org/web/20120429034040/http://security.ccidnet.com/art/1099/20060918/902693_1.html 賽迪網-存儲過程之外：SQL注入深入防禦]{{zh-tw}}
* [http://msdn2.microsoft.com/zh-tw/library/ms161953.aspx MSDN 的SQL資料注入概述]{{Wayback|url=http://msdn2.microsoft.com/zh-tw/library/ms161953.aspx |date=20070311195615 }}{{zh-tw}}
* [http://msdn.microsoft.com/zh-cn/library/ms161953.aspx MSDN 的 SQL 注入概述]{{Wayback|url=http://msdn.microsoft.com/zh-cn/library/ms161953.aspx |date=20120426185252 }}{{zh-cn}}
* [http://www.4guysfromrolla.com/ASPScripts/PrintPage.asp?REF=%2Fwebtech%2F061902-1.shtml Protecting yourself from SQL Injection Attacks]{{Wayback|url=http://www.4guysfromrolla.com/ASPScripts/PrintPage.asp?REF=%2Fwebtech%2F061902-1.shtml |date=20061017114303 }} by Ross Overstreet{{en}}
* "[http://citeseer.ist.psu.edu/641328.html SQLrand: Preventing SQL Injection Attacks]{{Wayback|url=http://citeseer.ist.psu.edu/641328.html |date=20061104041426 }}" by Stephen W. Boyd and Angelos D. Keromytis{{en}}
* "[http://www.cgisecurity.com/questions/sql.shtml What is SQL Injection?]{{Wayback|url=http://www.cgisecurity.com/questions/sql.shtml |date=20060826023336 }}" By CGISecurity.com{{en}}
* "[http://www.cgisecurity.com/questions/blindsql.shtml What is Blind SQL Injection?]{{Wayback|url=http://www.cgisecurity.com/questions/blindsql.shtml |date=20060826200237 }}" By CGISecurity.com{{en}}
* [https://web.archive.org/web/20060717225700/http://www.windowsitpro.com/Article/ArticleID/46379/46379.html Avoid SQL injection]{{en}}
* [[b:en:Programming:PHP:SQL_Injection|PHP and SQL Injections]]{{en}}
* [http://www.sandaru1.com/?p=10 SQL Injection in Login Forms]{{Wayback|url=http://www.sandaru1.com/?p=10 |date=20061028200513 }}{{en}}
* [https://xkcd.com/327/ xkcd上以SQL注入为主题的漫画]{{Wayback|url=https://xkcd.com/327/ |date=20161217113755 }}{{en}}

{{Database}}
{{Hacking}}

[[Category:数据管理|Category:数据管理]]
[[Category:SQL|Category:SQL]]
[[Category:网络安全|Category:网络安全]]
[[Category:注入漏洞|Category:注入漏洞]]