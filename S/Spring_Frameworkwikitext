{{expand language|1=en|page=Spring Framework|time=2019-06-18T00:51:29+00:00}}
{{noteTA|G1=IT
|T = zh-hans:Spring框架;zh-hant:Spring Framework;zh-tw:Spring Framework;
|1=zh-hans:拓展; zh-hant:擴充;
|2=zh-hans:支持; zh-hant:支援;
|3=zh-hans:社区; zh-hant:社群;
}}
{{Infobox software
| name                   = Spring Framework
| logo                   = Spring Framework Logo 2018.svg
| screenshot             = 
| caption                =
| developer              = [[Pivotal|Pivotal]]
| released               = {{Start date and age|2002|10|01|df=yes}}
| discontinued           = 
| latest release version = {{LSR/wikidata}}
| operating system       = [[跨平台|跨平台]]
| platform               = [[JVM|JVM]]
| programming language   = [[Java|Java]]
| genre                  = Application framework
| license                = [[Apache_License|Apache License]] 2.0
}}

'''Spring框架'''是 [[Java|Java]] 平台的一个[[开放源代码|开源]]的全栈（[[全栈|full-stack]]）[[软件框架|应用程序框架]]和[[控制反转|控制反转]]容器实现，一般被直接称为 Spring。该框架的一些核心功能理论上可用于任何 Java 应用，但 Spring 还为基于[[Jakarta_EE|Java企业版]]平台构建的 Web 应用提供了大量的拓展支持。Spring 没有直接实现任何的编程模型，但它已经在 Java 社区中广为流行，基本上完全代替了[[EJB|企业级JavaBeans]]（EJB）模型。

Spring框架以 [[Apache_License_2.0|Apache License 2.0]] 开源许可协议的形式发布，该框架最初由 Rod Johnson 以及 Juergen Hoeller 等人开发。

==版本历史==
第一版由 {{link-en|Rod Johnson|Rod Johnson (programmer)}} 开发，并在2002年10月发布在 ''Expert One-on-One J2EE Design and Development'' 一书中。2003年6月，Spring Framework 第一次发布在 [[Apache许可证|Apache 2.0 许可证]]下。2004年3月，发布了里程碑的版本1.0，2004年9月以及2005年3月，又发布了新的里程碑版本。2006年，Spring Framework 获得了 [[Jolt_Awards|Jolt 生产力奖]] 和 [[JAX_创新奖|JAX 创新奖]]。<ref>{{Cite web |url=http://www.ddj.com/architect/187900423?pgno=10 |title=Jolt winners 2006 |accessdate=2017-03-30 |archive-date=2008-12-29 |archive-url=https://web.archive.org/web/20081229071955/http://www.ddj.com/architect/187900423?pgno=10 |dead-url=no }}</ref><ref>{{Cite web |url=http://jax-award.de/jax_award06/gewinner_de.php |title=JAX Innovation Award Gewinner 2006 |accessdate=2017-03-30 |archive-date=2009-08-17 |archive-url=https://web.archive.org/web/20090817202514/http://jax-award.de/jax_award06/gewinner_de.php |dead-url=no }}</ref>

2006年10月发布Spring 2.0，2007年11月 Spring 2.5，2009年12月 Spring 3.0，2011年 Spring 3.1，2013年11月 Spring 3.2.5，2013年12月发布了4.0版本。<ref>{{cite web |url=https://spring.io/blog/2013/11/07/spring-framework-3-2-5-released |date=7 Nov 2013 |title=Spring Framework 3.2.5 Released |website=Official Spring website |access-date=16 October 2016 |archive-date=2016-12-03 |archive-url=https://web.archive.org/web/20161203131616/https://spring.io/blog/2013/11/07/spring-framework-3-2-5-released |dead-url=no }}</ref>值得注意的是，Spring 4.0 版本中增加了对 [[Java_SE|Java SE]] 8, [[Groovy|Groovy]] 2, [[Java_EE|Java EE]] 7 的一些方面以及 [[WebSocket|WebSocket]] 的支持。

2017年9月 Spring Framework 正式发布了 5.0 版本，此版本引入了 Spring WebFlux，一个高性能、响应式、异步的 Web 框架。Spring 5.0 重点加强了对函数式编程、[[响应式编程|响应式程序设计]]（reactive programming）的支持能力，是一个非常大的进步。

== 核心功能模块 ==

* 强大的、基于 [[JavaBeans|JavaBeans]] 的、采用[[控制反转|控制反转]]（Inversion of Control，IoC）原则的 配置管理，使得应用程序的组建更加简易快捷。

* 一个可用于 [[Java_EE|Java EE]] 等运行环境的核心 [[Enterprise_Java_Beans|Bean]][[虚拟工厂模式|工厂]]。

* 数据库[[事务处理|事务]]的一般化抽象层，允许声明式（Declarative）事务管理器，简化事务的划分使之与底层无关。

* 内建的针对 [[Java事务API|JTA]] 和单个 [[Java_Database_Connectivity|JDBC]] 数据源的一般化策略，使Spring的事务支持不要求 [[Java_EE|Java EE]] 环境，这与一般的 JTA 或者 [[EJB|EJB]] CMT 相反。

* JDBC 抽象层提供了有针对性的异常等级（不再从 SQL 异常中提取原始代码），简化了错误处理，大大减少了程序员的编码量。再次利用 JDBC 时，你无需再写出另一个'终止'（finally）模块。并且面向 JDBC 的异常与 Spring 通用[[数据访问对象|数据访问对象]]（Data Access Object）异常等级相一致。

* 以资源容器，[[DAO|DAO]] 实现和事务策略等形式与 [[Hibernate|Hibernate]]，[[Java_Data_Objects|JDO]] 和 [[MyBatis|MyBatis]] 、[[SQL_Maps|SQL Maps]] 集成。利用控制反转机制全面解决了许多典型的 Hibernate 集成问题。所有这些全部遵从 Spring 通用事务处理和通用数据访问对象异常等级规范。

* 灵活的基于核心 Spring 功能的 [[模型-视图-程序控制|MVC]] [[网页应用程序|网页应用程序]]框架。开发者通过策略接口将拥有对该框架的高度控制，因而该框架将适应于多种呈现（View）技术，例如 [[JSP|JSP]]、[[FreeMarker|FreeMarker]]、[[Apache_Velocity|Velocity]]、[[Thymeleaf|Thymeleaf]] 等。值得注意的是，Spring 中间层可以轻易地结合于任何基于 MVC 框架的网页层，例如 [[Struts|Struts]]、[[WebWork|WebWork]] 或 [[Tapestry_(programming)|Tapestry]]。

* 提供诸如事务管理等服务的[[面向切面编程|AOP]]框架。

在设计应用程序 Model 时，[[MVC|MVC]][[设计模式_(计算机)|模式]]（例如 [[Struts|Struts]]）通常难于给出一个简洁明了的框架结构。Spring 却具有能够让这部分工作变得简单的能力。程序开发员们可以使用Spring的JDBC抽象层重新设计那些复杂的框架结构。

=== [[控制反转|控制反转]]容器（[[依赖注入|依赖注入]]） ===
控制反转（IOC，Inverse Of Control），即把创建对象的权利交给框架，也就是指将对象的创建、对象的存储、对象的管理交给了Spring容器。Spring容器是Spring中的一个核心模块，用于管理对象，底层可以理解为是一个Map集合。

=== [[面向切面编程|面向切面编程]]===
面向切面编程（Aspect-Oriented Programming, AOP） 就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任分开封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。

=== [[数据访问对象|数据访问]]（DAO层支持） ===
'''Spring Data'''实现了对数据访问接口的统一，支持多种数据库访问框架或组件（如：JDBC、[[Hibernate|Hibernate]]、[[MyBatis|MyBatis]]（[[IBATIS|iBatis]]））作为最终数据访问的实现。

=== [[事务处理|事务管理]] ===
Spring框架为事务管理提供了一致的抽象，具有以下优点：
* 跨不同事务API（如：[[Java事务API|Java事务]]、[[JDBC|JDBC]]、[[Hibernate|Hibernate]]和Java Persistence API事务（JPA））的一致编程模型
* 支持声明式事务
* 与诸如JTA之类的复杂事务API相比，用于程序化事务管理的API更简单
* 与Spring的数据访问抽象出色地集成

=== [[MVC|模型-视图-控制器]]（MVC） ===
'''Spring MVC''' 实现了基于 [[MVC|MVC]] 设计方法的实现，结合基于[[Java注解|Java注解]]的配置，允许开发者开发出低代码侵入的Web应用项目，并简便地实现大部分Web功能（包括请求参数注入、文件上传控制等）。

===[[远程访问服务|远程访问]]  ===

=== “[[约定优于配置|约定大于配置]]”的快速应用开发 ===

==== Spring Boot ====
Spring Boot是基于Spring Framework 4.0衍生的，用于快速搭建独立的基于生产级别的Spring应用的框架，可以以最小的依赖引入来构建一个Spring应用。并且它还具有以下特点：
* 拥有嵌入式的Tomcat, Jetty, Undertow或者Reactor Netty（无需部署[[.war|war文件]]）
* 尽可能地自动配置（@AutoConfiguration）Spring和第三方库
* 提供用于生产的功能，例如指标、运行状态检查和外部化配置
* 无需麻烦而冗余的XML配置，一切都可以使用Java配置

=== [[批处理|批处理]] ===

=== 整合框架 ===

== 相关链接 ==
{{Wikibooks|:en:Spring framework}}
* [http://projects.spring.io/spring-framework/ Spring Framework]{{Wayback|url=http://projects.spring.io/spring-framework/ |date=20140609193631 }}
** [http://docs.spring.io/spring/docs/ Spring Framework API]{{Wayback|url=http://docs.spring.io/spring/docs/ |date=20140608124106 }}（[[Javadoc|Javadoc]]）
** http://www.springframework.org/dtd/spring-beans.dtd{{Wayback|url=http://www.springframework.org/dtd/spring-beans.dtd |date=20060425054557 }}
*** http://www.springframework.org/docs/reference/springbeansdtd.html{{Wayback|url=http://www.springframework.org/docs/reference/springbeansdtd.html |date=20060428223906 }} (as HTML)
* [http://www.springframework.net/ Spring Framework .NET]{{Wayback|url=http://www.springframework.net/ |date=20060402205922 }}

* [http://www.springframework.org/docs/MVC-step-by-step/Spring-MVC-step-by-step.html Spring Framework MVC Tutorial]{{Wayback|url=http://www.springframework.org/docs/MVC-step-by-step/Spring-MVC-step-by-step.html |date=20060425075408 }}
*[http://www.drrockit.com/space/Java/Simple%20Spring%20Demo Simple Spring Demo]{{Wayback|url=http://www.drrockit.com/space/Java/Simple%20Spring%20Demo |date=20150705064622 }}
* [http://www.theserverside.com/articles/content/SpringFramework/article.html Introduction to the Spring Framework by Rod Johnson]{{Wayback|url=http://www.theserverside.com/articles/content/SpringFramework/article.html |date=20060425191259 }}
*[http://static.springframework.org/spring/docs/1.1.5/spring-reference.pdf The Spring Reference Documentation]{{Wayback|url=http://static.springframework.org/spring/docs/1.1.5/spring-reference.pdf |date=20060629103457 }}（[[Portable_Document_Format|PDF]]，1329 kb）- Rod Johnson et al. (2004-2005)

* [http://www.springhub.com/ SpringHub ]{{Wayback|url=http://www.springhub.com/ |date=20060423010507 }}
* [http://www.theserverside.com/news/thread.tss?thread_id=47546 Domain Specific Modeling (DSM) in IoC frameworks]{{Wayback|url=http://www.theserverside.com/news/thread.tss?thread_id=47546 |date=20071115185128 }}

==参考资料==
{{reflist}}


{{Java (Sun)}}

[[分类:Java企业平台|分类:Java企业平台]]
[[Category:面向切面的程序设计|Category:面向切面的程序设计]]
[[Category:軟體框架|Category:軟體框架]]
{{Authority control}}