{{otheruse|swift}}
{{noteTA
|G1=IT
|1=zh-hans:软件; zh-hant:軟體;
|2=zh-hans:程序; zh-hant:程式;
|3=zh-hans:缩进; zh-hant:縮排;
|4=zh-hans:操作系统; zh-hant:作業系統;
|5=zh-hans:调试; zh-hant:調適;
}}
{{Infobox programming language
| name                   = Swift
| logo                   = Swift logo.svg
| logo size              = 200px
| paradigm               = 多[[編程範型|範式]]（[[面向對象程序設計|物件導向]]、[[函數程式語言|泛函]]、[[指令式編程|指令式]]、{{le|組塊|Block_(programming)}}[[結構化編程|結構化]]）
| released = {{start date and age|2014|6|2}}<ref name=version1>{{cite web |access-date=March 8, 2015 |url=https://developer.apple.com/swift/blog/?id=14 |title=Swift Has Reached 1.0 |publisher=Apple |date=September 9, 2014 |archive-date=2016-07-11 |archive-url=https://web.archive.org/web/20160711064518/https://developer.apple.com/swift/blog/?id=14 }}</ref>
| designer               = [[克里斯·拉特納|克里斯·拉特納]]與[[蘋果公司|蘋果公司]]
| developer              = 蘋果公司
| latest_release_version = {{wikidata|property|reference|edit|Q17118377|P348}}
| latest_release_date = {{wikidata|qualifier|Q17118377|P348|P577}}，{{Time ago|{{wikidata|qualifier|raw|Q17118377|P348|P577}}}}
| latest preview version = 5.7分支（和將來的Swift 6）
| latest preview date =
| typing                 = 靜態、[[強型別|強型別]]、[[類型推論|類型推論]]
| implementations        =
| dialects               =
| influenced_by          = [[Objective-C|Objective-C]]、[[Rust|Rust]]、[[Haskell|Haskell]]、[[Ruby|Ruby]]、[[Python|Python]]、[[C_Sharp|C#]]、[[CLU|CLU]]<ref name="lattner 2014 info 1">{{cite web|url=http://nondot.org/sabre|title=Chris Lattner's Homepage|publisher=Chris Lattner|first=Chris|last=Lattner|authorlink=Chris Lattner|date=2014-06-03|accessdate=2014-06-03|quote=I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.|archive-date=2015-12-22|archive-url=https://web.archive.org/web/20151222150510/http://nondot.org/sabre/|dead-url=yes}}</ref>，和[[D語言|D語言]]<ref name="swift blog">{{cite web|title=Building  assert()  in Swift, Part 2:  __FILE__  and  __LINE__  - Swift B  log -|url=https://developer.apple.com/swift/blog/?id=15|publisher=Apple Developer|accessdate=2014-09-26|quote=Swift borrows a clever feature from the [[D語言|D language]]: these identifiers expand to the location of the caller when evaluated in a default argument list.|archive-date=2015-11-21|archive-url=https://web.archive.org/web/20151121073226/https://developer.apple.com/swift/blog/?id=15|dead-url=no}}</ref>
| influenced             =
| operating system = 蘋果公司的操作系統（[[Darwin_(操作系統)|Darwin]], [[iOS|iOS]], [[iPadOS|iPadOS]], [[macOS|macOS]], [[tvOS|tvOS]], [[watchOS|watchOS]]）, [[Linux|Linux]], [[Windows_10|Windows 10]], [[Android|Android]]
| license = [[Apache許可證|Apache許可證2.0]]（Swift 2.2及以後版本）<br />[[專有軟件|專有]]（直到Swift 2.2）<ref>{{cite web|url=https://www.drdobbs.com/architecture-and-design/swift-objectively/240168424|title=Swift, Objectively|quote=Swift is proprietary and closed: It is entirely controlled by Apple and there is no open source implementation.|access-date=2022-04-09|archive-date=2022-01-08|archive-url=https://web.archive.org/web/20220108205406/https://www.drdobbs.com/architecture-and-design/swift-objectively/240168424}}</ref><ref>{{cite web|url=http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-June/073698.html|title=Re: [LLVMdev] [cfe-dev] [Advertisement] open positions in Apple's Swift compiler team|first=Chris|last=Lattner|author-link=Chris Lattner|date=June 11, 2014|access-date=June 12, 2014|quote=You can imagine that many of us want it to be open source and part of LLVM, but the discussion hasn't happened yet, and won't for some time.|url-status=dead|archive-url=https://web.archive.org/web/20140714201921/h  ttp://lists.cs.uiuc.edu/pipermail/llvmdev/2014-June/073698.html|archive-date=July 14, 2014}}</ref>
| website = {{plainlist|
*{{URL|https://www.swift.org/}}
*{{URL|https://developer.apple.com/swift/}} }}
| file_ext               = <code>.swift</code>
| wikibooks              = 
}}

'''Swift編程語言，'''支持[[多编程范式|多编程范式]]和[[編譯|編譯]]式，用来撰写基于[[OS_X|macOS/OS X]]、[[iOS|iOS]]、[[iPadOS|iPadOS]]、[[watchOS|watchOS]]和[[tvOS|tvOS]]的软件<ref name="tnw">{{Cite web|url = http://thenextweb.com/apple/2014/06/02/apple-announces-swift-new-programming-language-ios|title = Apple announces Swift, a new programming language for iOS|date = |accessdate = |website = |publisher = |last = |first = |archive-date = 2015-12-26|archive-url = https://web.archive.org/web/20151226022456/http://thenextweb.com/apple/2014/06/02/apple-announces-swift-new-programming-language-ios/|dead-url = no}}</ref>。
苹果公司于2014年在[[WWDC|苹果开发者年会]]（WWDC）發布了Swift编程语言。从设计上[[蘋果公司|苹果公司]]让Swift与[[Objective-C|Objective-C]]共存在苹果公司的[[作業系統|操作系统]]上<ref name="tnw"/>。

==歷史==
2010年7月，苹果开发者工具部门总监[[克里斯·拉特納|克里斯·拉特納]]开始着手 Swift 编程语言的設計工作，以一年時間，完成基本架構後，他領導了一個設計團隊參與其中。Swift大約歷經4年的開發期，2014年6月發表。

苹果宣称Swift的特点是：快速、现代、安全、互动，而且明顯優於Objective-C语言。Swift以[[LLVM|LLVM]]編譯，可以使用现有的[[Cocoa|Cocoa]]和[[Cocoa_Touch|Cocoa Touch]]框架。Xcode Playgrounds功能是Swift为苹果开发工具带来的最大创新，该功能提供強大的互动效果，能让Swift源代碼在[[读取﹣求值﹣输出循环|撰寫过程中能即時显示出其執行結果]]。拉特纳本人强调，Playgrounds很大程度是受到{{le|布雷特·维克多|Bret Victor}}理念的启发。<ref>{{Cite web|title=苹果新编程语言Swift仅耗时4年完成开发|url=http://tech.163.com/14/0605/03/9TUR3RNN000915BD.html|accessdate=|author=|date=2014-06-05|format=|publisher=网易科技报道|language=|archiveurl=https://web.archive.org/web/20140608091140/http://tech.163.com/14/0605/03/9TUR3RNN000915BD.html|archivedate=2014-06-08|dead-url=no}}</ref>

2015年6月8日，蘋果於[[WWDC|WWDC]]2015上宣布，Swift將[[開放原始碼|開放原始碼]]，包括[[编译器|编译器]]和[[标准库|标准库]]。<ref>{{Cite web|title=Swift 2.0 - Swift Blog|url=https://developer.apple.com/swift/blog/?id=29|accessdate=2019-06-12|work=developer.apple.com|language=en-US|archive-date=2019-06-06|archive-url=https://web.archive.org/web/20190606021318/https://developer.apple.com/swift/blog/?id=29|dead-url=no}}</ref>

2015年12月3日，蘋果宣布開源Swift，並支持[[Linux|Linux]]，蘋果在新網站swift.org和託管網站Github上開源了Swift，但蘋果的App Store並不支持開源的Swift，只支持蘋果官方的Swift版本，官方版本會在新網站swift.org上定期與開源版本同步。<ref>{{Citation|title=The Swift Programming Language. Contribute to apple/swift development by creating an account on GitHub|url=https://github.com/apple/swift|publisher=Apple|date=2019-06-12|accessdate=2019-06-12|archive-date=2019-06-12|archive-url=https://web.archive.org/web/20190612060358/https://github.com/apple/swift|dead-url=no}}</ref><ref>{{Cite web|title=Swift.org|url=https://swift.org/|accessdate=2019-06-12|last=Inc|first=Apple|work=Swift.org|language=en|archive-date=2019-06-15|archive-url=https://web.archive.org/web/20190615152215/https://swift.org/|dead-url=no}}</ref>

== 特色 ==
Swift取消了Objective-C的[[指標_(電腦科學)|指针]]和其他不安全存取的使用，舍弃了Objective C早期套用[[Smalltalk|Smalltalk]]风格的語法，全面改为句点表示法（dot-notation）。Swift具备[[类型推论|类型推导]]（type inference）。同时，它提供了类似C++、C#中的命名空間（namespace）、泛型（generic）、运算符重载（operator overloading）。Swift被簡單的形容為 “沒有C的Objective-C”（Objective-C without the C）。<ref>{{cite web|url=http://venturebeat.com/2014/06/02/apple-introduces-a-new-programming-language-swift-objective-c-without-the-c/|title=Apple announces ‘Swift,’ a new programming language for OS X & iOS|first1=Harrison|last1=Weber|date=2014-06-02|publisher=[[VentureBeat|VentureBeat]]|accessdate=2014-06-10|archive-date=2016-11-17|archive-url=https://web.archive.org/web/20161117150025/http://venturebeat.com/2014/06/02/apple-introduces-a-new-programming-language-swift-objective-c-without-the-c/|dead-url=no}}</ref>

===類型和變量===
在Cocoa與Cocoa Touch的環境下，许多共用的类都放在Foundation Kit庫下，這些類別包含了NSString 字串庫（使用 Unicode），還有集合類別 NSArray 與 NSDictionary。Objective-C 提供了[[語法糖|語法糖]]的方式讓這些物件可以整合在同一個語言裡。例如NSString之間合併的表示法如下：

<syntaxhighlight lang="objc">NSString *str = @"hello,";
str = [str stringByAppendingString:@" world"];</syntaxhighlight> 在Swift裡, 字串的累積可以用加法（<code>+</code>）運算元作為[[頭等物件|頭等物件]]（First-class citizen）的方式直接完成, 上述的例子可以簡化為 <syntaxhighlight lang="swift">var str="hello"
str += " world"</syntaxhighlight><ref>[https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/StringsAndCharacters.html "Strings and Characters"] {{Wayback|url=https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/StringsAndCharacters.html |date=20140603032133 }}, Apple Inc.</ref>

過去Cocoa（以及Cocoa Touch）的架構總是被分成兩種版本，一種是可變的（mutable），也就是可以在執行時期（runtime）改變；另一種是不可變的（immutable），其初始值不可改變，例如NSArray與NSMutableArray就是陣列的兩種版本。Swift語言延續這個傳統，但簡化為使用 let 關鍵字去設定常數（constant variable）。可变的(Mutable)对象使用 var 关键字，不可变的对象则适用let关键字。Swift语言使用類似[[C♯|C#]]或[[Javascript|Javascript]]的var定义变量，但特性又不盡相同。Swift不直接指派初始值給变量，变量无預設值，因此使用var变量之前必须先初始化，不然将发生編譯時期的錯誤。

为了方便使用，Swift提供Optional类型来宣告nil-free references。宣告Optional只需要在类型后面加上問號（?）即可。一旦var变量宣告为Optional的，其初始值就會被預設為nil。Optional本質上是enum，定义了None和Some两种类型，nil即是Optional.None。

===函数库、执行时期与部署===
Swift在 Mac OS 和 iOS 平台可以和 Objective-C 使用相同的執行時期（runtime），因此Swift 程序能运行在目前已存在的平台上，包括 iOS 6 和 OS X 10.8或更高的版本。<ref>[http://stackoverflow.com/questions/24001778/do-swift-based-apps-work-on-os-x-10-9-ios-7-and-lower/24038997#24038997 "Do Swift-based apps work on OS X 10.9/iOS 7 and lower?"] {{Wayback|url=http://stackoverflow.com/questions/24001778/do-swift-based-apps-work-on-os-x-10-9-ios-7-and-lower/24038997#24038997 |date=20140614140558 }}, StackOverflow</ref> 更重要的, Swift 和 Objective-C 的代码可并存于同一程序代码, 这种延伸就如同 C 和 C++ 的关系一样。

为了吸引开发人员和复用已存在的代码，Xcode 6允许在 app target 导入 Objective-C 头文件供給 Swift 使用，通过 Objective-C 的桥接头文件（bridging header）来供给 Swift。当开发人员添加 Swift 文件到现有的 Objective-C应用程序时，Xcode自动建立相应的头文件。例如，一個 Swift 类 "MyClass" 可用于 Objective-C 的方式为

<code>#import "MyClass-Swift.h"</code>.<ref>[https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_77 "Swift and Objective-C in the Same Project"] {{Wayback|url=https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_77 |date=20140603012246 }}, Apple Inc.</ref>

===内存管理===
Swift全面使用自动引用计数（ARC）來管理内存，取代Objective C的垃圾回收功能。在Objective-C中，强引用（strong reference）即为非ARC中的retain，而弱引用（weak reference）即为非ARC中的assign。为了解决循环引用的问题，Swift提供unowned，不能设定为optional types，不能加上問號（?）或驚嘆號（!）。

===除錯以及其他元素 ===
Xcode的除錯机制针对Swift语言提供[[读取﹣求值﹣输出循环|REPL]]（Read-Eval-Print Loop, 這是源自emacs的术语）環境，可以利用Swift语法来评估或于其他程序互动，使Swift编程具有类似[[Python|Python]]或[[Ruby|Ruby]]带有的交互性界面（Interactive Shell）。

===类似 Objective-C之处===
*基本數值型別（numeric types）大致相同 (例如<code>Int, UInt, Float, Double</code>)
*大量的C 语言运算符被移出Swift, 与此同时引入了新运算符。
* 大括號被用於群組陳述（group statements）。  
* 變數之賦值使用等於符號, 但比較則使用“連續兩個等於”（==）運算元。還有一個新的運算元，“連續三個等於”（===）被用來判斷常數或變數之間是否為同一物件之實例（instance）。
* 中括號（[], Square brackets）用於陣列的表示, 宣告陣列之後, 可以指派索引值（index）來進行元素（element）之存取。
* 控制陳述（control statement）, <code>for, while, if, switch</code> 與Objective-C都十分類似, 但有延伸功能, 像是 <code>for in</code> 用於集合（collection）的輪詢，<code>switch</code> 還可以接受非整數的cases條件值, 諸如此類。

===不同于 Objective-C之处===
*陳述句（statement）不需要用分号（<code>;</code>）結束，但分号可以作为一行上两个以上语句的分割符。
*不需要头文件（Header files）。
*注解方式 /* ... */ 嵌套，指注释里可以再有注释。
*[[強型別|強类型]]
*[[类型推论|类型推论]]或隐含类型（Type inference）
*支持[[泛型編程|泛型編程]]。
*函数成为第一等类型（first-class object），这意味着函数可以作为其他函数的参数和返回值。
*运算符重载。运算符可在类內重新定义。
*定义新的运算符。
*字符串全方面支持 [[Unicode|Unicode]]。
*规避了C語言家族的易错行为：
**不存在[[指標|指针]]。
**赋值语句没有返回值。若将<code>if (i==0)</code>誤寫成<code>if (i=0)</code>，将造成编译時期錯誤。
**在<code>switch</code> 的区块内不需要使用 <code>break</code> 语句。另外，case后面都需要有可执行的代码（C或C++可連續使用多個case而不需要額外的代碼），否则将触发编译错误。
**变量和常量必须初始化才能使用，而且数组（array）的边界必须明确確認。
**溢位（overflows）的問題。C語言沒有強制整數型別（signed integers）的界限，常常在触发执行时期错误。Swift通过整数类型的max或min属性获取最大值或最小值。

==讨论==
長達600多頁的 ''The Swift Programming Language'' 可以在[[iBooks|iBooks]]免费下载。<ref>[https://itunes.apple.com/gb/book/swift-programming-language/id881256329?mt=11 The Swift Programming Language] {{Wayback|url=https://itunes.apple.com/gb/book/swift-programming-language/id881256329?mt=11 |date=20140603084140 }}.</ref>

== 范例代码 ==
Swift不需要引入[[头文件|头文件]]（header file）或<code>main()</code>函数，不需要在每一行语句（statement）结尾加上分號。

变量声明方式如下：

<syntaxhighlight lang="objc">
var implicitInteger = 70
var implicitDouble = 70.0
var explicitDouble: Double = 70
</syntaxhighlight>
用 let 宣告常量方式如下：
<syntaxhighlight lang="objc">
let numberOfApples = 3
let numberOfOranges = 5
let appleSummary = "I have \(numberOfApples) apples."
let fruitSummary = "I have \(numberOfApples + numberOfOranges) pieces of fruit."
</syntaxhighlight>

Swift不支持隐式类型转换（implicitly casting），因此数值和字符串之间必须显式类型转换（Explicitly casting）：
<syntaxhighlight lang="objc">
let table = "The width of this table is "
let width = 100
let tableWidth = table + String(width)
</syntaxhighlight>

以下是[[Hello_World|Hello World]]程式：
<syntaxhighlight lang="objc">
println("Hello, world")
print("Hello, world") /*Swift 2.0 之後不再使用println，改使用print*/
</syntaxhighlight>

使用[[Unicode|Unicode]]字符，例如在文本中放心添加有不同语言的文字:
<syntaxhighlight lang="swift">
let 人 = ["新": 67, "青": 8, "玉": 33, "小小": 25]
for (名字, 歲) in 人 {
  print("\(名字)是\(歲) 歲。")
}
</syntaxhighlight>

== 相关条目 ==
* [[Objective-C|Objective-C]]
*[[C语言|C语言]]

==参考资料==
{{reflist|30em}}

==外部链接==
* {{Official website}}
* [[苹果开发者|苹果开发者]]上的[https://developer.apple.com/swift/ Swift]{{Wayback|url=https://developer.apple.com/swift/ |date=20140603002435 }}
*[https://iosexample.com iOS Example]{{Wayback|url=https://iosexample.com/ |date=20200807165414 }}
* {{GitHub|apple/swift|Swift源代码}}

{{程序设计语言}}
[[Category:苹果公司|Category:苹果公司]]
[[Category:MacOS開發|Category:MacOS開發]]
[[Category:IOS開發|Category:IOS開發]]
[[Category:面向对象的编程语言|Category:面向对象的编程语言]]
[[Category:静态类型编程语言|Category:静态类型编程语言]]
[[Category:模式匹配编程语言|Category:模式匹配编程语言]]
[[Category:系統程式語言|Category:系統程式語言]]
[[Category:2014年建立的程式語言|Category:2014年建立的程式語言]]