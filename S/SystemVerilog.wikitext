{{NoteTA
|G1=Electronics
|G2=IT
}}
{{Infobox programming language
| name = SystemVerilog
| logo =
| logo caption = SystemVerilog logo
| screenshot = 
| screenshot caption = 
| file ext = .sv, [[包含指令|.svh]]
| paradigm = [[结构化编程|结构化]] (设计)<br/>[[面向对象编程|面向对象]] (验证)
| released = {{Start date and age|2002}}
| designer = [[Synopsys|Synopsys]], 后来是[[IEEE|IEEE]]
| developer = 
| latest release version = IEEE 1800-2017
| latest release date = {{start date and age|2018|02|22}}
| latest preview version = 
| latest preview date = <!-- {{start date and age|YYYY|MM|DD}} -->
| typing = [[静态类型|静态]], [[类型系统|弱类型]]
| implementations = 
| dialects = 
| influenced by = 设计: [[Verilog|Verilog]], [[VHDL|VHDL]], [[C++|C++]], 
验证: [[OpenVera|OpenVera]], [[Java|Java]]
| influenced = 
| programming language = 
| platform = 
| operating system = 
| license = 
| File format = 
| website = 
| wikibooks = 
| logo_size = 240px
}}
'''SystemVerilog'''是一種在現代[[積體電路|積體電路]]（尤其是[[超大型積體電路|超大型積體電路]]）的[[集成电路设计|设计及验证]]流程中，由[[Verilog|Verilog]]发展而来的[[硬件描述语言|硬體描述]]、[[硬件验证语言|硬件验证]]统一语言，前一部分基本上是2005年版[[Verilog|Verilog]]的扩展，而后一部分[[功能验证|功能验证]]特性则是一门[[面向对象程序设计|面向对象程序设计]]语言。面向对象特性很好地弥补了传统Verilog在芯片验证领域的缺陷，改善了代码可重用性，同时可以让验证工程师在比[[寄存器传输级|寄存器传输级]]更高的抽象级别，以[[事务级建模方法|事务]]而非单个信号作为监测对象，这些都大大提高了验证平台搭建的效率。{{R|Zhong}}

SystemVerilog已经被采纳为[[电气电子工程师学会|电气电子工程师学会]]1800-2009标准，并获得了主流[[电子设计自动化|电子设计自动化]]工具供应商的支持。雖無任一個仿真系統能聲稱自己完全支援SystemVerilog语言参考手册（Language Reference Manual, LRM）裡介紹的所有语言结构，要改善测试平台的互操作性相当困难，但推进跨平台兼容性的研究开发工作已在進行中。若干种验证方法学相继出现，以预定义类的形式对测试平台模块进行标准化，如今最新基于SystemVerilog的验证方法学为[[通用验证方法学|通用验证方法学]]。此方法学主要包括[[开放源代码|开放源代码]]的[[类库|类库]]以及支援[[集成电路设计#可重用设计方法学|可重用]]测试平台、开发验证[[IP核|IP核]]的预置格式。许多第三方提供商则开始推出基于SystemVerilog的验证[[IP核|IP核]]。

== 发展历史 ==
SystemVerilog的历史可以追溯到2002年，当时一个被称为“Superlog”的语言被捐赠给Accellera公司（Verilog的主要支持者）。<ref>{{Cite journal|author=Rich, D|title=The evolution of SystemVerilog|journal=IEEE Design and Test of Computers|year=}}</ref>而[[新思科技|Synopsys]]公司捐赠的[[OpenVera|OpenVera]]后来发展成为SystemVerilog中硬件验证语言子集。2005年，SystemVerilog获批成为[[电气电子工程师学会|电气电子工程师学会]]1800-2005标准。<ref>{{Cite news|url=http://www.eetimes.com/news/design/showArticle.jhtml;?articleID=173601060|title=IEEE approves SystemVerilog, revision of Verilog|publisher=EE Times|date=2005-11-03|accessdate=2013-07-14|archive-url=https://web.archive.org/web/20070929095929/http://www.eetimes.com/news/design/showArticle.jhtml;?articleID=173601060|archive-date=2007-09-29|dead-url=yes}}</ref>当时Verilog作为电气电子工程师学会1364-2005标准尚独立存在。2009年，SystemVerilog与的Verilog进行了合并，成为了新的电气电子工程师学会1800-2009标准。现在的最新标准是电气电子工程师学会1800-2017标准。<ref>{{Cite web |url=https://standards.ieee.org/standard/1800-2017.html |title=1800-2017 - IEEE Standard for SystemVerilog--Unified Hardware Design, Specification, and Verification Language |access-date=2021-11-03 |archive-date=2021-12-13 |archive-url=https://web.archive.org/web/20211213055019/https://standards.ieee.org/standard/1800-2017.html }}</ref>

== 设计特性 ==
{{See also|Verilog}}
对于[[集成电路设计|电路设计工程师]]来说，SystemVerilog中有大部分内容继承自[[Verilog|Verilog]]，但是也提供了一些增强或者改进的特性。下面的章节主要讲述SystemVerilog的这些特性。{{R|Chris}}
=== 新的数据类型 ===
==== 逻辑型变量 ====
SystemVerilog定义了一种新的逻辑型（<code>logic</code>）变量。和Verilog中变量的声明类似，以下代码描述了一个32位的逻辑型变量：

<syntaxhighlight lang="verilog">
logic [31:0] my_var;
</syntaxhighlight>

在传统的Verilog中，变量主要分为线网型（<code>wire</code>）和寄存器型（<code>reg</code>）两大类型。只有寄存器型变量才能够在过程代码块中被赋值，而线网型变量只能在过程代码块之外被连续赋值。寄存器型变量的过程赋值和线网型变量的连续赋值使用了完全不同的语句结构。在Verilog中，二者的区分比较微妙，以至于有些专业的工程师也在设计中混淆二者。由于<code>always</code>过程代码块不仅可以描述时序逻辑电路，还可以通过将所有寄存器型的输入变量添加到敏感列表来实现纯组合逻辑电路，因此“寄存器型”这个带有时序逻辑意义的术语本身也令人误会。

SystemVerilog增强了寄存器型变量的功能，它可以像Verilog中线网型变量一样由线网（如逻辑门等模块的输出）驱动（这样的线网驱动寄存器的方式在Verilog中是不允许的）。这种增强的变量类型被命名为“逻辑型”，从而避免“寄存器型”在字面上给人带来的误会。在大多数情况中，SystemVerilog中的<code>logic</code>可以替代Verilog中的<code>reg</code>和<code>wire</code>，但是如果某个某个变量具有多个驱动源，那么就不能使用<code>logic</code>，而要使用严格的<code>wire</code>来定义它。

==== 多维压缩数组 ====
这种结构将Verilog中与寄存器、存储器相关的概念进行了合并和扩展。

在Verilog中，变量名称左边的索引被用来表示二进制变量的位宽，Verilog规定它只能是一维的。而这个数组名称右边的索引用来表示以这种位宽变量组成数组的元素个数，因为数组可以是一维数组、二维数组或者多维数组，因此这个索引可以是任意整数。在SystemVerilog中，如果在变量名称左边指定了由高至低的位宽（如8位信号由<code>[7:0</code>表示），则称之为“压缩数组”（packed array，有时也被译为“合并数组”）。压缩数组本身可以是多维的，即变量名称左边可以具有多维索引。如果在变量名称右边指定了数组尺寸，则称之为“非压缩数组”。下面用示例代码表示了一个由二维压缩数组构成的一维非压缩数组：

<syntaxhighlight lang="verilog">
logic [1:0][2:0] my_pack[32];
</syntaxhighlight>

在上面的例子里，非压缩数组数组<code>my_pack</code>具有32个元素（这里用到了类似C语言的数组元素个数表示方法，这里也可以写成Verilog中常见的<code>[31:0]</code>形式）。这个非压缩数组每一个元素本身又是压缩数组，即2个位宽为3的逻辑型变量，因此非压缩数组的每一个元素包含六位二进制数的信息。A variable of packed array type maps 1:1 onto an integer arithmetic quantity.

==== 枚举 ====
SystemVerilog引入了[[枚举|枚举]]型变量，它使用一系列有实际字面意义的名称来代表若干变量。如果不进行专门的数据类型转换，一个枚举型变量不能直接赋值给另一个枚举型的变量。过去在Verilog中描述[[有限状态机|有限状态机]]常常使用参数（关键字为<code>parameter</code>），而在SystemVerilog中，使用枚举则更为方便。

<syntaxhighlight lang="verilog">
typedef enum logic [2:0] {
   RED, GREEN, BLUE, CYAN, MAGENTA, YELLOW
} color_t;

color_t   my_color = GREEN;
initial $display("The color is %s", my_color.name());
</syntaxhighlight>

上面的例子使用了[[typedef|typedef]]来创建了一个新的数据类型名称，从而可以用它来创建一系列枚举数据。枚举类型的数据类型，为位宽为3的逻辑型变量。3位二进制数能够逐一指代六种颜色。使用代码<code>color_t my_color = GREEN;</code>创建了一个新的<code>color_t</code>型变量，其值初始化为六种颜色中的绿色。系统函数<code>$display</code>的作用与Verilog相同，其参数是<code>my_color</code>所属函数<code>name()</code>的返回值，即当前枚举值的ASCII值。

==== 其他新增的数据类型 ====
除了基本的逻辑型变量（<code>logic</code>），SystemVerilog正还提供了字节型变量（<code>byte</code>，8位）、短整型变量（<code>shortint</code>，16位）、整型变量（<code>int</code>，32位）和长整型变量（<code>longint</code>64位）、比特型变量（<code>bit</code>，1位，仅具有两个逻辑状态，和逻辑型数据（<code>logic</code>）缺少了未知逻辑（<code>x</code>）和[[高阻态|高阻态]]（<code>z</code>）。使用两态逻辑可以提高[[逻辑仿真|逻辑仿真]]速度）。

==== 结构体和联合体 ====
这两种数据类型和[[C语言|C语言]]中的[[结构体_(C语言)|结构体]]和[[联合体|联合体]]类似。在SystemVerilog中，与这两种数据类型相关的增强特性为压缩属性（<code>packed</code>）和标签属性（<code>tagged</code>）。压缩属性使得mapped 1:1 onto a packed array of bits，而标签属性允许跟踪当前联合体中实际被使用的成员。这些结构占据了连续的存储空间。

<syntaxhighlight lang="verilog">
typedef struct packed {
    bit [10:0]  expo;
    bit         sign;
    bit [51:0]  mant;
} FP;

FP     zero = 64'b0;
</syntaxhighlight>

=== 条件、选择语句的唯一性和优先性 ===
当条件、选择语句的路径分支较为复杂时，设计人员稍不留意就可能造成代码所描述的行为违背设计人员预计的优先级别，或者被判断的表达式同时满足多个分支条件，从而在仿真过程中产生无规律结果。

为此，SystemVerilog增强了条件、选择语句的功能，允许设计人员为这分支流程的执行设置特别的约束。在多级条件、选择语句中使用关键字<code>unique</code>，可以限定有且只有一个分支可能被执行到，否则将产生一个警告。而关键字<code>priority</code>则指出某些分支路径具有更高的优先级。过去，在传统的Verilog中，要实现类似的功能，设计人员需要在可综合代码中附带一些特殊的注释（例如： <code>// synopsys full_case parallel_case</code>）来通知[[逻辑综合|逻辑综合]]工具产生正确的分支逻辑电路。不过，注释并非SystemVerilog代码的正式组成部分，它们只是在逻辑综合过程被特定的工具读取，而不严谨的注释很可能造成综合后电路与综合前仿真结果不同的情况。

=== 过程代码 ===
Verilog中的过程代码可以描述时序逻辑电路，也可以描述组合逻辑电路，这一点容易造成概念的混淆，如果代码不严谨，逻辑综合很可能推断出锁存器，从而产生不符合预期的硬件模型。SystemVerilog除了继续支持原来Verilog中的老式过程结构<code>always</code>、<code>initial</code>，还在原有<code>always</code>基础上针对[[组合逻辑电路|组合逻辑电路]]、[[触发器|触发器]]、[[锁存器|锁存器]]设计了专用的<code>always</code>结构。虽然它们显得不够通用，但是三类硬件模型的差异得到了明确地区分，避免使用老式<code>always</code>时容易出现的锁存器推断：
* <code>always_comb</code>：用于[[组合逻辑电路|组合逻辑电路]]（相当于Verilog中对所有输入变量电平敏感的<code>always</code>，但<code>always_comb</code>无需手动列出所有输入变量，系统会自动识别）；
* <code>always_ff</code>：用于[[触发器|触发器]]及相关的[[时序逻辑电路|时序逻辑电路]]（相当于Verilog中对某个或某几个信号[[信号边缘|有效跳变沿]]敏感、并带有信号储存特性的<code>always</code>）；
* <code>always_latch</code>：用于[[锁存器|锁存器]]级相关的时序逻辑电路（相当于Verilog中对某个或某几个信号电平敏感、并带有信号储存特性的的<code>always</code>）。

三种专用的<code>always</code>结构在使用时会检查设计代码是否符合对应硬件模型的特征。如果设计人员在过程代码中描述了与对应硬件不符合的行为（例如在<code>always_latch</code>的敏感列表中添加了[[定時器訊號|定時器訊號]]的上升沿），那么系统会发出警告。这是SystemVerilog种专用型过程结构的优越之处。

下面的例子使用<code>always_comb</code>来描述组合逻辑电路。在SystemVerilog中无需像Verilog中描述组合逻辑电路那样写出敏感列表，<code>always_comb</code>会告诉逻辑综合工具这是一个组合逻辑电路，因此系统会默认对所有输入信号的电平敏感。在表示组合逻辑电路的过程代码中，一般使用阻塞赋值。

<syntaxhighlight lang="verilog">
always_comb begin
    tmp = b * b - 4 * a * c;
    no_root = (tmp < 0);
end
</syntaxhighlight>

逻辑综合工具会将<code>always_ff</code>推断为[[同步电路|同步时序逻辑]]，这里需要写明对什么信号的什么边缘（上升或者下降）敏感。在表示时序逻辑电路的过程代码中，一般使用非阻塞赋值。

<syntaxhighlight lang="verilog">
always_ff @(posedge clk)
    count <= count + 1;
</syntaxhighlight>

逻辑综合工具还会将<code>always_latch</code>推断为电平敏感的[[锁存器|锁存器]]电路，对输入信号的电平敏感，但是具有信号储存特性：

<syntaxhighlight lang="verilog">
always_latch
    if (en) q <= d;
</syntaxhighlight>

== 接口 ==
对于小型的设计，Verilog设计人员可以使用端口（port）来简洁地描述模块与外部环境的连接情况。不过，在规模较大、抽象层次较多的设计中，处于枢纽地位的模块往往具有大量连线与外界的连通。为此，SystemVerilog引入了接口（interface）的概念，这个概念一方面减少了大量需要声明的端口名称，另一方面，它还方便设计人员将某些相关信号的通道作为一捆相对独立的线网组，这样就使复杂的设计更加简单、明晰。另一个概念是modport，它显示了逻辑连接的方向。例如：

<syntaxhighlight lang="verilog">
interface intf;
  logic a;
  logic b;
  modport in (input a, output b);
  modport out (input b, output a); 
endinterface

module top;
  intf i ();
  u_a m1 (.i1(i));
  u_b m2 (.i2(i));
endmodule

module u_a (intf.in i1);
endmodule

module u_b (intf.out i2);
endmodule
</syntaxhighlight>

== 验证特性 ==
随着[[集成电路|集成电路]][[超大规模集成电路|集成规模]]的不断提高，电路的复杂程度也越来越大。在这种情况下，[[功能验证|设计验证]]在整个设计流程中所占用的时间越来越高。SystemVerilog在[[Verilog|Verilog]]基础上增加了许多专门针对验证的特性，使其成为一种杰出的[[硬件验证语言|硬件验证语言]]。下面所提到的验证代码通常是不可综合的，它们的作用主要体现在[[测试平台|测试平台]]的搭建过程中。{{R|Chris}}

=== 新的数据类型 ===
SystemVerilog引入了专门的字符串型变量，用关键字<code>string</code>表示，例如：
<syntaxhighlight lang="verilog">
string s1 = "Hello";
string s2 = "world";
string p = ".?!";
string s3 = {s1, ", ", s2, p[2]}; // 字符串的拼接
$display("[%d] %s", s3.len(), s3); // 仿真结果显示为：“[13] Hello, world!”
</syntaxhighlight>

除了在设计中使用静态数组，SystemVerilog还提供了动态数组、关联数组（associative array）和队列（queues）：

<syntaxhighlight lang="verilog">
int cmdline_elements; // # elements for dynamic array
int da[];       // 动态数组
int ai[int];    // 以整数位索引的关联数组
int as[string]; // 以字符串为索引的关联数组
int qa[$];      // 队列

initial begin
    cmdline_elements = 16;
    da = new[ cmdline_elements ]; // 为da数组分配16个元素
end
</syntaxhighlight>

动态数组的行为和非压缩数组相似，不过它允许仿真在运行时动态分配元素个数（正如上面例子所示）。压缩数组部分的元素个数（以往称之为“位宽”）必须在编译的时候已知（通过由常数或常数表达式直接确定），而非压缩数组的动态大小则可以在程序运行时，由另一个运行中的程序变量进行初始化，这样就可以在运行中根据所需改变数组的大小。

=== 类 ===
SystemVerilog为验证代码的编写提供了[[面向对象程序设计|面向对象程序设计]]的模型。

SystemVerilog支持类的单一继承，即不允许一个类继承多个基本类。需要注意的是, 虽然SystemVerilog里提供了与[[Java|Java]]中名称相同的“接口”概念，但是二者的实际含义际ha却大有不同，后者的接口能够提供类似多继承的功能。SystemVerilog的类可以自带配置参数，这种类被称为参数化的类，其功能与C++的模板类似，不过SystemVerilog不支持模板特化和函数模板。SystemVerilog的[[多态性|多态性]]和C++类似，在子类中被覆盖的同名方法在基本类中必须使用关键字<code>virtual</code>予以标识。SystemVerilog里也有诸如<code>local</code>、<code>protected</code>等关键字来管理数据、方法成员的可见性。默认情况下，所有方法、数据都是对外公有的。类的示例由构造函数<code>new</code>来创建，而析构函数则无需验证人员手动创建。如果某个对象没有被任何句柄指向，系统会自动销毁它。SystemVerilog的类是构建诸如[[通用验证方法学|通用验证方法学]][[类库|类库]]结构的基础。

<syntaxhighlight lang="systemverilog">
virtual class Memory;
    virtual function bit [31:0] read(bit [31:0] addr); endfunction
    virtual function void write(bit [31:0] addr, bit [31:0] data); endfunction
endclass

class SRAM #(parameter AWIDTH=10) extends Memory;
    bit [31:0] mem [1<<AWIDTH];

    virtual function bit [31:0] read(bit [31:0] addr);
        return mem[addr];
    endfunction

    virtual function void write(bit [31:0] addr, bit [31:0] data);
        mem[addr] = data;
    endfunction
endclass
</syntaxhighlight>

=== 含约束的随机化 ===
可以对定义在类或者其他语句块中的整数型变量进行随机化，从而实现输入激励的随机化，大大降低了验证人员专门定义输入激励的复杂程度。这时使用SystemVerilog构建随机验证平台的重要技术基础。在类数据变量声明前使用<code>rand</code>和<code>randc</code>这两个关键字，可以让系统得知这些变量在随后被随机化。<code>randc</code>产生的随机数序列可以保证变量被再次赋值为同一数值之前，所有可能数值已经被遍历，而声明为<code>rand</code>的变量则在随机化过程中没有这一特性。

<syntaxhighlight lang="systemverilog">
class eth_frame;
    rand bit [47:0] dest;
    rand bit [47:0] src;
    rand bit [15:0] type;
    rand byte       payload[];
    bit [31:0]      fcs;
    rand bit [31:0] fcs_corrupt;

    constraint basic {
        payload.size inside {[46:1500]};
    }

    constraint good_fr {
        fcs_corrupt == 0;
    }
endclass
</syntaxhighlight>

在上面这一例子中，数据成员<code>fcs</code>未被声明为随机变量，而其他几个数据成员则被声明为随机变量。在这个类中，紧随变量声明的是两个对随机化进行约束的语句块，用关键字<code>constraint</code>予以标识。例如第一个名为<code>basic</code>的约束要求数据成员<code>payload[]</code>（动态数组）的大小在46和1500之间（包含这两个边界值）。如果没有专门指定约束条件，则变量在可能的取值范围内的随机化不受任何约束。约束块内代码的写法有若干种，验证人员可以设定更加复杂的约束关系，例如变量取得区间甲内某一数值的权重为某一定值，或者采用多个数学关系式来限定变量的随机化取值。当然，这样做的前提是数学上能够找到数值来同时满足这些约束。SystemVerilog的解析器会尽量产生符合条件的随机数值，但是如果没能够成功，则会返回信息告知验证人员此随机化过程失败。

==== 随机化方法 ====
每一个SystemVerilog类都有隐含的三个与[[随机化|随机化]]有关的方法{{NoteTag|由于SystemVerilog是一门面向对象编程语言，因此通常将Verilog中类似的任务（<code>task</code>）和函数（<code>function</code>）统称为方法。}}，它们是<code>pre_randomize</code>、<code>randomize</code>和<code>post_randomize</code>。其中，<code>randomize</code>方法为整个随机化过程中最重要的方法，验证人员可以在过程代码中使用该方法来启动变量的随机化过程。注意该方法的主体是事务对象本身（在[[通用验证方法学|通用验证方法学]]中，事务一般是一个具有<code>uvm_sequence_item</code>类型或从它继承而来的类型），因此需要用<code>object.randomize()</code>来调用该方法，每执行一次该方法，该对象所有的随机变量将会得到满足约束条件（如果有）的随机数值。如果随机化失败，例如没能找到满足工程师定义约束的数值，则该方法将返回0表示随机化存在问题。另外两个方法<code>pre_randomize</code>和<code>post_randomize</code>则可以被用来处理随机化主过程之前、之后其他需要的事情。

==== 控制约束条件 ====
此外，SystemVerilog还提供了<code>constraint_mode()</code>和<code>random_mode()</code>这两个方法来在过程代码中控制随机化，前者用于临时开启或关闭一个约束，而后者则用于临时开启或关闭某个变量的随机化。此外还有<code>randomize () with {constraint}</code>方法可以在该方法被调用时将花括号内的约束附加到原有的约束条件之上。

<syntaxhighlight lang="systemverilog">
class eth_frame;
    rand bit [47:0] dest;
    rand bit [47:0] src;
    rand bit [15:0] type;
    rand byte       payload[];
    bit [31:0]      fcs;
    rand bit        corrupted_frame;

    constraint basic {
        payload.size inside {[46:1500]};
    }
   
    constraint one_src_cst {
        src == 48'h1f00
    }
    
endclass
.
.
.
eth_frame my_frame; 

my_frame.one_src_cst.constraint_mode(0); //关闭one_src_cst约束，之后该变量的随机化将不再受该约束限制
my_frame.type.random_mode(0);        // 关闭type变量的约束，之后的随机化将不会给该变量赋予随机数值
my_frame.randomize();
</syntaxhighlight>

=== 断言 ===
与其他属性规约语言类似，SystemVerilog具有[[断言_(程式)|断言]]这一概念。在整个芯片验证流程中，断言检查器会自动检查定义的属性是否得到满足，如果违背，则会给出警告。SystemVerilog断言由序列（<code>sequences</code>）和属性（<code>properties</code>）两部分组成。属性可以是多个序列在时间上的组合。序列主要用布尔表达式和时序操作符来描述。<ref>{{cite book|author=Srikanth Vijayaraghavan, Meyyappan Ramanathan|title=SystemVerilog Assertions 应用指南|publisher=清华大学出版社|isbn=978-7-30-213441-1|year=2006}}
</ref>

<syntaxhighlight lang="systemverilog">
sequence S1;
    @(posedge clk) req ##1 gnt;
endsequence
</syntaxhighlight>

这一简单序列的意思是，信号<code>gnt</code>会在信号<code>req</code>为高电平一个时钟周期后也为高电平，如果这一情况没有发生，则断言失败。SystemVerilog还提供其他一些时序操作符，例如重复、连续操作符。这些操作符可以让验证人员定义更加复杂的变量关系。在上面这个例子中，加入信号<code>req</code>为低电平，则这个断言永远都是失败的。我们可以使用蕴含操作符<code>|=></code>来表示我们所需的情况。

<syntaxhighlight lang="systemverilog">
property req_gnt;
    @(posedge clk) req |=> gnt;
endproperty

assert_req_gnt: assert property (req_gnt) else $error("req not followed by gnt.");
</syntaxhighlight>

上面这个例子显示了蕴含（implication）操作符<code>|=></code>的使用。它左边的子句称为先行算子（antecedent）而右边的子句称为后续算子（consequent）。这时，如果<code>req</code>未满足高电平的要求，则后面的<code>gnt</code>无论是高电平还是低电平，整个断言都默认为成功；但是如果<code>req</code>为高电平，则系统会根据<code>gnt</code>的逻辑值来决定断言是否成功。除此之外，SystemVerilog还支持断言覆盖。

=== 功能覆盖 ===
在硬件验证中，功能覆盖是指验证过程中对人工定义信号事件的数据采样和收集过程。功能覆盖率在某种程度上反映了被测设计在所给输入激励下，其内部功能正确与否被检测到的百分比。功能覆盖率越高，一般代表测试越完备。注意功能覆盖率和[[代码覆盖率|代码覆盖率]]不同，后者只是测量被测设计的所有代码有多少在仿真过程中被执行过。功能覆盖的目的是确保设计中的所有边界情况都能够被经历。

SystemVerilog覆盖组（coverage group）内可以定义若干个仓（bins）来储存相关变量取值在其范围内的次数。交叉覆盖（Cross-coverage）则可以进一步获取多个变量分别在某一范围内统计数据。通过使用覆盖组的<code>sample</code>方法，可以启动该覆盖率的统计。

For example:
<syntaxhighlight lang="systemverilog">
class eth_frame;
   // Definitions as above
   covergroup cov;
      coverpoint dest {
          bins bcast[1] = {48'hFFFFFFFFFFFF};
          bins ucast[1] = default;
      }
      coverpoint type {
          bins length[16] = { [0:1535] };
          bins typed[16] = { [1536:32767] };
          bins other[1] = default;
      }
      psize: coverpoint payload.size {
          bins size[] = { 46, [47:63], 64, [65:511], [512:1023], [1024:1499], 1500 };
      }

      sz_x_t: cross type, psize;
   endgroup
endclass
</syntaxhighlight>

在这一例子中，验证工程师重点关注广播和单播帧的分布以及负载大小。

=== 同步化 ===
一个复杂的测试平台往往是包含多个可重用验证模块的环境，这些模块之间需要互相通信。Verilog的事件（<code>event</code>）允许不同语句块之间相互触发，不过这在复杂测试平台的线程间通信比较繁琐。为此，SystemVerilog提供了两种新的语言要素，信箱（<code>mailbox</code>）和旗语（<code>semaphore</code>）。信箱类似一个参数化的[[FIFO|FIFO]]（意味着其内容的类型是可定义的），可以将符合其类型的对象“装入”和“取出”信箱。而旗语则限定了对同一资源的访问个数。

== 其他与传统Verilog类似概念的比较 ==
除了前面提到的特性，SystemVerilog还在以下方面对传统的Verilog进行了增强：{{R|Zhong}}

* 过程赋值操作符（包括阻塞和非阻塞）能够直接对数组进行操作
* 端口（输入、输出、双向）可以支持更多的数据类型，包括结构体、枚举、实数等
* For循环内部可以自动定义变量，并为它添加了<code>continue</code>和<code>break</code>功能
* 在原有的<code>while</code>循环基础上添加了<code>do-while</code>循环
* 可以使用关键字<code>const</code>来声明常量
* 可以对整个数组进行初始化
* 预处理器的字符串宏的功能得到增强
* 除了原有的并发过程语句块<code>fork/join</code>结构，还提供<code>join_none</code>和<code>join_any</code>两种代码块结尾方式
* 任务的端口能够被声明为引用类型（<code>ref</code>），这使得任务能够直接获取任务参数自身（引用传递），而不是一个临时复制的数值（值传递）。因此，对输入方向的形式参数的操作会直接改变对应的实际参数。
* 函数能够被声明为空类型<code>void</code>，即不返回任何数值
* 参数（<code>parameters</code>）可以被声明为任何类型，包括用户使用<code>typedef</code>定义的新类型
* 提供[[SystemVerilog_DPI|SystemVerilog DPI]]（即SystemVerilog直接编程接口）来连接以C语言、C++编写的模块

== 注释 ==
{{NoteFoot}}

== 参考文献 ==
=== 引用 ===
{{Reflist | 35em |refs =
<ref name = "Chris">{{Cite book |title = SystemVerilog验证：测试平台编写指南 |author=克里斯·斯皮尔 |publisher=科学出版社 |ISBN = 978-7-03-025306-4 |year=2009 }}</ref>
<ref name = "Zhong">{{Cite book |author=钟文枫 |title=SystemVerilog与功能验证|publisher=机械工业出版社 |ISBN = 978-7-111-31373-1 |year=2010}}</ref>
}}

=== 来源 ===
* {{cite web |last=Project VeriPage |url=http://www.project-veripage.com/ |title=Project VeriPage |date=1997-06-06 |accessdate=2012-07-12 |archive-date=2012-06-09 |archive-url=https://web.archive.org/web/20120609151411/http://www.project-veripage.com/ |dead-url=no }}
* {{cite web |last=McGrath |first=Dylan |url=http://www.eetimes.com/news/design/showArticle.jhtml;?articleID=173601060 |title=IEEE approves SystemVerilog, revision of Verilog |publisher=EE Times |date=2005-11-09 |accessdate=2007-01-31 |archive-url=https://web.archive.org/web/20070929095929/http://www.eetimes.com/news/design/showArticle.jhtml;?articleID=173601060 |archive-date=2007-09-29 |dead-url=yes }}
* {{cite web |first=Puneet |last=Kumar |url=http://asicguru.com/System-Verilog-Tutorial/1/3 |title=System Verilog Tutorial |date=2005-11-09 |access-date=2012-07-12 |archive-url=https://web.archive.org/web/20110914004736/http://asicguru.com/System-Verilog-Tutorial/1/3/ |archive-date=2011-09-14 |dead-url=yes }}
* {{cite web |first=Gopi |last=Krishna |url=http://www.testbench.in |title=SystemVerilog ,SVA,SV DPI Tutorials |date=2005-11-09 |accessdate=2020-09-27 |archive-date=2020-09-03 |archive-url=https://web.archive.org/web/20200903075809/http://www.testbench.in/ |dead-url=no }}
* {{cite web |last= HDVL |url= http://hdvl.wordpress.com/category/systemverilog/ |title= More SystemVerilog Weblinks |accessdate= 2012-07-12 |archive-date= 2012-02-20 |archive-url= https://web.archive.org/web/20120220115358/http://hdvl.wordpress.com/category/systemverilog/ |dead-url= no }}
* {{Cite book |authors = Sutherland, Stuart, Davidmann, Simon, Flake, Peter |url = http://www.amazon.com/SystemVerilog-Design-Second-Hardware-Modeling/dp/0387333991/ref=sr_1_4?ie=UTF8&s=books&qid=1247578512&sr=8-4 |title = SystemVerilog for Design Second Edition: A Guide to Using SystemVerilog for Hardware Design and Modeling |publisher = Springer |location = New York City, NY |ISBN = 0-387-33399-1 |access-date = 2012-07-12 |archive-date = 2021-07-10 |archive-url = https://web.archive.org/web/20210710061015/https://www.amazon.com/SystemVerilog-Design-Second-Hardware-Modeling/dp/0387333991/ref=sr_1_4?ie=UTF8&s=books&qid=1247578512&sr=8-4 }}
* SystemVerilog Assertions Handbook, 2nd Edition - http://SystemVerilog.us{{Wayback|url=http://systemverilog.us/ |date=20200222165154 }}
* A Pragmatic Approach to VMM Adoption - http://SystemVerilog.us{{Wayback|url=http://systemverilog.us/ |date=20200222165154 }}

== 外部链接 ==
=== IEEE 标准文献 ===
* [http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5354441 1800-2009 IEEE Standard for System Verilog-Unified Hardware Design, Specification, and Verification Language]
*[http://www.vhdl.org/sv/SystemVerilog_3.1a.pdf SystemVerilog 3.1a Language Reference Manual]{{Wayback|url=http://www.vhdl.org/sv/SystemVerilog_3.1a.pdf |date=20121002202901 }} - 2004 draft version, which is before IEEE 1800-2005 standard.

=== 教程 ===
* [http://www.asic-world.com/systemverilog/tutorial.html SystemVerilog Tutorial]{{Wayback|url=http://www.asic-world.com/systemverilog/tutorial.html |date=20120622214919 }}

=== 标准开发 ===
* [http://www.eda.org/sv-ieee1800/ IEEE P1800]{{Wayback|url=http://www.eda.org/sv-ieee1800/ |date=20160312071731 }} – Working group for SystemVerilog
* Sites used before IEEE 1800-2005
** [http://www.systemverilog.org/ SystemVerilog official website]{{Wayback|url=http://www.systemverilog.org/ |date=20120502044256 }}
** [http://www.vhdl.org/sv/ SystemVerilog Technical Committees]{{Wayback|url=http://www.vhdl.org/sv/ |date=20121105035334 }}

=== 语言延伸===
* [http://www.veripool.org/verilog-mode Verilog AUTOs] {{Wayback|url=http://www.veripool.org/verilog-mode |date=20220409081314 }} - An open-source meta-comment system to simplify maintaining Verilog code.

== 参见 ==
{{Portal box|电子学}}
* [[Verilog|Verilog]]
* [[硬件验证语言|硬件验证语言]]

{{-}}
{{数字电路}}
{{可编程逻辑设备}}
{{IEEE標準}}

[[Category:硬件验证语言|S]]