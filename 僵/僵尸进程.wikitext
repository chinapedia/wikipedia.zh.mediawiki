在[[类UNIX系统|类UNIX系统]]中，'''僵尸进程'''是指完成执行（通过<code>[[exit_(Unix)|exit]]</code>[[系统调用|系统调用]]，或运行时发生[[致命错误|致命错误]]或收到终止[[信号_(计算机科学)|信号]]所致），但在操作系统的进程表中仍然存在其[[进程控制块|进程控制块]]，处于"{{tsl|en|Process state#Terminated|终止状态}}"的进程。这发生于[[子进程|子进程]]需要保留表项以允许其[[父进程|父进程]]读取子进程的[[退出狀態|退出狀態]]：一旦退出态通过<code>[[wait_(Unix)|wait]]</code>[[系统调用|系统调用]]读取，僵尸进程条目就从进程表中删除，称之为"回收"（reaped）。正常情况下，进程直接被其父进程<code>wait</code>并由系统回收。进程长时间保持僵尸状态一般是错误的并导致[[资源泄漏|资源泄漏]]。

英文术语''zombie process''源自[[喪屍|喪屍]]——不死之人，隐喻子进程已死但仍然没有被回收。与正常进程不同，<code>[[kill_(命令)|kill]]</code>命令对僵尸进程无效。[[孤儿进程|孤儿进程]]不同于僵尸进程，其父进程已经死掉，但孤儿进程仍能正常执行，但并不会变为僵尸进程，因为被<code>[[init|init]]</code>（进程ID号为1）收养并<code>wait</code>其退出。

子进程死后，系统会发送[[signal.h|SIGCHLD信号]]给父进程，父进程对其默认处理是忽略。如果想响应这个消息，父进程通常在信号事件处理程序中，使用<code>wait</code>系统调用来响应子进程的终止。

僵尸进程被回收后，其进程号与在进程表中的表项都可以被系统重用。但如果父进程没有调用<code>wait</code>，僵尸进程将保留进程表中的表项，导致了[[资源泄漏|资源泄漏]]。某些情况下这反倒是期望的：父进程创建了另外一个子进程，并希望具有不同的进程号。如果父进程通过设置事件处理函数为<code>SIG_IGN</code>显式忽略SIGCHLD信号，而不是隐式默认忽略该信号，或者具有<code>SA_NOCLDWAIT</code>标志，所有子进程的退出状态信息将被抛弃并且直接被系统回收。 

UNIX命令<code>[[ps_(Unix)|ps]]</code>列出的进程的状态（"STAT"）栏标示为 "<code>Z</code>"则为僵尸进程。<ref>{{cite web|url=http://www-cdf.fnal.gov/offline/UNIX_Concepts/concepts.zombies.txt|title=Zombies(5) - UNIX System V (Concepts)|work=The Collider Detector at Fermilab|accessdate=2014-05-24|archive-date=2020-11-09|archive-url=https://web.archive.org/web/20201109043506/https://www-cdf.fnal.gov/offline/UNIX_Concepts/concepts.zombies.txt|dead-url=no}}</ref>

收割僵尸进程的方法是通过<code>kill</code>命令手工向其父进程发送SIGCHLD信号。如果其父进程仍然拒绝收割僵尸进程，则终止父进程，使得<code>init</code>进程收养僵尸进程。<code>init</code>进程周期执行<code>wait</code>系统调用收割其收养的所有僵尸进程。  

为避免产生僵尸进程，实际应用中一般采取的方式是：
#将父进程中对SIGCHLD信号的处理函数设为SIG_IGN（忽略信号）；
#fork两次并杀死一级子进程，令二级子进程成为孤儿进程而被init所“收养”、清理<ref>[[UNIX环境高级编程|UNIX环境高级编程]]（''Advanced Programming in the UNIX Environment''），[[理查德·史蒂文斯|理查德·史蒂文斯]]著，1992，ISBN 0-201-56317-7</ref>。

==例子==
<!-- Should this go elsewhere? -->
<syntaxhighlight lang="c_mac">
#include <sys/wait.h>
#include <stdlib.h>
#include <unistd.h>

int main(void)
{
	pid_t pids[10];
	int i;

	for (i = 9; i >= 0; --i) {
		pids[i] = fork();
		if (pids[i] == 0) {
			sleep(i+1);
			_exit(0);
		}
	}

	for (i = 9; i >= 0; --i)
		waitpid(pids[i], NULL, 0);

	return 0;
}
</syntaxhighlight>

==参见==
* [[Fork炸弹|Fork炸弹]]
* {{tsl|en|Zombie object}}

== 参考文献==
{{Reflist|2}}
{{Refbegin}}
* {{cite web|url=http://unixhelp.ed.ac.uk/CGI/man-cgi?ps|title=UNIX man pages : ps ()|work=UNIXhelp for Users|deadurl=yes|archiveurl=https://web.archive.org/web/20130308114410/http://unixhelp.ed.ac.uk/CGI/man-cgi?ps|archivedate=2013-03-08|accessdate=2014-05-24}}
{{Refend}}

==外部链接==
* [http://yarchive.net/comp/zombie_process.html Zombie process usenet post] {{Wayback|url=http://yarchive.net/comp/zombie_process.html |date=20200201183412 }}
* [http://www.faqs.org/faqs/unix-faq/faq/part3/section-13.html UNIX FAQ Question 3.13: How do I get rid of zombie processes that persevere?] {{Wayback|url=http://www.faqs.org/faqs/unix-faq/faq/part3/section-13.html |date=20200930072447 }}

[[Category:进程|Category:进程]]