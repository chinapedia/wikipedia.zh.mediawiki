{{noteTA
|G1=IT
|1=zh-cn:宏; zh-tw:巨集;
}}
[[File:Printf.svg|350px]]
'''格式化字符串'''（{{lang-en|'''format string'''}}）是一些[[程序设计语言|程序设计语言]]的输入/输出[[函式庫|库]]中能將[[字符串|字符串]]参数轉換為另一種形式輸出的[[子程序|函数]]。例如C、C++等程序设计语言的printf类函数，其中的转换说明（conversion specification）用于把随后对应的0个或多个函数参数转换为相应的格式输出；格式化字符串中转换说明以外的其它字符原样输出。<ref>C11 standard n1570 draft. 7.21.6.1.3 pp309</ref>

==C语言printf函数为代表的一类==
===格式化占位符===
格式化字符串中的占位符用于指明输出的参数值如何格式化。

格式化占位符（format placeholder），语法是：
:<code>%[''parameter''][''flags''][''field width''][.''precision''][''length'']''type''</code>

'''Parameter'''可以忽略或者是： 
:{| class="wikitable"
|-
! 字符
! 描述
|-
| <code>''n''$</code>
| ''n''是用这个格式说明符（specifier）显示第几个参数；这使得参数可以输出多次，使用多个格式说明符，以不同的顺序输出。 如果任意一个占位符使用了''parameter''，则其他所有占位符必须也使用''parameter''。这是[[POSIX|POSIX]]扩展，不属于[[C语言|ISO C]]。例：<code>printf("%2$d %2$#x; %1$d %1$#x",16,17)</code> 产生"<code>17 0x11; 16 0x10</code>"
|}

'''Flags'''可为0个或多个：
:{| class="wikitable"
|-
! 字符
! 描述
|-
| <code>+</code>
|总是表示有符号数值的'<code>+</code>'或'<code>-</code>'号，缺省情况是忽略正数的符号。仅适用于数值类型。
|-
| ''空格''
|使得有符号数的输出如果没有正负号或者输出0个字符，则前缀1个空格。如果空格与'+'同时出现，则空格说明符被忽略。
|-
| <code>-</code>
|左对齐。缺省情况是右对齐。
|-
| <code>#</code>
| 对于'<code>g</code>'与'<code>G</code>'，不删除尾部0以表示精度。对于'<code>f</code>', '<code>F</code>', '<code>e</code>', '<code>E</code>', '<code>g</code>', '<code>G</code>', 总是输出小数点。对于'<code>o</code>', '<code>x</code>', '<code>X</code>', 在非0数值前分别输出前缀<code>0</code>, <code>0x</code>, and <code>0X</code>表示数制。
|-
| <code>0</code>
|如果''width''选项前缀以<code>0</code>，则在左侧用<code>0</code>填充直至达到宽度要求。例如<code>printf("%2d", 3)</code>输出"<code> 3</code>"，而<code>printf("%02d", 3)</code>输出"<code>03</code>"。如果<code>0</code>与<code>-</code>均出现，则<code>0</code>被忽略，即左对齐依然用空格填充。
|}

'''Field Width'''给出显示数值的最小宽度，典型用于制表输出时填充固定宽度的表目。实际输出字符的个数不足域宽，则根据左对齐或右对齐进行填充。实际输出字符的个数超过域宽并不引起数值截断，而是显示全部。宽度值的前导0被解释为0填充标志，如上述；前导的负值被解释为其[[绝对值|绝对值]]，负号解释为左对齐标志。如果域宽值为<code>*</code>，则由对应的函数参数的值为当前域宽。

'''Precision'''通常指明输出的''最大''长度，依赖于特定的格式化类型。对于d、i、u、x、o的整型数值，是指最小数字位数，不足的位要在左侧补0，如果超过也不截断，缺省值为1。对于a,A,e,E,f,F的浮点数值，是指小数点右边显示的数字位数，必要时四舍五入或补0；缺省值为6。对于g,G的浮点数值，是指[[有效数字|有效数字]]的最大位数；缺省值为6。对于s的字符串类型，是指输出的字节的上限，超出限制的其它字符将被截断。如果域宽为<code>*</code>，则由对应的函数参数的值为当前域宽。如果仅给出了小数点，则域宽为0。

'''Length'''指出浮点型参数或整型参数的长度。此项Microsoft称为“Size”。可以忽略，或者是下述：
:{| class="wikitable"
|-
! 字符
! 描述
|-
| <code>hh</code>
| 对于整数类型，<code>printf</code>期待一个从<code>char</code>提升的<code>int</code>尺寸的整型参数。
|-
| <code>h</code>
| 对于整数类型，<code>printf</code>期待一个从<code>short</code>提升的<code>int</code>尺寸的整型参数。
|-
| <code>l</code>
| 对于整数类型，<code>printf</code>期待一个<code>long</code>尺寸的整型参数。
对于浮点类型，<code>printf</code>期待一个<code>double</code>尺寸的整型参数。对于字符串s类型，<code>printf</code>期待一个<code>wchar_t</code>指针参数。对于字符c类型，<code>printf</code>期待一个<code>wint_t</code>型的参数。
|-
| <code>ll</code>
| 对于整数类型，<code>printf</code>期待一个<code>long long</code>尺寸的整型参数。Microsoft也可以使用<code>I64</code>。
|-
| <code>L</code>
| 对于浮点类型，<code>printf</code>期待一个<code>long double</code>尺寸的整型参数。
|-
| <code>z</code>
| 对于整数类型，<code>printf</code>期待一个<code>size_t</code>尺寸的整型参数。
|-
| <code>j</code>
| 对于整数类型，<code>printf</code>期待一个<code>intmax_t</code>尺寸的整型参数。
|-
| <code>t</code>
| 对于整数类型，<code>printf</code>期待一个<code>ptrdiff_t</code>尺寸的整型参数。
|}

此外，在ISO C99广泛接受前，还有几个平台相关的length选项：
:{| class="wikitable"
|-
! 字符
! 描述
|-
| <code>I</code>
| 对于有符号整数类型，<code>printf</code>期待一个<code>ptrdiff_t</code>尺寸的整型参数。对于无符号整数类型，<code>printf</code>期待一个<code>size_t</code>尺寸的整型参数。''常见于Win32/Win64平台。''
|-
| <code>I32</code>
| 对于整数类型，<code>printf</code>期待一个32位（双字）的整型参数。''常见于Win32/Win64平台。''
|-
| <code>I64</code>
| 对于整数类型，<code>printf</code>期待一个64位（四字）的整型参数。''常见于Win32/Win64平台。''
|-
| <code>q</code>
| 对于整数类型，<code>printf</code>期待一个64位（四字）的整型参数。''常见于[[BSD_UNIX|BSD]]平台。''
|}

ISO C99的头文件<code>[[inttypes.h|inttypes.h]]</code>包含了许多宏，用于平台独立的<code>printf</code>编码。例如：
:{| class="wikitable"
|-
! 宏
! 定义
|-
| <code>PRId32</code>
| 典型地等效于<code>I32d</code> (''Win32/Win64'')或<code>d</code>
|-
| <code>PRId64</code>
| 典型地等效于<code>I64d</code> (''Win32/Win64''), <code>lld</code> (''32位平台'')或<code>ld</code> (''64位平台'')
|-
| <code>PRIi32</code>
| 典型地等效于<code>I32i</code> (''Win32/Win64'')或<code>i</code>
|-
| <code>PRIi64</code>
| 典型地等效于<code>I64i</code> (''Win32/Win64''), <code>lli</code> (''32位平台'')或<code>li</code> (''64位平台'')
|-
| <code>PRIu32</code>
| 典型地等效于<code>I32u</code> (''Win32/Win64'')或<code>u</code>
|-
| <code>PRIu64</code>
| 典型地等效于<code>I64u</code> (''Win32/Win64''), <code>llu</code> (''32位平台'')或<code>lu</code> (''64位平台'')
|-
| <code>PRIx32</code>
| 典型地等效于<code>I32x</code> (''Win32/Win64'')或<code>x</code>
|-
| <code>PRIx64</code>
| 典型地等效于<code>I64x</code> (''Win32/Win64''), <code>llx</code> (''32位平台'')或<code>lx</code> (''64位平台'')
|}

===类型===
'''Type'''，也称转换说明（conversion specification/specifier），可以是：
:{| class="wikitable"
|-
! 字符
! 描述
|-
| <code>d</code>, <code>i</code>
|有符号十进制数值<code>int</code>。'<code>%d</code>'与'<code>%i</code>'对于输出是同义；但对于<code>[[scanf|scanf]]()</code>输入二者不同，其中<code>%i</code>在输入值有前缀<code>0x</code>或0时，分别表示16进制或8进制的值。如果指定了精度，则输出的数字不足时在左侧补0。默认精度为1。精度为0且值为0，则输出为空。
|-
| <code>u</code>
| 十进制<code>unsigned int</code>。如果指定了精度，则输出的数字不足时在左侧补0。默认精度为1。精度为0且值为0，则输出为空。
|-
| <code>f</code>, <code>F</code>
|<code>double</code>型输出10进制{{tsl|en|Fixed-point arithmetic|定点}}表示。'<code>f</code>'与'<code>F</code>'差异是表示无穷与NaN时，'<code>f</code>'输出'<code>inf</code>', '<code>infinity</code>'与'<code>nan</code>'；'<code>F</code>'输出'<code>INF</code>', '<code>INFINITY</code>'与'<code>NAN</code>'。小数点后的数字位数等于精度，最后一位数字[[四舍五入|四舍五入]]。精度默认为6。如果精度为0且没有#标记，则不出现小数点。小数点左侧至少一位数字。
|-
| <code>e</code>, <code>E</code>
|<code>double</code>值，输出形式为10进制的([<code>-</code>]d.ddd <code>e</code>[<code>+</code>/<code>-</code>]ddd). <code>E</code>版本使用的指数符号为<code>E</code>（而不是<code>e</code>）。指数部分至少包含2位数字，如果值为0，则指数部分为<code>00</code>。Windows系统，指数部分至少为3位数字，例如<code>1.5e002</code>，也可用Microsoft版的运行时函数<code>_set_output_format</code> 修改。小数点前存在1位数字。小数点后的数字位数等于精度。精度默认为6。如果精度为0且没有#标记，则不出现小数点。
|-
| <code>g</code>, <code>G</code>
|<code>double</code>型数值，精度定义为全部有效数字位数。当指数部分在[[闭区间|闭区间]] [-4,5] 内，输出为定点形式；否则输出为指数浮点形式。'<code>g</code>'使用小写字母，'<code>G</code>'使用大写字母。小数点右侧的尾数0不被显示；显示小数点仅当输出的小数部分不为0。
|-
| <code>x</code>, <code>X</code>
|16进制<code>unsigned int</code>。'<code>x</code>'使用小写字母；'<code>X</code>'使用大写字母。如果指定了精度，则输出的数字不足时在左侧补0。默认精度为1。精度为0且值为0，则输出为空。
|-
| <code>o</code>
|8进制<code>unsigned int</code>。如果指定了精度，则输出的数字不足时在左侧补0。默认精度为1。精度为0且值为0，则输出为空。
|-
| <code>s</code>
|如果没有用l标志，输出{{tsl|en|null-terminated string|null结尾字符串}}直到精度规定的上限；如果没有指定精度，则输出所有字节。如果用了l标志，则对应函数参数指向wchar_t型的数组，输出时把每个宽字符转化为多字节字符，相当于调用<code>wcrtomb</code>函数。
|-
| <code>c</code>
|如果没有用l标志，把int参数转为<code>unsigned char</code>型输出；如果用了l标志，把wint_t参数转为包含两个元素的<code>wchart_t</code>数组，其中第一个元素包含要输出的字符，第二个元素为null宽字符。
|-
| <code>p</code>
|<code>void *</code>型
|-
| <code>a</code>, <code>A</code>
|<code>double</code>型的16进制表示，"[−]0'''x'''h.hhhh '''p'''±d"。其中指数部分为10进制表示的形式。例如：1025.0<sub>10</sub>输出为0x1.004000p+10。'<code>a</code>'使用小写字母，'<code>A</code>'使用大写字母。<ref>{{cite web |url=http://www.gnu.org/software/libc/manual/html_node/Table-of-Output-Conversions.html#Table-of-Output-Conversions |title="The GNU C Library Reference Manual", "12.12.3 Table of Output Conversions" |publisher=Gnu.org |date= |accessdate=2014-03-17 |archive-date=2021-03-27 |archive-url=https://web.archive.org/web/20210327024938/https://www.gnu.org/software/libc/manual/html_node/Table-of-Output-Conversions.html#Table-of-Output-Conversions |dead-url=no }}</ref><ref>[http://www.cplusplus.com/reference/cstdio/printf/ "printf"] {{Wayback|url=http://www.cplusplus.com/reference/cstdio/printf/ |date=20210327024542 }}
("%a" added in C99)</ref> （C++11流使用<code>hexfloat</code>输出16进制浮点数）
|-
| <code>n</code>
| 不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。
|-
| <code>%</code>
|'<code>%</code>'字面值，不接受任何flags, width, precision or length。
|}

宽度与精度格式化参数可以忽略，或者直接指定，或者用星号"<code>*</code>"表示取对应函数参数的值。例如<code>printf("%*d", 5, 10)</code>输出"<code>   10</code>"；<code>printf("%.*s", 3, "abcdef")</code> 输出"<code>abc</code>"。

如果函数参数太少，不能匹配所有的格式参数说明符，或者函数参数的类型不匹配，将导致未定义（undefined）行为。过多的函数参数被忽略。许多时候，未定义的行为将导致{{tsl|en|Format string attack|格式化字符串攻击}}。

某些编译器，如[[GCC|GCC]]，会静态检查printf这一类函数的格式化参数并编译警告存在的问题（当使用编译标志<code>-Wall</code>或<code>-Wformat</code>）。GCC也会对用户自定义的printf风格函数做静态检查，如果在函数定义时使用了非标准的 <code>__attribute__((format(...)))</code>。

===具有printf风格函数的编程语言===
{{div col|colwidth=25em}}
*[[AMPL|AMPL]]
*[[awk|awk]] (通过sprintf)
*[[Bourne_shell|Bourne shell]] (sh)以及变种[[Korn_shell|Korn shell]] (ksh), [[Bourne_again_shell|Bourne again shell]] (bash), [[Z_shell|Z shell]] (zsh)
*[[C语言|C]]
**[[C++|C++]] (以及[[iostream|iostream]]与[[iomanip|iomanip]]输出操作)
**[[Objective-C|Objective-C]]
*[[Clojure|Clojure]]
*[[Common_Lisp|Common Lisp]]
*[[D语言|D]]
*[[F#|F#]]
*[[GNU線性規劃工具集|GNU MathProg]]
*[[GNU_Octave|GNU Octave]]
* G ([[LabVIEW|LabVIEW]])
*[[Go语言|Go]]
*[[Haskell|Haskell]]
*[[Java|Java]] （版本1.5开始，在<code>PrintStream</code>类提供了<code>printf</code>函数）
** [[Clojure|Clojure]]
** [[Scala|Scala]]
*[[Lua|Lua]] (string.format)
*[[Maple|Maple]]
*[[Mathematica|Mathematica]]
*[[MATLAB|MATLAB]]
*[[Mythryl|Mythryl]]
*[[OCaml|OCaml]]
** ([[OCaml|OCaml]] Batteries Included provides an additional user-extensible printf)
*{{tsl|en|PARI/GP}}
*[[PHP|PHP]]
*[[Perl|Perl]]
*[[Python|Python]] (使用%操作符。2.6版以后提供了format方法。)
*[[R语言|R]]
*[[Ruby|Ruby]]
*[[Rust|Rust]]
*[[Tcl|Tcl]] (通过format命令)
*[[Transact-SQL|Transact-SQL]] (通过[http://technet.microsoft.com/en-us/library/ms175014.aspx xp_sprintf] {{Wayback|url=http://technet.microsoft.com/en-us/library/ms175014.aspx |date=20160307213236 }})
*[[Vala|Vala]] (通过<code>print()</code>与<code>FileStream.printf()</code>)
{{div col end}}
此外，[[Windows_API|Windows API]]的FormatMessage函数也使用格式化字符串说明。

==参考文献==
{{reflist}}

==外部链接==
*[http://en.cppreference.com/w/cpp/io/c/fprintf C++ reference for <code>std::fprintf</code>] {{Wayback|url=http://en.cppreference.com/w/cpp/io/c/fprintf |date=20210302020322 }}
*[http://www.pixelbeat.org/programming/gcc/format_specs.html gcc printf format specifications quick reference] {{Wayback|url=http://www.pixelbeat.org/programming/gcc/format_specs.html |date=20210307203257 }}
*{{man|sh|printf|SUS|print formatted output}}
*The [http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax <code>Formatter</code> specification] {{Wayback|url=http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax |date=20090806214530 }} in Java 1.5
*[http://wiki.bash-hackers.org/commands/builtin/printf GNU Bash <code>printf(1)</code> builtin] {{Wayback|url=http://wiki.bash-hackers.org/commands/builtin/printf |date=20210225090311 }}

{{CProLang}}
{{Unix commands}}

[[Category:C標準函式庫|Category:C標準函式庫]]
[[Category:Unix软件|Category:Unix软件]]