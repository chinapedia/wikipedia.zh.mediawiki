{{noteTA |G1 = IT}}{{Type systems}}

'''鸭子类型'''（{{Lang-en|'''duck typing'''}}）在[[程序设计|程序设计]]中是[[類型系統|动态类型]]的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由「当前[[方法_(電腦科學)|方法]]<!-- Original: [[Method_(computer_science)|method]] -->和属性的集合」决定。这个概念的名字来源于由{{le|詹姆斯·惠特科姆·莱利|James Whitcomb Riley}}提出的[[鸭子测试|鸭子测试]]（见下面的“[[#历史|历史]]”章节），“鸭子测试”可以这样表述：

:“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”<ref>{{cite book |last=Davis |first=Robin S. |title=Who's Sitting on Your Nest Egg? |pages=7 |url=http://books.google.com/books?id=PEoti64PICIC&pg=PA7&dq=%22James+Whitcomb+Riley%22+%22when+I+see+a+bird+that+walks+like+a+duck+and+swims+%22&ei=JsHcSejCBoToM7SKge0O |access-date=2010-01-30 |archive-date=2014-06-28 |archive-url=https://web.archive.org/web/20140628062622/http://books.google.com/books?id=PEoti64PICIC&pg=PA7&dq=%22James+Whitcomb+Riley%22+%22when+I+see+a+bird+that+walks+like+a+duck+and+swims+%22&ei=JsHcSejCBoToM7SKge0O |dead-url=no }}</ref><ref>{{cite book |last=Heim |first=Michael |title=Exploring Indiana Highways |pages=68 |url=http://books.google.com/books?id=j7zds6xx7S0C&pg=PA68&dq=%22james+Riley%22+OR+%22James+Whitcomb+Riley%22+bird++duck&num=100&ei=BsPcSYWoHJCmNfG7tM4O |access-date=2010-01-30 |archive-date=2014-06-28 |archive-url=https://web.archive.org/web/20140628061521/http://books.google.com/books?id=j7zds6xx7S0C&pg=PA68&dq=%22james+Riley%22+OR+%22James+Whitcomb+Riley%22+bird++duck&num=100&ei=BsPcSYWoHJCmNfG7tM4O |dead-url=no }}</ref>

在鸭子类型中，关注点在于对象的行为，能做什么；而不是关注对象所属的类型。例如，在不使用鸭子类型的语言中，我们可以编写一个函数，它接受一个类型为「鸭子」的对象，并调用它的「走」和「叫」方法。在使用鸭子类型的语言中，这样的一个函数可以接受一个任意类型的对象，并调用它的「走」和「叫」方法。如果这些需要被调用的方法不存在，那么将引发一个运行时错误。任何拥有这样的正确的「走」和「叫」方法的对象都可被函数接受的这种行为引出<!-- evoke，唤醒？-->了以上表述，这种决定类型的方式因此得名。

鸭子类型通常得益于「不」测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用。

在常规类型中，我们能否在一个特定场景中使用某个对象取决于这个对象的类型，而在鸭子类型中，则取决于这个对象是否具有某种属性或者方法——即只要具备特定的属性或方法，能通过鸭子测试，就可以使用。

== 概念样例 ==
考虑用于一个使用鸭子类型的语言的以下[[伪代码|伪代码]]：

 '''function''' calculate(a, b, c) => '''return''' (a+b)*c
 
 example1 = calculate (1, 2, 3)
 example2 = calculate ([1, 2, 3], [4, 5, 6], 2)
 example3 = calculate ('apples ', 'and oranges, ', 3)
 
 '''print''' '''to_string''' example1
 '''print''' '''to_string''' example2
 '''print''' '''to_string''' example3

在样例中，每次对<code>calculate</code>的调用都使用的对象（数字、列表和字符串）在继承关系中没有联系。只要对象支持“+”和“*”方法，操作就能成功。例如，翻译成[[Ruby|Ruby]]<!-- Original: [[Ruby_(programming_language)|Ruby]] -->或[[Python|Python]]<!-- Original: [[Python|Python]] -->语言，运行结果应该是：

 9
 [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
 apples and oranges, apples and oranges, apples and oranges, 

这样，鸭子类型在不使用[[继承_(计算机科学)|继承]]<!-- Original: [[inheritance_(computer_science)|inheritance]] -->的情况下使用了[[多态_(计算机科学)|多态]]。唯一的要求是<code>calculate</code>函数需要作为参数的对象拥有“+”和“*”方法。以下样例（[[Python|Python]]语言）体现了鸭子测试。就<code>in_the_forest</code>函数而言，对象是一个鸭子：

<syntaxhighlight lang="python">
class Duck:
    def quack(self):
        print "这鸭子正在嘎嘎叫"

    def feathers(self):
        print "这鸭子拥有白色和灰色的羽毛"

class Person:
    def quack(self):
        print "这人正在模仿鸭子"

    def feathers(self):
        print "这人在地上拿起1根羽毛然后给其他人看"

def in_the_forest(duck):
    duck.quack()
    duck.feathers()

def game():
    donald = Duck()
    john = Person()
    in_the_forest(donald)
    in_the_forest(john)

game()
</syntaxhighlight>

== 静态语言中的鸭子类型 ==
一些通常的[[類型系統|静态]]<!-- Original: [[Type_system#Static_typing|statically typed]] -->语言如[[BOO|Boo]]<!-- Original: [[Boo_(programming_language)|Boo]] -->和[[C＃|C#]]<!-- Original: [[C_Sharp_(programming_language)|C#]] -->第四版，有一些额外的类型注解，它们指示编译器将类的类型检查安排在运行时而不是编译时，并在编译器的输出中包含用于运行时类型检查的代码<ref>{{Cite web |url=http://boo.codehaus.org/Duck+Typing |title=Boo: Duck Typing |accessdate=2009-07-15 |archive-date=2008-10-06 |archive-url=https://web.archive.org/web/20081006075246/http://boo.codehaus.org/Duck+Typing |dead-url=no }}</ref><ref>{{Cite web |url=http://blogs.msdn.com/ericwhite/archive/2008/10/29/anders-hejlsberg-introduces-c-4-0-at-pdc-2008.aspx |title=Anders Hejlsberg Introduces C# 4.0 at PDC 2008 |accessdate=2009-07-15 |archive-date=2009-12-16 |archive-url=https://web.archive.org/web/20091216125501/http://blogs.msdn.com/ericwhite/archive/2008/10/29/anders-hejlsberg-introduces-c-4-0-at-pdc-2008.aspx |dead-url=no }}</ref>。这些附加的内容允许这些语言享受鸭子类型的大多数益处，仅有的缺点是需要在编译时识别和指定这些动态类。

== 与其他类型系统的比较 ==

=== 结构类型系统 ===
鸭子类型和{{le|结构类型|Structural type system}}相似但与之不同。结构类型由类型的结构决定类型的兼容性和等价性，而鸭子类型只由结构中在[[运行时|运行时]]所访问的部分决定类型的兼容性。[[OCaml|Objective Caml]]<!-- Original: [[Objective_Caml|Objective Caml]] -->语言使用结构类型系统。

=== 接口 ===
[[介面_(電腦科學)|接口]]<!-- Original: [[Interface_(computer_science)#Interfaces_in_practice|Interfaces]] -->可以提供鸭子类型的一些益处，但鸭子类型与之不同的是没有显式定义任何接口。例如，如果一个第三方Java库实现了一个使用者不允许<!-- 能？-->修改的类，使用者就无法把这个类的实例用作一个自己定义的接口的实现<!-- 原文没有“的实现”：For example, if a third party Java library implements a class you are not allowed to modify, you cannot use an instance of the class in place of an interface you've defined yourself, ... -->，而鸭子类型允许这样做。

=== 模板或泛型 ===
[[模板_(C++)|模板]]<!-- Original: [[Template_(programming)|Template]] -->函数或方法在一个[[類型系統|静态类型]]<!-- Original: [[Type_system#Static_typing|static typing]] -->上下文中应用鸭子测试；这同时带来了[[類型系統|静态和动态类型检查]]<!-- Original: [[Type_system#Static_and_dynamic_type_checking_in_practice|static versus dynamic type checking]] -->的一般优点和缺点。同时，由于在鸭子类型中，只有“在运行时被实际调用的”方法需要被实现，而模板要求实现“在编译时不能证明{{le|不可到达代码|Unreachable code|不可到达}}的”所有方法，因此鸭子类型更具有可伸缩性。

实例包括带有模板的C++语言和Java语言的泛型。

== 批评 ==
关于鸭子类型常常被引用的一个批评是它要求程序员在任何时候都必须很好地理解他/她正在编写的代码。在一个强静态类型的、使用了类型继承树和参数类型检查的语言中，给一个类提供未预测的对象类型更为困难。例如，在Python中，你可以创建一个称为Wine的类，并在其中需要实现press方法。然而，一个称为Trousers的类可能也实现press()方法。为了避免奇怪的、难以检测的错误，开发者在使用鸭子类型时需要意识到每一个“press”方法的可能使用，即使在语义上和他/她所正在编写工作的代码没有任何关系。

本质上，问题是：“如果它走起来像鸭子并且叫起来像鸭子”，它也可以是一只正在模仿鸭子的龙。尽管它们可以模仿鸭子，但也许你不总是想让龙进入池塘。

鸭子类型的提倡者，如[[吉多·范罗苏姆|吉多·范罗苏姆]]，认为这个问题可以通过在测试和维护代码库前拥有足够的了解来解决<ref>{{cite web | url=http://mindview.net/WebLog/log-0025 | title=Strong Typing vs. Strong Testing | author=Bruce Eckel | publisher=mindview | access-date=2009-07-15 | archive-url=https://web.archive.org/web/20090306160420/http://mindview.net/WebLog/log-0025 | archive-date=2009-03-06 | dead-url=yes }}</ref><ref>{{cite web | url=http://www.artima.com/intv/pycontract.html | title=Contracts in Python. A Conversation with Guido van Rossum, Part IV | author=Bill Venners | publisher=Artima | accessdate=2009-07-15 | archive-date=2009-04-29 | archive-url=https://web.archive.org/web/20090429024736/http://www.artima.com/intv/pycontract.html | dead-url=no }}</ref>。

对鸭子类型的批评倾向于成为关于[[類型系統|动态类型和静态类型]]<!-- Original: [[Type_system#Controversy|dynamically typed versus statically typed]] -->的争论的更广阔的观点的特殊情形。<!-- Criticisms around duck typing tend to be special cases of broader points of contention regarding dynamically typed versus statically typed programming language semantics. -->

== 历史 ==
[[Alex_Martelli|Alex Martelli]]很早（2000年）就在发布到comp.lang.python[[新闻组|新闻组]]<!-- Original: [[newsgroup|newsgroup]] -->上的一则[http://groups.google.com/group/comp.lang.python/msg/e230ca916be58835?hl=en& 消息]{{Wayback|url=http://groups.google.com/group/comp.lang.python/msg/e230ca916be58835?hl=en& |date=20111102163056 }}中使用了这一术语。他同时对鸭子测试的错误的字面理解提出了提醒，以避免人们错误认为这个术语已经被使用。

: “换言之，不要检查它'''是不是'''一个鸭子：检查它'''像不像'''一个鸭子地'''叫'''，等等。取决于你需要哪个像鸭子的行为的子集来使用语言<!-- to play your language-games with -->。”

== 实现 ==

=== 在ColdFusion中 ===
web应用程序脚本语言[[ColdFusion|ColdFusion]]<!-- Original: [[ColdFusion|ColdFusion]] -->允许函数参数被指定为类型为''any''。对于这种参数，任意对象都可被传入，函数调用在运行时被动态绑定。如果对象没有实现一个被调用的函数，一个可被捕获并优雅地处理的运行时异常将被抛出。在ColdFusion 8中，这也可以被一个已定义的事件onMissingMethod()而不是异常处理器处理。另一个可替代的参数类型''WEB-INF.cftags.component''限制传入参数是一个ColdFusion组件（CFC），在一个不正确的对象传入时它提供了更好的错误消息。
===在C#中===

[[C_Sharp_4.0|C# 4.0]]实现了动态成员查询（dynamic member lookup）实现了鸭子类型化。注意下例中类方法InTheForest的参数类型被声明为dynamic。
<syntaxhighlight lang="csharp">
using System;

namespace DuckTyping 
{    
    public class Duck 
    {
        public void Quack()    { Console.WriteLine("这鸭子正在嘎嘎叫"); }
        public void Feathers() { Console.WriteLine("这鸭子拥有白色与灰色羽毛"); }
    }

    public class Person 
    {
        public void Quack()    { Console.WriteLine("这人正在模仿鸭子"); }
        public void Feathers() { Console.WriteLine("这人在地上拿起1根羽毛然后给其他人看"); }
    }

    internal class Program 
    {
        private static void InTheForest(dynamic duck) 
        {
            duck.Quack();
            duck.Feathers();
        }

        private static void Game() 
        {
            Duck donald = new Duck();
            Person john = new Person();
            InTheForest(donald);
            InTheForest(john);
        }

        private static void Main() 
        {
            Game();
        }
    }
}
</syntaxhighlight>

=== 在Common Lisp中 ===
[[Common_Lisp|Common Lisp]]<!-- Original: [[Common_Lisp_(programming_language)|Common Lisp]] -->提供了一个面向对象的扩展（[[Common_Lisp对象系统|Common Lisp对象系统]]，简写为CLOS）。在Common Lisp中，CLOS和Lisp的动态类型使鸭子类型成为一种通用的编程风格。

使用Common Lisp，用户通常不需要查询类型，因为如果一个函数不适用，系统会抛出一个运行时错误。这个错误可以被Common Lisp的条件系统处理。在类外定义的方法也可以为指定的对象定义。

<syntaxhighlight lang="lisp">
(defclass duck () ())

(defmethod quack ((a-duck duck))
  (print "这鸭子正在嘎嘎叫"))

(defmethod feathers ((a-duck duck))
  (print "这鸭子有白色和灰色羽毛"))

(defclass person () ())

(defmethod quack ((a-person person))
  (print "这人正在模仿鸭子"))

(defmethod feathers ((a-person person))
  (print "这人在地上拿起1根羽毛然后给其他人看"))

(defmethod in-the-forest (duck)
  (quack duck)
  (feathers duck))

(defmethod game ()
  (let ((donald (make-instance 'duck))
        (john (make-instance 'person)))
    (in-the-forest donald)
    (in-the-forest john)))

(game)
</syntaxhighlight>

Common Lisp通常的开发风格（像[[SLIME|SLIME]]一样使用Lisp [[REPL|REPL]]）也允许交互式修复：

<syntaxhighlight lang="lisp">
? (defclass cat () ())
#<STANDARD-CLASS CAT>
? (quack (make-instance 'cat))
> Error: There is no applicable method for the generic function:
>          #<STANDARD-GENERIC-FUNCTION QUACK #x300041C2371F>
>        when called with arguments:
>          (#<CAT #x300041C7EEFD>)
> If continued: Try calling it again
1 > (defmethod quack ((a-cat cat))
        (print "这猫正在模仿鸭子"))

#<STANDARD-METHOD QUACK (CAT)>
1 > (continue)

"这猫正在模仿鸭子" 
</syntaxhighlight>

通过这种方法，软件可以通过扩展只有部分工作的使用鸭子类型的代码来开发。

=== 在Objective-C中 ===
[[Objective-C|Objective-C]]<!-- Original: [[Objective-C|Objective-C]] -->，C和Smalltalk的一个交错，像Smalltalk一样，允许用户声明一个对象的类型为“id”并向它发送任何信息。发送者可以测试一个对象以了解它能不能对一个消息响应，对象可以在收到消息的时候决定响应与否，如果发送者发送了一个接收者不能响应的消息，一个异常会被抛出。因此，鸭子类型在Objective-C中被完全支持。

=== 在Python中 ===
鸭子类型在[[Python|Python]]<!-- Original: [[Python|Python]] -->中被广泛使用。[http://docs.python.org/glossary.html#term-duck-typing Python术语表]{{Wayback|url=http://docs.python.org/glossary.html#term-duck-typing |date=20090708161915 }}这样定义鸭子类型：

{{quotation|Pythonic programming style that determines an object's type by inspection of its method or attribute signature rather than by explicit relationship to some type object ("If it looks like a duck and quacks like a duck, it must be a duck.") By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution. Duck-typing avoids tests using <code>type()</code> or <code>isinstance()</code>. Instead, it typically employs the ''[[Python语法和语义#例外|EAFP]]'' (Easier to Ask Forgiveness than Permission) style of programming.}}

在Python中，鸭子类型的最典型例子就是类似file的类。这些类可以实现<code>file</code>的一些或全部方法，并可以用于<code>file</code>通常使用的地方。例如，[http://docs.python.org/library/gzip.html#gzip.GzipFile <code>GzipFile</code>]{{Wayback|url=http://docs.python.org/library/gzip.html#gzip.GzipFile |date=20090722184354 }}实现了一个用于访问[[gzip|gzip]]<!-- Original: [[gzip|gzip]] -->压缩的数据的类似file的对象。[https://web.archive.org/web/20090725113548/http://docs.python.org/library/stringio.html#module-cStringIO <code>cStringIO</code>]允许把一个Python字符串视作一个文件。套接字（socket）也和文件共同拥有许多相同的方法。然而套接字缺少[http://diveintopython.org/http_web_services/gzip_compression.html#d0e29389 <code>tell()</code>方法]{{Wayback|url=http://diveintopython.org/http_web_services/gzip_compression.html#d0e29389 |date=20090218182621 }}，不能用于<code>GzipFile</code>可以使用的所有地方。这体现了鸭子类型的可伸缩性：一个类似file的对象可以实现它有能力实现的方法，且只能被用于它有意义的情形下。

[[Python语法和语义#例外|EAFP]]原则描述了[[异常处理|异常处理]]的使用。例如相对于检查一个自称为类似Duck的对象是否拥有一个''quack()''方法（使用<code>if hasattr(mallard, "quack"): ...</code>），人们通常更倾向于用异常处理把对''quack''的调用尝试包裹起来：

<syntaxhighlight lang="python">
try:
    mallard.quack()
except (AttributeError, TypeError):
    print "mallard并沒有quack()函数"
</syntaxhighlight>

这个写法的优势在于它鼓励结构化处理其他来自类的错误（这样的话，例如，一个不能完成quack的Duck子类可以抛出一个“QuackException”，这个异常可以简单地添加到包裹它的代码，并不需要影响更多的代码的逻辑。同时，对于其他不同类的对象存在不兼容的成员而造成的命名冲突，它也能够处理（例如，假设有一个医学专家Mallard有一个布尔属性将他分类为“quack=True”，试图执行Mallard.quack()将抛出一个TypeError）。

在更实际的实现类似file的行为的例子中，人们更倾向于使用Python的异常处理机制来处理各种各样的可能因为各种程序员无法控制的环境和[[操作系统|操作系统]]<!-- Original: [[operating_system|operating system]] -->问题而发生的I/O错误。在这里，“鸭子类型”产生的异常可以在它们自己的子句中捕获，与操作系统、I/O和其他可能的错误分别处理，从而避开复杂的检测和错误检查逻辑。

== 参考文献 ==
{{Reflist|2}}

==參閱== 
* [[鴨子測試|鴨子測試]](duck test)

== 外部链接 ==
* [http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/78502 Duck Typing: Ruby]{{Wayback|url=http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/78502 |date=20110717205311 }}
* [http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/100511 How to duck type? - the psychology of static typing in Ruby]{{Wayback|url=http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/100511 |date=20110830132933 }}
* [http://docs.python.org/glossary.html#term-duck-typing Python术语表中的duck-typing词条]{{Wayback|url=http://docs.python.org/glossary.html#term-duck-typing |date=20090708161915 }}
* [http://www.ddj.com/cpp/184401971 Dr. Dobbs June 01 2005: "Templates and Duck Typing"]{{Wayback|url=http://www.ddj.com/cpp/184401971 |date=20090814170423 }}
* [https://web.archive.org/web/20110812110235/http://bigdingus.com/2007/12/08/just-what-is-this-javascript-object-you-handed-me/ Javascript 'typeof' limitations and duck typing]
* [http://blog.dhananjaynene.com/2008/09/python-from-java-how-duck-typing-influences-class-design-and-design-principles/ Python from a Java perspective - Part 2 - How duck typing influences class design and design principles]{{Wayback|url=http://blog.dhananjaynene.com/2008/09/python-from-java-how-duck-typing-influences-class-design-and-design-principles/ |date=20110812143746 }}

[[Category:面向对象的程序设计|Category:面向对象的程序设计]]
[[Category:类型论|Category:类型论]]
[[Category:带有伪代码示例的条目|Category:带有伪代码示例的条目]]
[[Category:带有代码示例的条目|Category:带有代码示例的条目]]