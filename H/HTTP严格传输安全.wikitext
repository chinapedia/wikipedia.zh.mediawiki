{{noteTA
| G1 = IT
| T = zh-hans:HTTP严格传输安全;zh-hant:HTTP強制安全傳輸技術
}}
'''HTTP严格传输安全'''（{{Lang-en|'''H'''TTP '''S'''trict '''T'''ransport '''S'''ecurity}}，縮寫：'''HSTS'''）是一套由[[互联网工程任务组|互联网工程任务组]]发布的[[互联网|互联网]]安全策略机制。[[网站|网站]]可以选择使用HSTS策略，来让[[浏览器|浏览器]]强制使用[[超文本传输安全协议|HTTPS]]与网站进行通信，以减少[[会话劫持|会话劫持]]风险。<ref name=cnet>{{cite web|url=http://www.cnet.com/news/web-security-protocol-hsts-wins-proposed-standard-status/|title=Web security protocol HSTS wins proposed standard status|publisher=CNET|author=Steven Musil|accessdate=2014-11-09|date=2012-10-02|archive-date=2014-11-10|archive-url=https://web.archive.org/web/20141110004223/http://www.cnet.com/news/web-security-protocol-hsts-wins-proposed-standard-status/|dead-url=no}}</ref><ref name=cnw>{{cite web|url=http://news.cnw.com.cn/news-international/htm2012/20121123_259083.shtml|title=HTTP严格传输安全协议成互联网标准|publisher=网界网|author=邹铮编译|date=2012-11-23|accessdate=2014-11-06|archive-date=2014-11-06|archive-url=https://web.archive.org/web/20141106184539/http://news.cnw.com.cn/news-international/htm2012/20121123_259083.shtml|dead-url=no}}</ref>

其[[徵求修正意見書|徵求修正意見書]]文件编号是-{}-RFC 6797，发布于2012年11月。

==内容==
HSTS的作用是强制客户端（如浏览器）使用HTTPS与服务器建立连接。服务器开启HSTS的方法是，当客户端通过HTTPS发出请求时，在服务器返回的[[超文本传输协议|超文本传输协议]]（HTTP）响应头中包含<code>Strict-Transport-Security</code>字段。非加密传输时设置的HSTS字段无效。<ref name=rfc>{{cite web|url=https://tools.ietf.org/html/rfc6797|title=HTTP Strict Transport Security (HSTS)|date=November 2012|accessdate=2014-11-06|publisher=Internet Engineering Task Force|archive-date=2020-02-26|archive-url=https://web.archive.org/web/20200226180912/https://tools.ietf.org/html/rfc6797|dead-url=no}}</ref>

比如，<nowiki>https://example.com/</nowiki> 的响应头含有<code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code>。这意味着两点：
#在接下来的31536000秒（即一年）中，浏览器向example.com或其子[[域名|域名]]发送HTTP请求时，必须采用HTTPS来发起连接。比如，用户点击[[超链接|超链接]]或在地址栏输入 <nowiki>http://www.example.com/</nowiki> ，浏览器应当自动将 http 转写成 https，然后直接向 <nowiki>https://www.example.com/</nowiki> 发送请求。
#在接下来的一年中，如果 example.com 服务器发送的TLS[[数字证书|证书]]无效，用户不能忽略浏览器警告继续访问网站。

==历史==
HSTS的雏形来自于2008年4月在[[北京|北京]]召开的第十七届{{link-en|国际万维网大会|International World Wide Web Conference}}上柯林·杰克逊（{{lang|en|Collin Jackson}}）和亚当·巴斯（{{lang|en|Adam Barth}}）的题为“ForceHTTPS: Protecting High-Security Web Sites from Network Attacks”的演讲。他们的提议是使用“ForceHTTPS” [[Cookie|Cookie]]来强制浏览器使用HTTPS<ref name=forcehttps>{{cite web|url=https://crypto.stanford.edu/forcehttps/|title=ForceHTTPS: Protecting High-Security Web Sites from Network Attacks|author=Collin Jackson, Adam Barth|accessdate=2014-11-08|archive-date=2020-02-28|archive-url=https://web.archive.org/web/20200228030854/https://crypto.stanford.edu/forcehttps/|dead-url=yes}}</ref>。

2009年9月18日，他们和杰夫·霍奇斯（{{lang|en|Jeff Hodges}}）发布了最初的草案，题目为"Strict Transport Security"<ref>{{cite web|url=http://lists.w3.org/Archives/Public/www-archive/2009Sep/att-0051/draft-hodges-strict-transport-sec-05.plain.html|title=Strict Transport Security|date=18 September 2009|accessdate=2014-11-08|author=Jeff Hodges, Collin Jackson, Adam Barth|archive-date=2014-10-12|archive-url=https://web.archive.org/web/20141012163528/http://lists.w3.org/Archives/Public/www-archive/2009Sep/att-0051/draft-hodges-strict-transport-sec-05.plain.html|dead-url=no}}</ref>，这个草案基于ForceHTTPS，并有所修改<ref name=forcehttps />。

2010年6月17日，这三位作者经由[[互联网工程任务组|互联网工程任务组]]发布了首版{{link-en|互联网草案|Internet Draft}}，"HTTP Strict Transport Security"<ref>{{cite web|url=https://tools.ietf.org/html/draft-hodges-strict-transport-sec-00|title=draft-hodges-strict-transport-sec-00 - HTTP Strict Transport Security (HSTS)|author=Jeff Hodges, Collin Jackson, Adam Barth|date=June 17, 2010|accessdate=2014-11-08|archive-date=2014-11-11|archive-url=https://web.archive.org/web/20141111062527/https://tools.ietf.org/html/draft-hodges-strict-transport-sec-00|dead-url=no}}</ref>。

2012年10月2日，{{link-en|互联网工程指导组|Internet Engineering Steering Group}}批准了将第14版HSTS草案发布为RFC的请求<ref>{{cite web|url=https://www.ietf.org/mail-archive/web/websec/current/msg01401.html|title=[websec] Protocol Action: 'HTTP Strict Transport Security (HSTS)' to Proposed Standard (draft-ietf-websec-strict-transport-sec-14.txt)|date=2 Oct 2012|author=The IESG|accessdate=2014-11-08|archive-date=2017-01-29|archive-url=https://web.archive.org/web/20170129010418/https://www.ietf.org/mail-archive/web/websec/current/msg01401.html|dead-url=no}}</ref>。

2012年11月19日，互联网工程任务组发布RFC 6797<ref>{{cite web|url=https://www.ietf.org/mail-archive/web/websec/current/msg01482.html|title=[websec] RFC 6797 on HTTP Strict Transport Security (HSTS)|author=The RFC Editor Team|date=19 Nov 2012|accessdate=2014-11-08|archive-date=2014-11-08|archive-url=https://web.archive.org/web/20141108235613/https://www.ietf.org/mail-archive/web/websec/current/msg01482.html|dead-url=no}}</ref>。

==作用==
HSTS可以用来抵御SSL剥离攻击。SSL剥离攻击是[[中间人攻击|中间人攻击]]的一种，由{{link-en|Moxie Marlinspike|Moxie Marlinspike|Moxie Marlinspike}}于2009年发明。他在当年的黑帽大会上发表的题为“New Tricks For Defeating SSL In Practice”的演讲中将这种攻击方式公开。SSL剥离的实施方法是阻止浏览器与服务器建立HTTPS连接。它的前提是用户很少直接在地址栏输入<code>https://</code>，用户总是通过点击链接或[[3xx重定向|3xx重定向]]，从HTTP页面进入HTTPS页面。所以攻击者可以在用户访问HTTP页面时替换所有<code>https://</code>开头的链接为<code>http://</code>，达到阻止HTTPS的目的。<ref>{{cite web|url=https://blackhat.com/presentations/bh-dc-09/Marlinspike/BlackHat-DC-09-Marlinspike-Defeating-SSL.pdf|title=New Tricks For Defeating SSL In Practice|author=Moxie Marlinspike|accessdate=2014-11-06|archive-date=2014-12-30|archive-url=https://web.archive.org/web/20141230024722/http://www.blackhat.com/presentations/bh-dc-09/Marlinspike/BlackHat-DC-09-Marlinspike-Defeating-SSL.pdf|dead-url=yes}}</ref>

HSTS可以很大程度上解决SSL剥离攻击，因为只要浏览器曾经与服务器建立过一次安全连接，之后浏览器会强制使用HTTPS，即使链接被换成了HTTP<ref name=rfc /><ref>{{cite web|url=https://support.google.com/webmasters/answer/6073543?hl=zh-Hans|title=通过HTTPS保护网站的安全|publisher=Google|accessdate=2014-11-06|archive-date=2014-12-23|archive-url=https://web.archive.org/web/20141223195322/https://support.google.com/webmasters/answer/6073543?hl=zh-Hans|dead-url=no}}</ref>。

另外，如果中间人使用自己的自签名证书来进行攻击，浏览器会给出警告，但是许多用户会忽略警告。HSTS解决了这一问题，一旦服务器发送了HSTS字段，将不再允许用户忽略警告。

==不足==
用户首次访问某网站是不受HSTS保护的。这是因为首次访问时，浏览器还未收到HSTS，所以仍有可能通过明文HTTP来访问。解决这个不足目前有两种方案，一是浏览器预置HSTS域名列表，[[Google_Chrome|Google Chrome]]、[[Firefox|Firefox]]、[[Internet_Explorer|Internet Explorer]]和[[Microsoft_Edge|Microsoft Edge]]实现了这一方案<ref>{{cite web | url=https://blog.mozilla.org/security/2012/11/01/preloading-hsts/ | title=Preloading HSTS | publisher=Mozilla | author=David Keeler | accessdate=2014-11-06 | date=2012年11月1日 | archive-date=2020-02-24 | archive-url=https://web.archive.org/web/20200224205730/https://blog.mozilla.org/security/2012/11/01/preloading-hsts/ | dead-url=no }}</ref><ref>{{cite web | url=http://blogs.msdn.com/b/ie/archive/2015/02/16/http-strict-transport-security-comes-to-internet-explorer.aspx | title=HTTP Strict Transport Security comes to Internet Explorer | accessdate=16 February 2015 | author=Bell, Mike; Walp, David | date=February 16, 2015 | archive-date=2015-11-15 | archive-url=https://web.archive.org/web/20151115035120/http://blogs.msdn.com/b/ie/archive/2015/02/16/http-strict-transport-security-comes-to-internet-explorer.aspx | dead-url=no }}</ref>。二是将HSTS信息加入到[[域名系统|域名系统]]记录中。但这需要保证DNS的安全性，也就是需要部署[[域名系统安全扩展|域名系统安全扩展]]。截至2016年这一方案没有大规模部署。

由于HSTS会在一定时间后失效（有效期由max-age指定），所以浏览器是否强制HSTS策略取决于当前系统时间。部分操作系统经常通过[[网络时间协议|网络时间协议]]更新系统时间，如[[Ubuntu|Ubuntu]]每次连接网络时、[[OS_X_Lion|OS X Lion]]每隔9分钟会自动连接时间服务器。攻击者可以通过伪造NTP信息，设置错误时间来绕过HSTS。解决方法是认证NTP信息，或者禁止NTP大幅度增减时间。比如[[Windows_8|Windows 8]]每7天更新一次时间，并且要求每次NTP设置的时间与当前时间不得超过15小时。<ref>{{cite web|url=https://www.blackhat.com/docs/eu-14/materials/eu-14-Selvi-Bypassing-HTTP-Strict-Transport-Security.pdf|title=Bypassing HTTP Strict Transport Security|author=Jose Selvi|publisher=Blackhat Europe 2014|accessdate=2014-11-06|archive-date=2014-10-22|archive-url=https://web.archive.org/web/20141022112001/https://www.blackhat.com/docs/eu-14/materials/eu-14-Selvi-Bypassing-HTTP-Strict-Transport-Security.pdf|dead-url=yes}}</ref>

==浏览器支持==
* [[Chromium|Chromium]]和[[Google_Chrome|Google Chrome]]从4.0.211.0版本开始支持HSTS
* [[Firefox_4|Firefox 4]]及以上版本<ref>{{cite web 
| url=https://blog.mozilla.org/security/2010/08/27/http-strict-transport-security/ 
| title=HTTP Strict Transport Security 
| work=Mozilla 
| accessdate=2011-03-17 
| archive-date=2012-08-13 
| archive-url=https://web.archive.org/web/20120813205334/http://blog.mozilla.org/security/2010/08/27/http-strict-transport-security/ 
| dead-url=no 
}}</ref>
* [[Opera電腦瀏覽器|Opera]] 12及以上版本<ref name="opera_presto">{{cite web
 |url          = http://www.opera.com/docs/specs/presto2.10/#m210-244
 |author       = Opera Software ASA
 |title        = Web specifications support in Opera Presto 2.10
 |date         = 23 April 2012
 |accessdate   = 2012-05-08
 |archive-date = 2016-09-11
 |archive-url  = https://web.archive.org/web/20160911011848/http://www.opera.com/docs/specs/presto2.10/#m210-244
 |dead-url     = no
}}</ref>
* [[Safari|Safari]]从[[OS_X_Mavericks|OS X Mavericks]]起
* [[Internet_Explorer|Internet Explorer]]和[[Microsoft_Edge|Microsoft Edge]]从[[Windows_10|Windows 10]]开始支持<ref>{{cite web | url=https://status.modern.ie/httpstricttransportsecurityhsts | title=Internet Explorer Web Platform Status and Roadmap | accessdate=2014-04-11 | archive-date=2015-06-29 | archive-url=https://web.archive.org/web/20150629110718/https://status.modern.ie/httpstricttransportsecurityhsts | dead-url=no }}</ref>

==网站支持==
根据SSL Pulse的调查，截至2015年2月，仅有2.7%的网站开启了HSTS<ref>{{cite web|url=https://www.trustworthyinternet.org/ssl-pulse/|title=SSL Pulse - Survey of the SSL Implementation of the Most Popular Web Sites|publisher=TIM Trustworthy Internet Movement|accessdate=2015-02-16|archive-url=https://web.archive.org/web/20170515034337/https://www.trustworthyinternet.org/ssl-pulse/|archive-date=2017-05-15|dead-url=yes}}</ref>。目前支持HSTS的主流网站有：[[支付宝|支付宝]]<ref>{{cite web|url=https://www.ssllabs.com/ssltest/analyze.html?d=www.alipay.com&hideResults=on&ignoreMismatch=on|title=Qualys SSL Labs - Projects / SSL Server Test / alipay.com|publisher=Qualys SSL Labs|accessdate=2014-11-06}}</ref>、[[PayPal|PayPal]]<ref name=cnw />、[[Twitter|Twitter]]<ref name=cnw />、[[维基百科|维基百科]]邮件列表<ref>{{cite web|url=https://gerrit.wikimedia.org/r/161177/|title=lists.wm.org - raise HSTS max-age to 1 year|publisher=Wikimedia Code Review|author=Chmarkine, CSteipp, Dzahn, Filippo Giunchedi, JanZerebecki, John F. Lewis|accessdate=2014-11-06|date=Oct 7, 2014}}</ref>等。

==参见==
{{Portal|互联网}}
* [[超文本传输安全协议|超文本传输安全协议]]
* [[传输层安全协议|传输层安全协议]]
* [[中间人攻击|中间人攻击]]
* [[HTTP公钥固定|HTTP公钥固定]]

==参考文献==
{{reflist|2}}

==外部链接==
* {{en}}[https://tools.ietf.org/html/rfc6797 RFC 6797, HTTP Strict Transport Security (HSTS)]{{Wayback|url=https://tools.ietf.org/html/rfc6797 |date=20200226180912 }}
* {{en}}[https://tools.ietf.org/wg/websec/charters IETF WebSec Working Group]{{Wayback|url=https://tools.ietf.org/wg/websec/charters |date=20141026190422 }}（[[互联网工程任务组|互联网工程任务组]]中的WebSec工作小组主页）
* {{en}}[http://www.twit.tv/sn262 Security Now 262: Strict Transport Security]{{Wayback|url=http://www.twit.tv/sn262 |date=20141010074724 }}（HSTS视频讲解）
* {{en}}[https://web.archive.org/web/20141108104319/https://www.owasp.org/index.php/HTTP_Strict_Transport_Security Open Web Application Security Project (OWASP): HSTS description]（OWASP上的HSTS条目）
* {{en}}[https://projects.dm.id.lv/Public-Key-Pins_test Online browser HSTS and Public Key Pinning test]{{Wayback|url=https://projects.dm.id.lv/Public-Key-Pins_test |date=20141108164155 }}（浏览器支持测试）
* {{en}}[https://hstspreload.appspot.com/ HSTS Preload Submission]{{Wayback|url=https://hstspreload.appspot.com/ |date=20150207011608 }}（提交网站至主流浏览器的HSTS预置列表）
* {{zh}}[https://www.ltsplus.com/linux/enable-hsts Linux 開啟 HSTS 安全機制] {{Wayback|url=https://www.ltsplus.com/linux/enable-hsts |date=20220109210345 }}

{{TLS和SSL}}

[[Category:HTTP|Category:HTTP]]
[[Category:网络安全|Category:网络安全]]
[[Category:互联网标准|Category:互联网标准]]
[[Category:电脑安全|Category:电脑安全]]
[[Category:密码学|Category:密码学]]
[[Category:傳輸層安全協議|Category:傳輸層安全協議]]