{{TA
|G1=IT
}}
{{Other uses|Hello World (消歧义)}}
以下是用不同语言写成的'''[[Hello_World|Hello World]]'''程序的列表：
[[File:Hello_World_App.png|frame]]的正確輸出示範]]

== 打印到终端 ==
=== [[ActionScript|ActionScript]] ===
<syntaxhighlight lang="actionscript">
trace("Hello, world!");
</syntaxhighlight><ref name="Hello World Collection">[http://helloworldcollection.de The Hello World Collection] {{Wayback|url=http://helloworldcollection.de/ |date=20190128212113 }} helloworldcollection.de [2014-12-12]</ref>

=== [[Ada程序设计语言|Ada]] ===
<syntaxhighlight lang="ada">
with TEXT_IO;
 
procedure HELLO is
begin
    TEXT_IO.PUT_LINE ("Hello, world!");
end HELLO;
</syntaxhighlight><ref name="Hello World Collection"/>

=== [[汇编|-{zh-hans:汇编; zh-hant:組合;}-语言]] ===

==== [[x86|x86]] CPU，[[GNU/Linux|GNU/Linux]]，NASM ====
<syntaxhighlight lang="asm">
     section .data
 msg     db      'Hello, world!',0xA
 len     equ     $-msg
 
     section .text
 global  _start
 _start:
         mov     edx,len
         mov     ecx,msg
         mov     ebx,1
         mov     eax,4
         int     0x80
 
         mov     ebx,0
         mov     eax,1
         int     0x80
</syntaxhighlight>

==== [[x86|x86]] AT&T、[[Gas|Gas]] ====
<pre>
.data
        msg : .string "Hello, world!\n"
        len = . - msg
.text
.global _start

_start:
        movl $len, %edx
        movl $msg, %ecx
        movl $1  , %ebx
        movl $4  , %eax
        int $0x80

        movl $0  , %ebx
        movl $1  , %eax
        int $0x80
</pre><ref name="Hello World Collection"/>

==== [[x86|x86]] [[CPU|CPU]]、[[Windows|Windows]]、[[MASM|MASM32]] ====
<syntaxhighlight lang="ASM"> .386
        .model   flat,stdcall
        option   casemap:none
;==========================================================
    include     windows.inc
    include     user32.inc
    includelib  user32.lib
    include     kernel32.inc
    includelib  kernel32.lib
;==========================================================
        .data
szCaption db "A MessageBox!", 0
szText db "Hello, world!", 0
;==========================================================
        .code
start:
    invoke   MessageBox, NULL, addr szText, addr szCaption, MB_OK
    invoke   ExitProcess, NULL
;==========================================================
    end  start
</syntaxhighlight>

==== [[8086|8086]]作業系統（[[NASM|NASM]]） ====
<syntaxhighlight lang="asm">
[BITS 16]
org 0x7c00
     mov ax,cs
     mov ds,ax
     mov es,ax
     call DispStr
     jmp $;End Hear
DispStr:
     mov ax, BootMessage
     mov bp, ax
     mov cx, 16;How long is the String
     mov ax, 0x1301
     mov bx, 0x000c
     mov dl, 0
     int 0x10
     ret
BootMessage: db "Hello, world!"
times 510-($-$$) db 0x0
dw 0xaa55; Bootable Mark
</syntaxhighlight>

=== AutoIt ===
<syntaxhighlight lang="autoit">MsgBox(1,'','Hello, world!')</syntaxhighlight>

=== [[AWK|AWK]] ===
<syntaxhighlight lang="text">
BEGIN { print "Hello, world!" }
</syntaxhighlight><ref name="Hello World Collection"/>

=== Bash (或类似shell) ===
<syntaxhighlight lang="bash"> echo 'Hello, world!'</syntaxhighlight>
或者：
<syntaxhighlight lang="bash"> printf 'Hello, world!\n'</syntaxhighlight><ref name="Hello World Collection"/>

=== [[BASIC编程语言|BASIC]] ===

'''传统版 BASIC（例如 [[GWBASIC|GWBASIC]]）：'''
<syntaxhighlight lang="qbasic">
10 PRINT "Hello, world!"
20 END
</syntaxhighlight>
或：
<syntaxhighlight lang="qbasic">
10 PRINT "Hello, world!"
</syntaxhighlight>
或在提示符輸入：
<syntaxhighlight lang="qbasic">
? "Hello, world!"
</syntaxhighlight>
'''现代版 BASIC（例如 Quick BASIC）：'''
<syntaxhighlight lang="qbasic">
Print "Hello, world!"
</syntaxhighlight>
以下的语句，在 Quick BASIC 中同样有效：
<syntaxhighlight lang="qbasic">
? "Hello, world!"
</syntaxhighlight>

=== [[BCPL|BCPL]] ===
<syntaxhighlight lang="text">
GET "LIBHDR"

LET START () BE
$(
    WRITES ("Hello, world!*N")
$)
</syntaxhighlight>

=== [[Brainfuck|Brainfuck]] ===
<syntaxhighlight lang="bf">
++++++++++[>+++++++>++++++++++>+++>+<<<<-]
>++.>+.+++++++..+++.>++.<<+++++++++++++++.
>.+++.------.--------.>+.>.
</syntaxhighlight>

=== [[BlitzBasic|BlitzBasic]] ===
<syntaxhighlight lang=BlitzBasic >
Print "Hello, world!"
WaitKey
</syntaxhighlight>

=== [[BOO|BOO]] ===
<syntaxhighlight lang="python">
print "Hello, world!"
</syntaxhighlight>

=== [[C编程语言|C]] ===
<syntaxhighlight lang="c">
#include <stdio.h>
int main(void)
{
   printf("Hello, world!\n");
   return 0;
}
</syntaxhighlight>

或者：
<syntaxhighlight lang="c">
#include <stdio.h>
int main(void)
{
   puts("Hello, world!");
   return 0;
}
</syntaxhighlight><ref name="Hello World Collection"/>

=== [[CoffeeScript|CoffeeScript]] ===
<syntaxhighlight lang="coffeescript">
console.log 'Hello, world!'
</syntaxhighlight>
或者：
<syntaxhighlight lang="coffeescript">
alert 'Hello, world!'
</syntaxhighlight>

=== [[C++|C++]] ===
<syntaxhighlight lang="cpp">
#include <iostream>
int main()
{
    std::cout << "Hello, world!" << std::endl;
    return 0;
}
</syntaxhighlight>
或者：
<syntaxhighlight lang="cpp">
#include <iostream>
using namespace std;
int main()
{
    cout << "Hello, world!" << endl;
    return 0;
}
</syntaxhighlight><ref name="Hello World Collection"/>

=== [[C++/CLI|C++/CLI]] ===
<syntaxhighlight lang="cpp">
int main()
{
    System::Control::WriteLine("Hello, world!");
}
</syntaxhighlight>

=== [[C_Sharp|C# (C Sharp)]] ===
<syntaxhighlight lang="csharp">
class HelloWorldApp
{
    static void Main(string[] args)
    {
        System.Console.WriteLine("Hello, world!");
    }
}
</syntaxhighlight><ref name="Hello World Collection"/>
或者（僅用於Microsoft Windows）
<syntaxhighlight lang="csharp">
class HelloWorldApp
{
     [DllImport("user32.dll")]
     static extern MessageBox(string title, string message);
     public static void Main()
     {
          MessageBox(null, "Hello, world!");
     }
}
</syntaxhighlight>
或者（使用附加的Windows Forms）
<syntaxhighlight lang="csharp">
using System.Windows.Forms;
class HelloWorldApp
{
     public static void Main()
     {
          MessageBox.Show("Hello, world!");
     }
}
</syntaxhighlight>

=== [[COBOL|COBOL]] ===
<syntaxhighlight lang=cobol>
      IDENTIFICATION DIVISION.
      PROGRAM-ID. HELLO-WORLD.

      ENVIRONMENT DIVISION.

      DATA DIVISION.

      PROCEDURE DIVISION.
      DISPLAY "Hello, world!".
      STOP RUN.
</syntaxhighlight><ref name="Hello World Collection"/>

=== [[LISP|Common Lisp]] ===
<syntaxhighlight lang="lisp">
;直接輸出
"Hello world!"
 
;或者
(format t "Hello world!~%")
</syntaxhighlight><ref name="Hello World Collection"/>

=== [[DOS|DOS]]批处理 ===
<syntaxhighlight lang="dos">
@echo Hello, world!
</syntaxhighlight>

對於MS-DOS 3.0或更低版本：
<syntaxhighlight lang="dos">
echo off
cls
echo Hello, world!
</syntaxhighlight>
=== [[Linux_Shell|Linux Shell]] ===
<syntaxhighlight lang="dos">
echo Hello, world!
</syntaxhighlight><ref name="Hello World Collection"/>
=== [[Eiffel|Eiffel]] ===
<syntaxhighlight lang="eiffel">
class HELLO_WORLD

creation
    make
feature
    make is
    local
        io:BASIC_IO
    do
        !!io
        io.put_string("%N Hello, world!")
    end -- make
end -- class HELLO_WORLD
</syntaxhighlight><ref name="Hello World Collection"/>

=== [[Erlang|Erlang]] ===
<syntaxhighlight lang="text">
    -module(hello).
    -export([hello_world/0]).

    hello_world() -> io:fwrite("Hello, World!\n").
</syntaxhighlight>

=== Flowgorithm ===
{{Main|Flowgorithm (programming language)}}
 [[file:Flowgorithm_Hello_World.png|file:Flowgorithm Hello World.png]]
{{-}}
=== [[Forth|Forth]] ===
<syntaxhighlight lang="text">
." Hello, world!" CR
</syntaxhighlight><ref name="Hello World Collection"/>

=== [[Fortran|Fortran]] ===
<syntaxhighlight lang="fortran">
    WRITE(*,*) 'Hello, world!'
    STOP
    END
</syntaxhighlight><ref name="Hello World Collection"/>

=== [[Go|Go]] ===
<syntaxhighlight lang="go">
package main

import "fmt"

func main() {
    fmt.Println("Hello, world!")
}
</syntaxhighlight>

=== [[HQ9_Plus|HQ9+]] ===
<syntaxhighlight lang=hq9plus>
Hello World
</syntaxhighlight>

=== [[INTERCAL编程语言|INTERCAL]] ===
<syntaxhighlight lang=intercal>
PLEASE DO ,1 <- #13
DO ,1 SUB #1 <- #238
DO ,1 SUB #2 <- #112
DO ,1 SUB #3 <- #112
DO ,1 SUB #4 <- #0
DO ,1 SUB #5 <- #64
DO ,1 SUB #6 <- #238
DO ,1 SUB #7 <- #26
DO ,1 SUB #8 <- #248
DO ,1 SUB #9 <- #168
DO ,1 SUB #10 <- #24
DO ,1 SUB #11 <- #16
DO ,1 SUB #12 <- #158
DO ,1 SUB #13 <- #52
PLEASE READ OUT ,1
PLEASE GIVE UP
</syntaxhighlight><ref name="Hello World Collection"/>

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
 
public class Server {
   public static void main(String[] args) {
      try {
         ServerSocket ss = new ServerSocket(8888);
         System.out.println("starting....");
         Socket s = ss.accept();
         System.out.println("acountT:"+s.getInetAddress().getLocalHost()+"fail to connet to sever");
         
         BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream()));
         //fail reading the massgae
         String mess = br.readLine();
         System.out.println("acountT："+mess);
         BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
         bw.write(mess+"\n");
         bw.flush();
      } catch (IOException e) {
         e.printStackTrace();
      }
   }
}

=== [[JavaScript|JavaScript]] ===
该代码适用于浏览器控制台以及[[Node.js|Node.js]]等服务器端运行环境。

<syntaxhighlight lang="javascript">
console.log("Hello, World!");
</syntaxhighlight>

=== [[Julia_(编程语言)|Julia]] ===
<syntaxhighlight lang="julia">
println("Hello, world!") 
</syntaxhighlight>

=== [[Lisp|Lisp]] ===
<syntaxhighlight lang="lisp">
;直接输出
"hello, world"

;或者
(format t "hello, world~%")
</syntaxhighlight>

=== [[Lua|Lua]] ===
<syntaxhighlight lang="lua">
print "Hello, world!"
</syntaxhighlight><ref name="Hello World Collection"/>
=== [[Malbolge|Malbolge]] ===
<pre>(=<`#9]~6ZY327Uv4-QsqpMn&+Ij"'E%e{Ab~w=_:]Kw%o44Uqp0/Q?xNvL:`H%c#DD2^WV>gY;dts76qKJImZkj</pre>

===[[Matlab|Matlab]]===
<syntaxhighlight lang="matlab">
disp('hello world!')
</syntaxhighlight>
=== [[Mathematica|Mathematica]] ===
  Hello[] := Print["<span style="color:grey">Hello World!</span>"]
  Hello[]
<ref name="Hello World Collection"/>

=== [[Metapost|Metapost]] ===
<syntaxhighlight lang="text">
beginfig(1);
draw (0,0)--(0,10);
draw (0,5)--(5,5);
draw (5,0)--(5,10);
draw (12,0)--(7,0)--(7,10)--(12,10);
draw (12,5)--(7,5);
draw (14,10)--(14,0)--(19,0);
draw (21,10)--(21,0)--(26,0);
draw (28,5)...(30.5,0)...(33,5)...(30.5,10)...cycle;
draw (38,10)--(39.25,0)--(40.5,10)--(41.75,0)--(43,10);
draw (45,5)...(47.5,0)...(50,5)...(47.5,10)...cycle;
draw (52,0)--(52,10);
draw (52,10)..(57,4)..(52,6.5);
draw (52,5)--(57,0);
draw (61,10)--(61,0)--(66,0);
draw (68,10)--(68,0)..(73,5)..cycle;
endfig;
end
</syntaxhighlight>

=== [[MIXAL编程语言|MIXAL]] ===
<syntaxhighlight lang="text">
TERM EQU 19 the MIX console device number
        ORIG   1000        start address
START OUT MSG(TERM) output data at address MSG
        HLT                halt execution
MSG ALF "MIXAL"
        ALF    " HELL"
        ALF    "O WOR"
        ALF    "LD   "
        END    START       end of the program
</syntaxhighlight>

=== [[Nuva编程语言|Nuva]] ===
<syntaxhighlight lang="text">
<..直接输出..>
Hello, world!

<..或者..>

<.
  // 不带换行
  ?  "Hello, world!"

  // 或者

  // 带换行
  ?? 'Hello, world!'
.>
</syntaxhighlight>

=== [[Objective-C|Objective-C]] ===
<syntaxhighlight lang="objc">
#import <Foundation/Foundation.h>

int main(int argc, const char * argv[])
{
    @autoreleasepool {
        NSLog(@"Hello, World!");
    }
    return 0;
}
</syntaxhighlight><ref name="Hello World Collection"/>

=== [[OCaml|OCaml]] ===
<syntaxhighlight lang="ocaml">
let main () =
    print_endline "Hello world!";;
</syntaxhighlight>

=== [[Pascal编程语言|Pascal]] ===
<syntaxhighlight lang="pascal">
program Hello;{此行可以省略}
begin
    writeln('Hello, world!');
end.
</syntaxhighlight><ref name="Hello World Collection"/>

=== [[Perl|Perl]] ===
<syntaxhighlight lang="perl">
#!/usr/bin/env perl
print "Hello, world!\n";
</syntaxhighlight>
Perl 5.10（含）以後版本:
<syntaxhighlight lang="perl">
#!/usr/bin/env perl
use 5.010;
say "Hello, world!";
</syntaxhighlight><ref name="Hello World Collection"/>

=== [[Pike编程语言|Pike]] ===
<syntaxhighlight lang="text">
#!/usr/local/bin/pike
int main()
{
    write("Hello, world!\n");
    return 0;
}
</syntaxhighlight>

=== [[PLI|PL/I]] ===
<syntaxhighlight lang="text">
Test: procedure options(main);
    declare My_String char(20) varying initialize('Hello, world!');
    put skip list(My_String);
end Test;
</syntaxhighlight>

=== [[Prolog|Prolog]] ===
<syntaxhighlight lang=prolog>
goal
    write("hello,world!").
</syntaxhighlight>

=== [[Python编程语言|Python]] ===
適用於Python 2：
<syntaxhighlight lang="python">
#!/usr/bin/env python
print "Hello, world!"
</syntaxhighlight>
適用於Python 2.6, 2.7, 3：
<syntaxhighlight lang="python">
#!/usr/bin/env python
print("Hello, world!")
</syntaxhighlight><ref name="Hello World Collection"/>

用[[彩蛋_(媒体)|彩蛋]]输出Hello World：
<syntaxhighlight lang="python">
#!/usr/bin/env python
import __hello__
</syntaxhighlight>

=== [[REXX编程语言|REXX]] ===
<syntaxhighlight lang="text">
say "Hello, world!"
</syntaxhighlight>

=== [[Ruby编程语言|Ruby]] ===
<syntaxhighlight lang="ruby">
#!/usr/bin/ruby
puts "Hello, world!"
</syntaxhighlight><ref name="Hello World Collection"/>
<br />

=== [[Rust|Rust]] ===
<syntaxhighlight lang="rust">
fn main() {
    println!("Hello, world!");
}
</syntaxhighlight><br />
=== [[Sbyke_Laborana|Sbyke Laborana]] ===
<syntaxhighlight lang="text">
INIT min:1001
Om:"Hello, world!"
</syntaxhighlight>

=== [[Scheme|Scheme]] ===
<syntaxhighlight lang="scheme">
(display "Hello, world!")
(newline)
</syntaxhighlight>
=== [[Scratch_(程式語言)|Scratch]] ===

{{Main|Scratch (程式語言)}}

<!-- 等待圖片移動到維基共享資源 -->
 <small></small>[[File:Scratch_Hello_World_zh_hant.png|File:Scratch Hello World zh hant.png]]

=== [[sed|sed]] ===
（需要至少一行输入）
<syntaxhighlight lang="text">
sed -ne '1s/.*/Hello, world!/p'
</syntaxhighlight>

=== [[Seed7|Seed7]] ===
<syntaxhighlight lang="text">
$ include "seed7_05.s7i";

  const proc: main is func
    begin
      writeln("Hello, world!");
    end func;
</syntaxhighlight>

=== [[Smalltalk|Smalltalk]] ===
<syntaxhighlight lang="smalltalk">
Transcript show: 'Hello, world!'
</syntaxhighlight>

=== [[Small_Basic|Small Basic]] ===
<pre>
TextWindow.WriteLine("Hello, world!")
</pre>

=== [[SNOBOL|SNOBOL]] ===
<syntaxhighlight lang="text">
    OUTPUT = "Hello, world!"
END
</syntaxhighlight>

=== [[SQL|SQL]] ===
==== 第一種 ====
<syntaxhighlight lang="sql">
create table MESSAGE (TEXT char(15));
insert into MESSAGE (TEXT) values ('Hello, world!');
select TEXT from MESSAGE;
drop table MESSAGE;
</syntaxhighlight>
==== 第二種 ====
<syntaxhighlight lang="sql">
select 'hello, world';
</syntaxhighlight>

==== 第三種 ====
<syntaxhighlight lang="sql">
print 'hello,world!'
</syntaxhighlight>

=== [[Swift_(程式語言)|Swift]] ===
適用於Swift 1.x：
<pre>
println("Hello, World!")
</pre>

適用於Swift 2.x, 3：
<pre>
print("Hello, World!")
</pre>

=== [[Tcl|Tcl]] ===
<syntaxhighlight lang="tcl">
#!/usr/local/bin/tcl
puts "Hello, world!"
</syntaxhighlight>

=== [[TScript|TScript]] ===
<syntaxhighlight lang="text">
? "Hello, world!"
</syntaxhighlight>

=== [[Turing_编程语言|Turing]] ===
<syntaxhighlight lang="text">
put "Hello, world!"
</syntaxhighlight>

=== [[Unix_shell|UNIX-style shell]] ===
程序中的/bin/sh可改为您使用的[[shell|shell]]
<syntaxhighlight lang="bash">
#!/bin/sh
echo 'Hello, world!'
</syntaxhighlight>
==== bc ====
<pre>#!/usr/bin/bc -q
print "Hello World"
quit</pre>

==== dc ====
<pre>#!/usr/bin/env dc
[Hello World]p</pre>

== 图形用户界面 ==

===[[AppleScript|AppleScript]]===
<syntaxhighlight lang="AppleScript">
display dialog "Hello, world!"
</syntaxhighlight>
或者：
<syntaxhighlight lang="AppleScript">
display alert "Hello, world!"
</syntaxhighlight>

=== [[Delphi|Delphi]] ===
<syntaxhighlight lang="delphi">
program HelloWorld;
uses
    Dialogs;
begin
    ShowMessage('Hello, World!');
end.
</syntaxhighlight>

=== [[Nuva编程语言|Nuva]] ===
<syntaxhighlight lang="text">
<.
  System.Ui.ShowMessage('Nuva', 'Hello, world!', ['OK'])
.>
</syntaxhighlight>

=== [[Visual_Basic|Visual Basic]] ===
<syntaxhighlight lang=vb>
Sub Main()
    MsgBox "Hello, world!"
End Sub
</syntaxhighlight>

=== [[Visual_FoxPro|Visual FoxPro]] ===
<syntaxhighlight lang="visualfoxpro">
? "Hello, world!"
</syntaxhighlight>

=== [[X11|X11]] ===
用一个程序
<syntaxhighlight lang="text">
xmessage 'Hello, world!'
</syntaxhighlight>

使用[[Qt|Qt]]
<syntaxhighlight lang="cpp">
#include <QApplication>
#include <QLabel>

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QLabel label("Hello, world!");
    label.show();
    return app.exec();
}
</syntaxhighlight>

C 和 GTK+
<syntaxhighlight lang="C">
#include <gtk/gtk.h>

int main(int argc, char * args[])
{
    GtkWidget * win, * label;
    gtk_init(& argc, & args);

    label = gtk_label_new("Hello, world!");
    win = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    gtk_container_add(GTK_CONTAINER(win), label);
    gtk_widget_show_all();

    gtk_main();

    return 0;
}
</syntaxhighlight>

用C++和gtkmm 2

<syntaxhighlight lang=cpp>
#include <iostream>
#include <gtkmm/main.h>
#include <gtkmm/button.h>
#include <gtkmm/window.h>
using namespace std;

class HelloWorld : public Gtk::Window 
{
public:
    HelloWorld();
    virtual ~HelloWorld();
protected:
    Gtk::Button m_button;
    virtual void on_button_clicked();
};

HelloWorld::HelloWorld() : m_button("Hello, world!")
{
    set_border_width(10);
    m_button.signal_clicked().connect(SigC::slot(*this, &HelloWorld::on_button_clicked));
    add(m_button);
    m_button.show();
}

HelloWorld::~HelloWorld() {}

void HelloWorld::on_button_clicked() 
{
    cout << "Hello, world!" << endl;
}

int main（int argc, char *argv[]）
{
    Gtk::Main kit(argc, argv);
    HelloWorld helloworld;
    Gtk::Main::run(helloworld);
}
</syntaxhighlight>

=== [[Java|Java]] ===
<syntaxhighlight lang="java">
import java.awt.*;
import java.awt.event.*;

public class HelloFrame extends Frame 
{
    HelloFrame(String title) 
    {
        super(title);
    }
    public void paint(Graphics g)
    {
        super.paint(g);
        java.awt.Insets ins = this.getInsets();
        g.drawString("Hello, World!", ins.left + 25, ins.top + 25);
    }
    public static void main(String args [])
    {
        HelloFrame fr = new HelloFrame("Hello");

        fr.addWindowListener(
            new WindowAdapter() 
            {
                public void windowClosing(WindowEvent e)
                {
                    System.exit( 0 );
                }
            }
        );
        fr.setResizable(true);
        fr.setSize(500, 100);
        fr.setVisible(true);
    }
}
</syntaxhighlight>

=== [[Java_Applet|Java Applet]] ===
[[Java_Applet|Java Applet]]用于[[HTML|HTML]]文件。

HTML代码：
<syntaxhighlight lang="html4strict">
<html>
<head>
<title>Hello World</title>
</head>
<body>
HelloWorld Program says:
<applet code="HelloWorld.class" width="600" height="100">
</applet>
</body>
</html>
</syntaxhighlight>
Java代码：
<syntaxhighlight lang=java>
import java.applet.*;
import java.awt.*;

public class HelloWorld extends Applet 
{
    public void paint(Graphics g) 
    {
        g.drawString("Hello, world!", 100, 50);
    }
}
</syntaxhighlight>

=== [[JavaScript|JavaScript]] ===
[[JavaScript|JavaScript]]是一种脚本语言。最广泛用于HTML文件中，也可以用在其它宿主环境下，比如Microsoft® Windows® 脚本宿主（[[WSH|WSH]]）和一些web服务环境。

用于HTML中： 
<syntaxhighlight lang="javascript">
// 弹出对话框
alert("Hello, World!");
// 在页面上显示
document.write("Hello, World!");
</syntaxhighlight>

用于WSH中：
<syntaxhighlight lang="javascript">WScript.Echo("Hello, World!");</syntaxhighlight>

作为服务器端（[[Node.js|Node.js]]）：启动后，需要在浏览器中访问“[http://127.0.0.1:8000/ http://127.0.0.1:8000/]”查看。
<syntaxhighlight lang="javascript">
const http = require('http');

http.createServer((request, response) => {
  response.writeHead(200, { 'Content-Type': 'text/plain' });
  response.end('Hello World!');
}).listen(8000);

console.log('Server running at http://127.0.0.1:8000/');
</syntaxhighlight>

=== [[PostScript|PostScript]] ===
[[PostScript|PostScript]]是一种专门用来创建图像的语言，常用于打印机。 

<syntaxhighlight lang=text>
/font /Courier findfont 24 scalefont
font setfont
100 100 moveto
(Hello World!) show
showpage
</syntaxhighlight>
=== [[SPARQL|SPARQL]] ===
<syntaxhighlight lang="sparql">
SELECT ?h WHERE { 
  VALUES ?h { "Hello World" } 
}
</syntaxhighlight><ref name="Github">[https://github.com/leachim6/hello-world/blob/master/s/SparQL.sparql leachim6/hello-world/] {{Wayback|url=https://github.com/leachim6/hello-world/blob/master/s/SparQL.sparql |date=20190322182531 }} GitHub [2021-06-20]</ref>

=== [[XAML|XAML]] ===
<syntaxhighlight lang="xml">
 <Page
  ns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  x:Class="XAMLSample.Page1"
 >
  <Button Click="HelloWorld" Name="Button1">Click Here</Button>
 </Page>
</syntaxhighlight>
接著使用 [[C♯|C#]] 建置
<syntaxhighlight lang="csharp">
 using System;
 using System.Windows;
 using System.Windows.Controls;
 
 namespace XAMLSample
 {
  public partial class Page1 : Page
  {
    void HelloWorld(object sender, RoutedEventArgs e)
    {
      MessageBox.Show("Hello, world!");
    }
  }
 }
</syntaxhighlight>

=== [[易语言|易语言]] ===
  .版本 2
  .程序集 窗口程序集1
  .子程序 __启动窗口_创建完毕
  信息框 (“Hello, World!”, 0, )

== 服务器端 ==
以下为Web服务端示例程序，程序启动后，需要用浏览器访问特定地址来查看结果。

=== [[ASP|ASP]] ===
<syntaxhighlight lang="asp"><% Response.Write("Hello, world!") %></syntaxhighlight><ref name="Hello World Collection"/>

:或者簡單地寫成：
<syntaxhighlight lang="asp"><%= "Hello, world!" %></syntaxhighlight>

=== [[HTML|HTML]] ===
<syntaxhighlight lang="html4strict">
<!-- 直接輸出... -->
Hello World
<!-- 或者 -->
<html>
<head>
    <title> Hello World </title>
</head>
<body>
Hello World
</body>
</html>
</syntaxhighlight><ref name="Hello World Collection"/>

=== [[Go|Go]] ===
<syntaxhighlight lang="go">
package main

import (
    "fmt"
    "net/http"
)

func helloHandler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "hello world")
}

func main() {
    http.HandleFunc("/", helloHandler)
    http.ListenAndServe("0.0.0.0:8000", nil)
}
</syntaxhighlight>

=== [[JSP|JSP]] ===
<syntaxhighlight lang="java">
<%
    out.print("Hello, world!");
%>
</syntaxhighlight><ref name="Hello World Collection"/>
或者简单地写成：
<syntaxhighlight lang="java">
<%="Hello, world!"%>
</syntaxhighlight>

=== [[JavaScript|JavaScript]] ===
以下为[[Node.js|Node.js]]环境：
<syntaxhighlight lang="javascript">
const http = require('http');

http.createServer((request, response) => {
  response.writeHead(200, { 'Content-Type': 'text/plain' });
  response.end('Hello World!');
}).listen(8000);

console.log('Server running at http://127.0.0.1:8000/');
</syntaxhighlight>

=== [[PHP|PHP]] ===
以下代码既可以作为服务器端运行，显示在用户浏览器上，也可以在终端中直接运行，输出到终端中：

<syntaxhighlight lang="php">
<?php
    echo 'Hello, world!';
    // 或者
    print 'Hello, world!';
?>
</syntaxhighlight>
或者
<syntaxhighlight lang="php"><?= "Hello World!"?></syntaxhighlight>

== 參見 ==
*[[Hello_World|Hello World]]
== 參考文獻 ==
{{Reflist}}

==外部連結==
*[https://github.com/leachim6/hello-world GitHub上的Hello World程序样例集] {{Wayback|url=https://github.com/leachim6/hello-world |date=20170104073840 }}

[[Category:计算机编程|Category:计算机编程]]
[[Category:带有C代码示例的条目|Category:带有C代码示例的条目]]