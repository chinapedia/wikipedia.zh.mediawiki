{{Infobox programming language
| name = Hy
| logo = File:Hy Header Logo.svg
| logo caption =
| screenshot = <!-- Filename only. -->
| screenshot caption = 
| paradigm = [[编程范型|多范型]]: [[过程式编程|过程式]], [[函数式编程|函数式]], [[面向对象编程|面向对象]], [[元编程|元编程]], [[反射式编程|反射式]], [[泛型编程|泛型]]
| family = [[Lisp|Lisp]]
| designer = Paul Tagliamonte
| developers = 核心团队
| released = {{Start date and age|2013|df=yes}}
| latest release version = 0.20.0
| latest release date = {{Start date and age|2021|01|26|df=yes}}
| latest preview version = 1.0a4
| latest preview date = {{Start date and age|2022|01|10|df=yes}}
| typing = 
| scope = 词法
| programming language = [[Python|Python]]
| platform = [[IA-32|IA-32]], [[x86-64|x86-64]]
| operating system = [[跨平台|跨平台]]
| license = [[MIT_License|MIT]]式
| file ext = .hy
| file format = <!-- or: | file formats = -->
| website = {{URL|hylang.org}}
| implementations = 
| dialects = 
| influenced by = [[Lisp|Lisp]], {{en-link|Kawa (Scheme实现)|Kawa (Scheme implementation)|Kawa}}, [[Clojure|Clojure]], [[Common_Lisp|Common Lisp]]
| influenced = 
}}

'''Hy'''是[[Lisp|Lisp]][[编程语言|编程语言]]的一种方言。它设计用于同[[Python|Python]]语言进行交互，方式是把表达式翻译成Python的[[抽象语法树|抽象语法树]]（AST）<ref>{{Cite book|last=Jaworski|first=Michał|url=https://www.worldcat.org/oclc/1125343555|title=Expert Python programming|last2=Ziadé|first2=Tarek|publisher=Packt Publishing|year=2019|isbn=978-1-78980-677-9|edition=Third|location=Birmingham, U.K.|pages=173|oclc=1125343555}}</ref><ref>{{Cite book|url=|title=Serious Python: black-belt advice on deployment, scalability, testing, and more|last=Danjou|first=Julien|publisher=No Starch Press|year=2018|isbn=9781593278793|location=San Francisco, CA|pages=145-149|oclc=1057729260}}</ref>。Paul Tagliamonte在2013年于[[PyCon|Python会议]]（PyCon）介绍了Hy<ref>{{cite speech |title=PyCon lightning talk |last=Tagliamonte |first=Paul |date=2 April 2013 |location=Santa Clara |url=http://blog.pault.ag/day/2013/04/02 |access-date=2 September 2014 |event=[[Python_Conference|Python Conference]] (PyCon) |archive-date=2020-10-19 |archive-url=https://web.archive.org/web/20201019130036/https://blog.pault.ag/day/2013/04/02 |dead-url=no }}</ref>。

类似于{{en-link|Kawa (Scheme实现)|Kawa (Scheme implementation)|Kawa}}和[[Clojure|Clojure]]将[[s-表达式|s-表达式]]映射到[[Java虚拟机|Java虚拟机]]（JVM）之上<ref>{{cite news |last1=Turto |first1=Tuukka |title=Programming Can Be Fun with Hy |url=http://www.opensourceforu.com/2014/02/programming-can-fun-hy/ |access-date=2 September 2014 |work=[[Open_Source_For_You|Open Source For You]] |date=14 February 2014 |archive-date=2020-08-03 |archive-url=https://web.archive.org/web/20200803175407/https://www.opensourceforu.com/2014/02/programming-can-fun-hy/ |dead-url=no }}</ref>，Hy必定作为Python抽象语法树的透明Lisp前端来运行<ref name="LWN">{{cite web |last=Edge |first=Jake |title=Getting Hy on Python |url=https://lwn.net/Articles/596626/ |access-date=2 September 2014 |date=30 April 2014 |website=[[LWN.net|LWN.net]] |archive-date=2020-10-12 |archive-url=https://web.archive.org/web/20201012215241/https://lwn.net/Articles/596626/ |dead-url=no }}</ref>。Lisp允许像数据那样在代码上进行操作（[[元编程|元编程]]）。因此，Hy可以用来书写[[领域特定语言|领域特定语言]]<ref>{{cite speech |title=Getting Hy on Python: How to implement a Lisp front-end to Python |last=Tagliamonte |first=Paul |date=11 April 2014 |location=Montreal |url=https://us.pycon.org/2014/schedule/presentation/192/ |access-date=2 September 2014 |event=[[PyCon|PyCon]] |archive-date=2020-10-20 |archive-url=https://web.archive.org/web/20201020172947/https://us.pycon.org/2014/schedule/presentation/192/ |dead-url=no }}</ref>。Hy还允许导入Python[[函式库|库]]包括[[标准库|标准库]]，并与Hy代码一起被访问，方式是通过一个[[编译器|编译]]步骤<ref group="note">“编译”这个术语可以应用于将Hy代码表达为Python的AST或将这个AST转换成字节码，后者依赖于所使用的特定Python解释器而非Hy。</ref>，将二者的数据结构翻译成Python的AST<ref group="note">Hy在Python 2.7、3.4到3.6和[[PyPy|PyPy]]上测试过。</ref><ref>{{cite web |title=Hy Documentation |url=http://docs.hylang.org/en/stable/tutorial.html#hy-is-a-lisp-flavored-python |website=hylang.org |access-date=3 September 2014 |archive-date=2020-11-25 |archive-url=https://web.archive.org/web/20201125162500/https://docs.hylang.org/en/stable/tutorial.html#hy-is-a-lisp-flavored-python |dead-url=no }}</ref><ref>{{cite book |last=Danjou |first=Julien |date=26 March 2014 |title=The Hacker's Guide to Python |url=https://books.google.com/books?id=B6nhAwAAQBAJ&pg=PT171 |chapter=The AST |pages=165–172}}</ref><ref>{{cite web |last=Kitchin |first=John |title=More on Hy and why I think it is a big deal |url=http://kitchingroup.cheme.cmu.edu/blog/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal/ |website=The Kitchin Research Group |publisher=[[Carnegie_Mellon_University|Carnegie Mellon University]] |access-date=19 September 2018 |date=31 March 2016 |archive-date=2020-02-17 |archive-url=https://web.archive.org/web/20200217041647/http://kitchingroup.cheme.cmu.edu/blog/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal/ |dead-url=no }}</ref>。

== 例子代码 ==
来自语言文档的例子<ref>{{cite web |title=Quickstart |url=http://docs.hylang.org/en/stable/quickstart.html |website=Hylang.org |access-date=19 September 2018 |date=15 May 2018 |archive-date=2019-08-14 |archive-url=https://web.archive.org/web/20190814180358/http://docs.hylang.org/en/stable/quickstart.html |dead-url=no }}</ref>：
<syntaxhighlight lang="hylang">
=> (print "Hy!")
Hy!
=> (defn salutationsnm [name] (print (+ "Hy " name "!")))
=> (salutationsnm "YourName")
Hy YourName!
</syntaxhighlight>

== 参见 ==
[[File:Hy_Cuddles.png|thumb]]，[[墨鱼|墨鱼]]Cuddles]]
* [[Common_Lisp|Common Lisp]]
* [[Clojure|Clojure]]
* {{en-link|Kawa (Scheme实现)|Kawa (Scheme implementation)}}
* {{en-link|CLPython|CLPython}}
* Hissp<ref>{{cite web|url=https://github.com/gilch/hissp|title=Hissp|accessdate=2020-10-09|archive-date=2020-09-20|archive-url=https://web.archive.org/web/20200920012018/https://github.com/gilch/hissp|dead-url=no}}</ref> － Hissp是编译成Python的函数式子集的模块化Lisp实现，提供可以完全访问Python生态系统的语法宏元编程。
* SchemePy<ref>{{cite web|url=https://pypi.org/project/SchemePy/|title=SchemePy|accessdate=2020-10-10|archive-date=2018-07-09|archive-url=https://web.archive.org/web/20180709191440/https://pypi.org/project/SchemePy/|dead-url=no}}</ref> － 用Python实现的[[Scheme|Scheme]]，支持{{en-link|call/cc|call-with-current-continuation}}和{{en-link|干净宏|hygienic macros}}。

==注释==
{{reflist|group=note}}

== 引用 ==
{{reflist|2}}

== 外部链接 ==
* {{Official website|hylang.org}}
* {{GitHub|hylang/hy}}
* [http://docs.hylang.org 文档]

{{Lisp programming language}}

[[Category:LISP程式语言|Category:LISP程式语言]]
[[Category:自由跨平台軟體|Category:自由跨平台軟體]]
[[Category:LISP程式语言家族|Category:LISP程式语言家族]]
[[Category:Python軟體|Category:Python軟體]]