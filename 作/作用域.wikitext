{{noteTA
|G1=IT
}}
在[[電腦|電腦]][[程式設計|程式設計]]中，'''作用域'''（scope，或譯作有效範圍）是名字（name）与实体（entity）的绑定（binding）保持有效的那部分计算机程序。不同的[[编程语言|编程语言]]可能有不同的'''作用域'''和[[名字解析|名字解析]]。而同一语言内也可能存在多种'''作用域'''，随[[实体|实体]]的[[类型|类型]]变化而不同。'''作用域类别'''影響[[變量|變量]]的[[变量绑定|绑定]]方式，根據語言使用'''靜態作用域'''還是'''動態作用域'''[[变量|变量]]的取值可能会有不同的結果。 

* 包含[[标识符|标识符]]的宣告或[[定義|定義]]；
* 包含[[語句_(程式設計)|語句]]和/或[[運算式|運算式]]，定義或部分關於可執行的[[演算法|演算法]]；
* 巢狀嵌套或被巢狀嵌套。

[[命名空間|命名空間]]是一種作用域，使用作用域的封裝性質去邏輯上群組起關相的眾識別子於單一識別子之下。因此，'''作用域'''可以影響這些內容的[[名字解析|名字解析]]。

程式員常會[[縮排|縮排]]他們的[[原始碼|原始碼]]中的'''作用域'''，改善可讀性。

==歷史==

==例子==
下列例子显示了[[C++|C++]]语言中多种不同的作用域声明：
<syntaxhighlight lang="cpp">
namespace N
{                        // 命名空间作用域，仅是群组织别名
   class C
   {                     // 类作用域，定义/声明成员变量和函数
      void f (bool b)
      {                  // 函数作用域，包含可执行语句
         if (b)
         {               // 条件执行语句的无名作用域
           ...
         }
      }
   };
}
</syntaxhighlight>

== 静态作用域与动态作用域 ==

'''静态作用域'''又叫做词法作用域，采用词法作用域的变量叫'''词法变量'''。词法变量有一个在编译时静态确定的作用域。词法变量的作用域可以是一个函数或一段代码，该变量在这段代码区域内可见（visibility）；在这段区域以外该变量不可见（或无法访问）。词法作用域里，取变量的值时，会检查函数定义时的文本环境，捕捉函数定义时对该变量的绑定。

大多数现在程序设计语言都是采用静态作用域规则，如[[C/C++|C/C++]]、[[C♯|C#]]、[[Python|Python]]、[[Java|Java]]、[[JavaScript|JavaScript]]……

相反，采用'''动态作用域'''的变量叫做'''动态变量'''。只要程序正在执行定义了动态变量的代码段，那么在这段时间内，该变量一直存在；代码段执行结束，该变量便消失。这意味着如果有个函数<code>f</code>，里面调用了函数<code>g</code>，那么在执行<code>g</code>的时候，<code>f</code>里的所有局部变量都会被<code>g</code>访问到。而在静态作用域的情况下，<code>g</code>不能访问<code>f</code>的变量。动态作用域里，取变量的值时，会由内向外逐层检查函数的调用链，并打印第一次遇到的那个绑定的值。显然，最外层的绑定即是全局状态下的那个值。

采用动态作用域的语言有[[Pascal|Pascal]]、[[Emacs_Lisp|Emacs Lisp]]、[[Common_Lisp|Common Lisp]]（兼有静态作用域）、[[Perl|Perl]]（兼有静态作用域）。C/C++是静态作用域语言，但在宏中用到的名字，也是动态作用域。

==参见==
*[[闭包_(计算机科学)|闭包 (计算机科学)]]
*[[全局变量|全局变量]]
*[[局部变量|局部变量]]

[[Category:计算机编程|Category:计算机编程]]