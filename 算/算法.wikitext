{{copy edit}}
{{NoteTA
|G1=IT
}}
-{zh-hans:[[File:LampFlowchart_ZhS.svg|缩略图]]]];zh-hant:[[File:LampFlowchart_ZhT.svg|缩略图]]]]}-

'''算法'''（{{lang-en|algorithm}}），在[[數學|數學]]（[[算學|算學]]）和[[電腦科學|電腦科學]]之中，指一個被定義好的、計算機可施行其指示的有限步驟或次序<ref>{{cite book|author1=Thomas H. Cormen|author2=Charles E. Leiserson|author3=Ronald L. Rivest|author4=Clifford Stein|authorlink1=罗纳德·李维斯特|coauthors=殷建平等译|title=算法导论|url=https://archive.org/details/suanfadaolun0000unse|date=2013年1月|publisher=机械工业出版社|location=北京|isbn=978-7-111-40701-0|page=3[5]|edition=原书第3版|accessdate=2017-11-14|language=zh|chapter=第1章 算法在计算机中的作用}}</ref>，常用於[[計算|計算]]、{{link-en|數據處理|Data processing|數據處理}}和[[自動推理|自動推理]]。算法是{{link-en|有效方法|Effective method}}，包含一系列定义清晰的指令<ref>Well defined with respect to the agent that executes the algorithm: "There is a computing agent, usually human, which can react to the instructions and carry out the computations"（Rogers 1987:2）.</ref>，并可于[[wikt:Special:Search/有限的|有限的]]时间及空间内清楚的表述出来<ref>"Any classical mathematical algorithm, for example, can be described in a finite number of English words"（Rogers 1987:2）.</ref>。

算法中的指令描述的是一個[[計算|計算]]，它{{link-en|執行|Execution (computing)}}時從一個初始狀態和初始輸入（可能爲[[空字元串|空]]）開始，<ref>"An algorithm has zero or more inputs, i.e., quantities which are given to it initially before the algorithm begins"（Knuth 1973:5）</ref>經過一系列'''有限'''<ref>"A procedure which has all the characteristics of an algorithm except that it possibly lacks finiteness may be called a 'computational method'"（Knuth 1973:5）</ref>而清晰定義的狀態最終產生'''輸出'''<ref>"An algorithm has one or more outputs, i.e. quantities which have a specified relation to the inputs"（Knuth 1973:5）</ref>並'''停止'''於一個終態。一個狀態到另一個狀態的轉移不一定是[[确定性算法|確定的]]。包括[[隨機化算法|隨機化算法]]在内的一些算法，都包含了一些隨機輸入。<ref>Whether or not a process with random interior processes (not including the input) is an algorithm is debatable. Rogers opines that: "a computation is carried out in a discrete stepwise fashion, without use of continuous methods or analogue devices... carried forward deterministically, without resort to random methods or devices, e.g., dice" Rogers 1987:2).</ref><ref>Whether or not a process with random interior processes (not including the input) is an algorithm is debatable. Rogers opines that: "a computation is carried out in a discrete stepwise fashion, without use of continuous methods or analogue devices ... carried forward deterministically, without resort to random methods or devices, e.g., dice" Rogers 1987:2).</ref>

早在尝试解决[[大卫·希尔伯特|希尔伯特]]提出的[[可判定性|判定问题]]时，算法的不完整概念已经初步定型；在其后的正式化阶段中人們尝试去定义“{{link-en|有效可計算性|Effective calculability}}<ref>Kleene（斯蒂芬·科尔·克莱尼）1943 in Davis 1965:274</ref>”或者“{{link-en|有效方法|Effective method}}<ref>Rosser（巴克利·羅瑟）1939 in Davis 1965:225</ref>”。这些尝试包括[[库尔特·哥德尔|库尔特·哥德尔]]、[[雅克·埃尔布朗|雅克·埃尔布朗]]和[[斯蒂芬·科尔·克莱尼|斯蒂芬·科尔·克莱尼]]分别于1930年、1934年和1935年提出的[[遞歸_(計算機科學)|遞歸函數]]，[[阿隆佐·邱奇|阿隆佐·邱奇]]於1936年提出的[[λ演算|λ演算]]，1936年{{link-en|埃米爾·萊昂·珀斯特|Emil Leon Post}}的[[波斯特-圖靈機|Formulation 1]]和[[艾倫·圖靈|艾倫·圖靈]]1937年提出的[[圖靈機|圖靈機]]。即使在當下，依然常有符合直覺的想法難以定義爲形式化算法的情況。<ref>{{cite book|first1=Yiannis N.|last1=Moschovakis|chapter=What is an algorithm?|title=Mathematics Unlimited—2001 and beyond|editor1-first=B.|editor1-last=Engquist|editor2-first=W.|editor2-last=Schmid|publisher=Springer|year=2001|pages=919–936 (Part II)|url=http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.32.8093}}</ref>

== 历史 ==
算法在中国古代文献中称为“术”，最早出现在《[[周髀算經|周髀算經]]》、《[[九章算术|九章算术]]》。特别是《九章算术》，给出[[四则运算|四则运算]]、[[最大公约数|最大公约数]]、最小公倍数、开[[平方根|平方根]]、开[[立方根|立方根]]、求[[素数|素数]]的[[埃氏篩|埃氏篩]]，线性方程组求解的[[高斯消元法|高斯消元法]]。三国時代的[[刘徽|刘徽]]给出求圆周率的算法：[[刘徽割圆术|刘徽割圆术]]。

自唐代以来，历代更有许多专门论述“-{算法}-”的专著：
* 唐代：《一位-{算法}-》 一卷，《-{算法}-》 一卷；
* 宋代：《-{算法}-绪论》 一卷、《-{算法}-秘诀》 一卷；最著名的是[[杨辉|杨辉]]的《[[杨辉算法|杨辉-{算法}-]]》；
* 元代：《-{[[丁巨算法|丁巨算法]]}-》；
* 明代：[[程大位|程大位]] 《[[算法统宗|-{算法}-统宗]]》
* 清代：《开平-{算法}-》、《-{算法}-一得》、《[[算法全书|-{算法}-全书]]》。

而英文名稱「algorithm」来自于9世纪[[波斯|波斯]]数学家[[花拉子米|花拉子米]]（比阿勒·霍瓦里松，波斯語：{{lang|fa|خوارزمی }}，拉丁轉寫：al-Khwarizmi），因為比阿勒·霍瓦里松在[[数学|数学]]上提出了算法这个概念。「算法」原为「algorism」，即“al-Khwarizmi”的音转，意思是“[[花拉子米|花拉子米]]”的运算法则，在18世纪演变为「algorithm」。

[[欧几里得算法|欧几里得算法]]被人们认为是史上第一个算法。

第一次编写程序是[[愛達·勒芙蕾絲|愛達·勒芙蕾絲]]（{{lang|en|Ada Byron}}）于1842年为[[巴贝奇分析机|巴贝奇分析机]]编写求解解[[伯努利微分方程|伯努利微分方程]]的[[程序|程序]]，因此愛達·勒芙蕾絲被大多数人认为是世界上第一位[[程序员|程序员]]<ref name="Lovelace Google">{{Cite news|date=10 December 2012|url=http://www.guardian.co.uk/technology/2012/dec/10/ada-lovelace-honoured-google-doodle|title=Ada Lovelace honoured by Google doodle|newspaper=The Guardian|accessdate=10 December 2012|archive-date=2018-12-25|archive-url=https://web.archive.org/web/20181225024306/https://www.theguardian.com/technology/2012/dec/10/ada-lovelace-honoured-google-doodle|dead-url=no}}</ref>。因为[[查尔斯·巴贝奇|查尔斯·巴贝奇]]（{{lang|en|Charles Babbage}}）未能完成他的巴贝奇分析机，这个算法未能在巴贝奇分析机上执行。

因为「well-defined procedure」缺少数学上精确的定义，19世纪和20世纪早期的数学家、[[逻辑学家|逻辑学家]]在定义算法上出现了困难。20世纪的[[英国|英国]]数学家[[图灵|图灵]]提出了著名的[[邱奇－图灵论题|图灵论题]]，并提出一种假想的[[计算机|计算机]]的抽象模型，这个模型被称为[[图灵机|图灵机]]。图灵机的出现解决了算法定义的难题，图灵的思想对算法的发展起到了重要的作用。

== 特征 ==
以下是[[高德纳|高德纳]]在他的著作《[[计算机程序设计艺术|计算机程序设计艺术]]》裡對演算法的特徵歸納：
[[File:MerkleTree1.JPG|右]]
# 输入：一个算法必须有零个或以上输入量。
# 输出：一个算法应有一个或以上输出量，输出量是算法计算的结果。
# 明確性：算法的描述必须无歧义，以保证算法的實際执行结果是精確地符合要求或期望，通常要求實際執行結果是确定的。
# 有限性：依據圖靈的定義，一個演算法是能夠被任何[[圖靈完全|圖靈完備]]系統模擬的一串運算，而[[圖靈機|圖靈機]]-{只}-有有限個狀態、有限個輸入符號和有限個轉移函數（指令）。而一些定義更規定演算法必须在有限個步骤内完成任務。
# 有效性：又称可行性。能够实现，算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现。

== 基本要素 ==
算法的核心是建立问题抽象的模型和明确求解目标，之后可以根据具体的问题选择不同的模式和方法完成算法的设计。

=== 常用设计模式 ===
完全[[遍歷法|遍歷法]]和不完全遍歷法：在问题的解是有限离散解空间，且可以验证正确性和最优性时，最简单的算法就是把解空间的所有元素完全遍历一遍，逐个检测元素是否是我们要的解。这是最直接的算法，实现往往最简单。但是当解空间特别庞大时，这种算法很可能导致工程上无法承受的计算量。这时候可以利用不完全遍历方法——例如各种搜索法和规划法——来减少计算量。

[[分治法|分治法]]：把一个问题分割成互相独立的多个部分分别求解的思路。这种求解思路带来的好处之一是便于进行并行计算。

[[动态规划|动态规划]]法：当问题的整体最优解就是由局部最优解组成的时候，经常采用的一种方法。

[[贪心法|贪婪算法]]：常见的近似求解思路。当问题的整体最优解不是（或无法证明是）由局部最优解组成，且对解的最优性没有要求的时候，可以采用的一种方法。

[[线性规划|线性规划]]法：见条目。

简并法：把一个问题通过逻辑或数学推理，简化成与之等价或者近似的、相对简单的模型，进而求解的方法。

=== 常用实现方法 ===
[[递归|递归方法]]与[[迭代|迭代方法]]

顺序计算、[[并行计算|并行计算]]和[[分布式计算|分布式计算]]：顺序计算就是把形式化算法用编程语言进行单线程序列化后执行。

确定性算法和非确定性算法

精确求解和近似求解

== 形式化算法 ==
算法是计算机处理信息的本质，因为计算机程序本质上是一个算法来告诉计算机确切的步骤来执行一个指定的任务，如计算职工的薪水或打印学生的成绩单。一般地，当算法在处理信息时，会从[[输入设备|输入设备]]或数据的存储地址读取数据，把结果写入[[输出设备|输出设备]]或某个存储地址供以后再调用。

== 复杂度 ==

=== 时间复杂度 ===
算法的[[时间复杂度|时间复杂度]]是指算法需要消耗的时间资源。一般来说，计算机算法是问题规模<math> n </math>的函数<math> f(n) </math>，算法的时间复杂度也因此记做
:<math>T(n)= \mathcal{O}(f(n))</math>
算法执行时间的增长率与<math> f(n) </math>的增长率正相关，称作{{link-en|渐近时间复杂度|Asymptotic computational complexity}}，简称时间复杂度。

常见的时间复杂度有：常数阶<math> O(1) </math>，对数阶<math> O(\log n) </math>，线性阶<math> O(n) </math>，线性对数阶<math> O(n\log n) </math>，平方阶<math> O(n^2) </math>，立方阶<math> O(n^3) </math>，...，<math> k </math>次方阶<math> O(n^k) </math>,指数阶<math> O(2^n) </math>。随着问题规模<math> n </math>的不断增大，上述时间复杂度不断增大，算法的执行效率越低。

=== 空间复杂度 ===
算法的[[空间复杂度|空间复杂度]]是指算法需要消耗的空间资源。其计算和表示方法与时间复杂度类似，一般都用复杂度的[[渐近性|渐近性]]来表示。同时间复杂度相比，空间复杂度的分析要简单得多。

== 非確定性多項式時間（NP） ==
{{main|NP (複雜度)}}

== 实现 ==
算法不单单可以用计算机程序来实现，也可以在[[人工神经网络|人工神经网络]]、[[电路|电路]]或者[[机械|机械]]设备上实现。

== 範例 ==

=== 求最大值演算法 ===

这是算法的一个简单的例子。

我们有一串随机[[数列|数列]]。我们的目的是找到这个数列中最大的数。如果将数列中的每一个数字看成是一颗豆子的大小，可以将下面的算法形象地称为「捡豆子」：

# 首先将第一颗豆子放入口袋中。
# 从第二颗豆子开始检查，如果正在检查的豆子比口袋中的还大，则将它捡起放入口袋中，同时丢掉原先口袋中的豆子。反之則繼續下一顆豆子。直到最后一颗豆子。
# 最后口袋中的豆子就是所有的豆子中最大的一颗。

以上算法在中国大陆的教科书中通常被叫做“打擂法”或者“循环打擂”<ref>{{cite web|url=http://book.51cto.com/art/201303/383482.htm|title=2.4 赛场统分|website=读书频道-IT技术图书-51CTO.COM|access-date=2017-06-07|archive-url=https://web.archive.org/web/20170324044038/http://book.51cto.com/art/201303/383482.htm|archive-date=2017-03-24|dead-url=yes}}</ref><ref>{{cite web|url=http://acm.hnust.edu.cn/JudgeOnline/problem.php?cid=1312&pid=18|title=实验3-9：循环打擂|website=湖南科技大学程序设计在线评测（Online Judge）}}{{Dead link|date=2018年11月 |bot=InternetArchiveBot |fix-attempted=yes }}</ref><ref>{{cite web|url=http://www.zaidian.com/gaozhongjiaoan/648112.html|website=在点网|title=高中,算法与程序设计,教案}}{{Dead link|date=2020年1月 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>：在一个for循环中，每轮循环都有新的挑战者。若挑战者胜的话，挑战者做新擂主，否则擂主卫冕。for循环结束后输出最后的擂主。

下面是一个形式算法，用[[C语言|ANSI C]]代码表示

<syntaxhighlight lang="c">
int max(int *array, int size)
{
  int mval = *array;
  int i;
  for (i = 1; i < size; i++)
    if (array[i] > mval)
      mval = array[i];
  return mval;
}
</syntaxhighlight>

=== 求最大公約數演算法 ===

求两个自然数的[[最大公约数|最大公约数]]
设两个变量<math> M </math>和<math> N </math>
# 如果<math> M < N </math>，则交换<math> M </math>和<math> N </math>
# <math> M </math>除以<math> N </math>，得到余数<math> R </math>
# 判断<math> R=0 </math>，正确则<math> N </math>即为“最大公约数”，否则下一步
# 将<math> N </math>赋值给<math> M </math>，将<math> R </math>赋值给<math> N </math>，重做第一步。
用[[C语言|ANSI C]]代码表示
<syntaxhighlight lang="c">
//交換2數
void swapi(int *x, int *y)
{
  int tmp = *x;
  *x = *y;
  *y = tmp;
}

int gcd(int m, int n)
{
  int r;
  do
  {
    if (m < n)
      swapi(&m, &n);
    r = m % n;
    m = n;
    n = r;
  } while (r);
  return m;
}
</syntaxhighlight>
利用if函式以及遞迴則能做出更為精簡的程式碼，更可省去交換的麻煩。（但是也因為遞迴呼叫，其空間複雜度提高）
<syntaxhighlight lang="c">
int gcd(int a,int b)
{
    if(a%b)
        return gcd(b,a%b);
    return b;
}
</syntaxhighlight>

== 分类 ==
* 基本算法
** [[枚举|枚举]]
** [[搜索_(计算机)|搜索]]
*** [[深度优先搜索|深度优先搜索]]
*** [[广度优先搜索|广度优先搜索]]
*** [[启发式搜索|-{zh-hans:启发式搜索; zh-hant:啟發式搜索;}-]]
*** [[遗传算法|遗传算法]]
* [[数据结构|数据结构]]的算法
* [[数论与代数算法|数论与代数算法]]
* [[计算几何|计算几何]]的算法
** [[凸包|凸包]]算法
* [[图论|图论]]的算法
** [[哈夫曼编码|哈夫曼编码]]
** [[树的遍历|树的遍历]]
** [[最短路径|最短路径]]算法
** [[最小生成树|最小生成树]]算法
** [[最小树形图|最小树形图]]
** [[网络流|网络流]]算法
** [[匹配算法|匹配算法]]
** [[分團問題|分團問題]]
* [[动态规划|动态规划]]
* 其他
** [[数值分析|数值分析]]
** [[加密算法|加密算法]]
** [[排序算法|排序算法]]
** [[检索|检索]]算法
** [[随机化算法|随机化算法]]
** 关于并行算法，请参阅[[并行计算|并行计算]]一文。

== 註釋 ==
{{Reflist|2}}

== 参考文献 ==
{{Refbegin}}
* {{Cite book|last=Rogers, Jr|first=Hartley|title=Theory of Recursive Functions and Effective Computability|publisher=The MIT Press|year=1987|isbn=0-262-68052-1}}
* {{cite book| last = Davis| first = Martin| title = The Undecidable: Basic Papers On Undecidable Propositions, Unsolvable Problems and Computable Functions| url = https://archive.org/details/undecidablebasic0000davi| year = 1965| publisher = Raven Press| location = New York| isbn = 0-486-43228-9 }} Davis此書中有列出許多相關的論文，包括[[库尔特·哥德尔|哥德尔]]、[[阿隆佐·邱奇|邱奇]]、[[艾伦·图灵|图灵]]、{{link-en|巴克利·羅瑟|Rosser}}、[[斯蒂芬·科尔·克莱尼|斯蒂芬·科尔·克莱尼]]及{{link-en|埃米爾·波斯特|Emil Post}}的論文。在參考文獻中也會列出原作者的姓名。
{{refend}}

== 参閱 ==
{{Portal|计算机科学|计算机程序设计}}
{{div col|2}}
* [[抽象機器|抽象機器]]
* [[算法作曲|算法作曲]]
* [[高级综合|高级综合]]
* [[垃圾进，垃圾出|垃圾进，垃圾出]]
* 《[[算法导论|算法导论]]》
* [[计算理论|计算理论]]
** [[可计算性理论|可计算性理论]]
** [[計算複雜性理論|計算複雜性理論]]
{{div col end}}

== 延伸阅读 ==
{{Wikisource further reading}}

== 外部链接 ==
* [http://www.uta.edu/faculty/rcli/TopTen/topten.pdf 20世纪十大算法]
* [http://www.csie.ntnu.edu.tw/~u91029/ 演算法笔记]
* [http://dev.gameres.com/Program/Abstract/Geometry.htm 计算几何算法概览]
{{-}}
{{算法|state=collapsed}}
{{Computer Science|state=collapsed}}

{{Authority control}}
[[Category:算法|]]
[[Category:代数|S]]
[[Category:计算机科学|Category:计算机科学]]
[[Category:理论计算机科学|Category:理论计算机科学]]
[[Category:问题解决|Category:问题解决]]
[[Category:带有代码示例的条目|Category:带有代码示例的条目]]