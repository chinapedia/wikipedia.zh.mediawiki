{{Unreferenced |time=2011-02-24T06:30:39+00:00}}
{{NoteTA
|G1 = IT
}}

'''算術溢位'''（arithmetic overflow）或簡稱為'''溢位'''（overflow）指的是：

#在[[電子計算機|電腦]]領域裡所發生的溢位條件是，執行單項數值計算時，當計算產生出來的結果是非常大的，大於[[暫存器|暫存器]]或[[記憶體|記憶體]]所能儲存或表示的能力限制。
#在電腦領域裡，執行多項或累計的數值計算時，當計算產生出來的總值是非常大的，大於暫存器或記憶體所能儲存或表示的能力限制。要注意的是，溢位可能會在其他位址被置換。{{來源請求}}

[[加法器|加法器]]是[[中央处理器|中央处理器]][[算术逻辑单元|算术逻辑单元]]中的核心之一。当长度为n位的两个[[二进制|二进制]]数经过'''加减法器'''运算，得到的长度为n位的结果不是正确值时，我们说发生'''溢出'''。

==檢查溢位==
大多數的電腦都可以區別以上兩種溢位條件。當加法或減法的結果發生[[進位|進位]]，必須考量到當運算的數值與結果都是unsigned numbers（無號數值，即「正數」）型態時，運算的結果就不適合使用這個數值型態。所以，在執行無號數值（正數）的加法或減法之後檢查[[進位旗標|進位旗標]]是非常有用的作法。「溢位」在運算結果為無號數值時容易發生，可以從有符號的運算數值預計出這類的情形（例如：兩個正整數相加產生的結果為一個負數）。所以，在執行[[2的補數|2的補數]]的加法或減法之後檢查[[溢位旗標|溢位旗標]]是非常有用的作法（換言之，有考慮到有號數值）。

==控制溢位==
有幾個控制溢位的方法：
#[[設計|設計]]：選擇正確的[[資料型態|資料型態]]，尤其要注意資料長度與signed/unsigned資料符號。
#迴避：事先注意[[指令|指令]]的運作以及[[檢查|檢查]]運算的數值，或許可以確保計算出來的結果不會超過[[記憶體|記憶體]]儲存資料的[[限制|限制]]。
#[[控制|控制]]：當它被偵測到，還有在其他的程序完成時被[[檢測|檢測]]出來，那麼溢位是可以被預料的。例如：兩個位元大的兩個數值做加法計算，這種情形最可能發生。步驟如下：先加低位元再加高位元，但是如果它必須完成低位元的運算，就會產生位元加法的運算溢位，那麼就有必要做偵測和增加高位元的總和。通常[[中央處理器|CPU]]有支援偵測數值加法大於[[暫存器|暫存器]]大小的作法，基本上這個作法是採用狀態位元的方式。
#增值：假如儲存的數值過大就會被分配給其他特定的數值，這時溢位就會發生，然後傳回旗標值時就會產生連續運作的現象。檢查這個問題最有用的方法，就是在整體的計算結尾做一次性的檢查工作，而不是檢查每一個執行步驟。這個作法最常用在浮點硬體呼叫[[浮點運算器|浮點運算器]]。
#忽略：這是最普遍的作法，但是這個作法會得出不正確的結果，以及降低程式的[[電腦安全|安全性]]。

==除零計算==
任何數[[除以零|除以零]]的計算（Divided by zero）「不是」算術溢位的一種。在數學上只能明顯算是[[未定義_(數學)|不明確的定義]]（Undefined）；它計算出來的結果只能當成是「沒有」值，而不是非常大的無限數值。

==相關參見==
*[[進位|進位]]
*[[旗標|旗標]]
*[[溢位|溢位]]
*[[緩衝區溢位|緩衝區溢位]]（Buffer overflow）
*[[算术下溢|算术下溢]]

[[Category:電腦數據|Category:電腦數據]]
[[category:微處理器|category:微處理器]]