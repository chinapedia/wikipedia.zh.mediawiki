在[[计算机科学|计算机科学]]中，'''不可访问内存'''是指一组没有任何可访问[[指针_(信息学)|指针]]指向的由[[计算机程序|计算机程序]]进行[[动态内存分配|动态分配]]的内存块。类似的，一个'''不可访问对象'''是指没有可访问[[引用型|引用型]]指向的动态分配[[对象_(计算机科学)|对象]]。通俗来说，不可访问内存是程序无法直接访问的动态内存，同时也无法通过指针指向一个可访问的起始对象来进行访问。

动态内存分配的实现是采用了[[垃圾回收_(计算机科学)|垃圾回收]]机制，在一个对象不可访问后，它会被回收。垃圾收集器能决定是否一个对象还是可访问的；任何被确定不可访问的对象将会被释放。在许多[[编程语言|编程语言]]中（例如：[[Java|Java]]，[[C_Sharp|C#]]，[[D语言|D语言]]，[[Dylan_(编程语言)|Dylan]]）都使用了自动垃圾回收机制。

相反的，在动态内存分配机制中，当需要明确释放的内存变得不可访问时，此内存可以不再明确释放。在使用人工[[内存管理|内存管理]]中，系统中的不可访问内存会导致[[内存泄漏|内存泄漏]]。

一些垃圾收集器使用[[弱引用|弱引用]]。如果一个对象能够通过弱引用或者包含弱引用的链接，那么这个对象可以被称为'''弱访问'''。垃圾收集器能够把弱访问的对象图视为不可访问的，并且释放它。（反过来说，防止对象被当作垃圾收集的[[引用型|引用]]被称为''强引用''；通过只含有强引用的链接来访问的弱可访问对象是不可访问的。）一些垃圾回收的[[面向对象程序设计|面向对象]]语言，例如[[Java|Java]]和[[Python|Python]]，拥有弱引用的特性。{{le|Java包|Java package}}<code>[[java.lang.ref|java.lang.ref]]</code>提供了软引用，弱引用和虚引用，产生了其他对象访问状态'''可软访问'''和'''可虚访问'''。

不可访问内存往往和{{le|软件老化|Software aging}}有关。

== 参见 ==
* [[内存泄漏|内存泄漏]]

== 外部链接 ==
[https://web.archive.org/web/20130424025230/https://weblogs.java.net/blog/enicholas/archive/2006/05/understanding_w.html A useful discussion can be found at Ethan Nicholas's Blog]

{{内存管理}}

[[Category:記憶體管理|Category:記憶體管理]]