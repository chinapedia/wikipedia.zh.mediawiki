{{NoteTA
|G1=IT
|T1=zh-hans:通配符;zh-hk:萬用字元;zh-tw:萬用字元;
|1=zh-hans:通配符;zh-hk:萬用字元;zh-tw:萬用字元;
}}
'''通配符'''（{{lang-en|wildcard character}}）有以下意思：

== 电信 ==
在[[电信|电信]]中，通配符可用于代替不确定字符。

* 在高频自动链路建立协议中，通配符“?”匹配36个字符中的任一个，这36个字符由26个[[英文字母|英文字母]]和10个[[数字|数字]]组成。
* 通配符在表示一个字符或者一个字符串时必须先定义。

== 计算机 ==
在[[计算机|计算机]]（[[软件|软件]]）技术中，通配符可用于代替单个或多个字符。<ref>{{Cite news|url=http://www.computerhope.com/jargon/w/wildcard.htm|title=What is wildcard?|last=|first=|date=|work=|access-date=2016-11-21|via=|deadurl=no|archiveurl=https://web.archive.org/web/20161121171416/http://www.computerhope.com/jargon/w/wildcard.htm|archivedate=2016-11-21|df=}}</ref>
通常地，星号“*”匹配0个或以上的字符，问号“?”匹配1个字符。

=== 文件和目录 ===
在[[CP/M|CP/M]]、[[DOS|DOS]]、[[Microsoft_Windows|Microsoft Windows]]和[[类Unix|类Unix]][[操作系统|操作系统]]中描述文件名(或路径)时，[[星号|星号]]（{{code|*}}）匹配零个或多个任意字符、[[问号|问号]]（{{code|?}}）匹配零个或不多于问号个数的任意字符。如：{{code|123???}} 将匹配 {{code|1231}} 或 {{code|12313}}，但不会匹配 {{code|123991991}}。

在[[Unix_shell|Unix shell]]和[[Windows_PowerShell|Windows PowerShell]]中，方括号（{{code|[}}和{{code|]}}）括起来的字符范围匹配在此范围内的任意字符，例如：{{code|[A-Za-z]}} 匹配任意的大小写字母。Unix shells 可以在用括号括起来的指定字符前加一个"!"来表示否定。匹配到多个文件或路径的通配符模式称为[[glob_(programming)|glob]]扩展。

=== 数据库 ===
在[[SQL|SQL]]中，通配符可用于"LIKE"表达式中，百分号(%)匹配零个或多个字符，下划线(_)匹配单个字符。[[Transact-SQL|Transact-SQL]]中还支持使用方括号("["和"]")来匹配列表集和字符范围，在前面加一个 ^ 表示否定，将匹配所有未在括号中指定的字符。在[[Microsoft_Access|Microsoft Access]]中，通配符可用于"LIKE"表达式中，星号(*)匹配零个或多个字符，问号(?)匹配单个字符。在 SAP 中加号(+)匹配一个字符。

=== 正则表达式 ===
在[[正则表达式|正则表达式]]中，英文句号(.)匹配单个字符，结合一个星号(.*)匹配任意多个字符。

=== 效率 ===
在针对较长字符串匹配或对大量的字符串进行匹配时应该注意，后匹配(ABC*)比前匹配(*ABC)有着十分明显的效率优势。因为后匹配(ABC*)可以立即排除那些不是以"A"开头的记录，接着排除第二个字符不是"B"的；而前匹配(*ABC)需要尝试匹配每一个字符，至少直到找到了"ABC"。在一些需要高性能的环境应该尽量避免使用前匹配，或者通过其他条件筛选减少了数据量后再使用前匹配搜索。

== 相关 ==
* [[克莱尼星号|克莱尼星号]]
* [[模式匹配|模式匹配]]
* [[正则表达式|正则表达式]]

==参考资料==
{{Reflist}}

==外部链接==
*[http://www.linfo.org/wildcard.html How to Use Wildcards]

[[Category:文件格式|Category:文件格式]]
[[Category:模式匹配|Category:模式匹配]]