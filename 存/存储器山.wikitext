{{original research|time=2016-04-10T16:27:04+00:00}}
{{Link style|time=2015-12-11T10:00:17+00:00}}
'''存储器山'''是一种综合研究[[記憶體階層|存储器层次结构]]的工具。它反映了存储器层次结构中不同层次的[[:en:Bandwidth_(computing)|带宽]]。也反映了具有不同的[[:en:Locality_of_reference|时间局部性]]与[[:en:Locality_of_reference|空间局部性]]<ref>[[Peter_J._Denning|Peter J. Denning]] ''[http://portal.acm.org/citation.cfm?id=1070856&coll=&dl=ACM&CFID=15151515&CFTOKEN=6184618 The locality principle]'', 2005.关于局部性原则的讨论</ref>的[[程序|程序]]的性能。通过分析存储器山的数据，还可以看出存储器系统的部分[[硬件|硬件]]参数。

T. Stricker于1997年在其论文<ref name="stricker">T. Stricker, T. Gross, [http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.43.2608 Global address space, non-uniform bandwidth: A memory system performance characterization of parallel systems.] {{Wayback|url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.43.2608 |date=20160305194720 }} In Proceedings of the Third IEEE Symposium on High-Performance Computer Architecture. IEEE.</ref>中介绍了存储器山的思想，利用它对存储器系统进行全面描述，并在后来的工作中提出了术语“存储器山”<ref name="csapp">（美）[[:en:Randal_Bryant|Randal Bryant]], David O'Hallaron，著.[http://csapp.cs.cmu.edu/ 《深入理解计算机系统》] {{Wayback|url=http://csapp.cs.cmu.edu/ |date=20070806075942 }}[M].龚奕利，雷迎春，译。北京：中国电力出版社，2004。ISBN 7-5083-2175-8</ref>。[[卡耐基梅隆大学|卡耐基梅隆大学]]教授[[:en:Randal_Bryant|Randal Bryant]]的著作[http://csapp.cs.cmu.edu/ 《深入理解计算机系统》]{{Wayback|url=http://csapp.cs.cmu.edu/ |date=20070806075942 }}（Computer Systems: A programmer's Perspective, [[:en:Randal_Bryant|Randal Bryant]], David O'Hallaron）一书第6.6.1节亦提出了存储器山的概念，并进行了详细分析<ref name="csapp"/>。

理论上，每台[[计算机|计算机]]都有一个唯一的存储器山<ref name="csapp"/>。通过运行一段测试[[程序|程序]]，可以得到它的存储器山。了解存储器山，对[[:en:Optimization_(computer_science)|应用程序的优化]]能起到指导作用。下图展示了一个基于[[Intel|Intel]] [[Core_2|Core 2]] Duo[[CPU|处理器]]的存储器山。

[[File:MemoryMountain17.png|300px]] [[Core_2|Core 2]] Duo[[CPU|处理器]]的存储器山]]

== 存储器山测试原理 ==
为了说明存储器山的测试[[程序|程序]]的原理，首先简要介绍[[:en:Locality_of_reference|局部性]]和[[:en:Memory_hierarchy|存储器层次结构]]这两个重要概念，然后介绍存储器山的定义和测试[[程序|程序]]的原理模型。

=== [[:en:Locality_of_reference|局部性]] ===
通常，一个[[:en:Optimization_(computer_science)|编写良好的（优化的）]][[程序|程序]]具有良好的[[:en:Locality_of_reference|局部性]]<ref name="csapp"/><ref name="cod">（美）David A.Patterson, John L.Hennessy，著。计算机组成和设计-硬件/软件接口[M].郑纬民 等，译。北京：清华大学出版社，2003。ISBN 7-302-06901-8</ref>，主要表现在两个方面。

'''[[:en:Locality_of_reference#Locality_of_reference|时间局部性（Temporal locality）]]：'''如果被访问过的[[:en:Memory_address|存储器地址]]在较短时间内被再次访问，则程序具有良好的时间局部性。在一定的时间内，重复访问同一个地址的次数越多，时间局部性越好。换句话说，对同一个地址的两次访问间隔时间越短，时间局部性越好。

'''[[:en:Locality_of_reference#Locality_of_reference|空间局部性（Spatial locality）]]：'''如果程序访问某个存储器地址后，又在较短时间内访问临近的存储器地址，则程序具有良好的空间局部性。两次访问的地址越接近，空间局部性越好。

局部性在程序中普遍存在。好的程序通常具有好的局部性，是一个普适的原理。<ref name="csapp"/>

=== 存储器层次结构 ===
不同类型的[[:en:Computer_storage|存储设备]]，其[[:en:Bandwidth_(computing)|访问速率]]相差很大。其基本规律为：访问速率越高的设备，单位容量的成本越高，于是越不容易做得很大。[[:en:Computer_system|计算机系统]]的设计者需要在控制成本的同时，尽量提高存储器系统的速率。

受益于局部性的概念，计算机的存储器系统通常设计成一个[[:en:Memory_hierarchy|层次结构]]，CPU内部的[[:en:Processor_register|寄存器]]为该层次结构的最高层----它的容量最小，但速率最高。往下依次为各级[[:en:CPU_cache|cache]]，[[:en:Main_memory#Primary_storage|主存]]，[[:en:Hard_disk|磁盘]]等等。该层次结构的运行策略是：尽量让当前被频繁访问的存储区的内容驻留在较高层存储器，作为代价，把不常访问的存储区的内容置换到较低层存储器。同时，尽量让当前被访问的元素附近的元素也驻留在较高层存储器。一个具有良好的局部性的程序，几乎能总是访问高层的存储器，享受到最高的访问速率。

从[[程序员|程序员]]的角度来看，要尽量编写具有良好的局部性的程序，以[[:en:Locality_of_reference#Use_of_spatial_and_temporal_locality:_hierarchical_memory|适应层次结构]]，提高程序运行速率。

=== 存储器山测试程序<ref name="csapp"/> ===
具有不同的时间局部性和空间局部性的程序，对存储器层次结构的利用效率是不同的。局部性较好，则能得到较快的[[:en:Bandwidth_(computing)|访问速率]]。构造一个存储器测试程序，以不同的时间局部性和空间局部性对存储器进行访问，就能得到存储器系统在不同的局部性下的性能（即[[:en:Bandwidth_(computing)|访问速率]]）。以控制时间局部性的变量为x轴，控制空间局部性的变量为y轴，存储器访问速率为z轴，就能得到一个三维图形，它看起来像一座有着山峰，山脊和山坡的小山，即[[:File:MemoryMountain17.png|'''存储器山''']]。

通过存储器山，可以直观地看到具有不同的时间局部性和空间局部性的程序对存储器的访问速率的巨大差别。可作为程序员[[:en:Optimization_(computer_science)|优化程序]]的参考。

更加有趣的是，通过分析存储器山的数据，还可以看出存储器系统的部分硬件参数。包括[[:en:CPU_cache|L1数据cache]]（简称为L1-Dcache）、[[:en:CPU_cache|L2-cache]]和[[:en:Main_memory#Primary_storage|主存]]（物理介质通常为[[:en:SDRAM|SDRAM]]）各自的最高平均速率，L1-Dcache和L2-cache的容量，甚至L1-Dcache的[[:en:CPU_cache#Structure|行尺寸]]。

不过，存储器山并非万能工具。从中无法看出[[:en:CPU_cache#Associativity|cache的相联度]]、[[:en:Memory_latency|访问延迟]]等参数（这些参数可以用其他测试程序间接得出，但无法从存储器山测试程序中得出）。由于连续密集访问，[[:en:Prefetching|cache预取（Prefetching）]]也会被阻塞从而无法体现其效果。

存储器山测试程序的核心就是这样一个[[:en:For_loop|循环]]：

 '''Kernel_loop(elems, stride):'''
 for (i = 0; i < elems; i += stride)
     result = data[i];

其中，data是一个[[:en:Integer_(computer_science)|整形]][[:en:Array|数组]]（整形元素单位为4[[:en:Byte|字节]]），result是一个[http://wiki.answers.com/Q/What_is_register_variable_in_c_language 寄存器变量] {{Wayback|url=http://wiki.answers.com/Q/What_is_register_variable_in_c_language |date=20120306182415 }}。Kernel_loop所做的事情，就是将data数组的内容依次读取到CPU的[[:en:Processor_register|寄存器]]中。参数elems表示data数组的尺寸，即[[:en:Working_set|工作集（working set）]]尺寸。参数stride表示访问时的步长，即相邻两次访问的元素的地址间隔。
用Get_readrate()[[:en:Subroutine|函数]]来获取特定参数下Kernel_loop的读速率：

 '''Get_readrate(elems, stride):'''
 '''Kernel_loop'''(elems, stride);           // 为cache预热，避免“[[:en:CPU_cache#Cache_misses|冷缺失]]”
 time_start = GetTimer();               // 记录测试开始时间
 '''Kernel_loop'''(elems, stride);          // 执行真正的测试
 time_end = GetTimer();                // 记录测试结束时间
 time_cost = time_end – time_start;   // 得到时间开销
 readrate = (elems*sizeof(int)/stride) / time_cost; // 换算为读速率

main()[[:en:Subroutine|函数]]改变elems和stride参数的大小，记录Kernel_loop在各个参数下的读速率：

 '''main():'''
 for (elems = MINELEMS; elems <= MAXELEMS; elems <<= 1)
     for (stride = 1; stride <= MAXSTRIDE; stride++)
         '''Get_ readrate (elems, stride);'''

以elems为x轴，stride为y轴，readrate为z轴，即可得到一座存储器山。这裡，elems控制时间局部性。因为当stride固定时，elems越小，对同一个地址的两次访问（[[:en:CPU_cache#Cache_misses|cache预热]]时一次，真正测试时一次）间隔的时间越短。而stride控制空间局部性。因为stride越小，相邻两次访问的地址间隔越小。readrate即是不同时空局部性下对存储器的读速率。MINELEMS、MAXELEMS、MAXSTRIDE等[[:en:Constant_(computer_science)#Constants|常量]]的具体数值根据测试平台的参数来选择。

== 另请参考 ==
*《深入理解计算机系统》官方网站给出的[http://csapp.cs.cmu.edu/public/mountain.tar 存储器山测试程序源代码] {{Wayback|url=http://csapp.cs.cmu.edu/public/mountain.tar |date=20190906145738 }}。
*《深入理解计算机系统》官方网站推荐的生成存储器山的程序[http://www.cs.inf.ethz.ch/cops/ECT/ ECT memperf] {{Wayback|url=http://www.cs.inf.ethz.ch/cops/ECT/ |date=20200630024944 }}，该程序由存储器山概念的最早提出者Tom Stricker<ref name="stricker"/>编写。
*[https://web.archive.org/web/20100607043204/http://www.cs.cmu.edu/%7Ebryant/vitae.ps 卡耐基梅隆大学给出的R.E.Bryant的简历]，著作列表中第一位便是《深入理解计算机系统》。
*[http://csapp.cs.cmu.edu/public/toc.pdf 卡耐基梅隆大学给出的《深入理解计算机系统》电子版目录] {{Wayback|url=http://csapp.cs.cmu.edu/public/toc.pdf |date=20170829010955 }}，目录封面为存储器山，第6.6.1节（The Memory Mountain）为对存储器山的分析。
*[http://csapp.cs.cmu.edu/public/ Introducing Computer Systems from a Programmer's Perspective] {{Wayback|url=http://csapp.cs.cmu.edu/public/ |date=20190911060811 }}，《深入理解计算机系统》的作者对该书的介绍。

*[http://lwn.net/Articles/252125/ Memory part 2: CPU caches] {{Wayback|url=http://lwn.net/Articles/252125/ |date=20210127001617 }}来自lwn.net的文章，作者Ulrich Drepper，深入分析了cache的性能，其中包括对cache带宽的详细分析。
*[http://www.sun.com/blueprints/1102/817-0742.pdf Memory Hierarchy in Cache-Based Systems] {{Wayback|url=http://www.sun.com/blueprints/1102/817-0742.pdf |date=20090915041601 }}，作者Ruud van der Pas, 2002, Sun Microsystems，是关于CPU高速缓存系统很好的入门介绍。
*[http://cpu.rightmark.org/products/rmma.shtml RightMark Memory Analyzer] {{Wayback|url=http://cpu.rightmark.org/products/rmma.shtml |date=20210219101900 }}，功能丰富的存储器测试分析软件。
*[http://www.behardware.com/articles/623-1/intel-core-2-duo-test.html Intel Core 2 Duo Test] {{Wayback|url=http://www.behardware.com/articles/623-1/intel-core-2-duo-test.html |date=20141224002134 }}，对Core2处理器的评测。
*文献1<ref name="csapp"/>的第6.2节，以及文献2<ref name="cod"/>的第7.1节，有关于局部性的更多讨论。
*文献1<ref name="csapp"/>的第6章，以及文献2<ref name="cod"/>的第7章，有关于存储器层次结构的更多讨论。
*文献1<ref name="csapp"/>的6.6.1节，有关于存储器山测试程序的更多讨论。

== 资料来源 ==
<references />

[[Category:電腦記憶體|Category:電腦記憶體]]