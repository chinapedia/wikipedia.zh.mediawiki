{{noteTA
|G1=IT
}}
{{Expand language|1=en|time=2021-09-30T08:28:10+00:00}}
在[[计算机科学|计算机科学]]中，'''饥饿'''（starvation）是指在[[并发计算|并发计算]]中，[[进程|进程]]一直无法获得运行所需的必要资源而发生的问题<ref>{{cite book |title=Modern Operating Systems |url=https://archive.org/details/modernoperatings00tane |last=Tanenbaum |first=Andrew |authorlink=安德鲁·斯图尔特·塔能鲍姆 |year=2001 |publisher=Prentice Hall |isbn=0-13-092641-8 |pages=[https://archive.org/details/modernoperatings00tane/page/184 184–185] }}</ref>。[[排程|排程]]、[[互斥锁|互斥锁]]算法、{{le|资源泄露|Resource leak}}等都可能导致饥饿，或者在被[[拒绝服务攻击|DoS攻击]]（如[[fork炸弹|fork炸弹]]）时主动产生饥饿。

在并发计算中，如果饥饿不可能发生，这个算法就被称为是“starvation-free”（无饥饿）、“lockout-freed”（无闭锁）的<ref>{{cite book |title=The Art of Multiprocessor Programming |first1=Maurice |last1=Herlihy |first2=Nir |last2=Shavit |publisher=Elsevier |year=2012 |page=24 |isbn=9780123977953}}</ref>，或者称其拥有「有限旁路」（finite bypass）<ref name="raynal">{{cite book |title=Concurrent Programming: Algorithms, Principles, and Foundations |first=Michel |last=Raynal |authorlink=米歇尔·雷纳尔 |publisher=Springer Science & Business Media |year=2012 |isbn=3642320279 |page=10–11}}</ref>。这一属性是{{le|存活 (计算机科学)|Liveness|存活}}的例子，也是互斥锁算法的两个条件之一（另一个是[[正确性_(计算机科学)|正确性]]）。

==相關條目==
*[[哲学家就餐问题|哲学家就餐问题]]

==参考资料==
{{reflist}}

[[Category:并发性|Category:并发性]]
[[Category:排程|Category:排程]]