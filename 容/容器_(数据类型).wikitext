{{noteTA
|G1=IT
}}
在[[计算机科学|计算机科学]]中，'''容器'''是指一種类、[[数据结构|数据结构]]、<ref>Paul E. Black (ed.), entry for ''data structure'' in ''[[Dictionary_of_Algorithms_and_Data_Structures|Dictionary of Algorithms and Data Structures]]. US [[National_Institute_of_Standards_and_Technology|National Institute of Standards and Technology]].15 December 2004. Accessed on Oct 04, 2011.</ref><ref>Entry ''data structure'' in the [[Encyclopædia_Britannica|Encyclopædia Britannica]] (2009) [http://www.britannica.com/EBchecked/topic/152190/data-structure Online entry] {{Wayback|url=http://www.britannica.com/EBchecked/topic/152190/data-structure |date=20150502221712 }} Accessed on Oct 04, 2011.</ref>或者[[抽象数据类型|抽象数据类型]]，其实例为其他[[类_(计算机科学)|类]]的[[对象_(计算机科学)|对象]]。换言之，它们以一种遵循特定访问规则的方法来存储对象。容器的大小取决于其包含的对象（或元素）的数目。潜在的不同容器类型的实现可能在空间和时间复杂度上有所差别，这使得在给定应用场景中选择合适的某种实现具有灵活性。

==概览==
容器可以三种方式看待：
* ''访问''：即访问容器中对象的方式。在[[数组|数组]]中，访问凭借数组索引完成。在[[堆栈|堆栈]]中，访问遵循[[先進先出|先入后出]]（或后入先出）的顺序<ref name = "investopedia LIFO">{{Cite web |url=http://www.investopedia.com/terms/l/lifo.asp#axzz1ZoGPLx59 |title=LIFO(investopedia.com) |accessdate=2016-08-19 |archive-date=2016-08-24 |archive-url=https://web.archive.org/web/20160824230924/http://www.investopedia.com/terms/l/lifo.asp#axzz1ZoGPLx59 |dead-url=yes }}</ref>。在[[队列|队列]]中，访问遵循[[先進先出|先入先出]]（或后入后出）的顺序<ref name = "Investopedia FIFO">{{Cite web |url=http://www.investopedia.com/terms/f/fifo.asp#axzz1ZoGPLx59 |title=FIFO(investopedia.com) |accessdate=2016-08-19 |archive-date=2016-08-09 |archive-url=https://web.archive.org/web/20160809025033/http://www.investopedia.com/terms/f/fifo.asp#axzz1ZoGPLx59 |dead-url=yes }}</ref><ref name = "businessdictionary">{{Cite web |url=http://www.businessdictionary.com/definition/first-in-first-out-FIFO.html |title=FIFO(businessdictionary.com) |accessdate=2016-08-19 |archive-date=2016-08-27 |archive-url=https://web.archive.org/web/20160827173603/http://www.businessdictionary.com/definition/first-in-first-out-FIFO.html |dead-url=yes }}</ref>。
* ''存储''：即存储容器中对象的方式。
* ''遍历''：即遍历容器中对象的方式。
容器类应当实现如下的[[方法_(电脑科学)|方法]]：
* 创建一个新的空容器（即[[构造函数|构造函数]]）；
* 向容器中插入对象；
* 从容器中删除对象；
* 删除容器中的所有对象（即清空）；
* 访问容器中的对象；
* 获取容器中对象的数目（即尺寸）。

容器有时结合[[迭代器|迭代器]]实现。

== 分类 ==
=== 按存储类型 ===
* 基于值的容器：存储对象的副本。
* 基于[[參照|引用]] （{{lang-en|reference}}）的容器：存储[[指标_(电脑科学)|指针]]或对象的引用。

=== 单值或关联容器 ===
* '''单值容器'''：每个对象在容器中被独立存储，并且其被直接或凭借[[迭代器|迭代器]]访问。
* '''关联容器'''：[[关联数组|关联数组]]、映射或者字典是由[[键值对|键值对]]组成的容器，因此每一个键在给定容器中最多出现一次。如果一个值（对象）被存储在给定容器中，那么键可以用于寻找它。

==图形容器==
[[部件工具箱|部件工具箱]]使用特殊[[控件|控件]]（也称作''容器''）去将其他控件分组（[[视窗|窗口]]、[[面板|面板]]等）。除它们的图形特性之外，它们有和'''容器类'''一致的表现：它们存有它们子[[控件|控件]]的列表，并且允许对子控件进行增加、删除或获取等操作。

==不同实现==
* .NET: [http://msdn.microsoft.com/en-us/library/system.collections.aspx System.Collections (MSDN)]{{Wayback|url=http://msdn.microsoft.com/en-us/library/system.collections.aspx |date=20160804062243 }}
* ActionScript3: [https://web.archive.org/web/20150905165246/http://sibirjak.com/osflash/projects/as3commons-collections/ AS3Commons Collections Framework]
* C++: [[C++标准库|C++标准库]] (SC++L) or the obsolete [[标准模板库|标准模板库]] (STL)
** 容器在[[标准模板库|标准模板库]]中被分为[[关联容器|关联容器]]和标准的[[序列容器|序列容器]]。除了这两种类型之外，也存在[[标准模板库#容器|容器适配器]]。由容器实现的数据结构包含[[数组|数组]]、[[列表|列表]]、[[映射|映射]]、[[队列|队列]]、[[集合_(计算机科学)|集合]]、[[堆栈|堆栈]]、[[表格|表]]、[[树_(数据结构)|树]]以及[[Vector_(STL)|向量]]。
* Java: [[Java集合框架|Java集合框架]](JCF)
* [[Objective-C|Objective-C]]: [[Foundation_Kit|Foundation Kit]]的部分。
* [[PL/SQL|PL/SQL]]: 集合<ref>{{Cite web
| title = PL/SQL Collections and Records
| accessdate = 2013-04-20
| url = http://docs.oracle.com/cd/E11882_01/appdev.112/e25519/composites.htm#CIHIEBJC
| archive-date = 2013-05-09
| archive-url = https://web.archive.org/web/20130509034453/http://docs.oracle.com/cd/E11882_01/appdev.112/e25519/composites.htm#CIHIEBJC
| dead-url = no
}}</ref>
* [[Python|Python]]: 内置容器 ''list''、''dict''、''tuple''和''set''，可使用[https://docs.python.org/3/library/collections.html collections]{{Wayback|url=https://docs.python.org/3/library/collections.html |date=20160822200827 }}模块进一步拓展。
* [[Scala|Scala]]: 在<code>scala.collection.mutable</code> and <code>scala.collection.immutable</code>包中的可变及不可变容器。

==参见==
*[[数据结构列表|数据结构列表]]
*[[标准模板库#容器|标准模板库#容器]]
*[[集合_(计算机科学)|集合]]
*[[堆栈|堆栈]]
*[[ConcurrentMap_(Java)|Java ConcurrentMap]]

==参考资料==
{{Reflist}}

==外部链接==
*[http://help.sap.com/saphelp_40b/helpdata/en/c5/e4b14a453d11d189430000e829fbbd/content.htm Container Data Structure Declaration and Initialization]{{Wayback|url=http://help.sap.com/saphelp_40b/helpdata/en/c5/e4b14a453d11d189430000e829fbbd/content.htm |date=20121215211533 }}
*[http://www.acornarcade.com/articles/Building_the_Dream_1_-_Container_data_structures/index1162.html Container data structures]{{Wayback|url=http://www.acornarcade.com/articles/Building_the_Dream_1_-_Container_data_structures/index1162.html |date=20160827055157 }}
*[http://www.grantjenks.com/docs/sortedcontainers/ Python SortedContainers module]{{Wayback|url=http://www.grantjenks.com/docs/sortedcontainers/ |date=20160819181306 }} A fast implementation of sorted list, sorted dict, and sorted set data types in Python.
{{数据类型}}

[[面向对象编程|面向对象编程]]

{{DEFAULTSORT:容器 (数据结构)}}
[[Category:数据结构|Category:数据结构]]
[[Category:抽象数据类型|Category:抽象数据类型]]