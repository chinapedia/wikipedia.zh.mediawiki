'''栈缓冲区溢出'''（stack buffer overflow或stack buffer overrun）是计算机程序把数据写入[[调用栈|调用栈]]上的内存时超出了数据结构的边界。<ref name="cert1">{{cite web |last=Fithen |first=William L. |last2=Seacord |first2=Robert |publisher=[[US_CERT|US CERT]] |title=VT-MB. Violation of Memory Bounds |url=https://www.securecoding.cert.org/confluence/display/sci/VT-MB.+Violation+of+Memory+Bounds |date=2007-03-27 |access-date=2017-02-19 |archive-date=2012-02-05 |archive-url=https://web.archive.org/web/20120205195349/https://www.securecoding.cert.org/confluence/display/sci/VT-MB.+Violation+of+Memory+Bounds |dead-url=no }}</ref><ref name="dowd">{{cite book |last=Dowd |first=Mark |last2=McDonald |first2=John |last3=Schuh |first3=Justin |title=The Art Of Software Security Assessment |publisher=[[Addison_Wesley|Addison Wesley]] |date=November 2006 |pages=169–196 |isbn=0-321-44442-6 }}</ref>栈缓冲区溢出是[[缓冲区溢出|缓冲区溢出]]的一种。<ref name="cert1" /> 这会损坏相邻数据的值，引发程序崩溃或者修改了函数返回地址从而导致执行恶意的程序。这种攻击方式称为'''stack smashing'''。可被用于注入可执行代码、接管进程的执行。是最为古老的黑客攻击行为之一。<ref name="aleph1">{{cite journal |last=Levy |first=Elias |authorlink=Elias Levy |title=Smashing The Stack for Fun and Profit |journal=[[Phrack|Phrack]] |volume=7 |issue=49 |pages=14 |date=1996-11-08 |url=http://www.phrack.org/issues/49/14.html#article |access-date=2017-02-19 |archive-date=2021-03-04 |archive-url=https://web.archive.org/web/20210304005821/http://phrack.org/issues/49/14.html#article |dead-url=no }}</ref><ref name="microsoft1">{{Cite journal| doi = 10.1109/MSP.2004.36| title = Beyond Stack Smashing: Recent Advances in Exploiting Buffer Overruns| journal = IEEE Security and Privacy Magazine| volume = 2| issue = 4| pages = 20–27| date = July–August 2004| last1 = Pincus| first1 = J.| last2 = Baker| first2 = B.| url = http://www.cs.berkeley.edu/~daw/teaching/cs261-f07/reading/beyondsmashing.pdf| access-date = 2017-02-19| archive-date = 2016-03-04| archive-url = https://web.archive.org/web/20160304204144/http://www.cs.berkeley.edu/~daw/teaching/cs261-f07/reading/beyondsmashing.pdf| dead-url = no}}</ref><ref name="forest">{{cite web |author=Burebista |title=Stack Overflows |url=http://www.securityforest.com/downloads/educationtree/stack_overflows.pdf |format=PDF |deadurl=yes |archiveurl=https://web.archive.org/web/20070928100343/http://www.securityforest.com/downloads/educationtree/stack_overflows.pdf |archivedate=2007-09-28 |access-date=2017-02-19 }} (dead link)</ref>

==例子==
下例可用于覆盖函数返回地址。<ref name="aleph1" /><ref name="openbsd1">{{cite conference |first=Louis |last=Bertrand |url=http://www.openbsd.org/slides/musess_2002/img16.htm |title=OpenBSD: Fix the Bugs, Secure the System |booktitle=MUSESS '02: McMaster University Software Engineering Symposium |year=2002 |access-date=2017-02-19 |archive-url=https://web.archive.org/web/20070930023522/http://www.openbsd.org/slides/musess_2002/img16.htm |archive-date=2007-09-30 |dead-url=yes }}</ref> 通过函数 <code>[[strcpy|strcpy()]]</code> :

<syntaxhighlight lang=c>
#include <string.h>

void foo (char *bar)
{
   char  c[12];

   strcpy(c, bar);  // no bounds checking
}

int main (int argc, char **argv)
{
   foo(argv[1]);

   return 0;
}
</syntaxhighlight>

当命令行参数少于12个字符时（例子B时）该程序是安全的。  

<code>foo()</code>函数的不同输入下的调用栈:

{|
|valign="top"| [[Image:Stack_Overflow_2.png|none]]
|valign="top"| [[Image:Stack_Overflow_3.png|none]]
|valign="top"| [[Image:Stack_Overflow_4.png|none]]
|}

例子C中, 命令行参数多于11个字符，导致<code>foo()</code>覆盖了本地调用栈的数据、存储的栈指针（EBP）以及最重要的返回地址。 

攻击也可以修改内部变量值：
<syntaxhighlight lang=c>
#include <string.h>
#include <stdio.h>

void foo (char *bar)
{
   float My_Float = 10.5; // Addr = 0x0023FF4C
   char  c[28];           // Addr = 0x0023FF30

   // Will print 10.500000
   printf("My Float value = %f\n", My_Float);

    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Memory map:
       @ : c allocated memory
       # : My_Float allocated memory

           *c                      *My_Float
       0x0023FF30                  0x0023FF4C
           |                           |
           @@@@@@@@@@@@@@@@@@@@@@@@@@@@#####
      foo("my string is too long !!!!! XXXXX");

   memcpy will put 0x1010C042 (little endian) in My_Float value.
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   memcpy(c, bar, strlen(bar));  // no bounds checking...

   // Will print 96.031372
   printf("My Float value = %f\n", My_Float);
}

int main (int argc, char **argv)
{
   foo("my string is too long !!!!! \x10\x10\xc0\x42");
   return 0;
}
</syntaxhighlight>

==平台相关==
<!--
A number of platforms have subtle differences in their implementation of the call stack that can affect the way a stack buffer overflow exploit will work. Some machine architectures store the top level return address of the call stack in a register. This means that any overwritten return address will not be used until a later unwinding of the call stack. Another example of a machine specific detail that can affect the choice of exploitation techniques is the fact that most [[RISC|RISC]] style machine architectures will not allow unaligned access to memory.<ref name="prl">{{cite paper |author=pr1 |title=Exploiting SPARC Buffer Overflow vulnerabilities |url=http://www.utdallas.edu/~edsha/UGsecurity/sparcoverflow.htm |journal= |access-date=2017-02-19 |archive-url=https://web.archive.org/web/20120205180020/http://www.utdallas.edu/~edsha/UGsecurity/sparcoverflow.htm |archive-date=2012-02-05 |dead-url=yes }}</ref> Combined with a fixed length for machine opcodes this machine limitation can make the jump to ESP technique almost impossible to implement (with the one exception being when the program actually contains the unlikely code to explicitly jump to the stack register).<ref name="curious1">{{cite journal |author=Curious |title=Reverse engineering - PowerPC Cracking on Mac OS X with GDB |journal=[[Phrack|Phrack]] |volume=11 |issue=63 |pages=16 |date=2005-01-08 |url=http://www.phrack.org/issues.html?issue=63&id=16#article }}</ref><ref name="feeb">{{cite paper |last=Sovarel |first=Ana Nora |last2=Evans |first2=David |last3=Paul |first3=Nathanael |title=Where’s the FEEB? The Effectiveness of Instruction Set Randomization |url=http://www.cs.virginia.edu/feeb/paper/ }}</ref>

===Stacks that grow up===
Within the topic of stack buffer overflows, an often discussed but rarely seen architecture is one in which the stack grows in the opposite direction. This change in architecture is frequently suggested as a solution to the stack buffer overflow problem because any overflow of a stack buffer that occurs within the same stack frame can not overwrite the return pointer. Further investigation of this claimed protection finds it to be a naive solution at best. Any overflow that occurs in a buffer from a previous stack frame will still overwrite a return pointer and allow for malicious exploitation of the bug.<ref name="zhodiac">{{cite journal |author=Zhodiac |title=HP-UX (PA-RISC 1.1) Overflows |journal=[[Phrack|Phrack]] |volume=11 |issue=58 |pages=11 |date=2001-12-28 |url=http://www.phrack.org/issues.html?issue=58&id=11 }}</ref> For instance, in the example above, the return pointer for <code>foo</code> will not be overwritten because the overflow actually occurs within the stack frame for <code>strcpy</code>. However, because the buffer that overflows during the call to <code>strcpy</code> resides in a previous stack frame, the return pointer for <code>strcpy</code> will have a numerically higher memory address than the buffer. This means that instead of the return pointer for <code>foo</code> being overwritten, the return pointer for <code>strcpy</code> will be overwritten. At most this means that growing the stack in the opposite direction will change some details of how stack buffer overflows are exploitable, but it will not reduce significantly the number of exploitable bugs.
-->
==保护方式==
常用三种方式来对抗栈缓冲区溢出攻击。 
===检查栈缓冲区溢出的发生=== 
栈的警惕标志（stack canary），得名于{{tsl|en|Animal sentinel#Historical examples|煤矿里的金丝雀}}，用于探测该灾难的发生。具体办法是在栈的返回地址的存储位置之前放置一个整形值，该值在装入程序时随机确定。栈缓冲区攻击时从低地址向高地址覆盖栈空间，因此会在覆盖返回地址之前就覆盖了警惕标志。返回返回前会检查该警惕标志是否被篡改。<ref name="dowd" />

===栈数据不可执行=== 
采取了“写异或执行”策略（{{tsl|en|W^X}}, "Write XOR Execute"），即内存要么可写，要么可执行，但二者不能兼得。这是最常用的方法，大部分桌面处理器都硬件支持不可执行标志（no-execute flag）。
<!--
While this method definitely makes the canonical approach to stack buffer overflow exploitation fail, it is not without its problems. First, it is common to find ways to store shellcode in unprotected memory regions like the heap, and so very little need change in the way of exploitation.<ref name="syngress1">{{cite book |last=Foster |first=James C. |last2=Osipov |first2=Vitaly |last3=Bhalla |first3=Nish |last4=Heinen |first4=Niels |title=Buffer Overflow Attacks: Detect, Exploit, Prevent |publisher=Syngress Publishing, Inc. |year=2005 |location=United States of America |url=http://apossum.alfaspace.net/eng/Syngress.Buffer.Overflow.Attacks.Dec.2004.ISBN1932266674.pdf |format=PDF |isbn=1-932266-67-4 }}</ref>

Even if this were not so, there are other ways. The most damning is the so-called [[return-to-libc_attack|return to libc]] method for shellcode creation. In this attack the malicious payload will load the stack not with shellcode, but with a proper call stack so that execution is vectored to a chain of standard library calls, usually with the effect of disabling memory execute protections and allowing shellcode to run as normal.<ref name="nergal">{{cite journal |author=Nergal |title=The advanced return-into-lib(c) exploits: PaX case study |journal=[[Phrack|Phrack]] |volume=11 |issue=58 |pages=4 |date=2001-12-28 |url=http://www.phrack.org/issues.html?issue=58&id=4#article }}</ref> This works because the execution never actually vectors to the stack itself.

A variant of return-to-libc is [[return-oriented_programming|return-oriented programming]], which sets up a series of return addresses, each of which executes a small sequence of cherry-picked machine instructions within the existing program code or system libraries, sequence which ends with a return. These so-called ''gadgets'' each accomplish some simple register manipulation or similar execution before returning, and stringing them together achieves the attacker's ends. It is even possible to use "returnless" return-oriented programming by exploiting instructions or groups of instructions that behave much like a return instruction.<ref>{{Cite book | doi = 10.1145/1866307.1866370| chapter = Return-Oriented Programming without Returns| title = Proceedings of the 17th ACM conference on Computer and communications security - CCS '10| pages = 559–572| date=October 2010 | last1 = Checkoway | first1 = S. | last2 = Davi | first2 = L. | last3 = Dmitrienko | first3 = A. | last4 = Sadeghi | first4 = A. R. | last5 = Shacham | first5 = H. | last6 = Winandy | first6 = M. | isbn = 978-1-4503-0245-6}}</ref>
-->
===随机化内存空间布局===
<!--
Instead of separating the code from the data another mitigation technique is to introduce randomization to the memory space of the executing program. Since the attacker needs to determine where executable code that can be used resides, either an executable payload is provided (with an executable stack) or one is constructed using code reuse such as in ret2libc or ROP (Return Oriented Programming) randomizing the memory layout will as a concept prevent the attacker from knowing where any code is. However implementations typically will not randomize everything, usually the executable itself is loaded at a fixed address and hence even when [[ASLR|ASLR]] (Address Space Layout Randomization) is combined with a nonexecutable stack the attacker can use this fixed region of memory. Therefore all programs should be compiled with [[position-independent_code#Position-independent_executables|PIE]] (position-independent executables) such that even this region of memory is randomized. The entropy of the randomization is different from implementation to implementation and a low enough entropy can in itself be a problem in terms of brute forcing the memory space that is randomized.
-->
==著名例子==
*[[莫里斯蠕虫|莫里斯蠕虫]]针对[[Unix|Unix]] {{tsl|en|finger protocol|finger}} 服务器.[http://www.ee.ryerson.ca/~elf/hack/iworm.html] {{Wayback|url=http://www.ee.ryerson.ca/~elf/hack/iworm.html |date=20210224162646 }}
*{{tsl|en|Witty worm}} .[https://web.archive.org/web/20070814051604/http://www.icsi.berkeley.edu/~nweaver/login_witty.txt]
* {{tsl|en|SQL Slammer|Slammer worm}}针对[[Microsoft|Microsoft]] [[SQL_Server|SQL Server]].[http://www.wired.com/wired/archive/11.07/slammer.html] {{Wayback|url=http://www.wired.com/wired/archive/11.07/slammer.html |date=20140329000002 }}
*[[衝擊波蠕蟲|衝擊波蠕蟲]] 针对微软的[[Distributed_Component_Object_Model|DCOM]] 服务.
*{{tsl|en|Twilight hack}}针对[[Wii|Wii]] 

==参见==  

==参考文献==
{{Reflist|30em}}

[[Category:程式錯誤|Category:程式錯誤]]