{{Expand language|1=en|time=2020-08-11T08:34:03+00:00}}
{{noteTA
|G1 = IT
|G2=Telcom
|1=zh-cn:握手; zh-tw:交握
|2=zh-cn:添加; zh-tw:加入
}}
{{网络协议}}

'''傳輸層安全性協定'''（{{Lang-en|'''T'''ransport '''L'''ayer '''S'''ecurity}}，縮寫：{{lang|en|'''TLS'''}}）及其前身'''安全套接层'''（{{Lang-en|'''S'''ecure '''S'''ockets '''L'''ayer}}，縮寫：{{lang|en|'''SSL'''}}）是一种[[安全协议|安全协议]]，目的是為[[網際網路|網際網路]]通信提供安全及数据[[完整性|完整性]]保障。[[網景|網景]]公司（{{lang|en|Netscape}}）在1994年推出首版[[網頁瀏覽器|網頁瀏覽器]]－[[網景領航員|網景領航員]]時，推出[[HTTPS|HTTPS]]協定，以SSL進行加密，這是SSL的起源。[[IETF|IETF]]將SSL進行標準化，1999年公布TLS 1.0標準文件（RFC 2246）。隨後又公布TLS 1.1（RFC 4346，2006年）、TLS 1.2（RFC 5246，2008年）和TLS 1.3（RFC 8446，2018年）。在[[瀏覽器|瀏覽器]]、[[電子郵件|電子郵件]]、[[即時通訊|即時通訊]]、[[VoIP|VoIP]]、[[網路傳真|網路傳真]]等應用程式中，廣泛使用這個協定。許多網站，如[[Google|Google]]、[[Facebook|Facebook]]、[[Wikipedia|Wikipedia]]等也以這個協定來建立安全連線，傳送資料。目前已成为[[互联网|互联网]]上保密通信的工业标准。

SSL包含记录层（Record Layer）和[[传输层|传输层]]，记录层协议确定传输层数据的封装格式。傳輸層安全協議使用[[X.509|X.509]]認證，之後利用非對稱加密演算來對通訊方做身份認證，之後交換對稱金鑰作為會談金鑰（[[Session_key|Session key]]）。這個會談金鑰是用來將通訊兩方交換的資料做加密，保证两个应用间通信的保密性和可靠性，使客户與服务器应用之间的通信不被攻击者窃听。

== 概論 ==
TLS協定採用[[主從式架構|主從式架構]]模型，用于在兩個應用程式間透過網路建立起安全的連線，防止在交換資料时受到[[竊聽|竊聽]]及篡改。

TLS协议的优势是与高层的[[应用层|应用层]]协议（如[[超文本传输协议|HTTP]]、[[文件传输协议|FTP]]、[[Telnet|Telnet]]等）无耦合。应用层协议能透明地运行在TLS协议之上，由TLS协议进行建立加密通道需要的协商和认证。应用层协议传送的数据在通过TLS协议时都会被加密，从而保证通信的私密性。

TLS协议是可选的，必须配置客户端和服务器才能使用。主要有两种方式实现这一目标：一个是使用统一的TLS协议[[通訊埠|通訊埠]]（例如：用于[[HTTPS|HTTPS]]的端口443）；另一个是客户端请求服务器连接到TLS时使用特定的协议机制（例如：電子郵件常用的[[STARTTLS|STARTTLS]]）。一旦客户端和服务器都同意使用TLS协议，他们通过使用一个握手过程协商出一个有状态的连接以传输数据<ref>"[http://technet.microsoft.com/en-us/library/cc785811.aspx SSL/TLS in Detail] {{Wayback|url=http://technet.microsoft.com/en-us/library/cc785811.aspx |date=20141129044653 }}". ''[[Microsoft_TechNet|Microsoft TechNet]]''. Updated July 31, 2003.</ref>。通过握手，客户端和服务器协商各种参数用于建立安全连接：
* 当客户端连接到支持TLS协议的服务器要求建立安全连接并列出了受支持的[[密碼套件|密碼套件]]（包括[[加密算法|加密算法]]、[[散列算法|散列算法]]等），握手开始。
* 服务器从该列表中决定密碼套件，并通知客户端。
* 服务器发回其[[数字证书|数字证书]]，此证书通常包含服务器的名称、受信任的[[证书颁发机构|证书颁发机构]]（CA）和服务器的公钥。
* 客户端确认其颁发的证书的有效性。
* 为了生成会话密钥用于安全连接，客户端使用服务器的公钥加密随机生成的密钥，并将其发送到服务器，只有服务器才能使用自己的私钥解密。
* 利用随机数，双方生成用于加密和解密的对称密钥。这就是TLS协议的握手，握手完毕后的连接是安全的，直到连接（被）关闭。如果上述任何一个步骤失败，TLS握手过程就会失败，并且断开所有的连接。

{{Internet security protocols}}

== 發展歷史 ==
{| class="wikitable" style="float:right; margin-left:9px; text-align:center"
|-
! 協議 !! 發布時間
!狀態
|-
| SSL 1.0 || {{n/a|未公佈}}|| {{n/a|未公佈}}
|-
| SSL 2.0 || 1995年
|已於2011年棄用<ref>{{Cite web |url=https://tools.ietf.org/html/rfc6176 |title=RFC 6176 |accessdate=2020-05-22 |archive-date=2016-12-06 |archive-url=https://web.archive.org/web/20161206052122/https://tools.ietf.org/html/rfc6176 |dead-url=no }}</ref>
|-
| SSL 3.0 || 1996年
|已於2015年棄用<ref>{{Cite web |url=https://tools.ietf.org/html/rfc7568 |title=RFC 7568 |accessdate=2020-05-22 |archive-date=2018-03-28 |archive-url=https://web.archive.org/web/20180328080443/https://tools.ietf.org/html/rfc7568 |dead-url=no }}</ref>
|-
| TLS 1.0 || 1999年
|于2021年弃用<ref name="rfc8996">{{Cite web|url=https://tools.ietf.org/html/rfc8996|title=RFC 8996|accessdate=2021-03-25|archive-date=2021-03-24|archive-url=https://web.archive.org/web/20210324184013/https://tools.ietf.org/html/rfc8996|dead-url=no}}</ref>
|-
| TLS 1.1 || 2006年
|于2021年弃用<ref name="rfc8996"/>
|-
| TLS 1.2 || 2008年
|
|-
| TLS 1.3 || 2018年
|
|}

=== 安全网络编程 ===
早期的研究工作，为方便改造原有网络应用程序，在1993年已经有了相似的[[Berkeley套接字|Berkeley套接字]]安全传输层API方法<ref name="Woo94">Thomas Y. C. Woo, Raghuram Bindignavle, Shaowen Su and [[Simon_S._Lam|Simon S. Lam]], [http://www.cs.utexas.edu/users/lam/Vita/Cpapers/WBSL94.pdf ''SNP: An interface for secure network programming''] {{Wayback|url=http://www.cs.utexas.edu/users/lam/Vita/Cpapers/WBSL94.pdf |date=20141212000043 }} Proceedings USENIX Summer Technical Conference, June '''1994'''</ref>。

=== SSL 1.0、2.0和3.0 ===
SSL（{{lang|en|Secure Sockets Layer}}）是[[网景|网景]]公司（Netscape）设计的主要用于Web的安全传输协议，这种协议在Web上获得了广泛的应用<ref>{{cite web |archiveurl=https://web.archive.org/web/19970614020952/http://home.netscape.com/newsref/std/SSL.html |archivedate=1997-06-14 |title=THE SSL PROTOCOL |url=http://home.netscape.com/newsref/std/SSL.html |publisher=Netscape Corporation |year=2007 |accessdate=2014-12-02 |dead-url=no }}</ref>。

基础算法由作为网景公司的首席科学家[[塔希爾·蓋莫爾|塔希爾·蓋莫爾]]（Taher Elgamal）编写，所以他被人称为“SSL之父”。<ref name=Messmer>{{cite web |last=Messmer |first=Ellen |title=Father of SSL, Dr. Taher Elgamal, Finds Fast-Moving IT Projects in the Middle East |url=http://www.networkworld.com/news/2012/120412-elgamal-264739.html |work=Network World |accessdate=30 May 2014 |deadurl=yes |archiveurl=https://web.archive.org/web/20140531105537/http://www.networkworld.com/news/2012/120412-elgamal-264739.html |archivedate=2014年5月31日 }}</ref><ref name=Greene>{{cite web |last=Greene |first=Tim |title=Father of SSL says despite attacks, the security linchpin has lots of life left |url=http://www.networkworld.com/news/2011/101111-elgamal-251806.html |work=Network World |accessdate=30 May 2014 |deadurl=yes |archiveurl=https://web.archive.org/web/20140531105257/http://www.networkworld.com/news/2011/101111-elgamal-251806.html |archivedate=2014年5月31日 }}</ref>

2014年10月，Google發布在SSL 3.0中發現設計缺陷，建議禁用此一協議。攻擊者可以向TLS發送虛假錯誤提示，然後將安全連接強行降級到过时且不安全的SSL 3.0，然後就可以利用其中的設計漏洞竊取敏感信息。Google在自己公司相關產品中陸續禁止回溯相容，強制使用TLS協議。[[Mozilla|Mozilla]]也在11月25日發布的[[Firefox|Firefox]] 34中徹底禁用了SSL 3.0。[[微軟|微軟]]同樣發出了安全通告<ref name="Poodle">{{cite web |url = https://access.redhat.com/articles/1232123 |title = POODLE: SSLv3 vulnerability (CVE-2014-3566) |accessdate = 21 October 2014 |archive-date = 2016-03-17 |archive-url = https://web.archive.org/web/20160317162824/https://access.redhat.com/articles/1232123 |dead-url = no }}</ref>。
* 1.0版本从未公开过，因为存在严重的安全漏洞。
* 2.0版本在1995年2月发布。2011年，RFC 6176 標準棄用了SSL 2.0。
* 3.0版本在1996年发布，是由[[網景|網景]]工程師{{le|保罗·科切|Paul_Carl_Kocher}}、[[Phil_Karlton|Phil Karlton]]和[[Alan_Freier|Alan Freier]]完全重新设计的。2015年，RFC 7568 標準棄用了SSL 3.0。

=== TLS 1.0 ===
[[互联网工程任务组|IETF]]将SSL标准化，即 RFC 2246 ，并将其称为TLS（{{lang|en|Transport Layer Security}}）。

=== TLS 1.1 ===
TLS 1.1在 RFC 4346 中定义，于2006年4月发表<ref>{{cite web |author=Dierks, T. and E. Rescorla |title=The Transport Layer Security (TLS) Protocol Version 1.1, RFC 4346 |date=April 2006 |url=https://tools.ietf.org/html/rfc5246#ref-TLS1.1 |accessdate=2014-12-02 |archive-date=2017-12-24 |archive-url=https://web.archive.org/web/20171224222709/https://tools.ietf.org/html/rfc5246#ref-TLS1.1 |dead-url=no }}</ref>，它是TLS 1.0的更新。在此版本中的差异包括：
* 添加对CBC攻击的保护：
** 隐式[[初始化向量|IV]]被替换成一个显式的[[初始化向量|IV]]。
** 更改分组密码模式中的填充错误。
* 支持[[IANA|IANA]]登记的参数。<ref name="urlnvlpubs.nist.gov">{{cite web|url=http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r1.pdf|title=Guidelines for the Selection, Configuration, and Use of Transport Layer Security (TLS) Implementations|authors=Polk, Tim; McKay, Terry; Chokhani, Santosh|date=April 2014|format=|publisher=National Institute of Standards and Technology|page=67|archiveurl=https://web.archive.org/web/20140508025330/http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r1.pdf|archivedate=2014-05-08|accessdate=2014-05-07|dead-url=no}}</ref>{{Rp|2}}

微軟、Google、蘋果、Mozilla四家瀏覽器業者將在2020年終止支援TLS 1.0及1.1版<ref>{{Cite web |url=https://www.ithome.com.tw/news/126434 |title=微軟、蘋果、Google及Mozilla四大瀏覽器業者將在2020年終止支援TLS 1.0、1.1 |accessdate=2020-01-12 |archive-date=2020-01-12 |archive-url=https://web.archive.org/web/20200112001119/https://www.ithome.com.tw/news/126434 |dead-url=no }}</ref>。2021年3月，RFC 8996标准弃用了TLS 1.0和TLS 1.1<ref name="rfc8996"/>。

=== TLS 1.2 ===
TLS 1.2在 RFC 5246 中定义，于2008年8月发表。它基于更早的TLS 1.1规范。主要区别包括：
* 增加[[SHA-2|SHA-2]]密碼雜湊函數。
* 增加[[AEAD|AEAD]]加密算法，如GCM模式。
* 添加TLS扩展定义和AES密码组合<ref name="urlnvlpubs.nist.gov" />{{Rp|2}}。所有TLS版本在2011年3月发布的RFC 6176中删除了对SSL的兼容，这样TLS会话将永远无法协商使用的SSL 2.0以避免安全问题。

=== TLS 1.3===
{{see also|來回通訊延遲}}
TLS 1.3在 RFC 8446 中定义，于2018年8月发表。<ref>{{cite web |author1=Joseph A. Salowey |author2=Sean Turner |author3=Christopher A. Wood |title=TLS 1.3 |url=https://www.ietf.org/blog/tls13/ |website=IETF |accessdate=2018-08-11 |language=en |date=2018-08-10 |archive-date=2018-08-11 |archive-url=https://web.archive.org/web/20180811031638/https://www.ietf.org/blog/tls13/ |dead-url=no }}</ref>它与TLS 1.2的主要区别包括：
* 将[[密鑰交換|密鑰交換]]算法（如[[ECDHE|ECDHE]]）和認證算法（如[[RSA|RSA]]）从[[密码套件|密码套件]]中分离出来。
* 移除[[MD5|MD5]]、[[SHA1|SHA1]][[密碼雜湊函數|密碼雜湊函數]]的支持。
* 请求[[数字签名|数字签名]]。
* 集成{{tsl|en|Key derivation function|HKDF}}和半短暂DH提议。
* 替换使用{{tsl|en|TLS-PSK|TLS-PSK|PSK}}和票据的恢复。
* 支持1-RTT握手并初步支持0-RTT。
* 通过在密鑰協商期间使用临时密钥来保证完善的[[前向安全性|前向安全性]]。
* 放弃许多不安全或过时特性的支持，包括[[数据压缩|数据压缩]]、重新协商、非[[AEAD|AEAD]]加密算法、静态[[RSA加密演算法|RSA]]和静态[[迪菲-赫爾曼密鑰交換|DH]]密钥交换、自定义[[迪菲-赫爾曼密鑰交換|DHE]]分组、点格式协商、更改密码本规范的协议、UNIX时间的Hello消息，以及长度字段AD输入到AEAD密码本。
* 較TLS 1.2速度更快，效能更好。
* 移除[[RC4|RC4]]加密演算法的支援。
* 集成会话散列的使用。
* 弃用记录层版本号和冻结数以改进向后兼容性。
* 将一些安全相关的算法细节从附录移动到标准，并将ClientKeyShare降级到附录。
* 支援{{link-en|Ed25519|EdDSA#Ed25519}}和Ed448数字签名算法。
* 支援[[X25519|X25519]]密鑰交換。
* 支援帶[[Poly1305|Poly1305]][[訊息驗證碼|訊息驗證碼]]的[[ChaCha20|ChaCha20]]加密演算法。
* 支持[[服务器名称指示#加密服务器名称指示|加密服务器名称指示]]（{{lang|en|'''E'''ncrypted '''S'''erver '''N'''ame '''I'''ndication}}, ESNI）。<ref>{{cite web |author1=pigsrollaroundinthem |title=TLS 1.3 下的 SNI 将让审查变得更困难 |url=https://www.solidot.org/story?sid=57601 |website=Solidot |accessdate=2018-08-27 |date=2018-08-16 |archive-date=2018-08-27 |archive-url=https://web.archive.org/web/20180827173941/https://www.solidot.org/story?sid=57601 |dead-url=no }}</ref>

[[网络安全服务|网络安全服务]]（NSS）是由Mozilla开发并由其网络浏览器Firefox使用的加密库，自2017年2月起便默认启用TLS 1.3。<ref name=NSS-3.29>{{cite web|url=https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.29_release_notes|title=NSS 3.29 release notes|date=February 2017|publisher=Mozilla Developer Network|deadurl=no|archiveurl=https://web.archive.org/web/20170222052829/https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.29_release_notes|archivedate=2017-02-22|accessdate=2018-08-11}}</ref>随后TLS 1.3被添加到2017年3月发布的Firefox 52.0中，但它由于某些用户的兼容性问题，默认情况下禁用。<ref>{{cite web|url=https://bugzilla.mozilla.org/show_bug.cgi?id=1310516|title=Enable TLS 1.3 by default|date=16 October 2016|publisher=Bugzilla@Mozilla|accessdate=10 October 2017|archive-date=2018-08-12|archive-url=https://web.archive.org/web/20180812021410/https://bugzilla.mozilla.org/show_bug.cgi?id=1310516|dead-url=no}}</ref>直到Firefox 60.0才正式默认启用。<ref>{{Cite web|url=https://www.mozilla.org/en-US/firefox/60.0/releasenotes/|title=Firefox — Notes (60.0)|website=Mozilla|language=en-US|access-date=2018-05-10|archive-date=2018-05-09|archive-url=https://web.archive.org/web/20180509230339/https://www.mozilla.org/en-US/firefox/60.0/releasenotes/|dead-url=no}}</ref>

[[Google_Chrome|Google Chrome]]曾在2017年短时间将TLS 1.3设为默认，然而由于类似{{link-en|Blue Coat Systems|Blue Coat Systems}}等不兼容组件而被取消。<ref>{{cite web |url=http://bluecoat.force.com/knowledgebase/articles/Technical_Alert/000032878 |title=ProxySG, ASG and WSS will interrupt SSL connections when clients using TLS 1.3 access sites also using TLS 1.3 |date=16 May 2017 |work=BlueTouch Online |accessdate=11 September 2017 |deadurl=yes |archiveurl=https://web.archive.org/web/20170912061432/http://bluecoat.force.com/knowledgebase/articles/Technical_Alert/000032878 |archivedate=2017-09-12 }}</ref>

[[wolfSSL|wolfSSL]]在2017年5月发布的3.11.1版本中启用了TLS 1.3。<ref>{{cite web|url=https://www.wolfssl.com/wolfssl-tls-1-3-beta-release-now-available/|title=wolfSSL TLS 1.3 BETA Release Now Available|date=11 May 2017|publisher=info@wolfssl.com|accessdate=11 May 2017|archive-date=2018-07-25|archive-url=https://web.archive.org/web/20180725115500/https://www.wolfssl.com/wolfssl-tls-1-3-beta-release-now-available/|dead-url=no}}</ref>作为第一款支持TLS 1.3部署，wolfSSL 3.11.1 支持 TLS 1.3 Draft 18（现已支持到Draft 28），<ref>{{cite web|url=https://www.wolfssl.com/docs/tls13/|title=TLS 1.3 PROTOCOL SUPPORT|publisher=info@wolfssl.com|date=|access-date=|archive-date=2018-07-26|archive-url=https://web.archive.org/web/20180726105451/https://www.wolfssl.com/docs/tls13/|dead-url=no}}</ref>同时官方也发布了一系列关于TLS 1.2和TLS 1.3性能差距的博客。<ref>{{cite web|url=https://www.wolfssl.com/tls-1-3-draft-28-support-wolfssl/|title=TLS 1.3 Draft 28 Support in wolfSSL|date=14 June 2018|publisher=info@wolfssl.com|accessdate=14 June 2018|archive-date=2018-07-25|archive-url=https://web.archive.org/web/20180725115152/https://www.wolfssl.com/tls-1-3-draft-28-support-wolfssl/|dead-url=no}}</ref>

== 算法 ==
{{Main|密码套件}}

=== 密钥交换和密钥协商 ===
在客户端和服务器开始交换TLS所保护的加密信息之前，他们必须安全地交换或协定加密密钥和加密数据时要使用的密码。用于密钥交换的方法包括：使用[[RSA|RSA]]算法生成公钥和私钥（在TLS [[握手|握手]]协议中被称为TLS_RSA）、[[迪菲-赫爾曼密鑰交換|Diffie-Hellman]]（在TLS握手协议中被称为TLS_DH）、临时Diffie-Hellman（在TLS握手协议中被称为TLS_DHE）、[[橢圓曲線迪菲-赫爾曼|橢圓曲線迪菲-赫爾曼]]（在TLS握手协议中被称为TLS_ECDH）、临时椭圆曲线Diffie-Hellman（在TLS握手协议中被称为TLS_ECDHE）、匿名Diffie-Hellman（在TLS握手协议中被称为TLS_DH_anon）<ref name=RFC5246>{{cite web|title=RFC 5246: The Transport Layer Security (TLS) Protocol Version 1.2|url=https://tools.ietf.org/html/rfc5246|publisher=Internet Engineering Task Force|accessdate=9 September 2013|archive-date=2017-12-24|archive-url=https://web.archive.org/web/20171224222709/https://tools.ietf.org/html/rfc5246|dead-url=no}}</ref>和预共享密钥（在TLS握手协议中被称为TLS_PSK）。<ref name=RFC4279>{{cite web|title=RFC 4279: Pre-Shared Key Ciphersuites for Transport Layer Security (TLS)|url=https://tools.ietf.org/html/rfc4279|publisher=Internet Engineering Task Force|accessdate=9 September 2013|author=P. Eronen, Ed.|archive-date=2013-09-05|archive-url=https://web.archive.org/web/20130905074722/http://tools.ietf.org/html/rfc4279|dead-url=no}}</ref>

TLS_DH_anon和TLS_ECDH_anon的密钥协商协议不能验证服务器或用户，因为易受[[中间人攻击|中间人攻击]]因此很少使用。只有TLS_DHE和TLS_ECDHE提供[[前向安全性|前向保密]]能力。

在交换过程中使用的[[公钥|公钥]]/[[私钥|私钥]]加密[[密钥|密钥]]的长度和在交换协议过程中使用的公钥证书也各不相同，因而提供的'''強健性'''的安全。[[2013年7月|2013年7月]]，[[Google|Google]]宣布向其用户提供的TLS加密将不再使用1024位公钥并切换到至少2048位，以提高安全性。<ref>{{cite web|last=Gothard|first=Peter|title=Google updates SSL certificates to 2048-bit encryption|url=http://www.computing.co.uk/ctg/news/2285984/google-updates-ssl-certificates-to-2048bit-encryption|work=Computing|publisher=Incisive Media|accessdate=9 September 2013|archive-date=2013-09-22|archive-url=https://web.archive.org/web/20130922082322/http://www.computing.co.uk/ctg/news/2285984/google-updates-ssl-certificates-to-2048bit-encryption|dead-url=no}}</ref>

{| class="wikitable" style="text-align:center"
|+ 身份验证和密钥交换协议列表
! 算法 !! SSL 2.0 !! SSL 3.0 !! TLS 1.0 !! TLS 1.1 !! TLS 1.2 !! TLS 1.3!! 状态
|-
! {{Depends|[[RSA加密演算法|RSA]]}}
| {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}} || {{N/A|否}} || rowspan="19"| RFC中TLS 1.2的定義
|-
!{{Depends|[[迪菲-赫爾曼密鑰交換|DH]]-[[RSA加密演算法|RSA]]}}
| {{No}} || {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}} || {{N/A|否}}
|-
!{{Yes2|[[迪菲-赫爾曼密鑰交換|DHE]]-[[RSA加密演算法|RSA]]（具有[[前向安全性|前向安全性]]）}}
| {{No}} || {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}}
|-
!{{Depends|[[橢圓曲線迪菲-赫爾曼金鑰交換|ECDH]]-[[RSA加密演算法|RSA]]}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} || {{N/A|否}}
|-
!{{Yes2|[[橢圓曲線迪菲-赫爾曼金鑰交換|ECDHE]]-[[RSA加密演算法|RSA]]（具有[[前向安全性|前向安全性]]）}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}}
|-
!{{Depends|[[Diffie–Hellman_key_exchange|DH]]-[[数字签名算法|DSS]]}}
| {{No}} || {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}} || {{N/A|否}}
|-
!{{Yes2|[[Diffie–Hellman_key_exchange|DHE]]-[[数字签名算法|DSS]]（具有[[前向安全性|前向安全性]]）}}
| {{No}} || {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}} || {{N/A|否}}<ref>{{cite web|url=https://www.ietf.org/mail-archive/web/tls/current/msg17680.html|title=Consensus: remove DSA from TLS 1.3|date=September 17, 2015|author=Sean Turner|deadurl=no|archiveurl=https://web.archive.org/web/20151003193113/http://www.ietf.org/mail-archive/web/tls/current/msg17680.html|archivedate=2015-10-03|df=|accessdate=2018-01-28}}</ref>
|-
!{{Depends|[[橢圓曲線迪菲-赫爾曼金鑰交換|ECDH]]-[[椭圆曲线数字签名算法|ECDSA]]}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} || {{N/A|否}}
|-
!{{Yes2|[[橢圓曲線迪菲-赫爾曼金鑰交換|ECDHE]]-[[椭圆曲线数字签名算法|ECDSA]]（具有[[前向安全性|前向安全性]]）}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}}
|-
!{{Depends|SRP}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} ||
|-
!{{Depends|{{tsl|en|Pre-shared key|预共享密钥|PSK}}-[[RSA加密演算法|RSA]]}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} ||
|-
!{{Yes2|[[Diffie–Hellman_key_exchange|DHE]]-{{tsl|en|Pre-shared key|预共享密钥|PSK}}（具有[[前向安全性|前向安全性]]）}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}}
|-
!{{Yes2|[[橢圓曲線迪菲-赫爾曼金鑰交換|ECDHE]]-{{tsl|en|Pre-shared key|预共享密钥|PSK}}（具有[[前向安全性|前向安全性]]）}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}}
|-
!{{Depends|SRP}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} ||
|-
!{{Depends|SRP-[[数字签名算法|DSS]]}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} ||
|-
!{{Depends|SRP-[[RSA加密演算法|RSA]]}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} ||
|-
!{{Depends|[[Kerberos|Kerberos]]}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} ||
|-
! {{Bad|[[迪菲-赫爾曼密鑰交換|DH]]-ANON（不安全）}}
| {{N/a|否}} || {{No|是}} || {{No|是}} || {{No|是}} || {{No|是}} ||
|-
! {{Bad|[[橢圓曲線迪菲-赫爾曼金鑰交換|ECDH]]-ANON（不安全）}}
| {{N/a|否}} || {{N/a|否}} || {{No|是}} || {{No|是}} || {{No|是}} ||
|-
!{{Yes2|{{tsl|en|GOST|GOST R 34.10-94 / 34.10-2001}}<ref name=gostlink>[//tools.ietf.org/html/draft-chudov-cryptopro-cptls-04 draft-chudov-cryptopro-cptls-04 – GOST 28147-89 Cipher Suites for Transport Layer Security (TLS)]</ref>}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} ||
| 在RFC草案中提出
|}

=== 加密密码 ===
{{See also|分组密码工作模式}}

{| class="wikitable" style="text-align:center"
|+针对公开可行的攻击的[[密碼_(密碼學)|密碼]]安全性
|-
! colspan="3"|[[密碼_(密碼學)|密碼]] !! colspan="6"|协议版本 !! rowspan="2"|状态
|-
! 类型
! 算法
! 长度（bits）
! SSL 2.0
! SSL 3.0<br /><ref group="n" name="rfc5746">{{IETF RFC|5746}} must be implemented to fix a renegotiation flaw that would otherwise break this protocol.</ref><ref group="n" name="renegotiation">If libraries implement fixes listed in {{IETF RFC|5746}}, this violates the SSL 3.0 specification, which the IETF cannot change unlike TLS. Fortunately, most current libraries implement the fix and disregard the violation that this causes.</ref><ref group="n" name="BEAST">The [[#BEAST_attack|BEAST]] attack breaks all block ciphers (CBC ciphers) used in SSL 3.0 and TLS 1.0 unless mitigated by the client and/or the server. See [[#Web_browsers|§ Web browsers]].</ref><ref group="n" name="POODLEciphertable">The [[#Poodle|POODLE]] attack breaks all block ciphers (CBC ciphers) used in SSL 3.0 unless mitigated by the client and/or the server. See [[#Web_browsers|§ Web browsers]].</ref>
! TLS 1.0<br /><ref group="n" name="rfc5746"/><ref group="n" name="BEAST"/>
! TLS 1.1<br /><ref group="n" name="rfc5746"/>
! TLS 1.2<br /><ref group="n" name="rfc5746"/>
! TLS 1.3<br />
|-
! rowspan="14"|[[分组密码|分组密码]]及[[分组密码工作模式|其加密方式]]
![[高級加密標準|AES]] [[伽罗瓦/计数器模式|GCM]]<ref name="aes-gcm">{{IETF RFC|5288|5289}}</ref><ref group="n" name="aead">[[AEAD|AEAD]] ciphers (such as [[伽罗瓦/计数器模式|GCM]] and {{le|CCM分组密码模式|CCM_mode|CCM}}) can be used in only TLS 1.2.</ref>
| rowspan="3"| 256, 128
| {{N/a}} || {{N/a}} || {{N/a}} || {{N/a}} || {{Yes2|安全}} || {{Yes2|安全}} || rowspan="9"| RFC中TLS 1.2的定義
|-
![[高級加密標準|AES]] {{le|CCM分组密码模式|CCM_mode|CCM}}<ref name="aes-ccm">{{IETF RFC|6655|7251}}</ref><ref group="n" name="aead"/>
| {{N/a}} || {{N/a}} || {{N/a}} || {{N/a}} || {{Yes2|安全}} || {{Yes2|安全}}
|-
![[高級加密標準|AES]] [[密码块链接|CBC]]<ref group="n" name="Lucky13"/>
| {{N/a}} || {{Bad|不安全}} || {{Depends|依赖于后期加入的措施}} || {{Depends|依赖于后期加入的措施}} || {{Depends|依赖于后期加入的措施}} || {{N/a}}
|-
![[Camellia|Camellia]] [[伽罗瓦/计数器模式|GCM]]<ref name="camellia-gcm">{{IETF RFC|6367}}</ref><ref group="n" name="aead"/>
| rowspan="2"| 256, 128
| {{N/a}} || {{N/a}} || {{N/a}} || {{N/a}} || {{Yes2|安全}} || {{N/a}}
|-
![[Camellia|Camellia]] [[密码块链接|CBC]]<ref name="camellia-cbc">{{IETF RFC|5932|6367}}</ref><ref group="n" name="Lucky13"/>
| {{N/a}} || {{Bad|不安全}} || {{Depends|依赖于后期加入的措施}} || {{Depends|依赖于后期加入的措施}} || {{Depends|依赖于后期加入的措施}} || {{N/a}}
|-
!{{le|ARIA加密算法|ARIA_(cipher)}} [[伽罗瓦/计数器模式|GCM]]<ref name=aria/><ref group="n" name="aead"/>
| rowspan="2"| 256, 128
| {{N/a}} || {{N/a}} || {{N/a}} || {{N/a}} || {{Yes2|安全}} || {{N/a}}
|-
!{{le|ARIA加密算法|ARIA_(cipher)}} [[密码块链接|CBC]]<ref name="aria">{{IETF RFC|6209}}</ref><ref group="n" name="Lucky13"/>
| {{N/a}} || {{N/a}} || {{Depends|依赖于后期加入的措施}} || {{Depends|依赖于后期加入的措施}} || {{Depends|依赖于后期加入的措施}} || {{N/a}}
|-
!{{le|SEED加密算法|SEED (cipher)}} [[密码块链接|CBC]]<ref name="seed-cbc">{{IETF RFC|4162}}</ref><ref group="n" name="Lucky13"/>
| 128
| {{N/a}} || {{Bad|不安全}} || {{Depends|依赖于后期加入的措施}} || {{Depends|依赖于后期加入的措施}} || {{Depends|依赖于后期加入的措施}} || {{N/a}}
|-
! [[3DES_EDE|3DES EDE]] [[密码块链接|CBC]]<ref group="n" name="Lucky13">CBC ciphers can be attacked with the [[Lucky_Thirteen_attack|Lucky Thirteen attack]] if the library is not written carefully to eliminate timing side channels.</ref>{{refn|group="n"|name="Sweet32"|The Sweet32 attack breaks block ciphers with a block size of 64 bits.<ref name="sweet32">{{cite web |url=https://sweet32.info/SWEET32_CCS16.pdf |title=On the Practical (In-)Security of 64-bit Block Ciphers — Collision Attacks on HTTP over TLS and OpenVPN |date=2016-10-28 |accessdate=2017-06-08 |deadurl=no |archiveurl=https://web.archive.org/web/20170424021101/https://sweet32.info/SWEET32_CCS16.pdf |archivedate=2017-04-24 }}</ref>}}
| 112{{refn|group="n"|name="3des"|Although the key length of 3DES is 168 bits, effective security strength of 3DES is only 112 bits,<ref name=NIST_SP_800-57>{{cite web |url=http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57-Part1-revised2_Mar08-2007.pdf |title=NIST Special Publication 800-57 ''Recommendation for Key Management — Part 1: General (Revised)'' |date=2007-03-08 |accessdate=2014-07-03 |deadurl=yes |archiveurl=https://web.archive.org/web/20140606050814/http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57-Part1-revised2_Mar08-2007.pdf |archivedate=2014-06-06 }}</ref> which is below the recommended minimum of 128 bits.<ref name="best-practices">{{cite web|url=https://www.ssllabs.com/projects/best-practices/index.html|title=SSL/TLS Deployment Best Practices|author=Qualys SSL Labs|accessdate=2 June 2015|deadurl=no|archiveurl=https://web.archive.org/web/20150704101956/https://www.ssllabs.com/projects/best-practices/index.html|archivedate=2015-07-04|df=}}</ref>}}
| {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{N/a}}
|-
!{{le|GOST加密算法|GOST_(block_cipher)|GOST 28147-89}} [[计数器模式|CNT]]<ref name=gostlink/><ref group="n" name="Sweet32"/>
| 256
| {{N/a}} || {{N/a}} || {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{N/a}} || 定义于{{IETF RFC|4357}}
|-
![[國際資料加密演算法|IDEA]] [[密码块链接|CBC]]<ref group="n" name="Lucky13"/><ref group="n" name="Sweet32"/>{{refn|group="n"|name="removal_from_tls1.2"|IDEA and DES have been removed from TLS 1.2.<ref>{{IETF RFC|5469}}</ref>}}
| 128
| {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{N/a}} || {{N/a}} || rowspan="2"| 从TLS 1.2标准中移除
|-
!rowspan="2"| [[DES|DES]] [[密码块链接|CBC]]<ref group="n" name="Lucky13"/><ref group="n" name="Sweet32"/><ref group="n" name="removal_from_tls1.2"/>
| {{0}}56
| {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{N/a}} || {{N/a}}
|-
| {{0}}40<ref group="n" name="EXPORT">40 bits strength of cipher suites were designed to operate at reduced key lengths to comply with US regulations about the export of cryptographic software containing certain strong encryption algorithms (see [[美國的加密技術出口管制|美國的加密技術出口管制]]). These weak suites are forbidden in TLS 1.1 and later.</ref>
| {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{N/a}} || {{N/a}} || {{N/a}} || rowspan="2"| 在TLS 1.1及之后版本禁止
|-
!{{le|RC2}} [[密码块链接|CBC]]<ref group="n" name="Lucky13"/><ref group="n" name="Sweet32"/>
| {{0}}40<ref group="n" name="EXPORT"/>
| {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{N/a}} || {{N/a}} || {{N/a}}
|-
! rowspan="3"|[[流加密|流加密]]
![[ChaCha20|ChaCha20]]-[[Poly1305|Poly1305]]<ref name="chacha20poly1305">{{IETF RFC|7905}}</ref><ref group="n" name="aead"/>
| 256
| {{N/a}} || {{N/a}} || {{N/a}} || {{N/a}} || {{Yes2|安全}} || {{Yes2|安全}} ||RFC中TLS 1.2的定義
|-
!rowspan="2"| [[RC4|RC4]]<ref group="n" name="RC4">Use of RC4 in all versions of TLS is prohibited by {{IETF RFC|7465}} (because [[#RC4_attacks|RC4 attacks]] weaken or break RC4 used in SSL/TLS).</ref>
| 128
| {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{N/a}} || rowspan="2"| 由{{IETF RFC|7465}}定义所有版本TLS禁止
|-
| {{0}}40<ref group="n" name="EXPORT"/>
| {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{N/a}} || {{N/a}} || {{N/a}}
|-
! None
! Null<ref group="n">Authentication only, no encryption.</ref>
| –
| {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{Bad|不安全}} || {{N/a}} ||RFC中TLS 1.2的定義
|}

;标注
{{reflist|group="n"}}

=== 数据完整性 ===
[[訊息鑑別碼|訊息鑑別碼]]（MAC）用于对数据完整性进行认证。[[HMAC|HMAC]]用于CBC模式的[[块密码|块密码]]。[[AEAD|AEAD]]例如GCM模式和CCM模式使用AEAD內建的[[訊息鑒別碼|訊息鑒別碼]]，不使用[[HMAC|HMAC]]<ref>{{Cite web |url=https://tools.ietf.org/html/rfc5246#section-6.2.3.3 |title=AEAD Ciphers |accessdate=2014-12-02 |archive-date=2017-12-24 |archive-url=https://web.archive.org/web/20171224222709/https://tools.ietf.org/html/rfc5246#section-6.2.3.3 |dead-url=no }}</ref>。另外，在TLS握手過程中需要使用基於[[HMAC|HMAC]]的偽隨機函數（PRF），或{{link-en|HKDF}}。

{| class="wikitable" style="text-align:center"
|+ 數據的完整性
! 算法 !! SSL 2.0 !! SSL 3.0 !! TLS 1.0 !! TLS 1.1 !! TLS 1.2 !! TLS 1.3 !! 狀態
|-
! [[HMAC|HMAC]]-[[MD5|MD5]]
| {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}} || {{No}} || rowspan="4" | RFC中TLS 1.2的定義
|-
! [[HMAC|HMAC]]-[[SHA-1|SHA1]]
| {{No}} || {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}} || {{No}}
|-
! [[HMAC|HMAC]]-[[SHA-2|SHA256/384]]
| {{No}} || {{No}} || {{No}} || {{No}} || {{Yes}} || {{No}}
|-
! [[认证加密|AEAD]]
| {{No}} || {{No}} || {{No}} || {{No}} || {{Yes}} || {{Yes}}
|-
! {{tsl|en|GOST (hash function)|GOST 28147-89 IMIT}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} || || rowspan="2" | 在RFC草案中提出
|-
! {{tsl|en|GOST (hash function)|GOST R 34.11-94}}
| {{No}} || {{No}} || {{Yes}} || {{Yes}} || {{Yes}} ||
|}

== 过程 ==
TLS在[[互联网|互联网]]上為HTTP等應用程式提供[[身份驗證|身份驗證]]、[[加密|加密]]、[[完整性|完整性]]，其基础是[[公钥基础设施|公钥基础设施]]。这是因为[[公鑰基礎設施|公鑰基礎設施]]普遍商业运营。TLS协议的设计在某种程度上能够使[[主从架构|主从架构]]应用程序通讯预防窃听、干扰和消息伪造。

TLS包含幾個基本阶段：
# 对等协商支援的TLS版本，和支援的[[密碼套件|密碼套件]]。
# 基于[[非对称密钥|非对称密钥]]的身份认证，通常是基于[[PKI|PKI]]证书的[[身份认证|身份认证]]。[[伺服器|伺服器]]將其[[X.509|X.509]]證書發送給[[客戶端|客戶端]]，由客戶端驗證伺服器的身份。如果伺服器要驗證客戶端的證書，則客戶端可能會將客戶端證書發送給伺服器。通常僅驗證伺服器，不驗證客戶端。
# 基于[[对称密钥|对称密钥]]的數據加密。客戶端生成[[隨機數|隨機數]]作為[[對話鍵|對談金鑰]]，並使用伺服器[[公鑰|公鑰]]（伺服器公鑰在伺服器證書中）加密對談金鑰，最後將已加密的對談金鑰發送給伺服器。由伺服器的[[私鑰|私鑰]]解密出對談金鑰。最後使用此對談金鑰加密數據。TLS也可以使用預共用金鑰（PSK）作為對稱密鑰。

在第一阶段，客户端与服务器协商所用密码算法。当前广泛实现的算法选择如下：
* 身份驗證：[[RSA|RSA]]、[[数字签名算法|DSA]]、[[ECDSA|ECDSA]]；
* 密鑰交換：{{le|预共享密钥|Pre-shared key|PSK}}、[[Diffie-Hellman|Diffie-Hellman]]、[[ECDH|ECDH]]；
* 对称密钥加密：[[RC4|RC4]]、[[數據加密標準|DES]]、[[3DES|3DES]]、[[高级加密标准|AES]]、[[ChaCha20|ChaCha20]]以及[[Camellia|Camellia]]；
* [[散列函数|散列函数]]：[[MD5|MD5]]、[[SHA家族|SHA家族]]。

== 参考文献 ==
{{Reflist|32em}}

== 外部链接 ==
{{Commons category|SSL and TLS}}
* [http://www.nsfocus.net/index.php?act=magazine&do=view&mid=841 SSL/TLS/WTLS原理]{{Wayback|url=http://www.nsfocus.net/index.php?act=magazine&do=view&mid=841 |date=20070928055442 }}
* [http://verisign.itrus.com.cn/html/fuwuyuzhichi/fuwuqizhengshuanzhuangpeizhizhinan/ SSL配置指南]{{Wayback|url=http://verisign.itrus.com.cn/html/fuwuyuzhichi/fuwuqizhengshuanzhuangpeizhizhinan/ |date=20120216074456 }}
* [https://www.trustasia.com/tools SSL状态检查、格式转换、漏洞扫描工具]{{Wayback|url=https://www.trustasia.com/tools |date=20161103220908 }}

== 参见 ==
{{Portal|密码学|互联网}}
* [[应用层协议协商|应用层协议协商]]
* [[SSL加速|SSL加速]]
* [[扩展验证证书|扩展验证证书]]

{{-}}
{{TLS和SSL}}
{{VPN}}
{{網頁瀏覽器}}

{{DEFAULTSORT:TLS}}
[[Category:加密协议|Category:加密协议]]
[[Category:互联网标准|Category:互联网标准]]
[[Category:网络协议|Category:网络协议]]
[[Category:电子商务|Category:电子商务]]
[[Category:保密通信|Category:保密通信]]
[[Category:傳輸層安全協議|]]