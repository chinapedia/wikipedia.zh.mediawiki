{{NoteTA|G1=IT}}
{{Other uses|subject=一种编程语言|TCL}}
{{Infobox programming language
| name                   = Tcl
|logo                    = File:Tcl-powered.svg
|logo size               = 100px
| paradigm               = [[多泛型|多泛型]]、[[面向对象程序设计|面向对象]]、[[函数式编程|函数式]]、[[过程式编程|过程式]]、[[事件驱动程式设计|事件驱动]]、[[指令式编程|指令式]]
| released               = 1988年
| designer               = {{le|John Ousterhout}}
| developer              = John Ousterhout、Tcl核心團隊
| latest_release_version = [https://sourceforge.net/p/tcl/mailman/message/37380142/ 8.6.12]
| latest_release_date = {{Start date and age|2021|11|05}}
| latest preview version = [https://sourceforge.net/projects/tcl/files/Tcl/8.7a5/ 8.7a5]
| latest preview date = {{Start date and age|2021|06|14}}
| typing                 = [[动态类型|动态类型]]、万物皆可视作[[字符串|字符串]]
| implementations        = ActiveTcl
| dialects               = 
| influenced_by          = [[AWK|AWK]]、[[Lisp|Lisp]]
| influenced             = [[Windows_PowerShell|PowerShell]]<ref>{{Cite web |url=https://devblogs.microsoft.com/powershell/powershell-and-wpf-wtf/ |title=PowerShell and WPF: WTF |accessdate=2022-03-06 |archive-date=2008-12-25 |archive-url=https://web.archive.org/web/20081225093003/http://blogs.msdn.com/powershell/archive/2008/05/25/powershell-and-wpf-wtf.aspx |dead-url=no }}</ref>、{{tsl|en|Tea (programming language)|Tea}}
| website                = [http://www.tcl.tk www.tcl.tk]
| file_ext               = .tcl
}}

'''Tcl'''（发音tickle）是一种[[脚本语言|脚本语言]]。由{{le|John Ousterhout}}创建。TCL经常被用于快速原型开发 [[快速應用程式開發|RAD]]、脚本编程、GUI编程和测试等方面。

==特性==

Tcl 的特性包括：

*任何东西都是一条命令，包括语法结构（for、if等），以[[波兰表示法|波兰表示法]]书写。
*命令通常可变。
*任何事物都可以重新定义和重载。
*所有的数据类型都可以看作字符串，包括源代码。
*拥有完全动态、基于类的对象系统 TclOO，支持包括元类、过滤器和[[mixin|mixin]]在内的高级功能。
*提供[[事件驱动|事件驱动]]给[[套接字|套接字]]和[[文件|文件]]。基于时间或者用户定义的事件也可以。
*默认的变量作用域是词法作用域，但 [[uplevel|uplevel]] 和 [[upvar|upvar]] 允许过程与封闭的函数作用域交互。
*所有的内置命令会在误用时产生错误消息。
*很容易用 C、C++ 或者 Java 扩展。
*解释语言，支持[[字节码|字节码]]。
*完全的 [[Unicode|Unicode]] （3.1）支持，1999 年首次发布。
*跨平台。支持 [[Win32|Win32]]、[[UNIX|UNIX]]、[[Linux|Linux]]、[[Mac|Mac]] 等。
*和GUI开发套件 [[Tk|Tk]] 紧密集成。
*代码紧凑，易于维护。
*存在多种发行版：
**Batteries-Included 版本，如 ActiveState ActiveTcl
**tclkit，一种单文件运行时环境，仅有 1 兆大小
**starpack，脚本/程序的单文件的可执行文件，派生自 tclkit 技术
**[http://freewrap.sourceforge.net/ freewrapTCLSH]{{Wayback|url=http://freewrap.sourceforge.net/ |date=20140629070854 }} 将 Tcl 脚本打包为单个可执行二进制文件。
**[[BSD_licenses|BSD licenses]]，自由可再发行的源代码。

旧版 Tcl 没有内置[[面向对象编程|面向对象]]功能，因此许多 OO 库以扩展形式涌现出来，如 [[incr_Tcl|incr Tcl]] 和 [[XOTcl|XOTcl]]，甚至存在纯脚本编写的 OO 包，如 [[Snit|Snit]] 和 [[STOOOP|STOOOP]]（simple Tcl-only object-oriented programming），[http://www.tcl.tk/man/tcl8.6/TclCmd/class.htm#M13 8.6 版本在内核中提供了 OO 功能]{{Wayback|url=http://www.tcl.tk/man/tcl8.6/TclCmd/class.htm#M13 |date=20140420133114 }}。

Safe-Tcl 是功能受限的 Tcl 子集。文件系统访问受限，任意系统命令禁止执行。它使用双解释器模型，在“不可信解释器”中运行不可信脚本中的代码。由 [[Nathaniel_Borenstein|Nathaniel Borenstein]] 和 [[Marshall_Rose|Marshall Rose]] 设计，借以在电子邮件中包含活动信息，当支持 ''application/safe-tcl'' 与 ''multipart-enabled-mail'' 时，Safe-Tcl 即可包含于电子邮件中。Safe-Tcl 功能已整合在标准 Tcl/Tk 发布中。<ref>{{cite conference | first=Lawrie | last=Brown | date=September 18–20, 1996 | page=50 | editors=Terry Bossomaier, Lucy Chubb | title=Mobile Code Security | location=Melbourne, Australia | booktitle=Proceedings, 2nd Joint Conference, AUUG '96 and Asia-Pacific WWW '96 | url=http://books.google.com/books?id=LP5CKyrp9WsC&pg=PA50 | accessdate=2011-03-22 | archive-date=2011-05-11 | archive-url=https://web.archive.org/web/20110511122746/http://books.google.com/books?id=LP5CKyrp9WsC&pg=PA50 | dead-url=no }}</ref><ref>{{cite book | author=Welch, Brent B.; Jones, Ken; Hobbs, Jeffrey | year=2003 | page=291 | title=Practical programming in Tcl and Tk | volume=1 | edition=4th | publisher=Prentice Hall PTR | isbn=0-13-038560-3 }}</ref>

== 扩展包 ==
Tcl 支持扩展包，这些扩展包提供了附加功能（像是GUI，终端程序自动化，数据库访问等）。常用的扩展包有：

; Tk: [[Tk|Tk]] 工具包是最流行的 Tcl 扩展，在多种[[操作系统|操作系统]]上提供[[图形用户界面|图形用户界面]]。每个 GUI 由一个或多个''框架''(framework)组成，每个''框架''内含布局管理器。
; Expect: [[Expect|Expect]]是另外一种非常流行的 Tcl 扩展。早期，Expect 对 Tcl 在多种领域的流行居功甚伟，如在测试领域中，时至今日 Expect 依然被大量使用于 telnet、ssh 与串口会话的重复任务自动化，即对仅有终端交互接口的程序进行编程。Tcl 是运行 Expect 的唯一方式，因此 Tcl 在此类工业领域中十分流行。
; Tile/Ttk: Tile/Ttk<ref name="tktable1208">{{cite web | url=http://tktable.sourceforge.net/ | title=TK Table Sourceforge Project | publisher=ActiveTcl | accessdate=August 7, 2012 | archive-date=2014-07-13 | archive-url=https://web.archive.org/web/20140713143733/http://tktable.sourceforge.net/ | dead-url=yes }}</ref> 是风格和主题化控件集，可替代 Tk 中大多数控件，真正调用[[操作系统|操作系统]]的 [[API|API]] 实现原生界面。这种方式提供的主题包括 [[Windows_XP|Windows XP]]、Windows Classic、[[Qt_(toolkit)|Qt]] 和 [[Aqua|Aqua]]（Mac OS X）。主题也可使用图片 [[pixmap|pixmap]] 加上一定定义构造，避免调用系统 API。以这种方式创建的主题有 Classic Tk、Step、Alt/Revitalized、Plastik 和 Keramik。Tcl 8.4 中，此包称作 Tile，在 8.5 中以 Ttk 的名字进入 Tk 核心发布。
; Tix: Tix（Tk Interface eXtension）是一套开源的、用于扩充 Tcl/Tk 和 Python 应用程序功能的用户界面组件。由 Tix Project Group 维护，以 BSD 风格许可发布。<ref name="tixlic96">{{cite web|url=http://tix.sourceforge.net/license.terms|title=Tix License|publisher=Sourceforge|accessdate=August 7, 2012|archive-date=2013-03-22|archive-url=https://web.archive.org/web/20130322231457/http://tix.sourceforge.net/license.terms|dead-url=no}}</ref>
; Itcl/IncrTcl: [[Itcl|Itcl]] 是 Tcl 诸多对象系统中的一种，通常称为 [incr Tcl]（递增 Tcl 之意，类似 C++ 之名）。
; Tcllib: [[Tcllib|Tcllib]] 是一套纯脚本 Tcl 包，无需编译。
; TclUDP: TclUDP<ref name="tcludp1109">{{cite web | url=http://wiki.tcl.tk/8493 | title=TCL UDP | publisher=Tcl'ers Wiki | accessdate=August 7, 2012 | archive-date=2015-01-04 | archive-url=https://web.archive.org/web/20150104224943/http://wiki.tcl.tk/8493 | dead-url=no }}</ref> 提供简捷的方式支持 [[用户数据报协议|UDP]] 套接字。
; 数据库: Tcl 数据库互联（Tcl Database Connectivity，TDBC）是 Tcl 8.6 的一部分，为 Tcl 脚本提供常用数据库的访问接口，目前驱动器支持 [[MySQL|MySQL]]、[[ODBC|ODBC]]、[[PostgreSQL|PostgreSQL]] 和 [[SQLite|SQLite]] 数据库。更多数据库已经有了计划。同样，也可使用许许多多数据库专用的扩展包访问数据库。<ref name="tdbc1202">{{cite web|url=http://wiki.tcl.tk/20343|title=TDBC|publisher=Tcl'ers Wiki|accessdate=August 7, 2012|archive-date=2009-05-29|archive-url=https://web.archive.org/web/20090529121837/http://wiki.tcl.tk/20343|dead-url=no}}</ref>

== 範例 ==
下面是TCL程序的例子：
<syntaxhighlight lang="Tcl">
#!/bin/sh
# next line restarts using tclsh in path \
exec tclsh $0 ${1+"$@"}

# echo server that can handle multiple
# simultaneous connections.

proc newConnection { sock addr port } {

     # client connections will be handled in
     # line-buffered, non-blocking mode
     fconfigure $sock -blocking no -buffering line

     # call handleData when socket is readable
     fileevent $sock readable [ list handleData $sock ]
}

proc handleData { sock } {
     puts $sock [ gets $sock ]
     if { [ eof $sock ] } {
        close $sock
     }
}

# handle all connections to port given
# as argument when server was invoked
# by calling newConnection
set port [ lindex $argv 0 ]
socket -server newConnection $port

# enter the event loop by waiting
# on a dummy variable that is otherwise
# unused.
vwait forever
</syntaxhighlight>

另外一个 Tk 的例子（来自[https://web.archive.org/web/20020302153228/http://mini.net/tcl/2563.html A simple A/D clock]）它使用了定时器时间，3行就显示了一个时钟。

<syntaxhighlight lang="Tcl">
 proc every {ms body} {eval $body; after $ms [info level 0]}
 pack [label .clock -textvar time]
 every 1000 {set ::time [clock format [clock sec] -format %H:%M:%S]} ;# RS
</syntaxhighlight>

解释：第一行定义了过程every， 每隔ms毫秒，就重新执行body代码。第二行创建了标签其内容由time变量决定。第3行中设置定时器，time变量从当前时间中每秒更新一次。

== 参考资料 ==
{{reflist}}

== 外部链接 ==
{{wikibooks|Tcl 编程}}
{{commons category|Tcl programming language family}}
* {{Official website}}
* [http://core.tcl.tk/ Tcl Sources]{{Wayback|url=http://core.tcl.tk/ |date=20170505151934 }}, main Tcl and Tk source code download website
* [http://wiki.tcl.tk/ Tcler's Wiki]{{Wayback|url=http://wiki.tcl.tk/ |date=20061219202818 }}
* [http://www.tkdocs.com/ TkDocs]{{Wayback|url=http://www.tkdocs.com/ |date=20170512012343 }}

{{程序设计语言|Tcl}}
{{FOSS}}

{{Authority control}}

[[Category:美国发明|Category:美国发明]]
[[Category:跨平台軟體|Category:跨平台軟體]]
[[Category:动态类型编程语言|Category:动态类型编程语言]]
[[Category:自由編譯器與直譯器|Category:自由編譯器與直譯器]]
[[Category:面向对象的编程语言|Category:面向对象的编程语言]]
[[Category:过程式编程语言|Category:过程式编程语言]]
[[Category:面向文本编程语言|Category:面向文本编程语言]]
[[Category:同像性编程语言|Category:同像性编程语言]]
[[Category:脚本语言|Category:脚本语言]]
[[Category:Tcl编程语言家族|Category:Tcl编程语言家族]]
[[Category:1988年建立的程式語言|Category:1988年建立的程式語言]]