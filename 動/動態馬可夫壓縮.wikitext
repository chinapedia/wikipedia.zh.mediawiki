{{Dead end|time=2020-07-07T01:48:55+00:00}}
{{TA
|G1=IT
|G2=Math
}}
'''動態馬可夫壓縮'''是一種[[无损数据压缩|無損壓縮演算法]]，由[[Gordan_Cormack|Gordan Cormack]]和[[Nigel_Horspool|Nigel Horspool]]發明。該[[演算法|演算法]]類似預測性算術編碼，不同的是輸入資料預測是以[[位元|位元]]為單位，而非[[位元組|位元組]]。動態馬可夫壓縮具有良好的[[壓縮比|壓縮比]]以及中等的運算速率，但是需求較高的[[内存|記憶體]]。

== 演算法 ==

動態馬可夫壓縮的預測以及編碼以[[位元|位元]]為單位，並使用[[算術編碼|算術編碼]]作為編碼方式。

=== 算術編碼 ===

動態馬可夫壓縮使用的位元編碼器具有兩部分：[[預測器|預測器]]和[[位元編碼器|位元編碼器]]。預測器接受''n''位元輸入字串''x'' = ''x''<sub>1</sub>''x''<sub>2</sub>...''x''<sub>''n''</sub>，其發生機率可寫作 
''p''(''x'') = ''p''(''x''<sub>1</sub>)''p''(''x''<sub>2</sub>|''x''<sub>1</sub>)''p''(''x''<sub>3</sub>|''x''<sub>1</sub>''x''<sub>2</sub>)... ''p''(''x''<sub>''n''</sub>|''x''<sub>1</sub>''x''<sub>2</sub>...''x''<sub>''n''–1</sub>)。[[算術編碼器|算術編碼器]]中有兩二進位高精準度參數''p''<sub>high</sub>和''p''<sub>low</sub>，分別代表該模型發生的機率之區間上限與下限。''x''之編碼記作''p''<sub>''x''</sub>，為在''p''<sub>high</sub>和''p''<sub>low</sub>之間長度最短的數。我們永遠可以找到不比夏農極限，log<sub>2</sub> 1/''p''(''x')''，長超過一個位元的''p''<sub>''x''</sub>。要找到這樣的''p''<sub>''x''</sub>，只需要把''p''<sub>high</sub>在第一個和''p''<sub>high</sub>相異位元之後的位元全數捨棄即可。

接下來的壓縮步驟如下。初始''p''<sub>high</sub>設為1，''p''<sub>low</sub>設為0。對於每個位元，預測器預測''p''<sub>0</sub> = ''p''(''x''<sub>''i''</sub> = 0|''x''<sub>1</sub>''x''<sub>2</sub>...''x''<sub>''i''–1</sub>)和''p''<sub>1</sub> = 1 − ''p''<sub>0</sub>，這裡''p''<sub>0</sub>代表該位元為0的機率，''p''<sub>1</sub>代表該位元為1的機率。接著，算術編碼器將當前的機率範圍，也就是(''p''<sub>low</sub>, ''p''<sub>high</sub>)，依''p''<sub>0</sub>和''p''<sub>1</sub>之比例分割成二新區間。下一個位元''x''<sub>''i''</sub>的子機率區間就成為新的機率區間，如此周而復始。

在解壓縮的時候，預測器會對於已解出的位元做出一樣的預測串。算術編碼器接著做出一樣的區間分割，然後輸出對應到每個''p''<sub>''x''</sub>的位元''x''<sub>''i''</sub>。

在實作上，''p''<sub>high</sub>和''p''<sub>low</sub>並非一定要維持在很高的[[精準度|精準度]]。

=== 動態馬可夫壓縮之模型 ===

動態馬可夫壓縮之預測器是一個將位元對應到一對正整數''n''<sub>0</sub>和''n''<sub>1</sub>之表。''n''<sub>0</sub>和''n''<sub>1</sub>分別代表0和1的累計個數。因此，預測下一個位元為0的機率可以寫作''p''<sub>0</sub> = ''n''<sub>0</sub>/''n'' = ''n''<sub>0</sub>/(''n''<sub>0</sub> + ''n''<sub>1</sub>)，而下一個位元為1的機率可以寫作''p''<sub>1</sub> = 1 − ''p''<sub>0</sub> = ''n''<sub>1</sub>/''n''。

在原始的動態馬可夫壓縮中，初始的表為長度為八到十五個位元的二進位數所成集合，而初始態設為任一長度為八的二進位數。計數被初始化為一接近零的小數而非零，這是為了維持解碼出未曾出現過位元的可能。

壓縮和解壓縮的模型是雷同的。對於每一個位元，''p''<sub>0</sub>和''p''<sub>1</sub>先被計算，接著對''x''<sub>''i''</sub>編碼或解碼。

=== 增加新的資料 ===

上述之動態馬可夫模型等價於一次環境模型。然而，使用時可能加入更長的待壓內容以增進壓縮。舉例來說，如果當前資料為A，增加資料為B，則B有可能需要捨棄左邊的某些位元，接著編碼器必須增加一個B的複製C。C的代表資料可視為A在右側增加一個新位元但未捨棄左邊數個位元。A的連結會從B改成C。B和C會進行同樣的預測，也會指向一樣的一對狀態。C之總位元計數''n'' = ''n''<sub>0</sub> + ''n''<sub>1</sub>等於A對輸入位元''x''之計數''n''<sub>''x''</sub>，而B之計數會減掉該數。

舉個例子，假設狀態A代表的資料是11111，當輸入位元為0，狀態轉變為B，其代表資料為110，等於是捨棄了最左邊的三個位元並在右邊加入一個新的位元。狀態A所計零位元之數目為4。狀態B計有3個零位元和7個一位元，故其''p''<sub>1</sub> = 0.7。

{| class="wikitable"
|-
! 狀態
! ''n''<sub>0</sub>
! ''n''<sub>1</sub>
! next<sub>0</sub>
! next<sub>1</sub>
|-
| A = 11111
| 4
| 
| B
| 
|-
| B = 110
| 3
| 7
| E
| F
|}

狀態C為B的複製。C代表的資料為111110。B和C都預測一位元出現的機率為0.7，並且都轉為一樣的狀態，E和F。 

{| class="wikitable"
|-
! 狀態
! ''n''<sub>0</sub>
! ''n''<sub>1</sub>
! next<sub>0</sub>
! next<sub>1</sub>
|-
| A = 11111
| 4
| 
| C
| 
|-
| B = 110
| 1.8
| 4.2
| E
| F
|-
| C = 111110
| 1.2
| 2.8
| E
| F
|}

== 參考項目 ==

1. Gordon Cormack and Nigel Horspool, "Data Compression using Dynamic Markov Modelling", Computer Journal 30:6（December 1987）

== 外部連結 ==

* [http://www.cs.uvic.ca/~nigelh/Publications/DMC.pdf Data Compression Using Dynamic Markov Modelling] {{Wayback|url=http://www.cs.uvic.ca/~nigelh/Publications/DMC.pdf |date=20070417222828 }}

<br>
{{压缩方法}}

[[Category:压缩算法|Category:压缩算法]]