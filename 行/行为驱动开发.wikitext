{{软件开发过程}}

'''行为驱动开发'''（{{lang-en|Behavior-driven development}}，缩写'''BDD'''）是一种[[敏捷软件开发|敏捷软件开发]]的技术，它鼓励软件项目中的开发者、[[品质保证|QA]]和非技术人员或商业参与者之间的协作。BDD最初是由Dan North在2003年命名<ref name="origin">D.North, [http://dannorth.net/introducing-bdd Introducing Behaviour Driven Development] {{Wayback|url=http://dannorth.net/introducing-bdd |date=20210505200651 }}</ref>，它包括验收测试和客户测试驱动等的[[极限编程|极限编程]]的实践，作为对[[测试驱动开发|测试驱动开发]]的回应。在过去数年里，它得到了很大的发展<ref name="evolution">D.North, comments, [http://forums.pragprog.com/forums/95/topics/3035 The RSpec Book - Question about Chapter 11: Writing software that matters] {{Wayback|url=http://forums.pragprog.com/forums/95/topics/3035 |date=20091107220359 }}</ref>。

2009年，在伦敦发表的“敏捷规格，BDD和极限测试交流”<ref>Dan North: [http://skillsmatter.com/podcast/java-jee/how-to-sell-bdd-to-the-business How to sell BDD to the business] {{Wayback|url=http://skillsmatter.com/podcast/java-jee/how-to-sell-bdd-to-the-business |date=20101125022509 }}</ref>中，Dan North对BDD给出了如下定义：
<blockquote>
BDD是第二代的、由外及内的、基于拉(pull)的、多方利益相关者的(stakeholder)、多种可扩展的、高自动化的敏捷方法。它描述了一个交互循环，可以具有带有良好定义的输出（即工作中交付的结果）：已测试过的软件。
</blockquote>

BDD的重点是通过与利益相关者的讨论取得对预期的软件行为的清醒认识。它通过用自然语言书写非程序员可读的测试用例扩展了测试驱动开发方法。行为驱动开发人员使用混合了领域中统一的语言的母语语言来描述他们的代码的目的。这让开发者得以把精力集中在代码应该怎么写，而不是技术细节上，而且也最大程度的减少了将代码编写者的技术语言与商业客户、用户、利益相关者、项目管理者等的领域语言之间来回翻译的代价。

Dan North创造了首个BDD框架：JBehave<ref name="origin" />；之后是Ruby语言的基于故事的RBehave<ref name="rbehave">D.North, [http://dannorth.net/2007/06/introducing-rbehave Introducing RBehave] {{Wayback|url=http://dannorth.net/2007/06/introducing-rbehave |date=20070620230359 }}</ref>，后来被纳入了[[RSpec|RSpec]]项目<ref name="rbehave-integ">S.Miller, [http://www.infoq.com/news/2007/10/RSpec-incorporates-RBehave InfoQ: RSpec incorporates RBehave] {{Wayback|url=http://www.infoq.com/news/2007/10/RSpec-incorporates-RBehave |date=20210301043748 }}</ref>。他还与大卫赫利姆斯基、Aslak Hellesøy及其他人开发了RSpec，并一起编写了《The RSpec Book: Behaviour Driven Development with RSpec, Cucumber, and Friends》。RSpec中第一个基于故事的框架，后来被主要由Aslak Hellesøy开发的[http://cukes.info/ Cucumber] {{Wayback|url=http://cukes.info/ |date=20150416003212 }}取代。

2008 年，参与了围绕BDD进行的首轮讨论的克里斯马茨，提出了特性注入(Feature Injection)<ref name="feature-injection">Chris Matts, [http://picasaweb.google.co.uk/chris.matts/FeatureInjection# Feature Injection]{{Dead link|date=2018年6月 |bot=InternetArchiveBot |fix-attempted=no }}</ref>的想法，使BDD可以覆盖分析空间并提供从初期的展望到编码和发布的整个[[软件生命周期|软件生命周期]]过程的改造。

== BDD 实践 ==

BDD的做法包括：

* 确立不同利益相关者要实现的远景目标
* 使用[[特性注入|特性注入]]方法绘制出达到这些目标所需要的特性
* 通过[[由外及内的软件开发|由外及内的软件开发]]方法，把涉及到的利益相关者融入到实现的过程中
* 使用例子来描述应用程序的行为或代码的每个单元
* 通过自动运行这些例子，提供快速反馈，进行[[回归测试|回归测试]]
* 使用“应当(should)”来描述软件的行为，以帮助阐明代码的职责，以及回答对该软件的功能性的质疑
* 使用“确保(ensure)”来描述软件的职责，以把代码本身的效用与其他单元(element)代码带来的边际效用中区分出来。
* 使用[[mock|mock]]作为还未编写的相关代码模块的替身

== 特性注入 ==

一个公司可能有多个会带来商业利益的不同愿景，通常包括盈利、省钱或保护钱。一旦某个愿景被开发小组确定为当前条件下的最佳愿景，他们将需要更多的帮助来成功实现这个远景。

然后确定该愿景的主要利益相关者，会带入其他的利益相关者。每个相关者要定义为了实现该愿景他们需要完成的目标。例如，法务部门可能要求某些监管要得到满足。市场营销负责人可能要参加将使用该软件的用户的社区。安全专家需要确保该软件不会受到[[SQL注入|SQL注入]]的攻击。

通过这些目标，会定义出要实现这些目标所需要的大概的题目(theme)或者特性集合。例如，“允许用户排序贡献值”或“交易审计”。

从这些主题，可以得到用户功能以及用户界面的第一批细节。

== 由外及内 ==

BDD是由[[商业价值|商业价值]]<ref name="nottdddonewell">E.Keogh, [http://lizkeogh.com/2007/06/13/bdd-tdd-done-well/ BDD - TDD done well?] {{Wayback|url=http://lizkeogh.com/2007/06/13/bdd-tdd-done-well/ |date=20201202182741 }}</ref>--在应用开发中自然增长的商业利益--所驱动的。要认清这个利益的唯一方式，是通过[[用户接口|用户接口]]（通常--但并不总是--图形界面，[[GUI|GUI]]）理解应用程序。

同样，每一段代码，从用户界面开始，可以视作它使用的其他模块代码的利益相关者。每个代码单元(element)通过与其他单元合作，提供部分行为，从而实现整个应用程序的行为。

==参见==
* [[测试驱动开发|测试驱动开发]]，TDD/Test-Driven Development
* [[Scrum|Scrum]]

== 引用 ==
{{Reflist}}

== 外部链接 ==
* [http://dannorth.net/introducing-bdd Dan North's article introducing BDD] {{Wayback|url=http://dannorth.net/introducing-bdd |date=20210505200651 }}
* [http://behavior-driven.org/ Introduction to Behavior Driven Development] {{Wayback|url=http://behavior-driven.org/ |date=20210228002512 }}
* [http://www.oreillynet.com/pub/a/ruby/2007/08/09/behavior-driven-development-using-ruby-part-1.html Behavior Driven Development Using Ruby (Part 1)] {{Wayback|url=http://www.oreillynet.com/pub/a/ruby/2007/08/09/behavior-driven-development-using-ruby-part-1.html |date=20141020171126 }}
* [http://www.oreillynet.com/pub/a/ruby/2007/08/30/behavior-driven-development-using-ruby-part-2.html Behavior-Driven Development Using Ruby (Part 2)] {{Wayback|url=http://www.oreillynet.com/pub/a/ruby/2007/08/30/behavior-driven-development-using-ruby-part-2.html |date=20141019203818 }}
* [http://www.ibm.com/developerworks/java/library/j-cq09187/index.html In pursuit of code quality: Adventures in behavior-driven development by Andrew Glover] {{Wayback|url=http://www.ibm.com/developerworks/java/library/j-cq09187/index.html |date=20201109033023 }}
* [http://www.methodsandtools.com/archive/archive.php?id=78 Behavior Driven Database Development by Pramodkumar Sadalage] {{Wayback|url=http://www.methodsandtools.com/archive/archive.php?id=78 |date=20210424194835 }}
* [http://www.pragprog.com/titles/achbd/the-rspec-book The RSpec Book: Behaviour Driven Development with RSpec, Cucumber, and Friends] {{Wayback|url=http://www.pragprog.com/titles/achbd/the-rspec-book |date=20200108175611 }}
* [http://www.tvagile.com/2009/08/13/good-test-better-code-from-unit-testing-to-behavior-driven-development/ Good Test, Better Code – From Unit Testing to Behavior-Driven Development] {{Wayback|url=http://www.tvagile.com/2009/08/13/good-test-better-code-from-unit-testing-to-behavior-driven-development/ |date=20201202000051 }}
* [http://humanmatters.tumblr.com/post/393569612/whyistartedusingbehaviordrivendevelopmentatwork BDD in practice] {{Wayback|url=http://humanmatters.tumblr.com/post/393569612/whyistartedusingbehaviordrivendevelopmentatwork |date=20191205072910 }}

[[Category:软件开发哲学|Category:软件开发哲学]]
[[Category:软件测试|Category:软件测试]]
[[Category:敏捷軟體開發|Category:敏捷軟體開發]]