{{noteTA|G1=IT}}
{{redirect2|行号|与本條目同名之其他主题|行 (商业)}}

'''行號'''是[[程式語言|程式語言]]中的一個用語，是用來識別[[文本文件|文本文件]]各行的數字。最常見的作法是在各行指定不重複的數字，第一行數字為1，後續各行依序加一。

[[C語言|C語言]]中[[源代码|源代码]]的行號定義成從檔案開始到指定位置之間，所讀到[[換行|換行]]符號的個數再加一<ref>{{cite web|url=http://c0x.coding-guidelines.com/6.10.4.html|title=6.10.4 Line control|date=2008-01-30|accessdate=2011-03-13|author=|archive-date=2011-07-08|archive-url=https://web.archive.org/web/20110708174323/http://c0x.coding-guidelines.com/6.10.4.html|dead-url=no}}</ref>。

在一些古老的[[程式語言|程式語言]]（如[[GW-BASIC|GW-BASIC]]）中，行號是程式語法中必需的一部份。<ref name="GBvsQB">{{cite web|url=http://support.microsoft.com/kb/73084|title=Differences Between GW-BASIC and QBasic|date=2003-05-12|accessdate=2011-03-13|author=|archive-date=2013-10-19|archive-url=https://web.archive.org/web/20131019181140/http://support.microsoft.com/kb/73084|dead-url=no}}</ref>  主要原因是當時的[[作業系統|作業系統]]缺乏交互式的[[文字編輯器|文字編輯器]]，程式編輯器的界面往往只有[[行编辑器|行编辑器]]。指定行號可以使編輯器知道要編輯哪一行，也可以在原代碼的特定位置中插入一行。行號也可以將程式實際需要執行的先後順序和輸入程式時的順序區隔開來。

現在的作業系統普遍都有交互式文字編輯器的功能，因此大部份的程式語言都已不需要行號。

==非連續行號==
在BASIC語言中，一般行號不會使用連續整數（如1, 2, 3, …），會使用像10, 20, 30, …的數列，好處是可以在二行之間再插入程式碼。例如程式設計者在行號20及30的程式之間漏了一些程式，可以增加一行行號為25的程式，其程式就會在行號20及行號30之間。若行號使用連續整數，若要在行號2及3的程式中新增程式，就需要重新編排行號3及後續的所有程式。

即使是使用10,20,30的行號編排方式，若要在二行之間加入超過9行的程式碼，仍然需要重新編排部份程式碼的行號。不過需調整行號的程式碼數量會減少許多，每增加10行程式才需要重新編排一行程式碼的行號。例如要在行號20及行號30之間新增10行，最後行號30的程式需修改行號，但行號40的程式仍可維持原來的行號不需修改。

有些BASIC語言有<tt>RENUM</tt>指令，可以針對整個程式（或程式的一部份）重編等間距的行號，此指令也會同步修改參考到這些行號的程式，因此重編行號不會影響程式的正常運作。

若一些大型的程式包含[[子程序|子程序]]，子程序的啟始行號一般會有較大的整數（如1000, 2000, 3000, …），可以使子程序和主程序之間餘留足夠的空間，子程序彼此之間也可餘留足夠的空間。

==行號和GOTO==
在[[BASIC|BASIC]]等未結構化的程式語言中，行號也用來標示[[分支_(計算機科學)|分支]]指令的目的地。例如：

<syntaxhighlight lang="qbasic">
10 IF X = 42 GOTO 40'最前面的"10"是行號,X=42時會跳到行號=40的程式碼,否則會跳到下一行
20 X = X + 1
30 GOTO 10'跳到行號=10的程式碼
40 PRINT "X是42!"'輸出"X是42!"
</syntaxhighlight>

一般認為[[Goto|Goto]]型式的分支是比較差的程式風格，因為容易形成複雜而難以理解的[[麵條式代碼|麵條式代碼]]，細節可參照[[視為有害|視為有害]]及[[结构化编程|结构化编程]]。雖然一些版本的BASIC仍要求標註行號，但多半會將GOTO改為更結構化的[[流程控制|流程控制]]指令，如[[for迴圈|for迴圈]]及[[while迴圈|while迴圈]]。

像是[[C語言|C語言]]及[[C++|C++]]之類的語言仍保留GOTO指令，不過GOTO的目的地已改用[[標記_(程式語言)|標記]]標示。這類的GOTO指令一般也不建議使用，只建議在少數情形下使用，例如跳出多重[[迴圈|迴圈]]：

<syntaxhighlight lang="c">
while(1) {
  while (1) {
    if (done) {
      goto freedom;
    }
  }
}
freedom:
</syntaxhighlight>

上述的程式可以和以下不使用GOTO的程式比較，以下的程式需在不同位置依done變數值進行判斷，相較之下，上述的程式可讀性較高。

<syntaxhighlight lang="c">
while(1) {
  while (1) {
    if (done) {
      break;
    }
  }
  if (done) {
    break;
  }
}
</syntaxhighlight>

==行號和語法錯誤==
若程式中有[[語法錯誤|語法錯誤]]，[[編譯器|編譯器]]（或[[直譯器|直譯器]]）會在編譯（或執行）過程中出現特定行號的程式有錯的錯誤訊息，此訊息有助於程式設計者找到有誤的程式碼。

在許多現代的程式語言中仍使用行號來標示有錯誤程式的位置，這種的語言中不需要使用者輸入行號，每行的行號是由編譯器（或直譯器）直接計算[[源代码|源代码]]中[[換行|換行]]字元而得，在一些[[集成开发环境|集成开发环境]]中也會自動顯示行號，例如[[Microsoft_Visual_Studio|Microsoft Visual Studio]]其編譯器已和文本編輯器整合，程式設計者可以[[双击|双击]]錯誤訊息，直接跳到有錯誤的程式中進行修正。

==參考資料==
{{reflist}}

[[Category:源代码|Category:源代码]]
[[Category:文本编辑器功能|Category:文本编辑器功能]]
[[Category:带有代码示例的条目|Category:带有代码示例的条目]]