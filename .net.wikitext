{{更新|time=2020-12-10T21:22:56+00:00}}
{{Expand English|.NET Core|time=2021-08-16T21:57:09+00:00}}
{{TA
|G1=IT
|G2=Windows
|G3=FL
}}
{{Infobox software
| name                   = .NET
| logo                   = .NET Logo.svg
| logo_size              = 150px
| developer              = [[.NET基金会|.NET基金会]]
| released               = {{Start date and age|2016|06|27}}
| discontinued           = 
| latest release version = v6.0
| latest release date    = {{Start date and age|2021|11|08}}
<!-- outdated:
| latest preview version = 5.0.0-rc.2<ref>{{Cite web|date=2020-10-13|title=Announcing .NET 5.0 RC 2|url=https://devblogs.microsoft.com/dotnet/announcing-net-5-0-rc-2/|access-date=2020-10-13|website=.NET Blog|language=en-US}}</ref>
| latest preview date    = {{Start date and age|2020|10|13}}
-->
| programming language   = [[C++|C++]]和[[C#|C#]]
| operating system       = [[Windows|Windows]]、[[Linux|Linux]]和[[macOS|macOS]]
| platform               = 
| genre                  = [[软件框架|软件框架]]
| license                = [[MIT许可证|MIT许可证]]<ref name="GHlicense">{{cite web |url=https://github.com/dotnet/core/blob/master/LICENSE.TXT |title=core/LICENSE.TXT |website=[[GitHub|GitHub]] |accessdate=2018-06-04 |archive-date=2020-05-01 |archive-url=https://web.archive.org/web/20200501170817/https://github.com/dotnet/core/blob/master/LICENSE.TXT |dead-url=no }}</ref>
| website                = {{URL|https://dotnet.microsoft.com/}}
}}

'''.NET'''是[[.NET_Framework|.NET Framework]]的新一代版本，是微軟開發的第一個跨平台 ([[Windows|Windows]]、[[Mac_OSX|Mac OSX]]、[[Linux|Linux]]）的應用程式開發框架（Application Framework），未來也將會支援[[FreeBSD|FreeBSD]]與[[Alpine_Linux|Alpine]] 平台。.Net Core也是微軟在一開始發展時就開源的軟體平台<ref>[https://dotnet.github.io/docs/concepts/editions-overview.html Overview of .NET Implementations] {{Webarchive|url=https://archive.is/20160227052805/http://dotnet.github.io/docs/concepts/editions-overview.html |date=2016-02-27 }}，</ref>，它經常也會拿來和現有的開源 .NET 平台[[Mono|Mono]]比較。

由於 .NET Core 的開發目標是跨平台的 .NET 平台，因此 .NET Core 會包含 .NET Framework 的類別庫，但與 .NET Framework 不同的是 .NET Core 採用套件化 (Packages) 的管理方式，應用程式只需要取得需要的組件即可，與 .NET Framework 大包式安裝的作法截然不同，同時各套件亦有獨立的版本線 (Version line)，不再硬性要求應用程式跟隨主線版本。

.NET Core 專案的主要目標有 <ref name="Roadmap" />：

# 支援或可以移轉 (port) 到更多的作業系統平台與晶片架構 (也就是未來計畫會跨出 x86 平台)。
# 具有引人注目的效能與高可靠度。
# 開發人員能快速與直覺的獲取 .NET Core 開發環境。
# 在直覺與具生產力的情況下建造應用程式，使用文件，範例與 NuGet 元件。

== 核心功能 ==

.NET Core 是由許多專案所組成，除了基本的[[函式庫|類別庫]] (Core FX) 之外，也包含採用 RyuJIT 編譯的執行平台 Core CLR、編譯器平台 [[.NET_Compiler_Platform|.NET Compiler Platform]]、採用 AOT 編譯技術運行最佳化的套件 Core RT (.NET Core Runtime)，以及跨平台的 MSIL 編譯器 LLILC (LLVM-based MSIL Compiler) 等專案。

同時，微軟也發展了一個建置技術文件的平台 [[docfx|docfx]] <ref>{{Cite web |url=https://github.com/dotnet/docfx |title=Generate your API documentation with DocFX |accessdate=2016-03-13 |archive-date=2016-04-11 |archive-url=https://web.archive.org/web/20160411175647/https://github.com/dotnet/docfx |dead-url=no }}</ref>，並運用於 .NET Core 的文件網站。

=== RyuJIT ===

RyuJIT 是微軟發展的新式即地編譯器 (Just-in-Time Compiler)，用以取代現有的 .NET Framework 的 JIT 以及 JIT64 即地編譯器，依據微軟公佈的測試報告，RyuJIT 的效能較前一代的 JIT 提升約 25%，並支援 [[SIMD|SIMD]] (Single Instruction, Multiple Data) 的技術。RyuJIT 同時應用於 .NET Framework 4.6 以及 .NET Core<ref>{{Cite web |url=https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md |title=JIT Compiler Structure |accessdate=2016-03-13 |archive-date=2017-03-27 |archive-url=https://web.archive.org/web/20170327153918/https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md |dead-url=no }}</ref>。

=== Core CLR ===

{{main|通用語言運行庫}}

Core CLR 移植 .NET Framework 的 CLR 的功能，包含核心程式庫 mscorlib、JIT 編譯器、垃圾收集器 (GC) 以及其他執行 MSIL 所需要的執行期環境。

=== Core RT ===

Core RT 是以 {{tsl|en|Ahead-of-time compilation|预先编译}}為主的核心功能，在 .NET Core 內稱為 Core RT，在 UWP 則是稱為 .NET Native。

Core RT 會在建造時期 (非執行期) 在編譯時將 MSIL 轉換成平台原生的機器碼，以獲取較短的啟動時間 (JIT 採用的是執行時期編譯，使得啟動時間拉長)，以及記憶體用量減少的優點。Core RT 會在不同的平台使用不同的 AOT 技術：

* Windows 上使用的是 .NET Native。
* Mac OS 與 Linux 上使用的是 LLILC (同時支援 JIT 和 AOT)。

=== LLILC ===

{{main|LLILC}}

LLILC ('''LL'''VM-based MS'''IL''' '''C'''ompiler，英文發音為 "lilac") 是 .NET Core 在非 Windows 平台的 MSIL 編譯器<ref>{{Cite web |url=https://github.com/dotnet/llilc/blob/master/Documentation/llilc-arch.md |title=LLILC Architecture Overview |accessdate=2016-03-13 |archive-date=2017-03-27 |archive-url=https://web.archive.org/web/20170327153556/https://github.com/dotnet/llilc/blob/master/Documentation/llilc-arch.md |dead-url=no }}</ref>，基於 ECMA-335 (Common Language Infrastructure) 的標準將 MSIL 編譯成原生碼執行，適用於可運行 LLVM 的作業系統，例如 Mac OSX 與 Linux 作業系統。

LLILC 同時支援 JIT (內含 RyuJIT 的實作) 以及 AOT (未來將開始支援) 的編譯方式。

=== Roslyn ===

{{main|.NET Compiler Platform}}

.NET Compiler Platform (專案代碼為 Roslyn) 是將 .NET 平台的編譯架構標準化的平台，它可提供程式管理工具 (如整合開發環境) 相當多的情報，用以發展有助於編寫程式與管理程式結構所需要的功能，例如型別資訊、語法結構、參考連結、語意、編譯器、自動化、錯誤回報等等功能，只要是遵循 CLI 標準的程式語言，都可以利用 .NET Compiler Platform 實作出編譯器，讓程式管理工具能實作如語法提示、語法自動完成、關鍵字高亮等視覺化能力。

.NET Compiler Platform 可同時支援 .NET Framework 4.6 以上版本，.NET Core 也原生支援。

== 套件管理 ==

{{main|ASP.NET Core#專案系統}}

=== .NET Core v1.0 時期 ===

.NET Core 的類別庫採用 NuGet 套件化的架構，應用程式只需要使用 project.json 的 dependencies 區段加入指定套件版本的參考，就能獲得該套件的功能，與以往 .NET Framework 大包式的提供方法完全不同。.NET Core 團隊宣佈已經有 98% 的 .NET Framework 主要類別庫移轉到 .NET Core 平台<ref>{{Cite web |url=https://blogs.msdn.microsoft.com/dotnet/2015/11/18/announcing-net-core-and-asp-net-5-rc/ |title=Announcing .NET Core and ASP.NET 5 RC |accessdate=2016-03-13 |archive-date=2016-03-13 |archive-url=https://web.archive.org/web/20160313202829/https://blogs.msdn.microsoft.com/dotnet/2015/11/18/announcing-net-core-and-asp-net-5-rc/ |dead-url=no }}</ref>。

例如下列 project.json 內容，可直接加入 .NET Standard Library (v1.0.0-rc2-23901) 的參考。

<syntaxhighlight lang="json">
{
    "version": "1.0.0-*",
    "compilationOptions": {
        "emitEntryPoint": true
    },

    "dependencies": {
        "NETStandard.Library": "1.0.0-rc2-23901"
    },

    "frameworks": {
        "netstandardapp1.5": {
            "imports": "dnxcore50"
        }
    }
}
</syntaxhighlight>

.NET Standard Library 是一個總括型的 NuGet Package，其內包含了這些類別庫套件：

* Microsoft.DotNet.CoreHost
* NETStandard.Platform
* System.Collections.Concurrent
* System.Linq
* System.Runtime.Numerics
* System.Text.RegularExpressions

其中的 NETStandard.Platform 也是一個總括型套件，包含了下列類別庫套件：

* Microsoft.NETCore.Platforms
* Microsoft.NETCore.Runtime
* Microsoft.Win32.Primitives
* System.AppContext
* System.Collections
* System.Diagnostics.Debug
* System.Diagnostics.Tools
* System.Diagnostics.Tracing
* System.Globalization
* System.Globalization.Calendars
* System.IO
* System.IO.FileSystem
* System.IO.FileSystem.Primitives
* System.Net.Primitives
* System.Net.Sockets
* System.Reflection
* System.Reflection.Extensions
* System.Reflection.Primitives
* System.Reflection.TypeExtensions
* System.Runtime
* System.Runtime.Extensions
* System.Runtime.Handles
* System.Runtime.InteropServices
* System.Runtime.InteropServices.RuntimeInformation
* System.Text.Encoding
* System.Text.Encoding.Extensions
* System.Threading
* System.Threading.Tasks
* System.Threading.Timer

開發人員只需要使用 NETStandard.Library 就能加入所有必要的 .NET Core 類別庫參考，但若不需要這麼多組件，也可以只加入特定的套件即可，不一定都要加入 NETStandard.Library。

=== .NET Core v1.1 時期 ===

對於微軟來說，.NET Core 1.0 (以及早期開發時) 使用 project.json 來處理套件管理與版本相依的問題，是因為很多工具還沒趕上 (例如微軟主力的建置工具 MSBuild)，再加上 project.json/xproj 架構並不相容於以 MSBuild 為主的工具鏈 (Toolchain)，若是要修改成相容 project.json/xproj 架構的話可能會付出極大成本，因此在 .NET Core 1.0 RC2 發布不久，官方就宣布要將 project.json/xproj 系統移回到以 MSBuild 為主的 csproj <ref>{{Cite web |url=https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/ |title=Changes to Project.json |accessdate=2017-03-08 |archive-date=2017-03-08 |archive-url=https://web.archive.org/web/20170308135615/https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/ |dead-url=no }}</ref>，例如下列 csproj 的例子即可看到套件參考的內容。

<syntaxhighlight lang="xml">
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp1.1</TargetFramework>
  </PropertyGroup>

  <PropertyGroup>
    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>
  </PropertyGroup>

  <PropertyGroup>
    <UserSecretsId>aspnet-MyCoolWebApplication-e119bc96-38e9-44ab-b4d3-d54964ade9b1</UserSecretsId>
    <DockerComposeProjectPath>..\docker-compose.dcproj</DockerComposeProjectPath>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.ApplicationInsights.AspNetCore" Version="2.0.0" />
    <PackageReference Include="Microsoft.AspNetCore" Version="1.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.Cookies" Version="1.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="1.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="1.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc" Version="1.1.2" />
    <PackageReference Include="Microsoft.AspNetCore.StaticFiles" Version="1.1.1" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="1.1.1" PrivateAssets="All" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="1.1.1" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer.Design" Version="1.1.1" PrivateAssets="All" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="1.1.0" PrivateAssets="All" />
    <PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" Version="1.1.1" />
    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="1.1.1" />
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="1.1.0" PrivateAssets="All" />
    <PackageReference Include="Microsoft.VisualStudio.Web.BrowserLink" Version="1.1.0" />
  </ItemGroup>
  <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.EntityFrameworkCore.Tools.DotNet" Version="1.0.0" />
    <DotNetCliToolReference Include="Microsoft.Extensions.SecretManager.Tools" Version="1.0.0" />
    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="1.0.0" />
  </ItemGroup>

</Project>
</syntaxhighlight>

由於 .NET Core 移回了 MSBuild 架構，因此在 Visual Studio 2017 的 .NET Core 工具內，已恢復可直接於 IDE 的 GUI 介面中編修套件參考的功能。

== 應用程式類型 ==

.NET Core 基於跨平台能力，並沒有將與 GUI 高度相關的 API 移植到 .NET Core 內，因此像是 [[Windows_Forms|Windows Forms]] 或是 [[Windows_Presentation_Foundation|Windows Presentation Foundation]] (WPF) 並未移植到 .NET Core。.NET Core 支援主控台應用程式 (Console Application) 以及類別庫 (Class Library) 類型的專案。

不過微軟在其 [[Universal_Windows_Platform|Universal Windows Platform]] (UWP) 開發平台使用了 .NET Core<ref>{{Cite web |url=https://msdn.microsoft.com/en-us/magazine/mt590967.aspx |title=.NET and Universal Windows Platform Development |accessdate=2016-03-13 |archive-date=2016-03-23 |archive-url=https://web.archive.org/web/20160323014033/https://msdn.microsoft.com/en-us/magazine/mt590967.aspx |dead-url=no }}</ref>，並且利用 .NET Native 技術將其效能提升至十分接近原生碼的速度。

ASP.NET Core 則以主控台應用程式驅動其代管環境 Kestrel Server 以支援 ASP.NET Core 程式的執行。

== .NET CLI ==

.NET CLI (Command-Line Interface) 指令列工具是 .NET Core 處理建造、執行與編輯工作的主要工具 <ref>{{Cite web |url=https://github.com/dotnet/cli/blob/rel/1.0.0/Documentation/intro-to-cli.md |title=Intro to .NET Core CLI |accessdate=2016-03-13 |archive-date=2020-06-01 |archive-url=https://web.archive.org/web/20200601151130/https://github.com/dotnet/cli/blob/rel/1.0.0/Documentation/intro-to-cli.md/ |dead-url=no }}</ref>，有幾個主要的動作：

{| class="wikitable"
|-
! 指令 !! 說明
|-
| dotnet new || 產生新的基本 .NET 專案內容 (包含 project.json、Program.cs 以及 NuGet.config)
|-
| dotnet restore || 還原所參考的 NuGet 套件
|-
| dotnet build || 建造 .NET 專案
|-
| dotnet publish || 產生可發行的 .NET 專案 (包含所屬的 Runtime)
|-
| dotnet run || 編譯與立即執行 .NET 專案 (較適用於 exe 型專案)
|-
| dotnet repl || 啟動互動式的對話
|-
| dotnet pack || 將專案的產出封裝成 NuGet 套件
|}

== 與其他平台的關係 ==

{{main|.NET Framework|Mono}}

.NET Core 經常會拿來與其他平台做類比，尤其是它的源頭 .NET Framework 以及另一個相似性質的開源平台 Mono。

=== .NET Framework ===

據微軟的說明，.NET Core 和 .NET Framework 是子集 (Subset) 與超集 (Superset) 的關係，.NET Core 將會實作出部份的 .NET Framework 功能 (基本上是不含使用者介面的部份)，例如 JIT (.NET Core 採用 RyuJIT)、垃圾收集器 (GC) 以及型別 (包含基本型別以及泛型型別等)<ref name="corehome" />。未來 .NET Framework 和 .NET Core 也將會是各自發展，但它們也會同時使用彼此的功能，例如 .NET Compiler Platform 與 RyuJIT 等技術。

=== Mono ===

Mono 是另一個已發展許久的 .NET Framework 跨平台開源版本，基本上並不隸屬微軟官方，而是由社群的力量所主導，自成一個生態系統，也開發出了像[[Xamarin|Xamarin]]這樣的跨平台.NET行動應用，.NET Core 與 Mono 未來會是合作的關係，Mono 仍會維持社群力量的維護與發展，而 .NET Core 則會以官方角度來進行發展，兩邊也會一起進行彼此功能上的增進<ref name="corehome" />。

== 與 ASP.NET Core 的關係 ==

{{main|ASP.NET Core}}

.NET Core 與 ASP.NET Core 的關係其實一開始並不是主從關係 <ref>{{Cite web |url=https://dotnet.github.io/about/ |title=About .NET Core |accessdate=2016-03-13 |archive-date=2016-03-13 |archive-url=https://web.archive.org/web/20160313203742/https://dotnet.github.io/about/ |dead-url=no }}</ref>，ASP.NET Core 的開發初期 (ASP.NET 5) .NET Core 還沒有開始起跑，因此 ASP.NET Core 當時有自己的執行期與工具，一開始稱為 Project K，後來改為 DNX (.NET Execution Environment)，DNX 本身就具有可獨立運作的執行能力，不需要依賴 .NET Core 執行，但是這樣會變成 .NET Core 和 ASP.NET Core 雙頭馬車的現象，在 .NET Core 逐漸成熟之後，微軟也決定要將這兩個各自獨立發展的產品線整合在一起，DNX 也將因改用 .NET Core 執行期而終止開發，DNX 的功能將由 .NET Core 以及旗下的 .NET CLI 接替提供，整合後的版本將在 1.0 RC2 時釋出。

== 支援作業系統 ==

.NET 5 支援下列作業系統 <ref name="Roadmap" />：

{| class="wikitable"
|-
! 作業系統 !! 版本 !! 平台 !! 組態
|-
| Windows 用戶端 ||[[Windows_7|Windows 7]] SP1, [[Windows_8.1|8.1]] || x64, x86 ||
|-
| Windows 10 用戶端 ||Version 1607+ || x64, x86, Arm64 ||
|-
| Windows Server || 2012+ || x64, x86 || 全功能版、Server Core
|-
| Windows Nano Server || Version 1809+ || x64
|-
| [[Alpine_Linux|Alpine Linux]] || 3.11+ || x64, Arm64 ||
|-
| [[CentOS|CentOS]] || 7+ || x64 ||
|-
| [[Debian|Debian]] || 9+ || x64, Arm32, Arm64 ||
|-
| [[Fedora|Fedora]] || 33+ || x64 ||
|-
| [[Linux_Mint|Linux Mint]] || 18+ || x64 ||
|-
| [[OpenSUSE|OpenSUSE]] || 15+ || x64 ||
|-
| [[Red_Hat_Enterprise_Linux|Red Hat Enterprise Linux]] || 7+ || x64 ||
|-
| [[SUSE_Linux_Enterprise|SUSE Linux Enterprise]] || 12 SP2+ || x64 ||
|-
| [[Ubuntu|Ubuntu]] || 21.04, 20.04, 18.04, 16.04 || x64, Arm32, Arm64 ||
|-
| [[macOS|macOS]] || 10.13+ || x64 ||
|}

== 參考 ==
<references>
<ref name="Roadmap">{{Cite web |url=https://github.com/dotnet/core/blob/master/roadmap.md |title=NET Core Roadmap |accessdate=2016-03-13 |archive-date=2019-09-06 |archive-url=https://web.archive.org/web/20190906213219/https://github.com/dotnet/core/blob/master/roadmap.md |dead-url=no }}</ref>
<ref name="corehome">{{Cite web |url=https://github.com/dotnet/core |title=.NET Core Home |accessdate=2016-03-13 |archive-date=2016-02-11 |archive-url=https://web.archive.org/web/20160211013427/https://github.com/dotnet/core |dead-url=no }}</ref>
</references>

{{Reflist|30em}}

{{Portal|微軟}}
{{-}}
{{DotNET}}
{{Microsoft APIs}}
{{Microsoft}}
{{視窗元件}}

[[Category:微軟|Category:微軟]]
[[Category:.NET|Category:.NET]]
[[Category:微軟開發工具|Category:微軟開發工具]]
[[Category:微軟API|Category:微軟API]]