{{noteTA
|1=zh-hans:哈希; zh-hant:雜湊;
|2=zh-hans:查找表; zh-hant:尋找表;
}}
{{translating|[[:en:Perfect_hash_function|:en:Perfect_hash_function]]|||time=2016-02-13}}
对集合S的'''完美散列函数'''是一个将S的每个元素映射到一系列无[[碰撞_(電腦科學)|冲突]]的整数的[[哈希函数|哈希函数]]。一个完美散列函数的应用与其他哈希函数的应用基本一致，但不需要任何冲突解决方案。在数学术语中，这是一个[[Partial_function#Total_function|完全]][[单射函数|单射函数]].

== 特性及使用 ==
对于特定集合S的完美散列函数能在常数时间中被计算出，其映射值在一个相对小的范围内，能被一个[[随机化算法|随机化算法]]发现，该算法的操作次数与S的大小成正比.<ref name="发现者">{{Cite journal | doi = 10.1145/828.1884| title = Storing a Sparse Table with 0(1) Worst Case Access Time| journal = Journal of the ACM| volume = 31| issue = 3| pages = 538| year = 1984| last1 = Fredman | first1 = M. L. | last2 = Komlós | first2 = J. N. | last3 = Szemerédi | first3 = E. }}</ref>任何适合在[[哈希表|哈希表]]中使用的完美散列函数需要至少与S的大小成正比的位数。

一个值的位数被限定[[range_(mathematics)|范围]]的完美散列函数能应用于高效查找操作中：假定查找键(key)与集合S（或与集合S关联的值）对应，然后将完美散列函数应用于查找键，得到哈希值（一个整数），然后在[[查找表|查找表]]中取出该整数对应的值。在集合S极少更新且查询频率非常多的情况下，使用完美hash函数是非常有效的。对集合S更新频率的限定是由于对任何集合S的修改，都将导致该完美散列函数退化为非完美散列函数。每次集合S被修改后自动更新hash函数的解决方案被称为[[dynamic_perfect_hashing|dynamic perfect hashing]]，但这类方法非常复杂，难以实现。一个简单的允许动态更新集合S的完美散列函数的替代品叫[[cuckoo_hashing|cuckoo hashing]]。

== 最小完美散列函数 ==
最小完美散列函数是一个能将''n''个键（key）映射到''n''个连续的整数的完美散列函数。 产生的值通常为 [0..''n''−1] 或 [1..''n'']。正式表述如下：设''j''和''k''是有限集合'''K'''的两个元素。F是一个最小完美散列函数[[iff|iff]] F(''j'')=F(''k'')只在''j''=''k''的情况下成立([[单射|单射]])；并且存在整数''a''，使得F的范围为''a''..''a''+|'''K'''|−1。已经在数学上证明，通用的完美hash函数至少需要每个键（key）1.44 比特（bit）<ref>{{Cite book| doi = 10.1007/978-3-642-04128-0_61| chapter = Hash, Displace, and Compress| title = Algorithms - ESA 2009| volume = 5757| pages = 682| series = [[Lecture_Notes_in_Computer_Science|LNCS]]| url = http://cmph.sourceforge.net/papers/esa09.pdf| year = 2009| last1 = Belazzougui| first1 = D.| last2 = Botelho| first2 = F. C.| last3 = Dietzfelbinger| first3 = M.| isbn = 978-3-642-04127-3| access-date = 2016-02-13| archive-date = 2011-07-24| archive-url = https://web.archive.org/web/20110724073514/http://cmph.sourceforge.net/papers/esa09.pdf| dead-url = no}}</ref> 。而当前已知的最小完美hash散列函数每个键需要2.6 比特<ref>{{citation|contribution=Searching|first1=Ricardo|last1=Baeza-Yates|author1-link=Ricardo Baeza-Yates|first2=Patricio V.|last2=Poblete|title=Algorithms and Theory of Computation Handbook: General Concepts and Techniques|edition=2nd|editor1-first=Mikhail J.|editor1-last=Atallah|editor1-link=Mikhail Atallah|editor2-first=Marina|editor2-last=Blanton|publisher=CRC Press|year=2010|isbn=9781584888239}}. See in particular [http://books.google.com/books?id=5uA1c8TuOC0C&pg=SA2-PA10 p. 2-10]</ref>。

对一个最小完美散列函数F，若键以''a''<sub>1</sub>, ''a''<sub>2</sub>, ..., ''a''<sub>''n''</sub>次序给出，对任意键''a''<sub>''j''</sub> and ''a''<sub>''k''</sub>, ''j''<''k''，意味着F(''a''<sub>''j''</sub>)<F(''a''<sub>''k''</sub>).<ref>{{Citation |first=Bob |last=Jenkins |contribution=order-preserving minimal perfect hashing |title=Dictionary of Algorithms and Data Structures |editor-first=Paul E. |editor-last=Black |publisher=U.S. National Institute of Standards and Technology |date=14 April 2009 |accessdate=2013-03-05 |url=http://www.nist.gov/dads/HTML/orderPreservMinPerfectHash.html |archive-date=2009-01-30 |archive-url=https://web.archive.org/web/20090130130143/http://nist.gov/dads/HTML/orderPreservMinPerfectHash.html |dead-url=no }}</ref> Order-preserving minimal perfect hash functions require necessarily Ω(''n'' log ''n'') bits to be represented.<ref>{{Cite book | doi = 10.1145/96749.98233| chapter = Order preserving minimal perfect hash functions and information retrieval| title = Proceedings of the 13th annual international ACM SIGIR conference on Research and development in information retrieval  - SIGIR '90| pages = 279| year = 1990| last1 = Fox | first1 = E. A.| last2 = Chen | first2 = Q. F.| last3 = Daoud | first3 = A. M.| last4 = Heath | first4 = L. S.| isbn = 0897914082}}</ref>，我们称该最小完美散列函数F是保序的。

若对一个最小完美散列函数F，其应用变换后得到的值保持了键（key）的[[字典序|字典序]]，我们称该最小完美散列函数F为单调的。在此情况下，函数产生的值就是输入的键在所有可能的有序键序列中的位置。若被hash的键被存储于有序数组中，已实现一种策略，对每个键存储少量附加位（bits），以取得更快计算hash值的优势。<ref>{{citation
 | last1 = Belazzougui | first1 = Djamal
 | last2 = Boldi | first2 = Paolo
 | last3 = Pagh | first3 = Rasmus
 | last4 = Vigna | first4 = Sebastiano
 | date = November 2008
 | doi = 10.1145/1963190.2025378
 | journal = Journal of Experimental Algorithmics
 | at = Art. no. 3.2, 26pp
 | title = Theory and practice of monotone minimal perfect hashing
 | volume = 16}}.</ref>


== 请参阅 ==
*[[Dynamic_perfect_hashing|Dynamic perfect hashing]]
*[[Pearson_hashing|Pearson hashing]]
*[[Succinct_data_structure|Succinct data structure]]
*[[Universal_hashing|Universal hashing]]

== 索引 ==
{{reflist|30em}}

== 延伸内容 ==
*Richard J. Cichelli. ''Minimal Perfect Hash Functions Made Simple'', Communications of the ACM, Vol. 23, Number 1, January 1980.
* [[Thomas_H._Cormen|Thomas H. Cormen]], [[Charles_E._Leiserson|Charles E. Leiserson]], [[Ronald_L._Rivest|Ronald L. Rivest]], and [[Clifford_Stein|Clifford Stein]]. ''[[Introduction_to_Algorithms|Introduction to Algorithms]]'', Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 11.5: Perfect hashing, pp. 245–249.
* Fabiano C. Botelho, Rasmus Pagh and Nivio Ziviani. [http://arxiv.org/pdf/cs/0702159 "Perfect Hashing for Data Management Applications"].
* Fabiano C. Botelho and [[Nivio_Ziviani|Nivio Ziviani]]. [http://homepages.dcc.ufmg.br/~nivio/papers/cikm07.pdf "External perfect hashing for very large key sets"]{{Wayback|url=http://homepages.dcc.ufmg.br/~nivio/papers/cikm07.pdf |date=20160305012823 }}. 16th ACM Conference on Information and Knowledge Management (CIKM07), Lisbon, Portugal, November 2007.
* Djamal Belazzougui, Paolo Boldi, Rasmus Pagh, and Sebastiano Vigna. [https://web.archive.org/web/20140125080021/http://vigna.dsi.unimi.it/ftp/papers/MonotoneMinimalPerfectHashing.pdf "Monotone minimal perfect hashing: Searching a sorted table with O(1) accesses"]. In Proceedings of the 20th Annual ACM-SIAM Symposium On Discrete Mathematics (SODA), New York, 2009. ACM Press.
* Djamal Belazzougui, Paolo Boldi, Rasmus Pagh, and Sebastiano Vigna. [https://web.archive.org/web/20121018172528/http://siam.org/proceedings/alenex/2009/alx09_013_belazzouguid.pdf "Theory and practise of monotone minimal perfect hashing"]. In Proceedings of the Tenth Workshop on Algorithm Engineering and Experiments (ALENEX). SIAM, 2009.
* Douglas C. Schmidt, [https://web.archive.org/web/20120725000244/http://www.cs.wustl.edu/%7Eschmidt/PDF/gperf.pdf GPERF: A Perfect Hash Function Generator], C++ Report, SIGS, Vol. 10, No. 10, November/December, 1998.

== 外部链接 ==
*[http://burtleburtle.net/bob/hash/perfect.html Minimal Perfect Hashing]{{Wayback|url=http://burtleburtle.net/bob/hash/perfect.html |date=20051226090151 }} by Bob Jenkins
*[http://www.gnu.org/software/gperf/ gperf]{{Wayback|url=http://www.gnu.org/software/gperf/ |date=20160215162822 }} is an [[Open_Source|Open Source]] C and C++ perfect hash generator
*[http://cmph.sourceforge.net/index.html cmph]{{Wayback|url=http://cmph.sourceforge.net/index.html |date=20121215192608 }} is [[Open_Source|Open Source]] implementing many perfect hashing methods
*[http://sux.di.unimi.it/ Sux4J]{{Wayback|url=http://sux.di.unimi.it/ |date=20160214154049 }} is [[Open_Source|Open Source]] implementing perfect hashing, including monotone minimal perfect hashing in Java
*[https://web.archive.org/web/20130729211948/http://www.dupuis.me/node/9 MPHSharp] is [[Open_Source|Open Source]] implementing many perfect hashing methods in C#

{{DEFAULTSORT:Perfect Hash Function}}
[[Category:散列|Category:散列]]
[[Category:散列函數|Category:散列函數]]
[[Category:搜尋演算法|Category:搜尋演算法]]