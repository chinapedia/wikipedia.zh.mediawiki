{{NoteTA
|G1 = IT
}}
{{软件开发过程}}
'''調試工具'''（{{Lang-en|Debugger}}）亦稱'''除錯程式'''、'''調試器'''，指一種用於[[调试|调试]]其它程式的[[電腦程式|電腦程式]]及工具。能夠讓[[程式碼|程式碼]]在'''[[指令組模擬器|指令組模擬器]]（ISS）'''中可以檢查運行狀況以及選擇性地運行，以便[[排错|排错]]、除錯。當開發的進度遇到瓶頸或找不出哪裡有問題時，這技術將是非常有用的。但是將程式運行在除錯器之下，這將比直接在運作的[[系统平台|平台]]以及處理器上執行還要來得慢。

當程式當機時，如果除錯器是屬於來源階段除錯器（source-level debugger）或象徵階段除錯器（symbolic debugger），除錯器即可以顯示出錯誤所在位置的原始碼，並使其於整合開發環境裡也能看見。要是屬於[[低階除錯器|低階除錯器]]（low-level debugger）或機器語言除錯器（machine-language debugger）的話，它將能顯示的是一行一行的[[反組譯|反組譯]]碼（這裡指的當機情況是指，當發生原因是因為程式設計師在設計上的疏失，使得程式無法繼續正常執行的情況。例如程式嘗試去調用某個對在該版本的CPU上而言是不合理的操作，或者是對保護或無法存取的記憶體位置進行寫入）。

典型的除錯器通常能夠在程式執行時擁有以下這些功能，例如[[單步執行|單步執行]]（single-stepping）、利用[[中斷點|中斷點]]（breakpoint）使程式遇到各種種類的事件（event）時[[停止|停止]]（breaking）（一般用於使程式停止在想要檢查的狀態）、以及追蹤某些[[變數|變數]]的變化。有些除錯器也有能力在想要除錯的程式在執行狀態時，去改變它的狀態，而不僅僅只是用來觀察而已。

一個好的除錯器存在的重要性不誇張。就算一個[[程式語言|程式語言]]/[[系统平台|平台]]在電腦的[[行程|行程]]裡運作非常良好。有無除錯器以及除錯器的好壞，對於一個程式語言及平台來說，經常是能不能正常執行的重要因素。總之，軟體要能夠（或經常）執行在不同的除錯器下進行[[軟體測試|測試]]，是非常重要的。不過由於除錯器出現將做對軟體程式的[[內部時間|內部時間]]的不可避免的變動。所以，即使是一個幾近完美的除錯器，在[[多工環境|多工環境]]或[[分散式系統|分散式系統]]下，它也會更難去測試到[[執行時|執行時]]（runtime）的問題。

一個除錯器除了能夠用來[[除錯|除錯]]（debug），同樣的，它也經常被用來作為[[破解軟體|破解軟體]]的工具，像是用來跳過軟體的[[防拷貝保護|防拷貝保護]]，還有[[破解序號驗證|破解序號驗證]]，以及其它[[軟體保護|軟體保護]]功能。

大部份的主流除錯工程，譬如[[gdb|gdb]]和[[dbx|dbx]]提供基於[[主控台的命令提示介面|主控台的命令提示介面]]（console-based command line）。除錯器前端應用，現在普遍是提供給[[整合式開發工具|整合式開發工具]]（IDE）做為[[除錯引撆|除錯引撆]]、[[動態化|動態化]]、[[視覺化|視覺化]]等特點。

== 硬體除錯器 ==
大部份現代[[微處理器|微處理器]]它們都至少會擁有以下這些特點的其中一個包含在他們的[[CPU設計|CPU設計]]裡，使得除錯更加容易：
* 硬體支援[[單步執行|單步執行]]（single-steping）程式，以及設置[[旗標|旗標]]（flag）。
* 利用[[Popek_and_Goldberg_virtualization_requirements|Popek and Goldberg virtualization requirements]]指令組使它更加容易去設計除錯軟體，讓除錯軟體能夠在相同的CPU下執行時，有如使用[[純軟體|純軟體]]除錯一般。這樣CPU就可能在測試程式時，以全速執行的狀態下同時能夠保持程式執行速度，並使得其仍然保持在除錯器的控制之下。
* 在系統編程允許一臺外在硬體除錯器，在測試時重新編輯一個程式系統，如增加或去除指示的[[中斷點|中斷點]]
* 硬體支援資料中斷點（breakpoint）的設置，譬如專門處理[[分頁錯誤|分頁錯誤]]的硬體的資料中斷點的設置。
* 設有[[JTAG|JTAG]]

== 除錯器列表 ==
[[File:Winpdb-1.3.6.png|thumb]] debugging itself.]]
{{see_also|:en:List of debuggers}}
{{div col|colwidth=30em}}
* [[CA/EZTEST|CA/EZTEST]]（Cics Interactive test/debug）
* [[CodeView|CodeView]]
* [[dbg|DBG - A PHP Debugger and Profiler]]
* [[dbx_debugger|dbx]]
* [[DebugView|DebugView]]
* [[Data_Display_Debugger|DDD]], Data Display Debugger
* [[DEBUG_(DOS_Command)|DEBUG]] [[List_of_DOS_commands|DOS Command]]
* [http://www.duxcore.com/products.html DuxDebugger]{{Wayback|url=http://www.duxcore.com/products.html |date=20101203074433 }}—  Debugger Disassembler for Windows 64-bit
* [[Allinea_Distributed_Debugging_Tool|Distributed Debugging Tool]]（DDT）
* [[Dynamic_debugging_technique|Dynamic debugging technique]] (DDT), and its octal counterpart [[Octal_Debugging_Technique|Octal Debugging Technique]]
* [[Eclipse_(software)|Eclipse]]
* [[TotalView|TotalView]]
* [[GNU_Debugger|GNU Debugger]]（GDB）
* [[Insight_Debugger|Insight]]
* [[Interactive_Disassembler|Interactive Disassembler]]（IDA Pro）
* [[Java_Platform_Debugger_Architecture|Java Platform Debugger Architecture]]
* [[JSwat|JSwat]]，開源Java調試工具
* [[Nemiver|Nemiver]], Graphical C/C++ Debugger for the [[GNOME|GNOME desktop environment]]
* [[MacsBug|MacsBug]]
* [[OLIVER_(CICS_interactive_test/debug)|OLIVER (CICS interactive test/debug)]]
* [[OllyDbg|OllyDbg]]
* [[PyDbg|PyDbg]]，開源Python調試工具
* [[IBM_Rational_Purify|IBM Rational Purify]]
* [[sdb|sdb]]
* [[SIMMON|SIMMON]]（Simulation Monitor）
* [[SIMON_(Batch_Interactive_test/debug)|SIMON (Batch Interactive test/debug)]]
* [[SoftICE|SoftICE]]
* [[Turbo_Debugger|Turbo Debugger]]
* [[Ups_(debugger)|Ups]] - C, Fortran source level debugger
* [[WinDbg|WinDbg]]
* [[Valgrind|Valgrind]]
* [[VB_Watch|VB Watch Debugger]] for Visual Basic 6.0
* [[x64dbg|x64dbg]]
* [[Microsoft_Visual_Studio_Debugger|Visual Studio Debugger]]
{{div col end}}

== 參見 ==
{{Wiktionarypar|debugger}}
<div class="references-small" style="-moz-column-count:3; column-count:3;">
* [[除錯|除錯]]
* [[断点|断点]]
* [[性能分析|性能分析]]
* [[程式設計|程式設計]]
* [[軟體測試|軟體測試]]
* {{le|靜態代碼分析工具列表|List of tools for static code analysis}}
* {{le|內存調試|Memory debugger}}
* [[核心转储|核心转储]]
* [[程序错误|程序错误]]
* [[測試覆蓋率|測試覆蓋率]]
</div>

== 參考資料 ==
* [[Jonathan_B._Rosenberg|Jonathan B. Rosenberg]], <cite>How Debuggers Work: Algorithms, Data Structures, and Architecture</cite>, John Wiley & Sons, ISBN 0-471-14966-7

== 外部連結 ==
* [http://www-128.ibm.com/developerworks/web/library/wa-debug.html?ca=dgr-lnxw03Dbug Learn the essentials of debugging]{{Wayback|url=http://www-128.ibm.com/developerworks/web/library/wa-debug.html?ca=dgr-lnxw03Dbug |date=20070218145734 }} How to improve your debugging skills, a good article at [[IBM|IBM]] developerWorks.
* [http://www.openrce.org OpenRCE: Various Debugger Resources and Plug-ins]{{Wayback|url=http://www.openrce.org/ |date=20080828152956 }}

[[Category:除錯器|*]]