'''溯因法'''或'''溯因推理'''（英语：{{lang|en|abductive reasoning}}，也译作'''反绎'''推理、'''反向推理'''），是從事實推理到最佳[[解释|解释]]的过程。换句话说，它是开始于[[事实|事实]]的[[集合_(數學)|集合]]-{}-，并推导出其最佳解释的推理过程。有时使用术语''溯因''（abduction）意味生成[[假设|假设]]来解释观察或结论，但是前者定义在[[哲学|哲学]]和[[计算|计算]]二者中更常见。

演绎和溯因区别在于推理中使用“<math>a</math> [[蕴涵|蕴涵]]<math>b</math>”这种规则的方向（与归纳的比较请参见[[逻辑推理|逻辑推理]]）:

（以下b=结果）。（a=原因）

:演绎：允许推导<math>b</math>作为<math>a</math>的结论，换句话说，演绎是推导已知事物的推论；

:溯因：允许推导<math>a</math>作为<math>b</math>的解释，溯因同演绎反向，通过允许“<math>a</math>蕴涵<math>b</math>”的[[前件|前件]]<math>a</math>推导自结论<math>b</math>；换句话说，溯因是解释已知事物的过程。

在罕见的场合，使用表达「解释结论」而不是「解释」来指名溯因过程的结果。

应用于[[人工智能|人工智能]]中，包括[[故障诊断|故障诊断]]、[[信念修正|信念修正]]和[[自动计划|自动计划]]。

== 基于逻辑的溯因 ==

在[[逻辑|逻辑]]中，溯因法通过表示[[领域|领域]]的逻辑理论<math>T</math>和观察的集合<math>O</math>进行的。溯因是依据<math>T</math>推导<math>O</math>的解释的集合。<math>E</math>要成为<math>O</math>依据<math>T</math>的解释，它应当满足两个条件：

* <math>O</math>推导自<math>E</math>和<math>T</math>；

* <math>E</math>相容于<math>T</math>。

在形式逻辑中，假定<math>O</math>和<math>E</math>为文字的集合。<math>E</math>是<math>O</math>依据理论<math>T</math>的解释的两个条件則形式化为：

:<math>T \cup E \models O</math>；
:<math>T \cup E</math>是相容的。

在满足这两个条件的可能的解释<math>E</math>之中，通常施加一些其他的最小性条件来避免无关的事实（对<math>O</math>的蕴涵没有贡献）包含在解释中。

== 集合覆盖溯因 ==

溯因法的一种不同的形式化是基于逆转计算假设的可见效果的函数。形式化的说，我们给出假设的集合<math>H</math>和表现（manifestation）的集合<math>M</math>；它们相关于领域知识，并以函数<math>e</math>所表示，这个函数接受假设的集合作为参数并给出对应的表现的集合作为结果。换句话说，对于假设的所有子集<math>H' \subseteq H</math>，它们的效果通过<math>e(H')</math>来知道。

溯因法通过找到一个集合<math>H' \subseteq H</math>，使得<math>M \subseteq e(H')</math>进行的。换句话说，溯因是通过找到假设的集合<math>H'</math>，使得它们的效果<math>e(H')</math>包含所有的观察<math>M</math>来进行的。

公共的假定是假设的效果是独立的，就是说，对于所有的<math>H' \subseteq H</math>，<math>e(H') = \bigcup_{h \in H'} e(\{h\})</math>成立。如果这些条件满足，溯因法就可看作[[集合覆盖|集合覆盖]]的一种形式。

== 概念的历史 ==

哲学家[[查尔斯·桑德斯·皮尔士|查尔斯·桑德斯·皮尔士]]把溯因法引入至现代逻辑。在他1900年前的工作中，他主要使用这个术语来意味使用规则来解释观察，比如“如果下雨则草地是湿的”是用来解释草地是湿的的已知规则。

他后来使用这个术语来意味建立解释新观察的新规则，强调溯因法是实际上建立任何新东西的唯一逻辑过程。也就是，他把科学的过程描述为溯因、演绎和蕴涵的组合，强调新知识只能通过溯因建立。

这与在[[社会科学|社会科学]]和[[人工智能|人工智能]]中使用旧含义溯因的常见用法相反。皮爾士声称产生新规则的实际过程不受逻辑规则的“牵制”。他指出人们拥有先天能力来正确的做推理；將拥有这种能力解释为[[进化|进化]]带来的好处。皮爾士对“溯因”的第二种用法类似于[[歸納推理|归纳法]]。

== 应用 ==

溯因法已经应用于[[人工智能|人工智能]]的各种任务。溯因法的最直接的应用是自动检测系统中的故障：给出与有关故障和表现的理论和一组故障（故障的可见效果），可以使用溯因法来推导故障的某个集合好像是问题的原因。

溯因法也用于建模[[自动计划|自动计划]]。给定与动作事件和它们的效果（例如[[事件演算|事件演算]]的公式）有关的逻辑理论，找到达到一个状态的计划的问题可以建模为溯因蕴涵着最终状态是目的状态的文字的序列的问题。

[[信念修正|信念修正]]，由于新信息而调整信仰的过程，是应用溯因法的另一个领域。信仰修正的主要问题是新信息可能与信仰的结集相矛盾，但是结合的结果不能是矛盾的。这个过程可以通过使用溯因法来完成：一旦对观察的一个解释已经找到，整合它不产生矛盾。溯因的这种用法不是直接的，因为向其他命题公式集增加命题公式只能使矛盾更糟糕。转而，溯因是在排序可能世界的优先级的层次上进行的。

== 参见 ==
* [[查尔斯·桑德斯·皮尔士|查尔斯·桑德斯·皮尔士]]
* [[演绎推理|演绎推理]]
* [[可废止推理|可废止推理]]
* [[归纳推理|归纳推理]]
* [[逻辑|逻辑]]
* [[逻辑推理|逻辑推理]]
* [[推理过程|推理过程]]
* [[歸謬法|歸謬法]]

== 引用 ==

* T. Eiter and G. Gottlob (1995). The complexity of logic-based abduction. ''Journal of the ACM'', 42 (1):3-42.

* T. Menzies. Applications of abduction: knowledge-level modelling. ''International Journal of Human-Computer Studies''（1996）, 45 (3):305-335.

* Josephson, John R. and Josephson, Susan G.,（ed.，1994）Abductive Inference: Computation, Philosophy, Technology, Cambridge University Press.

== 外部链接 ==
* [https://web.archive.org/web/20110720020440/http://www.cse.ohio-state.edu/lair/Projects/Abduction/abduction.html John Josephson's page on abduction]
* [https://web.archive.org/web/20030402091853/http://seamonkey.ed.asu.edu/~alex/pub/Peirce/Logic_of_EDA.html Is there a Logic of Exploratory Data Analysis?]

{{邏輯}}
{{FOLDOC}}

[[Category:贝叶斯统计|Category:贝叶斯统计]]
[[Category:知識論|Category:知識論]]
[[Category:推理|Category:推理]]