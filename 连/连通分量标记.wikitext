'''连通分量标记'''（或者称'''连通分量分析''','''连通区域标记'''）是[[图论|图论]]应用中的一种算法，给二值图像中的每个连通区域标上一个特定的标号。该算法可用来对图像的目标进行定位和计数。该算法不要和[[图像分割|图像分割]]相混淆。

连通分量标记通常在计算机视觉领域中对二值图像的连通区域进行检测，也可以处理彩色图像和更高维的数据。<ref name="Samet1988">{{cite journal |author=H. Samet and M. Tamminen |year=1988 |title=Efficient Component Labeling of Images of Arbitrary Dimension Represented by Linear Bintrees |publisher=TIEEE Trans. Pattern Anal. Mach. Intell.   |doi=10.1109/34.3918 |journal=IEEE Transactions on Pattern Analysis and Machine Intelligence |volume=10 |issue=4 |pages=579 }}</ref><ref name="Michael1992">{{Cite journal|author=Michael B. Dillencourt and Hannan Samet and Markku Tamminen |year=1992 |title=A general approach to connected-component labeling for arbitrary image representations |journal=Journal of the ACM |volume=39 |issue=2 |pages=253 |publisher=J. ACM |url=http://doi.acm.org/10.1145/128749.128750 |doi=10.1145/128749.128750 }}</ref>当将其集成到[[图像识别|图像识别]]系统或者是[[人机交互|人机交互]]系统时，该算法也起到重要作用。<ref name="Weijie2006">{{cite journal |author=Weijie Chen, Maryellen L. Giger and Ulrich Bick  |year=2006 |title=A Fuzzy C-Means (FCM)-Based Approach for Computerized Segmentation of Breast Lesions in Dynamic Contrast-Enhanced MR Images  |doi=10.1016/j.acra.2005.08.035 |pmid=16399033 |volume=13 |issue=1 |pages=63–72 |journal=Academic Radiology }}</ref><ref name="Kesheng2003">{{cite web |author=Kesheng Wu, Wendy Koegler, Jacqueline Chen and Arie Shoshani |year=2003 |title=Using Bitmap Index for Interactive Exploration of Large part Datasets |publisher=SSDBM |url=http://csdl.computer.org/comp/proceedings/ssdbm/2003/1964/00/19640065abs.htm |accessdate=2016-04-04 |archive-date=2008-09-06 |archive-url=https://web.archive.org/web/20080906135302/http://csdl.computer.org/comp/proceedings/ssdbm/2003/1964/00/19640065abs.htm |dead-url=no }}</ref>

==概述==
[[File:Square_4_connectivity.png|thumb]] [[File:Square_8_connectivity.png|thumb]]
中间像素和它周围像素的位置决定了是几邻域连接，4邻域连接是周围像素处在中间像素的上下左右的位置，8邻域连接则还包括其对角的4个像素的位置。
==算法==
===一次扫描算法===
===两次扫描算法===

==两次扫描算法的图形解释==
以一个8领域的例子来说明两次扫描算法。
该算法的数据结构为[[并查集|并查集]]。
1，第一次扫描：
将0视为背景像素，1为目标像素。原始图像如下。

[[File:Screenshot-Pixel_Region_(Figure_1).png|800px]]

从左往右从上到下扫描，背景像素保持0不变，遇到1值时，分析它的8邻域（只考虑已被扫描的的像素点，即左边、左上、上和右上这四个方向的像素值）
# 如果这四个方向的值都是0，那么该位置就创建一个新的标号（在原标号上加1）；
# 如果这四个方向的非0值（即标号）都一样，那么该位置标号就是其领域的非0标号；
# 如果这四个方向的非0值有两个不同的标号，那么该位置标号就选其中之一，并记录这两个不同的标号（因为这两个标号是连通的，故视为等同的标号）；
第一次扫描结束后得到如下标好号的图：

[[File:Screenshot-Pixel_Region_(Figure_2).png|800px]]

并且同时得到哪些标号相同的。
{| class="wikitable"
|-
! '''Set ID'''
! '''Equivalent Labels'''
|-
| 1
| 1,2
|-
| 2
| 1,2
|-
| 3
| 3,4,5,6,7
|-
| 4
| 3,4,5,6,7
|-
| 5
| 3,4,5,6,7
|-
| 6
| 3,4,5,6,7
|-
| 7
| 3,4,5,6,7
|}

2，第二次扫描：
合并这些相同的标号，得到结果

[[File:Screenshot-Pixel_Region_(Figure_3).png|800px]]

最后可以将这两个区域以不同颜色显示出来

[[File:Screenshot-Figure_1.png|800px]]

其伪代码如下：
  '''algorithm''' '''''TwoPass'''''(data)
    linked = []
    labels = structure with dimensions of data, initialized with the value of Background
 
    ''First pass''
 
    '''for''' row '''in''' data:
        '''for''' column '''in''' row:
            '''if''' data[row][column] '''is not''' Background
 
                neighbors = connected elements with the current element's value
 
                '''if''' neighbors '''is''' empty
                    linked[NextLabel] = '''''set''''' containing NextLabel
                    labels[row][column] = NextLabel
                    NextLabel += 1
 
                '''else'''
 
                    ''Find the smallest label''
 
                    L = neighbors labels
                    labels[row][column] = '''''min'''''(L)
                    '''for''' label '''in''' L
                        linked[label] = '''''union'''''(linked[label], L)
 
    ''Second pass''
 
    '''for''' row '''in''' data
        '''for''' column '''in''' row
            '''if''' data[row][column] '''is not''' Background
                labels[row][column] = '''''find'''''(labels[row][column])
 
    '''return''' labels

==参考文献==

{{reflist}}

[[Category:图论|Category:图论]]