{{noteTA
|G2=Math
}}
{{傅里叶变换}}
'''离散傅里叶变换'''（{{lang|en|Discrete Fourier Transform}}，缩写为{{lang|en|DFT}}），是[[傅里叶变换|傅里叶变换]]在[[时域|时域]]和[[频域|频域]]上都呈离散的形式，将信号的时域采样变换为其[[离散时间傅里叶变换|DTFT]]的频域采样。

在形式上，变换两端（时域和频域上）的序列是有限长的，而实际上这两组序列都应当被认为是[[离散信号|离散]][[週期函數|周期]][[信号_(信息论)|信号]]的主值序列。即使对有限长的离散信号作DFT，也应当将其看作其周期延拓的变换。在实际应用中通常采用[[快速傅里叶变换|快速傅里叶变换]]计算DFT。

==定义==
对于<math>N</math>点序列<math>\left\{x[n]\right\}_{0\le n <N}</math>，它的离散傅里叶变换（DFT）为
:<math>\hat{x}[k]=\sum_{n=0}^{N-1} e^{-i\frac{2\pi}{N}nk}x[n] \qquad k = 0,1,\ldots,N-1.</math> 
其中<math>e</math>是[[自然对数|自然对数]]的[[底數_(指數)|底数]]，<math>i</math>是[[虚数单位|虚数单位]]。通常以符号<math>\mathcal{F}</math>表示这一变换，即
:<math>\hat{x}=\mathcal{F}x</math>

离散傅里叶变换的逆变换（IDFT）为：
:<math>x\left[n\right]={1 \over N}\sum_{k=0}^{N-1} e^{ i\frac{2\pi}{N}nk}\hat{x}[k] \qquad n = 0,1,\ldots,N-1.</math> 
可以记为：
:<math>x=\mathcal{F}^{-1}\hat{x}</math>
实际上，DFT和IDFT变换式中和式前面的归一化系数并不重要。在上面的定义中，DFT和IDFT前的系数分别为<math>1</math>和<math>\frac{1}{N}</math>。有时会将这两个系数都改成<math>\frac{1}{\sqrt{N}}</math>。

==从连续到离散==

连续时间信号<math>x(t)</math>以及对应的[[连续傅里叶变换|连续傅里叶变换]]<math>\hat{x}(\omega)</math>都是连续函数。由于数位系统只能处理有限长的[[离散信号|离散信号]]，因此必须将<math>x</math>和<math>\hat{x}</math>都离散化，并且建立对应的傅里叶变换。

假设<math>x(t)</math>时限于<math>[0, L]</math>，再通过时域采样将<math>x(t)</math>离散化，就可以得到有限长离散信号，记为<math>x_{discrete}(t)</math>。设采样周期为<math>T</math>，则时域采样点数<math>N=\frac{L}{T}</math>。
:<math>x_{discrete}(t) = x(t)\sum_{n=0}^{N-1}\delta(t-nT)=\sum_{n=0}^{N-1}x(nT)\delta(t-nT)</math>
它的傅里叶变换为
:<math>\hat{x}_{discrete}(\omega) = \sum_{n=0}^{N-1}x(nT)\mathcal{F}\delta(t-nT) =  \sum_{n=0}^{N-1}x(nT)e^{-i n\omega T}</math>
这就是<math>x(t)</math>在时域采样后的连续傅里叶变换，也就是[[离散时间傅里叶变换|离散时间傅里叶变换]]，它在频域依然是连续的。

下面将频域信号转化为有限长离散信号。与对时域信号的处理类似，假设频域信号是带限的，再经过离散化，即可得到有限长离散信号。依据[[采样定理|采样定理]]，频域采样若要能完全重建原信号，频域信号<math>\hat{x}(\omega)</math>应当带限于<math>(0,\frac{1}{2T})</math>。由于时域信号时限于<math>[0, L]</math>，由采样定理以及时频对偶的关系，频域的采样间隔应为<math>1/L</math>。故，频域采样点数为：
:<math>\frac{1/T}{1/L}=N</math>
即频域采样的点数和时域采样同为<math>N</math>，频域采样点为<math>\{\omega_k={2\pi}k/NT\}_{0 \le k < N}</math>。
而DTFT在频域上采样：
:<math>\hat{x}[k] = \hat{x}_{discrete}(\omega_k) = \frac1{T} \sum_{n=0}^{N-1}x[nT]e^{-i\frac{2\pi}{N} nk}</math>
令<math>T=1</math>，将其归一化，就得到前面定义的离散傅里叶变换。因此，DFT就是先将信号在时域离散化，求其连续傅里叶变换后，再在频域离散化的结果。

==DFT与CFT==
{{see also|连续傅里叶变换}}
下面考察离散傅里叶变换与连续傅里叶变换（CFT，Continuous Fourier Transform）的关系。连续傅里叶变换
:<math>\mathcal{F}x(t)=\hat{x}(\omega)=\frac1{L} \int_0^L x(t)e^{-i\omega t} dt</math>
的采样为：
:<math>\hat{x}(\omega_k)=\frac1{L} \int_0^L x(t)e^{-i\omega_k t} dt</math>
将这个积分以黎曼和的形式近似，有：
:<math>\hat{x}(\omega_k) \approx \frac1{L} \sum_{n=0}^{N-1} x[n] e^{-i\omega_k nT} T=\frac1{N}\hat{x}[k]</math>
这一结论指出离散傅里叶变换确实是连续傅里叶变换在某种意义上的近似。不过必须注意以下两点：
* 时域采样必须满足采样定理
* 离散傅里叶变换的处理对象是时限的
为此，通常对连续信号的时域采样再做一次加窗处理（Windowing），这样就得到带限的有限长离散信号。

==DFT与DTFT==
{{see also|离散时间傅里叶变换}}
离散时间傅里叶变换（DTFT）是在时域上对[[连续傅里叶变换|连续傅里叶变换]]的采样。DFT则是在频域上对DTFT的均匀采样。离散信号<math>x[n]</math>（n=0,...,N-1）的DTFT为：
:<math>\hat{x}(e^{i\omega}) = \sum_{n=0}^{N-1}x[n] e^{-in\omega}</math>
对<math>\hat{x}(e^{i\omega})</math>在离散的频点<math>\{\omega_k=k\frac{2\pi}{N}\}_{0 \le k <N}</math>上采样
:<math>\hat{x}[k]=\hat{x}(e^{i\omega_k})=\sum_{n=0}^{N-1} x[n]e^{-i\frac{2\pi}{N}kn} \qquad k=0,\ldots,N-1</math>
即为<math>x</math>的DFT。由于DTFT在频域是周期的，所以在DTFT频域上的均匀采样也应是周期的。<math>\hat{x}[k]</math>实际上是这个周期序列的主值序列。

===栅栏效应===
<math>N</math>点序列的DFT只能在有限的<math>N</math>个频点上观察频谱，这相当于从[[栅栏|栅栏]]的缝隙中观察景色，对于了解信号在整个频域上的特性是不够的。为了观察到其他频率的信息，需要对原信号<math>x[n]</math>做一些处理，以便在不同的频点上采样。

将原来在DTFT频域上的采样点数增加到<math>M</math>点，这样采样点位置变为<math>\{ \omega'_k = e^{ik\frac{2\pi}{M}}\}_{0 \le k < M}</math>。则对应的DFT成为
:<math>\hat{x}'[k]=\hat{x}(e^{ik\omega'_k}) = \sum_{n=0}^{N-1} x[n]e^{-i\frac{2\pi}{M}kn}</math>
若在序列<math>x[n]</math>之后补上M-N个零，设为<math>x'[n]</math>，则上式变为
:<math>\hat{x}'[k] = \sum_{n=0}^{M-1} x'[n]e^{-i\frac{2\pi}{M}kn} = \mathcal{F}x' </math>
因此将<math>x[n]</math>补零再做DFT就可以得到<math>x[n]</math>的DTFT在其他频率上的值，相当于移动了栅栏，因而能够从其他位置进行观察。

===频谱分辨率===
<math>N</math>点DFT的频谱分辨率是<math>2\pi/N</math>。[[#栅栏效应|栅栏效应]]一节指出可以通过补零观察到更多的频点，但是这并不意味着补零能够提高真正的频谱分辨率。这是因为<math>x[n]</math>实际上是<math>x(t)</math>采样的主值序列，而将<math>x[n]</math>补零得到的<math>x'[n]</math>周期延拓之后与原来的序列并不相同，也不是<math>x(t)</math>的采样。因此<math>\hat{x}'</math>与<math>\hat{x}</math>是不同离散信号的频谱。对于补零至<math>M</math>点的<math>x'</math>的DFT，只能说它的分辨率<math>\frac{2\pi}{M}</math>仅具有计算上的意义，<math>\hat{x}'</math>并不是真正的、物理意义上的频谱。频谱分辨率的提高只能在满足采样定理的条件下增加时域采样长度来实现。

==从空间的角度分析==

周期为N的离散信号构成一个''N''维[[欧几里得空间|欧几里得空间]]<math>\mathbb{C}^N</math>。在这一空间上两个信号''x''和''y''的[[内积|内积]]定义为
:<math>\langle x,y \rangle = \sum_{n=0}^{N-1}x[n]y^*\left[n\right]</math>
下面给出<math>\mathbb{C}^N</math>上的一组[[正交基|正交基]]：
:<math>\{ e_k[n] = e^{i\frac{2\pi}{N}kn}\}_{0 \le k < N }</math> 
将信号''x''在这组正交基上分解，得
:<math>x = \sum_{k=0}^{N-1}\frac{\langle x,e_k \rangle}{\Vert e_k \Vert ^2} e_k </math>
令
:<math>\hat{x}[k] = \langle x, e_k \rangle = \sum_{n=0}^{N-1}x[n] e^{-i\frac{2\pi}{N}kn}</math>
此即为离散傅里叶变换。又
:<math>\| e_k \| ^2=N</math>
则有
:<math>x[n] = \frac1{N} \sum_{k=0}^{N-1} \hat{x}[k]e^{i\frac{2\pi}{N}kn}</math>
此即为离散傅里叶变换的逆变换。

由此可知，在正交分解的角度上说，离散周期信号<math>x</math>的离散傅里叶变换<math>\hat{x}</math>实质上是<math>x</math>在正交基<math>\{e_k\}</math>上的分量。而从[[线性变换|线性变换]]的角度上说，<math>\{e_k\}</math>是[[圓周摺積|圆周卷积]]的[[特征向量|特征向量]]，<math>\hat{x}</math>则是对应的[[特征值|特征值]]。

==DFT与圆周卷积==

根据[[卷积定理|卷积定理]]，离散信号x与y的[[圓周摺積|圆周卷积]]对偶于频域上x与y离散傅里叶变换的乘积。下面揭示DFT与圆周卷积的内在关系。

对长为N的离散信号<math>\tilde{x}</math>与<math>\tilde{y}</math>，如果要计算它们的卷积，就必须定义<math>\tilde{x}[n]</math>与<math>\tilde{y}[n]</math>在''0≤n<N''之外的值。如果将<math>\tilde{x}</math>与<math>\tilde{y}</math>作周期为N的延拓，则有

:<math>x[n] = \tilde{x}[n \mod N] \qquad y[n] = \tilde{y}[n \mod N]</math>

如此，周期为N的圆周卷积：

:<math>(x \otimes y) [n] = \sum_{m=0}^{N-1} x[m] y[n-m] = \sum_{m=0}^{N-1} x[n-m] y[m]</math>

卷积的结果仍然是以N为周期的离散信号。

前面指出，<math>e_k</math>是DFT的特征向量，实际上它也是圆周卷积的特征向量。定义x与y的圆周卷积算子：
:<math>{L}x [n] = (x \otimes y) [n] </math>
则<math>e_k</math>与y的圆周卷积为
:<math>{L} e_k [n] = e_k[n] \cdot \sum_{m=0}^{N-1} y[m] e_k[-m]</math>

显然，y的DFT
:<math>\hat{y}[k] = \sum_{m=0}^{N-1} y[m] e_k[-m]</math>
就是圆周卷积的特征值。

==性质==
===完全性===
离散傅里叶变换是可逆的[[线性变换|线性变换]]
:<math>\mathcal{F}:\mathbf{C}^N \to \mathbf{C}^N</math>
其中'''C'''表示[[复数_(数学)|复数集]]。即，任意''N''-维复向量都存在DFT和IDFT，而且其DFT和IDFT也是''N''-维复向量。

=== 正交性 ===
向量组exp（2π''i kn/N''）是''N''-维复数空间上的一组正交基：
:<math>\sum_{n=0}^{N-1}
\left(e^{ \frac{2\pi i}{N} kn}\right)
\left(e^{-\frac{2\pi i}{N} k'n}\right)
=N~\delta_{kk'}
</math>
其中δ<sub>''kn''</sub>是[[Kronecker_delta|Kronecker delta]]。

===移位定理===
时域信号序列<math>x_n</math>的相位移动<math>\exp(2\pi i n m/N)</math>（其中<math>m</math>为整数）在频域反映为“循环移位”，即：频域信号序列<math>X_k</math>变为<math>X_{((k-m))_N}</math>，其中下标是指将''k-m''对''N'' [[余数|取余]]。类似的，由对偶性，时域信号序列的循环移位对应于频域信号序列的相移：
:若<math>\mathcal{F}(\{x_n\})_k=X_k</math>
:则<math>\mathcal{F}(\{ x_n e^{\frac{2\pi i}{N}n m} \})_k=X_{k-m}</math>
:且有<math>\mathcal{F}(\{x_{n-m}\})_k=X_k e^{-\frac{2\pi i}{N}k m}</math>

=== 周期性 ===

上文中[[#DFT与DTFT|DFT与DTFT]]一节已经证明，离散序列的傅里叶变换是周期的。有限长序列<math>x_n</math>的离散傅里叶变换<math>X_k</math>可以被看作是它的周期延拓序列<math>\tilde{x}_n = x_{n \ mod \ N}</math>的离散时间傅里叶变换<math>\tilde{X}_k</math>。由时频对偶性可知<math>X_k</math>也可以被看作它的周期延拓的主值。

上一节的移位定理隐含着DFT的周期性，因为DFT的幅度<math>|X_k|</math>不受输入信号的循环移位的影响，因为时移在频域对偶于相移，循环移位仅仅使DFT的相位产生平移。周期性的边界条件在DFT的许多应用中有重要作用。解[[差分方程|差分方程]]时，就假设边界条件是满足周期性的，这是一个很有用的性质（参见[[#应用|应用]]）。

===普朗歇尔定理与帕塞瓦尔定理 ===
如果''X''<sub>''k''</sub>和''Y''<sub>''k''</sub>分别是''x''<sub>''n''</sub>和''y''<sub>''n''</sub>的离散傅立叶变换，那么就有[[普朗歇尔定理|普朗歇尔定理]]：

:<math>\sum_{n=0}^{N-1} x_n y^*_n = \frac{1}{N} \sum_{k=0}^{N-1} X_k Y^*_k</math>

其中星号表示复共扼。[[帕塞瓦尔定理|帕塞瓦尔定理]]是普朗歇尔定理的一个特例：

:<math>\sum_{n=0}^{N-1} |x_n|^2 = \frac{1}{N} \sum_{k=0}^{N-1} |X_k|^2.</math>

== 应用 ==
DFT在诸多多领域中有着重要应用，下面仅是颉取的几个例子。需要指出的是，所有DFT的实际应用都依赖于计算离散傅里叶变换及其逆变换的快速算法，即[[快速傅里叶变换|快速傅里叶变换]]。

===快速傅里叶变换===
{{main|快速傅里叶变换}}

快速傅里叶变换（即FFT）是计算离散傅里叶变换及其逆变换的快速算法。按照DFT的定义计算一个长为n的序列的DFT需要的计算复杂度达到了<math>\mathcal{O}(n^2)</math>，而同样长度FFT的计算复杂度仅为<math>\mathcal{O}(n \log n)</math>。由于DFT的逆变换可以由DFT表示，所以DFT逆变换的计算同样可以由FFT完成。FFT算法的提出，使DFT得到了广泛的实际应用。

=== 频谱分析 ===

前面指出，[[#DFT与CT|DFT是连续傅里叶变换的近似]]。因此可以对连续信号x（t）均匀采样并截断以得到有限长的离散序列<math>\{x_n\}\,</math>，对这一序列作离散傅里叶变换，可以分析连续信号x（t）频谱的性质。前面还提到DFT应用于频谱分析需要注意的两个问题：即采样可能导致信号混叠和截断信号引起的频谱泄漏。可以通过选择适当的采样频率（见[[奈奎斯特频率|奈奎斯特频率]]）消减[[混叠|混叠]]。选择适当的序列长度并加窗可以抑制频谱泄漏。

===数据压缩===
{{main|数据压缩}}

由于人类感官的分辨能力存在极限，因此很多有损压缩算法利用这一点将语音、音频、图像、视频等信号的高频部分除去。高频信号对应于信号的细节，滤除高频信号可以在人类感官可以接受的范围内获得很高的压缩比。这一去除高频分量的处理就是通过离散傅里叶变换完成的。将时域或空域的信号转换到频域，仅储存或传输较低频率上的系数，在解压缩端采用逆变换即可重建信号。

===解偏微分方程===
{{main|偏微分方程}}

离散傅里叶变换及其多维形式在偏微分方程的求解中也有应用。此时DFT被看作[[傅里叶级数|傅里叶级数]]的近似。傅里叶级数将函数在复指数''e''<sup>''inx''</sup>上展开，这正是微分算子的特征方程：''d''/''dx'' ''e''<sup>''inx''</sup> = ''in'' ''e''<sup>''inx''</sup>。因此，通过傅里叶级数的形式，线性常微分方程被转换为代数方程，而后者是很容易求解的。此时得到的结果是偏微分方程解的级数表示，只要通过DFT逆变换即可得到其一般表示。这种方法被称作谱方法或级数解法。

===长整数与多项式乘法===
目前长[[整数|整数]]或[[多项式|多项式]][[乘法|乘法]]最快速的算法是基于离散傅里叶变换的。由于整数（或多项式）乘法是逐位（或逐项）乘累加的形式，因此整数（或多项式）乘积的数字（或系数）可以用乘数数字（或乘式系数）的[[卷积|卷积]]表示。利用[[卷积定理|卷积定理]]，只要将数字（或系数）序列通过离散傅里叶变换变到频域，就可以将逐个乘累加的卷积变为对位的乘法，从而减少计算量，再以一次逆变换便可以得到乘法结果。需要注意整数乘法还有[[进位|进位]]的问题。下面以多项式乘法为例说明这一应用：

假设需要计算多项式乘法''c''(''x'') = ''a''(''x'')·''b''（''x''），这一乘积结果的各项系数的表达式实际上是线性卷积的形式。由于离散傅里叶变换对应于圆周卷积，因此需要将这两个乘式的系数按照次数升序排列，序列后“补零”，使它们的长度''d''大于两式最高项次数的和：''d'' > deg(''a''(''x'')) + deg(''b''(''x''))。然后作圆周卷积：
:<math>\mathbf{c} = \mathbf{a} \otimes \mathbf{b}</math>
其中'''c'''就是''c''(''x'')系数的向量。由于圆周卷积的DFT是乘积，有：
:<math>\mathcal{F}\mathbf{c} = \mathcal{F}\mathbf{a} \cdot \mathcal{F}\mathbf{b}</math>
则
:<math>\mathbf{c} = \mathcal{F}^{-1}(\mathcal{F}\mathbf{a} \cdot \mathcal{F}\mathbf{b})</math>
利用快速傅里叶变换，这一算法的运算复杂度为<math>\mathcal{O}(N \log N)</math>。

===OFDM===
{{main|OFDM}}

OFDM（正交频分复用）在宽带[[无线通信|无线通信]]中有重要的应用。这种技术将带宽分为''N''个等间隔的子载波，可以证明这些子载波相互正交。尤其重要的是，OFDM调制可以由IDFT实现，而解调可以由DFT实现。OFDM还利用DFT的移位性质，在每个帧头部加上循环前缀（Cyclic Prefix），使得只要信道延时小于循环前缀的长度，就能消除信道延时对传输的影响。

== 特殊例子 ==

=== 数论转换 ===
{{main|數論轉換}}

數論轉換是離散傅利葉轉換(DFT)的一個特例 <math>F=Z/p</math>，此運算是根據[[模运算|模運算]] 而取得的，<math>p</math>需要是[[質數|質數]] ，如此可以建構出[[有限域|有限域]]，並且存在 <math>n</math> 個可以整除 <math>(p-1)</math> 的[[實數|實數]]根。如此可以得到<math>p=k\cdot n+1</math>，<math>k</math> 為正整數。令 <math>\omega</math> 為第 <math>(p-1)</math> 個[[单位根|單位根]]，則第 <math>n</math> 個單位根 <math>\alpha</math> 可以表示成 <math>\alpha=\omega^k</math> 。另外，再令<math>N</math> 為 <math>\alpha</math> 次方 <math>p</math> 模運算之循環個數。

則數論矩陣為

<math>\begin{bmatrix} \underset{-}{F} \end{bmatrix}=\begin{bmatrix} \underset{-}{\alpha^{cr}}\end{bmatrix}\begin{bmatrix} \underset{-}{f} \end{bmatrix} </math>

<math>c </math> 與 <math>r </math> 各為 Column 與 Row  的指數(index), 令 <math>C </math> 與 <math>R </math> 各代表Column 與 Row  的總數，則<math>C=R=N</math>， <math>c\propto \begin{Bmatrix} 0,1,...,C-1 \end{Bmatrix},r\propto \begin{Bmatrix} 0,1,...,R-1 \end{Bmatrix}</math>.

舉個例子來說，當 <math>p=5,\alpha = 2</math> 則

<math>\alpha^1 = 2 \qquad (mod \quad 5) </math> 

<math>\alpha^2 = 4 \qquad (mod \quad 5) </math>

<math>\alpha^3 = 3 \qquad (mod \quad 5) </math>

<math>\alpha^4 = 1 \qquad (mod \quad 5) </math>

因為 <math>\alpha^4 </math> 經 <math>5 </math> 的模運算為 <math>1 </math> ，因此可以判定此情況為 <math>4 </math> 個次方一循環，所以 <math>N=4 </math>，<math>N</math>可以整除 <math>(p-1)</math>。則數論矩陣可以表示成

<math>\begin{bmatrix} F(0) \\ F(1) \\ F(2)\\ F(3) \end{bmatrix}=\begin{bmatrix} 1 & 1 & 1 & 1\\ 1 & 2 & 4 & 3 \\ 1 & 4 & 1 & 4\\ 1 & 3 & 4 & 2 \end{bmatrix}\begin{bmatrix} f(0) \\ f(1) \\ f(2)\\ f(3) \end{bmatrix} </math>

在一些特殊的情況下，令 <math>F=Z/m</math> ，而 <math>m</math> 不是值數也是有意義的。像是 [[Fermat_Number_Transform|Fermat Number Transform]] 中<math>(m=2^k+1)</math>，以及 [[Mersenne_Number_Transform|Mersenne Number Transform]] 中 <math>(m=2^k-1)</math>.

==参阅==

*[[傅里叶级数|傅里叶级数]]
*[[傅里叶变换|傅里叶变换]]
*[[快速傅里叶变换|快速傅里叶变换]]
*[[数字信号处理|数字信号处理]]
*[[Chirp-Z轉換|Chirp-Z轉換]]

==参考文献==
# Oppenheim, Alan V.; Schafer, R. W.; and Buck, J. R., (1999). ''Discrete-time signal processing'', Upper Saddle River, N.J. : Prentice Hall. ISBN 0137549202
# Mallat, S., ''A Wavelet Tour of Signal Processing, Second Edition'', Academic Press, ISBN 0-12-466606-x
# Gill, J., ''Fourier Transform and Its Applications''（[http://www.stanford.edu/class/ee261/]）

{{DSP}}

[[Category:傅里叶变换|L]]
[[category:数字信号处理|L]]
[[Category:酉算子|Category:酉算子]]
[[Category:时间序列降维方法|Category:时间序列降维方法]]

[[cs:Fourierova_transformace#Diskrétní_Fourierova_transformace|cs:Fourierova transformace#Diskrétní Fourierova transformace]]
[[fi:Fourier'n_muunnos#Diskreetti_Fourier'n_muunnos|fi:Fourier'n muunnos#Diskreetti Fourier'n muunnos]]
[[pt:Transformada_de_Fourier#Transformada_discreta_de_Fourier|pt:Transformada de Fourier#Transformada discreta de Fourier]]