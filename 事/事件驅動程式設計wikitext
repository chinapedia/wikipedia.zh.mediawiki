{{noteta|
G1=IT}}
{{编程范式}}

'''事件驅動程式設計'''（{{lang-en|'''Event-driven programming'''}}）是一種電腦[[程式設計|程式設計]][[模型|模型]]。這種模型的程式執行流程是由使用者的動作（如[[滑鼠|滑鼠]]的按鍵，鍵盤的按鍵動作）或者是由其他程式的[[訊息|訊息]]來決定的。相對於批次程式設計（batch programming）而言，程式執行的流程是由[[程式設計師|程式設計師]]來決定。批处理（batch）的程式設計在初級程式設計教學課程上是一種方式。然而，事件驅動程式設計這種設計模型是在[[互動程序|互動程序]]（Interactive program）的情況下孕育而生的。

事件驅動程序可以由任何程式語言來實作，然而使用某些語言來撰寫會比其他的語言來的簡單。有些[[整合開發環境|整合開發環境]]（簡稱IDE）也會影響實作事件驅動程式設計的難易程度。有的 IDE 會使的開發工作變的很簡單，有的則否。

== 概觀 ==
取代傳統上一次等待一個完整的指令然後再做執行的方式，事件驅動程式模型下的系統，基本上的架構是預先設計一個[[事件迴圈|事件迴圈]]所形成的程序，這個事件迴圈程序不斷地檢查目前要處理的資訊，根據要處理的資訊執行一個'''觸發函式'''進行必要的處理。其中這個外部資訊可能來自一個目錄夾中的檔案，可能來自鍵盤或滑鼠的動作，或者是一個時間事件。

對一個[[事件驅動|事件驅動]]（event driven）系統進行程式設計，因此可以視為改寫系統預設觸發函式的行為，來符合自己需要的一種動作。輸入的事件可以放進事件迴圈或者是經由已經註冊的[[中斷|中斷處理器]]來與硬體事件互動；而許多的軟體系統使用了混和這兩種技術的處理。預先設計好的演算法確定了一件事，那就是當他們被需要的時候，就會在適當的時機被觸發。也因此提供了一個模擬中斷驅動環境（interrupt driven environment）的軟體抽象架構。事件驅動程式設計基本上包含了許多小程式片段，這些小程式片段被稱為{{link-en|事件處理器|event handler}}並且被用來回應外部的事件與[[分發事件|分發事件]]。通常尚未被事件處理器處理的事件，都會被系統放在一個稱為[[事件佇列|事件佇列]]的資料結構中，等待被處理。

許多情況下，事件處理器可以自己觸發事件，因此也可能形成一個{{link-en|事件串|event cascade}}。
事件驅動程式設計的著重於彈性以及[[非同步化|非同步化]]上面，並且企圖盡可能的[[modeless|modeless]]。 [[图形用户界面|图形用户界面]]這類程式就是典型的事件驅動設計方式。

計算機[[作業系統|作業系統]]是事件驅動程式的典型範例。在作業系統的最底層，中斷處理器的動作就像是硬體事件的直接處理器，搭配著 CPU 執行分配事件規則動作。對軟體處理程序而言，基本上作業系統可視為一個事件分配器，傳送資料和軟體中斷給使用者自己寫的軟體處理程序。

== 相對應於批次程式設計 ==
下面是兩個數相加的範例，分別用批次版本與事件驅動版本來撰寫
 

=== 批次版本 ===
<pre>
read a number (from the keyboard) and store it in variable A[0]
read a number (from the keyboard) and store it in variable A[1]
print A[0]+A[1]
</pre>

=== 事件驅動版本 ===
<pre>
set counter K to 0
repeat {
   if a number has been entered (from the keyboard) {
       store in A[K] and increment K
       if K equals 2 print A[0]+A[1] and reset K to 0
   }
}
</pre>

== 事件驅動程式框架與程式庫 ==
* Eiffel Event Library [https://web.archive.org/web/20070205064144/http://se.ethz.ch/download/]
* [[Liboop|Liboop]], event loop management library [http://liboop.ofb.net/]{{Wayback|url=http://liboop.ofb.net/ |date=20200409030543 }}
* [[libsigc++|libsigc++]], a [[Callback_(computer_science)|callback]] framework for C++
* [[libevent|libevent]], an event notification library for C/C++
* [[REBECA|REBECA]], Event-Based Electronic Commerce Architecture
* [[Tcl|Tcl]], Tcl language has event driven programming built in
* [[Twisted_(software)|Twisted]], Python
* [[Perl_Object_Environment|POE]], Perl
* [[PRADO|PRADO]], a component-based and event-driven Web programming framework for PHP 5
* [[Gui4Cli|Gui4Cli]], an event driven programming language for Windows

{{编程语言类别}}

[[Category:计算机编程|Shijianqudongchengxusheji]]
[[Category:事件_(计算机)|Category:事件_(计算机)]]
[[Category:带有伪代码示例的条目|Category:带有伪代码示例的条目]]