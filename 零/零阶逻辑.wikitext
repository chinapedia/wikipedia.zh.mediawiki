{{NoteTA
|G1 = IT
|G2 = Math
}}
'''零阶逻辑'''是在与[[布尔函数|布尔函数]]、[[一元谓词演算|一元谓词演算]]、[[命题逻辑|命题逻辑]]或[[句子逻辑|句子逻辑]]有关主题的从业人员中流行的术语。使用这个术语的好处是它确立了更高的抽象层次，在其中上述这些主题之间的很无关紧要的区别可以在这个中肯的[[同构|同构]]下被包容。

向着最初的方向，表1列出了具体类型''X'' × ''Y'' → '''B'''和抽象类型  '''B''' × '''B''' → '''B'''的十六个函数在零阶逻辑的不同语言中的等价表达。

:{|  class="wikitable"  style="background:lightcyan; font-weight:bold; text-align:center;"
|+ '''表1.  在两个变量上的命题形式'''
|- style="background:paleturquoise"
! style="width:15%" | L<sub>1</sub>
! style="width:15%" | L<sub>2</sub>
! style="width:15%" | L<sub>3</sub>
! style="width:15%" | L<sub>4</sub>
! style="width:15%" | L<sub>5</sub>
! style="width:15%" | L<sub>6</sub>
|- style="background:paleturquoise"
|  
| align="right" | x :
| 1 1 0 0
|  
|  
|  
|- style="background:paleturquoise"
|  
| align="right" | y :
| 1 0 1 0
|  
|  
|  
|-
| f<sub>0</sub> || f<sub>0000</sub> || 0 0 0 0 || ( ) || 假 || 0
|-
| f<sub>1</sub> || f<sub>0001</sub> || 0 0 0 1 || (x)(y) || 非x且非y || ¬x ∧ ¬y
|-
| f<sub>2</sub> || f<sub>0010</sub> || 0 0 1 0 || (x) y || y且非x || ¬x ∧ y
|-
| f<sub>3</sub> || f<sub>0011</sub> || 0 0 1 1 || (x) || 非x || ¬x
|-
| f<sub>4</sub> || f<sub>0100</sub> || 0 1 0 0 || x (y) || x且非y || x ∧ ¬y
|-
| f<sub>5</sub> || f<sub>0101</sub> || 0 1 0 1 || (y) || 非y || ¬y
|-
| f<sub>6</sub> || f<sub>0110</sub> || 0 1 1 0 || (x, y) || x不等于y || x ≠ y
|-
| f<sub>7</sub> || f<sub>0111</sub> || 0 1 1 1 || (x y) || 不x且y || ¬x ∨ ¬y
|-
| f<sub>8</sub> || f<sub>1000</sub> || 1 0 0 0 || x y || x且y || x ∧ y
|-
| f<sub>9</sub> || f<sub>1001</sub> || 1 0 0 1 || ((x, y)) || x等于y || x = y
|-
| f<sub>10</sub> || f<sub>1010</sub> || 1 0 1 0 || y || y || y
|-
| f<sub>11</sub> || f<sub>1011</sub> || 1 0 1 1 || (x (y)) || 非x若非y || x → y
|-
| f<sub>12</sub> || f<sub>1100</sub> || 1 1 0 0 || x || x || x
|-
| f<sub>13</sub> || f<sub>1101</sub> || 1 1 0 1 || ((x) y) || 非y若非x || x ← y
|-
| f<sub>14</sub> || f<sub>1110</sub> || 1 1 1 0 || ((x)(y)) || x或y  || x ∨ y
|-
| f<sub>15</sub> || f<sub>1111</sub> || 1 1 1 1 || (( )) || 真 || 1
|}
<br>

===六种语言===
对十六个布尔函数的六种语言按如下次序方便的描述：

* 语言'''L<sub>3</sub>'''描述每个布尔函数''f'' : '''B'''<sup>2</sup> → '''B'''，通过四个布尔值的序列 (''f''(1,1), ''f''(1,0), ''f''(0,1), ''f''(0,0))的方式。这样的一个序列，可能在另一个次序下，并可能带有逻辑值''F''和''T''分别替代布尔值0和1，并通常显示为[[真值表|真值表]]中的一列。

* 语言'''L<sub>2</sub>'''以'''f<sub>i</sub>'''的形式列出十六个函数，这里的索引'''i'''是从'''L<sub>3</sub>'''中的布尔值序列形成的[[位串|位串]]。

* 语言'''L<sub>1</sub>'''符号表示布尔函数'''f<sub>i</sub>'''带有同'''L<sub>2</sub>'''中的二进制索引等价的十进制索引'''i'''。

* 语言'''L<sub>4</sub>'''使用逻辑[[连结词|连结词]]表达了十六个函数，通过以乘积的方式连接函数名字或命题表达式的方式，加上[[极小否定算子|极小否定算子]]家族来表示，用下列各种符号给出几个极小否定算子：

: <math>\begin{matrix}
(\ )      & = & 0 & = & \mbox{false} \\
(x)       & = & \tilde{x} & = & x' \\
(x, y)    & = & \tilde{x}y \lor x\tilde{y} & = & x'y \lor xy' \\
(x, y, z) & = & \tilde{x}yz \lor x\tilde{y}z \lor xy\tilde{z} & = & x'yz \lor xy'z \lor xyz'
\end{matrix}</math>

还要注意<math>(x, y)\!</math>是同<math>x + y\!</math>与<math>x \ne y</math>相同的函数，并且<math>(x, y)\!</math>和<math>(x, y, z)\!</math>的包含析取表示可以替代为排斥析取而不影响意义，因为参与析取的项已经是分离了的。但是，函数<math>(x, y, z)\!</math>和函数<math>x + y + z\!</math>不是相同的东西。

* 语言'''L<sub>5</sub>'''列出了这十六个函数的日常语言表达，它们是多种同义的表达中最简单的。

* 语言'''L<sub>6</sub>'''以在形式逻辑中常用的一些符号表达了十六个函数。

==参见==

* [[布尔函数|布尔函数]]
* [[真值表|真值表]]
* [[逻辑等价|逻辑等价]]
* [[逻辑条件|逻辑条件]]
* [[逻辑与非|逻辑与非]]
* [[逻辑或非|逻辑或非]]

[[Category:布尔代数|L]]
[[Category:形式逻辑系统|L]]