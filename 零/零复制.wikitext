{{NoteTA
|G1=IT
}}
'''零复-{}-制'''（{{lang-en|'''Zero-copy'''}}；也译'''零拷-{}-贝'''）技术是指计算机执行操作时，[[中央处理器|CPU]]不需要先将数据从某处[[随机存取存储器|内存]]复制到另一个特定区域。这种技术通常用于通过网络传输文件时节省CPU周期和[[内存带宽|内存带宽]]。<ref name="lj-zerocopy">{{Cite web |url=http://www.linuxjournal.com/article/6345?page=0,0 |title=Zero Copy I: User-Mode Perspective in Linux Journal - January 1, 2003 |access-date=2017-01-10 |archive-date=2021-02-25 |archive-url=https://web.archive.org/web/20210225144101/https://www.linuxjournal.com/article/6345?page=0,0 |dead-url=no }}</ref>

== 原理 ==
[[操作系统|操作系统]]某些组件（例如[[驱动程序|驱动程序]]、[[文件系统|文件系统]]和[[协议栈|网络协议栈]]）若采用零复制技术，则能极大地增强了特定应用程序的性能，并更有效地利用系统资源。通过使CPU得以完成其他而非将机器中的数据复制到另一处的任务，性能也得到了增强。另外，零复制操作减少了在用户空间与内核空间之间切换模式的次数。

举例来说，如果要读取一个文件并通过网络发送它，传统方式下每个读/写周期都需要复制两次数据和切换两次上下文，而数据的复制都需要依靠CPU。通过零复制技术完成相同的操作，上下文切换减少到两次，并且不需要CPU复制数据。

零复制协议对于网络链路容量接近或超过CPU处理能力的高速网络尤为重要。在这种网络下，CPU几乎将所有时间都花在复制要传送的数据上，因此将成为使通信速率低于链路容量的瓶颈。

== 硬件实现 ==
最早的实现为[[IBM|IBM]] {{tsl|en|OS/360}}，其中一个程序可以指示{{tsl|en|Channel I/O|通道子系统}}从一个文件或设备复制数据块到另一处，无需先转移数据。

实现零复制的软件通常依靠基于[[直接記憶體存取|直接記憶體存取]]（DMA）的复制，以及通过[[内存管理单元|内存管理单元]]（MMU）的内存映射。这些功能需要特定硬件的支持，并通常涉及到特定存储器的对齐。

一种较新的方式为使用{{tsl|en|Heterogeneous System Architecture|异构系统架构}}（HSA），便于[[中央处理器|CPU]]和[[圖形處理器|GPU]]以及其他处理器传递[[指標_(電腦科學)|指针]]。这需要CPU和GPU使用[[均匀访存模型|统一地址空间]]。<ref>{{Cite web|url=http://developer.amd.com/afds/assets/keynotes/Phil%20Rogers%20Keynote-FINAL.pdf|title=The programmer's guide to the APU galaxy|access-date=2017-01-10|archive-date=2013-07-22|archive-url=https://www.webcitation.org/6IImgLusQ?url=http://developer.amd.com/wordpress/media/2013/06/Phil-Rogers-Keynote-FINAL.pdf|dead-url=no}}</ref><ref>{{Cite web|url=http://www.anandtech.com/show/5493/amd-outlines-hsa-roadmap-unified-memory-for-cpugpu-in-2013-hsa-gpus-in-2014|title=AMD Outlines HSA Roadmap: Unified Memory for CPU/GPU|date=2012-02-02|access-date=2017-01-10|archive-date=2013-07-22|archive-url=https://www.webcitation.org/6IImh1IxK?url=http://www.anandtech.com/show/5493/amd-outlines-hsa-roadmap-unified-memory-for-cpugpu-in-2013-hsa-gpus-in-2014|dead-url=no}}</ref>

== 程序访问 ==
数种操作系统都通过特定API支持文件的零复制。

[[Linux内核|Linux内核]]通过各个[[系统调用|系统调用]]支持零复制，例如sys/socket.h的sendfile、sendfile64以及{{tsl|en|Splice (system call)|splice}}。它们部分在[[POSIX|POSIX]]中指定，因此也存在于[[BSD|BSD]]内核或[[IBM_AIX|IBM AIX]]中，部分则是{{tsl|en|Linux kernel API|Linux内核API}}中独有。

[[Microsoft_Windows|Microsoft Windows]]通过TransmitFile API支持零复制。

[[Java|Java]]输入流可以通过java.nio.channels支持零复制。FileChannel的transferTo()方法也可以支持零复制（如果底层操作系统支持）。<ref name="j-zerocopy">{{Cite web |url=http://www.ibm.com/developerworks/library/j-zerocopy/index.html |title=Efficient data transfer through zero copy by Sathish K. Palaniappan and Pramod B. Nagaraja. |access-date=2017-01-10 |archive-date=2018-08-23 |archive-url=https://web.archive.org/web/20180823025052/https://www.ibm.com/developerworks/library/j-zerocopy/index.html |dead-url=no }}</ref>

[[远程直接内存访问|远程直接内存访问]]（RDMA）协议深度依赖零复制技术。

== 参见 ==
* [[驱动程序|驱动程序]]
* [[嵌入式系统|嵌入式系统]]
* [[InfiniBand|InfiniBand]]
* [[可编程输入输出|可编程输入输出]]
* [[Sockets_Direct_Protocol|Sockets Direct Protocol]]
* [[netsniff-ng|netsniff-ng]]

== 参考资料 ==
{{reflist}}

[[Category:软件优化|Category:软件优化]]