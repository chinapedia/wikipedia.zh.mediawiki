{{noteTA
|T=zh-hans:带余除法; zh-hk:帶餘除法; zh-tw:帶餘除法;
|1=zh-hans:余; zh-tw:餘; zh-hk:餘;
}}
[[File:Euclidean_division_example.svg|thumb]]
'''带余除法'''，也称为'''欧几里德除法'''（{{lang-en|Euclidean division}}）是[[数学|数学]]中的一种基本[[算术|算术]]计算方式。给定一个被除数{{math|a}}和一个除数{{math|b}}，带余除法给出一个整数{{math|q}}和一个介于一定范围的余数{{math|r}}，使得下面等式成立：
:<math>a = bq + r</math>
一般限定余数的范围在0与{{math|b}}之间，也有限定在{{math|-b/2}}与{{math|b/2}}之间。这样的限定都是为了使得满足等式的{{math|q}}有且仅有一个。这时候的{{math|q}}称为带余除法的'''商'''。带余除法一般表示为：
:<math>a \div b = q \dots r</math>
表达为：“{{math|a}}除以{{math|b}}等于{{math|q}}，余{{math|r}}”。最常见的带余除法是整数与整数的带余除法（被除数{{math|a}}和除数{{math|b}}都是整数），但实数与整数乃至实数与实数的带余除法也有应用。对一般的抽象代数系统，能够进行带余除法的都是具有[[欧几里德环|欧几里德性质]]的系统。如果余数为零，则称{{math|b}}'''[[整除|整除]]'''{{math|a}}。一般约定除数{{math|b}}不能为0.

带余除法的计算有长久的历史，有各种计算工具和计算方法。最常用的是[[长除法|长除法]]（竖式除法）。带余除法在数论中有不少用途，比如说[[辗转相除法|辗转相除法]]的基本步骤就是带余除法。

==例子==
[[File:DivisionEuclidienne.ogv|thumb]]
以下是整数带余除法的例子：依照[[公历|公历]]，一年中的四月份有30天。每星期有7天，从四月的第一天开始，可以数出有四个星期，此外还有2天。如果要数出5个星期，则还差了5天。带余除法表示，就是：
:<math>30 \div 7 = 4 \dots 2</math>
里面的30是被除数，7是除数，4是带余除法得到的商，2是带余除法得到的余数。日常生活中说：“四月份有四个多星期”，是带余除法的结果。

另一个例子是分配问题。假设有30个[[苹果|苹果]]要分给7个人，每人分的要一样多，那么可以使用带余除法：
:<math>30 \div 7 = 4 \dots 2</math>
这说明每人可以分到4个，还剩余2个。如果每人分5个，则是不够的。每人如果只分3个，则还剩余9个，可以继续分。带余除法说明了在人人分到的要一样多的条件下，每人可以分到的最多苹果数目。

===不同的带余除法===
最基本的带余除法是整数与整数的带余除法，这时商和余数都是整数。实数与整数的带余除法，或实数与实数的带余除法，余数是实数，但不一定是整数。比如说讨论使用[[正弦函数|正弦函数]]构造的数列<math>\{\sin{n} \mid n \in \mathbb{Z} \}</math>时，就需要使用除数为<math>2\pi</math>的带余除法，来讨论每一项具体的取值。

==基本定理==
带余除法限定了余数的范围，使得商唯一存在。整数与整数的带余除法中，余数的范围通常是<math>\{0, 1, \dots , |b| - 1\}</math>这样的{{math|b}}个元素的[[集合_(数学)|集合]]。被除数为[[实数|实数]]的带余除法中，常常会使用介于0和除数|{{math|b}}|之间（大于等于0，严格小于|{{math|b}}|）的半开闭[[区间|区间]]作为余数的范围；另一种常见的范围是大于等于-|{{math|b}}|/2，严格小于|{{math|b}}|/2。带余除法的基本定理说明：整数与整数的带余除法中，只要余数的范围是|{{math|b}}|个整数，并且任何两个数之差都不是{{math|b}}的倍数，那么带余除法的商唯一存在；被除数为实数的除法中，只要余数的范围是一个如同长度为|{{math|b}}|的半开半闭区间，那么带余除法的商唯一存在。{{r|hw|page1=25}}

最常见的带余除法中用到的是整数除以整数的一个版本：
<div style="margin-left:20px; margin-top:10px; padding-left:16px; padding-bottom:10px; padding-right:16px; padding-top:10px; background:#e8ffc4; width:90%;">
对任何给定的整数{{math|a}}和非零整数{{math|b}}，都存在唯一的整数{{math|q}}以及属于集合<math>\{0, 1, \dots , |b| - 1\}</math>的整数{{math|r}}，使得
:<math>a = bq + r</math>
</div>
=== 证明 ===
定理的证明是将整数集合或[[实数|实数]]轴分割成长度为|{{math|b}}|的区间段。證明由兩部分組成 - 首先證明 q 和 r 的存在性，其次證明 q 和 r 的唯一性。

<div style="margin-left:20px; margin-top:10px; padding-left:16px; padding-bottom:10px; padding-right:16px; padding-top:10px; background:#e8ffc4; width:90%;">
<div style="font-size:105%;">'''整数除以整数的情况'''：
</div>
<div style="margin-left:6px;margin-top:6px;font-size:85%;">
假设余数的范围是<math>R = \{r_1, r_2, \dots , r_{|b|}\}</math>，其中任两个数的差都不是{{math|b}}的倍数。那么可以将全体整数分割成以下集合的不交并集：
:<math>\mathbb{Z} = \sqcup_{k\in\mathbb{Z}}\{ r_1 + kb, r_2 + kb, \dots , r_{|b|} + kb \} = \sqcup_{k\in\mathbb{Z}}R_k</math>
其中的<math>\sqcup</math>指两两不[[交集|相交]]的[[并集|并集]]。这样的划分方式下，不会有两个集合有交集。反设有两个集合<math>R_{k}</math>和<math>R_{l}</math>有交集：
:<math>r_i + kb = r_j + lb</math>
那么
:<math>r_i - r_j = (l - k)b</math>
这说明有两个元素的差是{{math|b}}的倍数。矛盾。另一方面，任何一个整数都必然属于某个<math>R_{k}</math>。设有整数{{math|s}}，那么存在整数{{math|q<sub>s</sub>}}使得{{math|q<sub>s</sub> b ≤ s < q<sub>s</sub> b + b}}，也就是说存在<math>\{0, 1, \dots , |b| - 1\}</math>里的一个数{{math|t<sub>s</sub>}}，使得<math>s = q_s b + t_s</math> 同样地，对<math>r_1, r_2, \dots , r_{|b|}</math>里的每一个数{{math|r<sub>i</sub>}}，也各自存在<math>\{0, 1, \dots , |b| - 1\}</math>的一个数{{math|t<sub>i</sub>}}和一个整数{{math|q<sub>i</sub>}}，使得<math>r_i = q_i b + t_i</math> 由于有{{math|b + 1}}个属于集合<math>\{0, 1, \dots , |b| - 1\}</math>的整数，根据[[抽屉原理|抽屉原理]]，必然有两个整数相同。而由前所证，不可能有<math>t_i = t_j</math>的情况，所以只能是存在某个{{math|''i''}}使得<math>t_i = t_s</math>，所以：
:<math>s = q_s b + t_s = q_s b + t_i = q_s b + r_i - q_i b</math>
:<math>s = r_i + (q_s - q_i) b \in R_{q_s - q_i}</math>
因此，任何一个整数都唯一地属于某个<math>R_{k}</math>。而对应的这个整数{{math|k}}就是带余除法唯一确定的商。{{r|burton|page1=18-22}}
</div>
</div>

<div style="margin-left:20px; margin-top:10px; padding-left:16px; padding-bottom:10px; padding-right:16px; padding-top:10px; background:#e8ffc4; width:90%;">
<div style="font-size:105%;">'''被除数是实数的情况'''：
</div>
<div style="margin-left:6px;margin-top:6px;font-size:85%;">
假设余数的范围是{{math|[x, x + b)}}，那么将实数轴<math>\mathbb{R}</math>分割为：
:<math>\mathbb{R} = \sqcup_{k\in\mathbb{Z}}[x+kb, x+(k+1)b )</math>
这个分割方式构成了实数的一个[[集合划分|分划]]，每个实数都唯一地属于其中的某一个区间段，所以被除数{{math|a}}也必然唯一地属于其中的某一个区间段。假设{{math|a}}属于区间段：<math>I_q = [x+q_0b, x+(q_0+1)b)</math>，则说明
:<math>x \le a - q_0 b < x + b</math>
所以带余除法的商唯一确定，就是{{math|q<sub>0</sub>}}。
</div>
</div>

==计算==
计算带余除法和计算除法的手段基本相同。手工计算时常常使用长除法，与除法不同之处是到个位即停止，剩余的即是余数。计算机运算中使用的带余除法一般耗费的时间比相同位数的乘法更久，所以编程时为了减少机器运算量，常常会尽力避免除法运算。一般的编程语言和数学、统计软件中，带余除法运算符（指令）和取模运算符（指令）可能是分开的，也可能是合并的。如在进行带余除法时尽管默认返回的是商，但实际上余数也储存在运算结果中。除数是[[2的冪|2的幂次]]的时候，可以使用右移的位移运算代替带余除法。这是因为计算机储存数据使用的是[[二进制|二进制]]，取一个长度为{{math|''n''}}的二进制数的前{{math|''k''}}位，实际上就是它[[除以2|除以2]]的{{math|''n-k''}}次幂後的商，而後{{math|''n-k''}}位则是其余数。

===算法===
====原始算法====
原始的带余除法算法可以视为是重复使用减法的过程。设要计算{{math|a}}除以{{math|b}}，则在{{math|a}}里面不断地扣除{{math|b}}，直到不能继续扣除（满足余数范围）为止。以{{math|a}}、{{math|b}}都是正整数，余数范围为<math>\{0, 1, \dots , b - 1\}</math>的除法为例，[[伪代码|伪代码]]如下：

<syntaxhighlight lang="c">
function Division(a, b)
    q ← 0; r ← a; 
     while r >= b do
        r ← r - b;
        q ← q + 1;
     end while
     return q, r;
</syntaxhighlight>
这样的算法[[复杂度|复杂度]]是{{math|a/b}}的级别。{{r|cb}}

====使用二分法====
更为优化的算法是使用[[二进制|二进制]]以及[[二分法|二分法]]的结合。算法大致分为两个部分：首先用不断倍增的方式找出一个{{math|a}}所属的区间，然后用二分法不断收窄区间，直到将{{math|a}}限制在一个长度为{{math|b}}的区间为止。举例来说，要计算237除以9，可以首先列出如下表格：
 {| class="wikitable" 
|- 
| style="width:50px;"|0
| style="width:50px;"|1
| style="width:50px;"|2
| style="width:50px;"|3
| style="width:50px;"|4
| style="width:50px;"|5
|- 
|1
|2
|4
|8
|16
|32
|- 
|9
|18
|36
|72
|144
|288
|}
也就是从小到大逐个列出2的幂次与9的乘积，直到超过237为止。其中，2<sup>4</sup> × 9 = 144 是小于等于237的最大数，之後的288就比237更大了。接下来反过来利用2的幂次与9的乘积来计算237除以9。过程如下：
*设{{math|q}} = 16，{{math|p}} = 32；
*237介于144与288之间，而144和288的平均数是216，比237小，令{{math|q}} = (16 + 32)/2 = 24，{{math|p}} = 32；
*216和288的平均数是252，比237大，令{{math|q}} = 24，{{math|p}} = (24 + 32)/2 = 28；
*216和252的平均数是234，比237小，令{{math|q}} = (24 + 28)/2 = 26，{{math|p}} = 28；
*234和252的平均数是243，比237大，令{{math|q}} = 26，{{math|p}} = (26 + 28)/2 = 27；
*最后得到{{math|q}}的值为26，这就是237除以9的商，237减去234剩余的3就是余数。伪代码如下：

<syntaxhighlight lang="c">
function QuickDivision(a, b)
     counter ← 0; power ← 1; mid ← 0; appr ← 0;
     //-{zh-hans:找到2的幂次与除数b的乘积中比被除数a大的最小数对应的幂次;zh-hant:找到2的冪次與除數b的乘積中比被除數a大的最小數對應的冪次}-
     while power * b <= a do
        counter ← counter + 1;
        power ← power * 2 ;
     end while
     p ← power; q ← power / 2;
     //p和q乘以b以後分别是a的上界和下界，以下用二分法不断收窄上下界，直到上下界之差等于b（即p与q之差等于1）为止
     for k from 1 to counter - 1 do
        //计算上下界的平均值
        comp ← (p + q) / 2;
        mid ← comp * b;
        //如果平均值小于等于a，则调高下界，同时记录平均值，否则调低上界
        if mid <= a then
           appr ← mid;
           q ← comp;
        else
           p ← comp;
        end if
     end for 
     //结束后q乘以b的积就是小于等于a的b的倍数中最大的，这说明q就是商；appr是最後一个小于等于a的平均值，所以它和a的差就是余数
     r ← a - appr; 
     return q, r;
</syntaxhighlight>

以上的算法的复杂度在<math>\log_2\left(\frac{a}{b}\right)</math>级别，当<math>\frac{a}{b}</math>较大时，远远比原始的算法快捷。{{r|cb}}

==推广==
===多项式的带余除法===
{{see|多項式長除法}}
以[[体_(数学)|域]]<math>\mathbb{K}</math>为系数的[[多项式|多项式]]构成的[[多项式环|多项式整环]]<math>\mathbb{K}[X]</math>中也可以定义带余除法。设有{{math|''A''}}、{{math|''B''}}两个多项式，其中{{math|''B''}}不是零多项式。则存在由{{math|''A''}}和{{math|''B''}}唯一确定的多项式{{math|''Q''}}和{{math|''R''}}，使得：
:<math>A = BQ + R</math>
并且多项式{{math|''R''}}是零多项式或者它的次数严格小于{{math|''B''}}的次数，称为多项式带余除法的'''余元'''。{{r|zx|page1=10}}

===欧几里德整环===
{{main|歐幾里得整環}}
普通的整数或实数之间的带余除法可以良好定义。在更广泛的代数结构中，能够定义带余除法的代数结构被称为欧几里德整环。定义如下：
:设有[[整环|整环]]<math>D</math>和从<math>D</math>到[[自然数|自然数]]的[[映射|映射]]<math>v: D \setminus \{0_D\} \to \N \cup \{0\}</math>，使得：
::若<math>a, b \in D</math>而<math>b \neq 0_D</math>，则存在<math>q, r \in D</math>使得<math>a = bq+r</math>，而且要么有<math>r=0_D</math>，或者 <math>v(r) < v(b)</math>。
:则称<math>D</math>为欧几里德整环。{{r|hw|page1=141}}
欧几里德整环中，使用一个额外的函数来比较两个元素之间的“大小”关系，从而能够定义带余除法。这个函数也称为范数。欧几里德整环必然是[[主理想整环|主理想整环]]因而也必然是[[唯一分解整环|唯一分解整环]]。{{r|hw|zx|page1=141|page2=16-17}}

==参见==
*[[除法|除法]]
*[[同余|同余]]

==参考来源==
{{reflist|
refs=
<ref name="hw">{{cite book|author=胡冠章, 王殿军|title=应用近世代数|year=2006|publisher=清华大学出版社|location=北京|isbn=9787302125662}}</ref> 
<ref name="zx">{{cite book|author=张贤科, 许甫华|title=高等代数学|year=2004|publisher=清华大学出版社|location=北京|isbn=9787302082279}}</ref> 
<ref name="burton">{{cite book |title=Elementary Number Theory |author=David M. Burton |year=2010 |publisher=McGraw-Hill |isbn=9780073383149|language=en}}</ref>
<ref name="cb">{{cite web|author=Christian Blanchet|title=Division euclidienne et conséquences|url=http://www.math.jussieu.fr/~blanchet/enseignement/2007-8_S2/ch1_div_euclidienne.pdf|work=Groupes et arithmétique, chapitre 1|publisher=Université Paris 7|language=fr|accessdate=2013-11-18|archive-date=2011-02-06|archive-url=https://web.archive.org/web/20110206091342/http://www.math.jussieu.fr/~blanchet/enseignement/2007-8_S2/ch1_div_euclidienne.pdf|dead-url=no}}</ref> 
}}

[[Category:数论|Category:数论]]
[[Category:算术|Category:算术]]
[[Category:除法|Category:除法]]