{{NoteTA
|T = zh-cn:循环 (控制流程); zh-tw:迴圈;
|G1 = IT
|1 = zh-cn:变量; zh-tw:變式;
}}
{{循环结构}}
'''迴圈'''是[[計算機科學|計算機科學]]運算領域的用語，也是一種常見的[[控制流程|控制流程]]。迴圈是一段在程式中只出現一次，但可能會連續執行多次的程式碼。迴圈中的程式碼會執行特定的次數，或者是執行到特定條件成立時結束迴圈，或者是針對某一集合中的所有項目都執行一次。

在一些[[函數程式語言|函數程式語言]]（例如[[Haskell|Haskell]]和[[Scheme|Scheme]]）中會使用[[递归_(计算机科学)|递归]]或[[不动点组合子|不动点组合子]]來達到迴圈的效果，其中[[尾部递归|尾部递归]]是一種特別的递归，很容易轉換為[[迭代|迭代]]。<ref name="博客园arun_yh">{{cite web|author1=arun_yh|title=循环(loop), 递归(recursion), 遍历(traversal), 迭代(iterate)的区别 - arun_yh - 博客园|url=http://www.cnblogs.com/itcomputer/p/5272404.html|website=www.cnblogs.com|publisher=博客园|accessdate=2017-03-09|language=zh-cn|deadurl=yes|archiveurl=https://web.archive.org/web/20170312052618/http://www.cnblogs.com/itcomputer/p/5272404.html|archivedate=2017-03-12}}</ref>

==指定執行次數的迴圈(for loop)==
{{main|For迴圈}}
{{see also|迴圈计数器}}

大部份程式語言都提供迴圈的指令，可以依指定的次數重覆執行一段程式。

若指定的次數N小於1，程式語言會忽略整個迴圈不去執行，若指定的次數N為1，則迴圈只會執行一次。

在迴圈進行時，[[迴圈计数器|迴圈计数器]]也會隨著變化，大部份的程式語言可以允許迴圈计数器上數或是下數，每次的變化量可以是1或是其他不為0的數值。

    FOR I = 1 TO N            '''for''' I := 1 '''to''' N '''do''' '''begin'''
        xxx                       xxx
    NEXT I                    '''end''';
 
    DO I = 1,N                '''for''' ( I=1; I<=N; ++I ) {
        xxx                       xxx
    END DO                    }

在許多程式語言中，迴圈计数器要使用整數才能得到準確的結果。由於硬體的限制，在迴圈计数器使用[[浮點數|浮點數]]時，結果可能會不符預期，如以下的迴圈<br>
    '''for''' X := 0.1 '''step''' 0.1 '''to''' 1.0 '''do'''<br>
依其四捨五入的誤差、硬體及編譯器的差異，不一定會執行10次，可能只會執行9次。而且X的數值可能會有些誤差，不是預期的0.1, 0.2, 0.3, ..., 1.0。

==指定條件的迴圈(while loop/doWhile loop)==
{{main|While迴圈}}
{{seealso|Do-while迴圈}}

大多數的程式語言都有指令，可以在特定條件成立時繼續迴圈的進行，或是特定條件不成立時繼續迴圈的進行，進行到特定條件成立為止。前者一般會標示while，後者一般會標示until。

其判斷條件可能在迴圈一開始就進行，或是在迴圈最後才進行。前者的迴圈不一定會執行，而後者1的迴圈至少會執行一次。

    DO WHILE (test)           '''repeat''' 
        xxx                       xxx 
    LOOP                      '''until''' test;
 
    '''while''' (test) {            '''do'''
        xxx                       xxx
    }                         '''while''' (test);

==指定集合的迴圈==
{{main|Foreach迴圈}}
許多程式語言支援一種特別的迴圈，可以針對一個陣列中的元素或是一個集合中的所有成員進行迴圈中的指令，包括[[Ada|Ada]]、[[D語言|D語言]]、[[Smalltalk|Smalltalk]]、[[Perl|Perl]]、[[C♯|C#]]、[[Visual_Basic|Visual Basic]]、[[Ruby|Ruby]]、[[Python|Python]]、[[Java|Java]]、[[JavaScript|JavaScript]]、[[Fortran#Fortran_95|Fortran 95]]等程式語言都有這類的迴圈結構：

    someCollection '''do''': [:eachElement |xxx].
 
    '''foreach''' (item; myCollection) { xxx }
 
    '''foreach''' someArray { xxx }
 
    Collection<String> coll; '''for''' (String s : coll) {}
 
    '''foreach''' ('''string''' s '''in''' myStringCollection) { xxx }
 
    $someCollection | ForEach-Object { $_ }
    
    '''forall''' ( index = first:last:step... )

==泛用迴圈結構==
有些程式語言有泛用迴圈結構，可以用來表示指定次數或指定條件的迴圈，像C語言的for指令或是[[Common_Lisp|Common Lisp]]語言中的do指令都是這類的例子，不過為了程式的可讀性考量，在這些程式語言中還是儘量使用一些含義較明確的指令（如while指令）。

==無窮迴圈==
[[無窮迴圈|無窮迴圈]]一般會用在有一段程式需要永遠執行，或是該程式在沒有發生特殊事件（如故障）時需要永遠執行的場合，例如一個事件驅動的程式需要持續執行迴圈，處理發生的事件，直到使用者結束或中斷程式為止。

若在指定條件的迴圈中，其判斷條件用到的變數數值永遠不會改變，這種程式錯誤也會使得此迴圈變成無窮迴圈。

==提早結束整個迴圈==
當使用指定次數的迴圈查表時，會希望在查到需要的資料時就可以直接結束迴圈的進行，有些程式語言可以用<code>break</code>或<code>exit</code>的指令達到這様的功能，這些指令會結束這個迴圈，接著會執行迴圈後面的指令。若此迴圈在副程式中，也可以用<code>return</code>中斷迴圈的進行， 同時離開副程式。

以下是[[Ada|Ada]]程式語言的一個範例，利用<code>exit ... when...</code>的方式中提早結束迴圈。

<syntaxhighlight lang="ada">
with Ada.Text IO;
with Ada.Integer Text IO;

procedure Print_Squares is 
    X : Integer;
begin
    Read_Data : loop
        Ada.Integer Text IO.Get(X);
    exit Read_Data when X = 0;
        Ada.Text IO.Put (X * X);
        Ada.Text IO.New_Line;
    end loop Read_Data;
end Print_Squares;
</syntaxhighlight>

[[Python|Python]]支援一個特別的條件判斷式，可以根據最近使用迴圈是否曾用<code>break</code>提早結束而做不同的處理，舉例如下：

<syntaxhighlight lang="python">
for n in set_of_numbers:
    if isprime(n):
        print "Set contains a prime number"
        break
else:
    print "Set did not contain any prime numbers"
</syntaxhighlight>

上例中的<code>else</code>子句是<code>for</code>迴圈的一部份，不是內層<code>if</code>區塊的一部份。Python語言的<code>for</code>迴圈及<code>while</code> 迴圈都支援<code>else</code>子句，當迴圈沒有用<code>break</code>提早結束時就會執行。

==迴圈的特殊指令==
有時在使用迴圈的程式中會希望在特定情形下跳過目前迴圈區塊的指令，回到迴圈開始執行下一個迴圈，一般這類的指令會命名為<code>continue</code>、<code>skip</code>或<code>next</code>，其效果是提早結束這次迴圈的進行，繼續進行下一個迴圈，若此迴圈已經是最後一次執行，這類指令會結束迴圈的進行，繼續進行後續的指令。

像Perl及Ruby等程式語言有<code>redo</code>指令，可以重新執行目前的迴圈，若在指定次數的迴圈中，其迴圈計數器的數值不會變化。Ruby程式語言有<code>retry</code>指令，可以讓迴圈計數器回到初值，重新執行整個迴圈。

==迴圈變式及迴圈不變式==
{{link-en|迴圈變式|Loop variant}}及[[迴圈不變式|迴圈不變式]]是判斷迴圈正確性的工具<ref>{{cite book|last=Meyer|first=Bertrand|title=Eiffel: The Language|url=https://archive.org/details/eiffellanguage0000meye|year=1991|publisher=Prentice Hall|pages=129~131}}</ref>。

迴圈變式是一個初值不為負的整數表示式，在每次執行迴圈時迴圈變式的數值需減少，但在正常的迴圈執行過程中迴圈變式的數值不會變成負值。迴圈變式用來確保迴圈會結束。

迴圈不變式是一個和迴圈有關的判斷式，在第一次進入迴圈之前，迴圈不變式的值需為真，在後續每一次執行迴圈時，其值也要為真。當迴圈正確的結束時，其終止條件和迴圈不變式都會成立。迴圈不變式可用來監控在迴圈進行時，某一指定性質的狀態。

像是[[Eiffel|Eiffel]]之類的程式語言本身就有支援迴圈變式及迴圈不變式，其他語言可能需要有附加元件才能支持此功能，例如[[Java|Java]]就需要配合{{link-en|Java建模語言|Java Modeling Language}}規範的[http://www.eecs.ucf.edu/~leavens/JML//jmlrefman/jmlrefman_12.html#SEC168 loop statements] {{Wayback|url=http://www.eecs.ucf.edu/~leavens/JML//jmlrefman/jmlrefman_12.html#SEC168 |date=20200717141600 }}才能支持此機能。

==不同語言的迴圈比較表==
{| class="wikitable"
|-
! rowspan=2 |[[程式語言|程式語言]]
! colspan=3 | 條件判斷式
! colspan=4 | 迴圈
! rowspan=2 | early exit
! rowspan=2 | continuation
! rowspan=2 | redo
! rowspan=2 | retry
! colspan=2 | 正確性判斷機制
|-
! 迴圈啟始
! 迴圈中間
! 迴圈結尾
! 指定次數
! 指定集合
! 泛用
! 無窮{{ref_label|loop_infinite|1|a}}
! 迴圈變式
! 迴圈不變式
|-
| [[Ada|Ada]]
| {{yes}}
| {{yes}}
| {{yes}}
| {{yes}}
| {{partial|只針對陣列}}
| {{no}}
| {{yes}}
| {{yes|多層迴圈}}
| {{no}}
|
|
|
|
|- 
| [[C語言|C]]
| {{yes}}
| {{no}}
| {{yes}}
| {{no}} {{ref_label|loop_for|2|a}}
| {{no}}
| {{yes}}
| {{no}}
| {{partial|多層迴圈}} {{ref_label|deep_break_c|3|a}}
| {{partial|多層迴圈}} {{ref_label|deep_break_c|3|a}}
| {{no}}
|
|
|
|- 
| [[C++|C++]]
| {{yes}}
| {{no}}
| {{yes}}
| {{no}} {{ref_label|loop_for|2|b}}
| {{yes}} 
| {{yes}}
| {{no}}
| {{partial|多層迴圈}} {{ref_label|deep_break_c|3|b}}
| {{partial|多層迴圈}} {{ref_label|deep_break_c|3|a}}
| {{no}}
|
|
|
|- 
| [[C♯|C#]]
| {{yes}}
| {{no}}
| {{yes}}
| {{no}} {{ref_label|loop_for|2|c}}
| {{yes}}
| {{yes}}
| {{no}}
| {{partial|多層迴圈}} {{ref_label|deep_break_c|3|c}}
| {{partial|多層迴圈}} {{ref_label|deep_break_c|3|a}}
|
|
|
|
|-
| [[Common_Lisp|Common Lisp]]
| {{yes}}
| {{yes}}
| {{yes}}
| {{yes}}
| {{yes}}
| {{yes}}
| {{yes}}
| {{yes|多層迴圈}}
| {{no}}
|
|
|
|
|-
| [[Eiffel|Eiffel]]
| {{yes}}
| {{no}}
| {{no}}
| {{yes}} {{ref_label|count_loop_eiffel|10|a}}
| {{yes}}
| {{yes}}
| {{no}}
| {{partial|一層迴圈}} {{ref_label|count_loop_eiffel|10|a}}
| {{no}}
| {{no}}
| {{no}} {{ref_label|retry_in_eiffel|11|a}}
| {{yes}}
| {{yes}}
|-
| [[F♯|F#]]
| {{yes}}
| {{no}}
| {{no}}
| {{yes}}
| {{yes}}
| {{no}}
| {{no}}
| {{no}} {{ref_label|deep_break_e|6|b}}
| {{no}}
| {{no}}
|
|
|
|-
| [[Fortran#FORTRAN_77|FORTRAN 77]]
| {{yes}}
| {{no}}
| {{no}}
| {{yes}}
| {{no}}
| {{no}}
| {{no}}
| {{partial|一層迴圈}}
| {{yes}}
|
|
|
|
|-
| [[Fortran#FORTRAN_90|FORTRAN 90]]
| {{yes}}
| {{no}}
| {{no}}
| {{yes}}
| {{no}}
| {{no}}
| {{yes}}
| {{yes|多層迴圈}}
| {{yes}}
|
|
|
|
|-
| [[Fortran#FORTRAN_95|FORTRAN 95]]及後續版本
| {{yes}}
| {{no}}
| {{no}}
| {{yes}}
| {{partial|陣列}}
| {{no}}
| {{yes}}
| {{yes|多層迴圈}}
| {{yes}}
|
|
|
|
|-
| [[Haskell|Haskell]]
| {{no}}
| {{no}}
| {{no}}
| {{no}}
| {{yes}}
| {{no}}
| {{yes}}
| {{no}} {{ref_label|deep_break_e|6|a}}
| {{no}}
| {{no}}
|
|
|
|-
| [[Java|Java]]
| {{yes}}
| {{no}}
| {{yes}}
| {{no}} {{ref_label|loop_for|2|d}}
| {{yes}}
| {{yes}}
| {{no}}
| {{yes|多層迴圈}}
| {{yes|多層迴圈}}
| {{no}}
|
|{{yes|非原生(non-native)}} {{ref_label|requires_JML|12|a}}
|{{yes|非原生(non-native)}} {{ref_label|requires_JML|12|a}}
|-
| [[JavaScript|JavaScript]]
| {{yes}}
| {{no}}
| {{yes}}
| {{no}} {{ref_label|loop_for|2|g}}
| {{yes}}
| {{yes}}
| {{no}}
| {{yes|多層迴圈}}
| {{yes|多層迴圈}}
| {{no}}
|
|
|
|-
| [[OCaml|OCaml]]
| {{yes}}
| {{no}}
| {{no}}
| {{yes}}
| {{yes|陣列及列表（list）}}
| {{no}}
| {{no}}
| {{no}} {{ref_label|deep_break_e|6|b}}
| {{no}}
| {{no}}
|
|
|
|- 
| [[PHP|PHP]]
| {{yes}}
| {{no}}
| {{yes}}
| {{no}} {{ref_label|loop_for|2|e}} {{ref_label|loop_for|5|b}}
| {{yes}} {{ref_label|loop_phpforeach|4|a}}
| {{yes}}
| {{no}}
| {{yes|多層迴圈}}
| {{yes|多層迴圈}}
| {{no}}
|
|
|
|- 
| [[Perl|Perl]]
| {{yes}}
| {{no}}
| {{yes}}
| {{no}} {{ref_label|loop_for|2|f}} {{ref_label|loop_for|5|c}}
| {{yes}}
| {{yes}}
| {{no}}
| {{yes|多層迴圈}}
| {{yes|多層迴圈}}
| {{yes}}
|
|
|
|-
| [[Python|Python]]
| {{yes}}
| {{no}}
| {{no}}
| {{no}} {{ref_label|loop_range|5|a}}
| {{yes}}
| {{no}}
| {{no}}
| {{partial|多層迴圈}} {{ref_label|deep_break_e|6|c}}
| {{partial|多層迴圈}} {{ref_label|deep_break_e|6|c}}
| {{no}}
|
|
|
|-
| [[REBOL|REBOL]]
| {{no}} {{ref_label|while|7|a}}
| {{yes}}
| {{yes}}
| {{yes}}
| {{yes}}
| {{no}} {{ref_label|user|8|a}}
| {{yes}}
| {{partial|一層迴圈}} {{ref_label|deep_break_e|6|d}}
| {{no}}
| {{no}}
|
|
|
|-
| [[Ruby|Ruby]]
| {{yes}}
| {{no}}
| {{yes}}
| {{yes}}
| {{yes}}
| {{no}}
| {{yes}}
| {{partial|多層迴圈}} {{ref_label|deep_break_e|6|e}}
| {{partial|多層迴圈}} {{ref_label|deep_break_e|6|e}}
| {{yes}}
| {{yes}}
|
|
|-
| [[Standard_ML|Standard ML]]
| {{yes}}
| {{no}}
| {{no}}
| {{no}}
| {{yes|陣列，列表（list）}}
| {{no}}
| {{no}}
| {{no}} {{ref_label|deep_break_e|6|b}}
| {{no}}
| {{no}}
|
|
|
|-
| [[Visual_Basic_.NET|Visual Basic .NET]]
| {{yes}}
| {{no}}
| {{yes}}
| {{yes}}
| {{yes}}
| {{no}}
| {{yes}}
| {{partial|每種迴圈一層}}
| {{partial|每種迴圈一層}}
|
|
|
|
|- 
| [[Windows_PowerShell|Windows PowerShell]]
| {{yes}}
| {{no}}
| {{yes}}
| {{no}} {{ref_label|loop_for|2|h}}
| {{yes}}
| {{yes}}
| {{no}}
| {{?}}
| {{yes}}
|
|
|
|
|}
# {{note label|loop_infinite|1|a}} 此項只考慮專用的無窮迴圈程式結構，因此<code>while (true)</code>和<code>for ( ; ; )</code>都不算在內。
# {{note label|loop for|2|a}}{{note_label|loop_for|2|b}}{{note_label|loop_for|2|c}}{{note_label|loop_for|2|d}}{{note_label|loop_for|2|e}}{{note_label|loop_for|2|f}}{{note_label|loop_for|2|g}}{{note_label|loop_for|2|h}} C語言的<code>for (''init''; ''test''; ''increment'')</code>迴圈是一個通用的迴圈指令，累加量也不一定要為1。
# {{note label|deep_break_c|3|a}}{{note label|deep_break_c|3|b}}{{note label|deep_break_c|3|c}}在C、C++及C#中，跳出多層迴圈可以用label和goto指令達到。
# {{note label|loop_phpforeach|4|a}} 在PHP 5中已[http://www.php.net/manual/en/language.oop5.iterations.php 支援] {{Wayback|url=http://www.php.net/manual/en/language.oop5.iterations.php |date=20210518224709 }}配合物件的迴圈。
# {{note label|loop_range|5|a}}{{note label|loop_range|5|b}}{{note label|loop_range|5|c}} 指定次數的迴圈可以用重覆incrementing list或generator的方式來達到其效果，例如Python中的<code>range()</code>。
# {{note label|deep_break_e|6|a}}{{note label|deep_break_e|6|b}}{{note label|deep_break_e|6|c}}{{note label|deep_break_e|6|d}}{{note label|deep_break_e|6|e}} 可以用[[异常处理|异常处理]]來跳出多層迴圈。
# {{note_label|while|7|a}} 沒有專門指令，但<code>while</code>指令可以用作此用途。
# {{note_label|user|8|a}} 沒有專門指令，但使用者可以定義通用迴圈指令。
# {{note_label|loop_foreach|9|a}} 正在計劃的[[C++0x|C++0x]]標準中已加入[[C++0x#以範圍為基礎的_for_迴圈|以範圍為基礎的 for 迴圈]]。[[标准模板库|标准模板库]]（STL）中有<code>std::for_each</code>[[模板_(C++)|模板]]函數，可以對STL容器（container）的每個元素重複呼叫一個一元函數<ref>[http://www.sgi.com/tech/stl/for_each.html for_each] {{Wayback|url=http://www.sgi.com/tech/stl/for_each.html |date=20171104211936 }}. Sgi.com. Retrieved on 2010-11-09.</ref>。製作STL容器的[[巨集|巨集]]也可以達到類似的效果<ref>[http://boost-sandbox.sourceforge.net/libs/foreach/doc/html/ Chapter 1. Boost.Foreach] {{Wayback|url=http://boost-sandbox.sourceforge.net/libs/foreach/doc/html/ |date=20100129070613 }}. Boost-sandbox.sourceforge.net (2009-12-19). Retrieved on 2010-11-09.</ref>。
# {{note_label|count_loop_eiffel|10|a}} 利用整數區間的迭代可以達到指定次數迴圈的效果， early exit可以用多增加一個exit的條件來達成。
# {{note_label|retry_in_eiffel|11|a}} Eiffel支援保留字<code>retry</code>，不過是用在[[契约式设计|契约式设计]]的[[異常處理|異常處理]]，不是迴圈的流程控制指令。
# {{note_label|requires_JML|12|a}} 需要配合{{link-en|Java建模语言|Java Modeling Language}}（JML）。

==參考資料==
{{reflist}}

[[Category:控制流程|Category:控制流程]]