{{NoteTA
|G1 = IT
}}
{{Selfref|关于维基百科中的名字空间，請参见「'''[[Help:名字空间|Help:名字空间]]'''」。}}

'''命名空间'''（{{lang-en|Namespace}}），也称'''-{zh-cn:命名空间; zh-tw:名字空間;}-'''、'''名称空间'''等，它表示着一个[[标识符|标识符]]（identifier）的可见范围。一个标识符可在多个命名空间中定义，它在不同命名空间中的含义是互不相干的。这样，在一个新的命名空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他命名空间中。

例如，设Bill是X公司的员工，工号为123，而John是Y公司的员工，工号也是123。由于两人在不同的公司工作，可以使用相同的工号来标识而不会造成混乱，这里每个公司就表示一个独立的命名空间。如果两人在同一家公司工作，其工号就不能相同了，否则在支付工资时便会发生混乱。

这一特点是使用命名空间的主要理由。在大型的[[计算机程序|计算机程序]]或[[文档|文档]]中，往往会出现数百或数千个标识符。命名空间提供一隱藏區域標識符的機制。<ref>{{cite conference  |first1=Atul  |last1=Adya  |first2=William  |last2=Bolosky  |first3=Miguel  |last3=Castro  |first4=Gerald  |last4=Cermak  |first5=Ronnie  |last5=Chaiken  |first6=John  |last6=Douceur  |first7=Jon  |last7=Howell  |first8=Jacob  |last8=Lorch  |first9=Marvin  |last9=Theimer  |first10=Roger  |last10=Wattenhofer  |title=FARSITE: Federated, Available, and Reliable Storage for an Incompletely Trusted Environment  |conference=Proc. [[USENIX|USENIX]] Symp. on Operating Systems Design and Implementation  |year=2002  |url=http://paul.rutgers.edu/cs545/S06/papers/adya-farsite-osdi-2002.pdf  |quote=The primary construct established by a file system is a hierarchical directory namespace, which is the logical repository for files.  |url-status=yes  |archive-url=https://web.archive.org/web/20100728202945/http://paul.rutgers.edu/cs545/S06/papers/adya-farsite-osdi-2002.pdf  |archive-date=2010-07-28  |access-date=2021-02-11  }}</ref>通过将逻辑上相关的标识符组织成相应的命名空间，可使整个系统更加[[模块化编程|模块化]]。

在[[编程语言|编程语言]]中，命名空间是对[[作用域|作用域]]的一种特殊的抽象，它包含了处于该作用域内的标识符，且本身也用一个标识符来表示，这样便将一系列在逻辑上相关的标识符用一个标识符组织了起来。许多现代编程语言都支持命名空间。在一些编程语言（例如[[C++|C++]]和[[Python编程语言|Python]]）中，命名空间本身的标识符也属于一个外层的命名空间，也即命名空间可以嵌套，构成一个命名空间[[树_(数据结构)|树]]，树根则是无名的'''全局命名空间'''。

[[函数_(计算机科学)|函数]]和[[类_(计算机科学)|类]]的作用域可被視作[[隱式|隱式]]命名空间，它們和可見性、可訪問性和[[对象生命周期|对象生命周期]]不可分割的联系在一起。

==C++中的命名空间==
在[[C++|C++]]语言中，命名空间是一种实体（entity），使用'''namespace'''来声明，并使用'''{ }'''来界定命名空间体（namespace body）。

'''例'''：
<syntaxhighlight lang=cpp>
namespace foo {
  int bar;
}
</syntaxhighlight>

[[C语言|C语言]]的[[:b:C++/作用域#全局作用域|全局作用域]]对应于C++'''全局命名空间'''作用域。全局命名空间不需要声明也无法显式声明。使用时，可以用前缀为<code>::</code>的qualified-id显式限定全局命名空间作用域中的名称。例如，<code>::operator new</code>指称全局new运算符函数。

命名空间可以在另一命名空间之中嵌套声明；但不能声明在类和代码块之中。在命名空间中声明的名称，默认具有[[外部链接|外部链接]]属性（除非声明的是[[const|const]]对象，它默认是具有[[内部链接|内部链接]]属性）。

按照是否有名字，可分为有名字的命名空间、不能显式定义的全局命名空间与'''匿名命名空间'''。后者的声明为：
<syntaxhighlight lang="cpp">
namespace {
              namespace-body（即声明序列(可选)）
       }
</syntaxhighlight>
匿名命名空间中的名字具有[[:b:C++/作用域#文件作用域|文件作用域]]。这些名字在本编译单元中可以直接使用；也可以用前缀为<code>::</code>的qualified-id显式限定后使用。匿名命名空间中的名字具有[[内部链接|内部链接]]属性。

命名空间的成员，是在命名空间体的花括号内声明了的名字。可以在命名空间体之外，给出命名空间成员的定义。即命名空间的成员声明与定义可以分开。命名空间内的名字，只能有一次定义，但可以多次声明。

嵌套的子命名空间必须定义在上层命名空间体之内。禁止把子命名空间的声明与定义分开。

不能以“命名空间名::成员名;”方式，在命名空间体之外为命名空间添加新成员。必须在命名空间体之中添加新成员的声明。

可以多次声明和定义同一命名空间，每次给这一命名空间添加新成员。同名的命名空间即便在声明位置不同，仍然是同一个实体。

可以在一个命名空间中引入其他命名空间的成员。例如：
<syntaxhighlight lang="cpp">
namespace myNameSpace{
       using namespace His_NameSpace;
       using OLib::List;
       void my_func(String &, List &);
}
</syntaxhighlight>

引用命名空间的成员，有下述办法：
*使用命名空间的作用域解析运算符<code>::</code>，如：<code>std::cout</code>
*<code>using namespace 命名空间名[::命名空间名…];</code>这称为“using-Directive”。该语句使指定的命名空间中的目前已经声明的名字都提升到当前语句所在的作用域中可直接使用。如果引入的名字与该语句所在的声明区域的名字发生冲突，则编译器并不会发出任何警告信息，而只是用声明区域中的名字自动隐藏（hiding）命名空间中的同名成员，即使<code>using namespace</code>更靠后也是如此。
*<code>using 命名空间名::[命名空间名::……]成员名;</code> 这称作“using-declaration”。用于向名字空间或者块作用域内引入其它名字空间的名字成员；也可用于把基类的非私有成员引入到派生类的定义中，如果引入的是基类的重载函数名字，则把基类的所有同名函数引入，如果派生类有同名同参数同限定的成员函数，则基类的函数被名字隐藏或覆盖。如果引入的名称与局部名称发生同名冲突，编译器会报错。

命名空间可以有别名：<code>namespace 别名 = 命名空间名;</code> 这使得名字较长的命名空间可以方便地用较短的别名来引用。


[[C++11|C++11]]起支持内联命名空间。使用<code>inline namespace</code>作为声明的起始。内联命名空间的名称在名称查找时被特别对待，使用qualified-id引用其中的名称时，被内联的命名空间名称可以省略。也即，内联命名空间内的标识符被提升到包含着内联的命名空间的那个父级的命名空间中。内联命名空间可以在修改命名空间名称的同时避免在二进制文件中生成的符号改变，因此不同内联命名空间的名称可以用于标识接口兼容的不同版本，有助于保持二进制兼容性。这也在标准库的实现中被使用，如libstdc++和libc++。

<syntaxhighlight lang="cpp">
namespace Contoso
{
    namespace v_10
    {
        template <typename T>
        class Funcs
        {
        public:
            Funcs(void);
            T Add(T a, T b);
            T Subtract(T a, T b);
            T Multiply(T a, T b);
            T Divide(T a, T b);
        };
    }


    inline namespace v_20
    {
        template <typename T>
        class Funcs
        {
        public:
            Funcs(void);
            T Add(T a, T b);
            T Subtract(T a, T b);
            T Multiply(T a, T b);
            std::vector<double> Log(double);
            T Accumulate(std::vector<T> nums);
      };
    }
}
</syntaxhighlight>

==在XML中的应用==
[[XML|XML]]虽然不是一个独立的编程语言，但是它的出现使得命名空间的使用变得更为广泛。

在同一个命名空间裡，所有的元素名都必须唯一。

声明一个命名空间使用XML保留的属性<code>xmlns</code>，它的值必须是[[统一资源标志符|URI]](统一资源标志符 Uniform Resource Identifier而非URL--Universal Resource Locator)指代.比如<nowiki>ns="http://www.w3.org/1999/xhtml"</nowiki>.注意，事实上URI是不可读的，但它对XML解析器来说就只是简单不过的字串，如[http://www.w3.org/1999/xhtml/ http://www.w3.org/1999/xhtml/]{{Wayback|url=http://www.w3.org/1999/xhtml/ |date=20210113070657 }} 这个地址本身并不包含任何代码，它只表示[[XHTML|XHTML]]命名空间.使用URI (比如<nowiki>"http://www.w3.org/1999/xhtml"</nowiki>)去标示一个命名空间，而不是用一个简短的字串 (比如"xhtml")，这样做是为了减少不同命名空间标示符冲突的可能性.

==註釋==
{{reflist}}

==参见==
*[[作用域|作用域]]

==外部链接==
*[https://web.archive.org/web/20060209082011/http://plan9.bell-labs.com/sys/doc/names.html The Use of Name Spaces in Plan 9]
*[http://www.w3.org/TR/REC-xml-names/ W3C XML Namespace documentation]{{Wayback|url=http://www.w3.org/TR/REC-xml-names/ |date=20110316043909 }}
*[http://www.w3schools.com/xml/xml_namespaces.asp XML Namespace Tutorial]{{Wayback|url=http://www.w3schools.com/xml/xml_namespaces.asp |date=20210102234359 }}
*[http://xml.coverpages.org/namespaces.html Cover Pages: Namespaces in XML]{{Wayback|url=http://xml.coverpages.org/namespaces.html |date=20200918024825 }}

[[Category:程序架構|Category:程序架構]]
[[Category:命名規則|Category:命名規則]]