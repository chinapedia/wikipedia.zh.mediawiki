{{NoteTA|G1=IT|G2=FL}}
{{Infobox programming language
| name = Vala
| logo = Vala Logo.svg
| logo size = 140px
| paradigm = [[面向对象编程|面向对象]]、[[结构化编程|结构化]]、[[指令式编程|指令式]]
| year = {{start date and age|2006}}
| developer = Jürg Billeter, Raffaele Sandrini
| latest release version = 0.54.7
| latest release date = {{Release date and age|2022|02|14}}
| latest preview version = 
| latest preview date = 
| typing = [[静态类型|静态类型]], [[强类型|强类型]]
| influenced by = [[C语言|C]], [[C++|C++]], [[C♯|C♯]], [[D語言|D]], [[Java|Java]], [[BOO|BOO]]
| operating_system = 所有支持[[GLib|GLib]]的平台
| license = [[LGPL|GNU宽通用公共许可证2.1+]]
| website = {{URL|https://wiki.gnome.org/Projects/Vala}}
| file ext = .vala, .vapi
}}

'''Vala'''是一門[[物件導向|物件導向]]的[[程式語言|程式語言]]，由{{le|自举|Self-hosting_(compilers)}}[[編譯器|編譯器]]產生[[C語言|C語言]]代碼和使用[[GObject|GObject]]系統，允许在[[Gnome|Gnome]]运行时库的基础上使用大量现代的编程技巧。通过使用[[GLib|GLib]]和[[GObject|GObject]]，Vala提供了[[动态类型|动态类型]]系统和基于[[引用计数|引用计数]]（reference counting）系统的[[内存管理|内存管理]]的功能。

==描述==
Vala是一门编程语言，结合了脚本语言的[[高级语言|高级]]编程语言建造时间性能，与[[低级语言|低级]]的编程语言运行时间性能。相较于用C写成的应用和库，它致力于将现代编程语言特征带给[[GNOME|GNOME]]开发者，而不用强加任何额外的运行时间要求，并且不用使用不同的[[应用二进制接口|ABI]]。Vala的语法类似于[[C♯|C#]]，并为了更好的适应GObject类型系统而做了修改<ref>{{cite web|url=https://gitlab.gnome.org/GNOME/vala/|title=Vala· GitLab|publisher=[[GNOME|GNOME]]|access-date=16 March 2021|archive-date=2022-05-08|archive-url=https://web.archive.org/web/20220508170108/https://gitlab.gnome.org/GNOME/vala}}</ref>。

==历史==
{| class="wikitable floatright"
|-
! 版本
! 发行日期<ref>{{cite web |url=https://gitlab.gnome.org/GNOME/vala/-/tags |title=Vala Releases |publisher=Vala Project |access-date=2021-03-18 |archive-date=2022-03-08 |archive-url=https://web.archive.org/web/20220308145107/https://gitlab.gnome.org/GNOME/vala/-/tags }}</ref>
|- style="text-align: center;"
| {{Version | o | 0.0.1}}
| 2006-07-15
|- style="text-align: center;"
| {{Version | o | 0.1.0}}
| 2007-07-09
|-  style="text-align: center;"
| {{Version | o | 0.10.0}}
| 2010-09-18
|- style="text-align: center;"
| {{Version | o | 0.20.0}}
| 2013-05-27
|- style="text-align: center;"
| {{Version | o | 0.30.0}}
| 2015-09-18
|- style="text-align: center;"
| {{Version | c | 0.40.25}}
| 2021-01-11
|- style="text-align: center;"
| {{Version | o | 0.42.0}}
| 2018-09-01
|- style="text-align: center;"
| {{Version | o | 0.44.0}}
| 2019-05-09
|- style="text-align: center;"
| {{Version | o | 0.46.0}}
| 2019-09-05
|- style="text-align: center;"
| {{Version | c | 0.48.23}}
| 2022-02-21
|- style="text-align: center;"
| {{Version | o | 0.50.0}}
| 2020-09-11
|- style="text-align: center;"
| {{Version | c | 0.52.11}}
| 2022-02-21
|- style="text-align: center;"
| {{Version | c | 0.54.7}}
| 2022-02-14
|-
| colspan="100%" | {{Version | l | show=110100}}
|-
| colspan="40%" | 对于旧版本只列出最初发行
|}
Vala由Jürg Billeter构想，并由他和Raffaele Sandrini实现，他希望开发[[GNOME|GNOME]]应用能有对C语言的更高级替代者。他们的确喜欢C#的语法和语义，但不想使用[[Mono|Mono]]，故而他们在2006年5月完成了一个编译器。最初它使用C来{{en-link|引导 (编译器)|Bootstrapping (compilers)|引导}}，一年后（在2007年7月的版本0.1.0发行中），Vala编译器成为{{en-link|自宿主 (编译器)|Self-hosting (compilers)|自宿主}}。

==语言设计==
===特征===
Vala使用GLib和它的子模块（GObject、GModule、GThread、GIO）作为核心库，它们对于多数[[操作系统|操作系统]]都能获得到，并提供：平台无关[[线程|线程]]、[[标准串流|输入/输出]]、[[文件管理器|文件管理]]、[[网络套接字|网络套接字]]、[[动态装载|插件]]、[[正则表达式|正则表达式]]等。Vala的语法目前支持如下现代语言特征：
*[[协议_(面向对象编程)|接口]]
*[[属性_(编程)|属性]]
*{{en-link|信号编程|Signal programming|信号}}
*[[Foreach循环|Foreach]]
*[[λ演算|lambda表达式]]
*[[局部变量|局部变量]]的[[类型推论|类型推论]]
*[[泛型编程|泛型]]
*{{en-link|空指针安全|Void safety|非空类型}}
*[[垃圾回收_(计算机科学)|辅助内存管理]]
*[[异常处理|异常处理]]

[[图形用户界面|图形用户界面]]可以使用[[GTK|GTK]][[部件工具箱|部件工具箱]]和[[Glade|Glade]] {{en-link|图形用户界面建造器|Graphical user interface builder|GUI建造器}}来开发。

===内存管理===
对于内存管理，GType或GObject系统提供[[引用计数|引用计数]]。在C语言中，编程者必须手工管理增加和移除引用，而在Vala中，管理这种引用计数是自动化的，如果编程者使用语言内建引用类型而非普通指针的话。唯一需要当心的是避免生成[[引用计数|引用环]]，因为在这种情况下内存管理系统不能正确工作<ref name="valamem">{{cite web|url=https://wiki.gnome.org/Projects/Vala/ReferenceHandling|title=Vala's Memory Management Explained|access-date=2022-03-08|archive-date=2022-05-05|archive-url=https://web.archive.org/web/20220505200732/https://wiki.gnome.org/Projects/Vala/ReferenceHandling}}</ref>。

Vala还允许通过[[指针|指针]]的手工内存管理作为一个选项。

===绑定===
Vala意图提供但现存C库的运行时间访问，特别是基于GObject的库，而不需要运行时间绑定。要通过Vala使用一个库，全部所需就是一个API文件（.vapi），包含采用Vala语法的类和方法声明。但是不支持C++库。目前在Vala的每次发行中，都包括了[[GTK|GTK]]以及大部份的[[GNU|GNU]]项目和GNOME平台的vapi文件。还有用Vala写的一个库叫做Gee，为常用[[数据结构|数据结构]]提供基于GObject的接口和类<ref name="gee">{{cite web|url=https://gitlab.gnome.org/GNOME/libgee/|title=Libgee on Gitlab|access-date=2022-03-08|archive-date=2022-03-24|archive-url=https://web.archive.org/web/20220324233313/https://gitlab.gnome.org/GNOME/libgee}}</ref>。

为从用其他语言比如C#写的应用访问Vala库，写绑定生成器也应当是容易的，因为Vala解析器被写为一个库，所以所有运行时间信息在生成一个绑定的时候都是可获得到的。

==工具==
===编辑器===
Vala的开发工具近些年来有了显著改进。下面是具有支持Vala编程的插件的一些流行[[集成开发环境|IDE]]和[[文本编辑器|文本编辑器]]：
* [[GNOME_Builder|GNOME Builder]]
* [[Visual_Studio_Code|Visual Studio Code]]，具有Vala插件<ref name="vala-vscode">{{cite web |url=https://wiki.gnome.org/Projects/Vala/Tools/VisualStudioCode |title=Coding in Vala with Visual Studio Code |access-date=2021-03-17 |archive-date=2022-03-08 |archive-url=https://web.archive.org/web/20220308150101/https://wiki.gnome.org/Projects/Vala/Tools/VisualStudioCode }}</ref>
* [[Vim|Vim]]，具有arrufat/vala.vim插件<ref>{{cite web |url=https://wiki.gnome.org/Projects/Vala/Tools/Vim |title=Coding in Vala with the Vim Text Editor |access-date=2021-03-17 |archive-date=2022-03-08 |archive-url=https://web.archive.org/web/20220308220020/https://wiki.gnome.org/Projects/Vala/Tools/Vim }}</ref>
* [[Emacs|Emacs]]，具有vala-mode<ref>{{cite web |url=https://wiki.gnome.org/Projects/Vala/Emacs |title=Enable Vala syntax highlighting and code browser support in GNU Emacs |access-date=2021-03-17 |archive-date=2021-05-12 |archive-url=https://web.archive.org/web/20210512165633/https://wiki.gnome.org/Projects/Vala/Emacs }}</ref>
* [[Atom|Atom]] 
* [[Geany|Geany]]

===代码智能===
目前，有两个活跃开发的[[语言服务器协议|语言服务器]]为Vala提供了{{en-link|智能代码补全|Intelligent code completion|代码智能}}：
* {{Not a typo|benwaffle/vala-language-server}}，设计用于支持[[语言服务器协议|LSP]]的任何编辑器，包括VSCode、vim和GNOME Builder<ref>{{cite web |url=https://github.com/benwaffle/vala-language-server |title=benwaffle/vala-language-server on Github |website=[[GitHub|GitHub]] |access-date=2021-03-17 |archive-date=2021-01-07 |archive-url=https://web.archive.org/web/20210107234958/https://github.com/benwaffle/vala-language-server/ }}</ref>。
* {{Not a typo|esodan/gvls}}，目前是Vala在GNOME Builder中的缺省语言服务器，它对支持[[语言服务器协议|LSP]]的任何编辑器提供支持<ref>{{cite web |url=https://gitlab.gnome.org/esodan/gvls |title=esodan/gvls on GitLab |access-date=2021-03-17 |archive-date=2022-03-08 |archive-url=https://web.archive.org/web/20220308145226/https://gitlab.gnome.org/esodan/gvls }}</ref>。

===建造系统===
目前，有一些[[組建自動化|建造系统]]支持Vala，包括[[Automake|Automake]]、[[CMake|CMake]]、[[Meson|Meson]]等<ref name="vala-tools">{{cite web |url=https://wiki.gnome.org/Projects/Vala/Tools |title=Vala Tools |access-date=2021-03-29 |archive-date=2022-01-06 |archive-url=https://web.archive.org/web/20220106074750/https://wiki.gnome.org/Projects/Vala/Tools }}</ref>。

===调试===
对Vala程序的调试可以使用[[GNU调试器|GDB]]或{{en-link|LLDB (调试器)|LLDB (debugger)|LLDB}}。对于[[集成开发环境|IDE]]：
* [[GNOME_Builder|GNOME Builder]]拥有通过[[GNU调试器|GDB]]的对Vala的内建调试支持。
* [[Visual_Studio_Code|Visual Studio Code]]拥有对[[GNU调试器|GDB]]和{{en-link|LLDB (调试器)|LLDB (debugger)|LLDB}}的扩展，比如cpptools和CodeLLDB<ref name="vala-vscode"></ref>。

== 示范代码 ==
一个简单的“[[Hello_world|Hello world]]”程序：

<syntaxhighlight lang="vala">
void main () {
    print ("Hello World\n");
}
</syntaxhighlight>

===面向对象===
下面是更复杂的一个版本，表现了Vala的一些[[面向对象程序设计|面向对象]]的特征：

<syntaxhighlight lang="vala">
class HelloWorld: Object {
	private uint year = 0;
	
	public HelloWorld () {
	}
	
	public HelloWorld.with_year (int year) {
		if (year>0)
			this.year = year;
	}

	public void greeting () {
		if (year == 0)
			print ("Hello World\n");
		else
			/* Strings prefixed with '@' are string templates. */
			print (@"Hello World, $(this.year)\n"); 
	}
}

void main (string[] args) {
	var helloworld = new HelloWorld.with_year (2021);
	helloworld.greeting ();
}
</syntaxhighlight>
因为在[[GObject#與其他物件系統比較|GObject库]]的情况下，Vala不支持[[多重继承|多重继承]]，但是Vala中的类可以实现任何数量的[[协议_(面向对象编程)|接口]]，它可以包含它们的方法的缺省实现。下面一段代码展示具有缺省实现的Vala接口（有时称为[[mixin|mixin]]）：
<syntaxhighlight lang="vala">
using GLib;

interface Printable {
	public abstract string print ();

	public virtual string pretty_print () {
		return "Please " + print ();
	}
}

class NormalPrint: Object, Printable {
	string print () {
		return "don't forget about me";
	}
}

class OverridePrint: Object, Printable {
	string print () {
		return "Mind the gap";
	}

	public override string pretty_print () {
		return "Override";
	}
}

void main (string[] args) {
	var normal = new NormalPrint ();
	var overridden = new OverridePrint ();

	print (normal.pretty_print ());
	print (overridden.pretty_print ());
}
</syntaxhighlight>

===信号和回调===
下面是基本例子，展示如何定义一个信号于非紧凑（compact）的一个类中，它拥有用Vala通过GLib建造的一个信号系统。接着注册[[回调函数|回调函数]]到这个类的一个实例的这个信号。这个实例可以发送这个信号，而连接到这个实例的每个回调函数（也叫做处理器），将安它们连接上的次序来调用：
<syntaxhighlight lang="vala">
class Foo {
    public signal void some_event ();   // 定义一个信号

    public void method () {
        some_event ();                  // 发送这个信号（回调得以调用）
    }
}

void callback_a () {
    stdout.printf ("Callback A\n");
}

void callback_b () {
    stdout.printf ("Callback B\n");
}

void main () {
    var foo = new Foo ();
    foo.some_event.connect (callback_a);      // 连接回调函数
    foo.some_event.connect (callback_b);
    foo.method ();
}
</syntaxhighlight>

===线程===
在Vala中新[[线程|线程]]是代码的一部份，比如要求在运行时间并发执行的一个函数。新线程的创建和同步是用时GLib中的<code>Thread</code>类完成的，它在创建新线程时接受一个函数作为参数，如下面（非常简化的）例子所示：
<syntaxhighlight lang="vala">
int question(){
    // 一些print操作 
    for (var i = 0; i < 3; i++){
        print (".");
        Thread.usleep (800000);
        stdout.flush ();
    }

    return 42;
}

void main () {
    if (!Thread.supported ()) {
        stderr.printf ("Cannot run without thread support.\n");
        return;
    }
    print ("The Ultimate Question of Life, the Universe, and Everything");
    // 泛型参数是返回值的类型
    var thread = new Thread<int> ("question", question);

    print(@" $(thread.join ())\n");
}
</syntaxhighlight>

===图形用户界面===
使用[[GTK|GTK]]来创建一个图形用户界面的"Hello, World!"程序：
<syntaxhighlight lang="vala">
using Gtk;

int main (string[] args) {
	Gtk.init (ref args);

	var window = new Window ();
	window.title = "Hello, World!";
	window.border_width = 10;
	window.window_position = WindowPosition.CENTER;
	window.set_default_size (350, 70);
	window.destroy.connect (Gtk.main_quit);

	var label = new Label ("Hello, World!");

	window.add (label);
	window.show_all ();

	Gtk.main ();
	return 0;
}
</syntaxhighlight>

在GNOME3平台上，需要以下命令来编译这一示例:
<syntaxhighlight lang="bash">
valac --pkg gtk+-3.0 hellogtk.vala
</syntaxhighlight>

==参见==
* [[Genie_(程式語言)|Genie]]，基于Vala编译器的具有近似[[Python|Python]]语法的一种语言。
* [[Shotwell|Shotwell]]，用Vala写的图片组织器。
* {{en-link|Geary (软件)|Geary (e-mail client)|Geary}}，用Vala写的邮件客户端。
* [[elementary_OS|elementary OS]]，具有大多用Vala编程的桌面环境的Linux发行版。
* [[Budgie_(桌面环境)|Budgie]]，大多用Vala编程的Linux桌面环境。

==引用==
{{reflist|2}}

== 外部链接 ==
* [http://live.gnome.org/Vala The Vala Programming Language]{{WebCite|url=https://www.webcitation.org/664F07xr9?url=http://live.gnome.org/Vala |date=20120310202745 |dateformat=iso }}, on GNOME Live!
*Vala 语言书籍《Introducing Vala Programming》 （[https://www.apress.com/gp/book/9781484253793 Apress] {{Wayback|url=https://www.apress.com/gp/book/9781484253793 |date=20191220092306 }} / [https://www.amazon.com/Introduction-Vala-Programming-Boost-Productivity/dp/1983202347 Amazon] {{Wayback|url=https://www.amazon.com/Introduction-Vala-Programming-Boost-Productivity/dp/1983202347 |date=20220417125846 }}）
*[https://wiki.gnome.org/Projects/Vala/ValaForJavaProgrammers 面向 Java 开发者的Vala 特性介绍] {{Wayback|url=https://wiki.gnome.org/Projects/Vala/ValaForJavaProgrammers |date=20220417130028 }}
*[https://wiki.gnome.org/Projects/Vala/ValaForCSharpProgrammers 面向 C# 开发者的 Vala 特性介绍] {{Wayback|url=https://wiki.gnome.org/Projects/Vala/ValaForCSharpProgrammers |date=20220417130131 }}
* [http://code.google.com/p/vala-benchmarks/ Benchmark of Vala versus C# and C]{{WebCite|url=https://www.webcitation.org/664F2PCVM?url=http://code.google.com/p/vala-benchmarks/ |date=20120310202819 |dateformat=iso }}
*[https://wiki.gnome.org/Apps/Geary/CodingConventions Vala 语言编程规范（Geary版）] {{Wayback|url=https://wiki.gnome.org/Apps/Geary/CodingConventions |date=20220417125856 }}
*Vala 的语言服务器（Language Server Protocol）项目： [https://github.com/benwaffle/vala-language-server VLS] {{Wayback|url=https://github.com/benwaffle/vala-language-server |date=20210107234958 }}， [https://gitlab.gnome.org/esodan/gvls GVLS] {{Wayback|url=https://gitlab.gnome.org/esodan/gvls |date=20220308145226 }}
*Vala 语言社区： [https://github.com/vala-lang The Vala community on GitHub] {{Wayback|url=https://github.com/vala-lang |date=20220417125846 }} 
*[https://wiki.gnome.org/Projects/Vala/Documentation#Projects_Developed_in_Vala Vala 语言案例列表] {{Wayback|url=https://wiki.gnome.org/Projects/Vala/Documentation#Projects_Developed_in_Vala |date=20220417125849 }}
*[https://www.datatable.online/zh/ Vala 语言开发的数据库管理工具： DBKangaroo] {{Wayback|url=https://www.datatable.online/zh/ |date=20201109060339 }}
*[https://github.com/GNOME/vala/tree/mainline/vapi Vala 语言库：官方库]
*[https://github.com/GNOME/vala-extra-vapis/ Vala 语言库：第三方库] {{Wayback|url=https://github.com/GNOME/vala-extra-vapis/ |date=20220417130238 }}

{{GNOME|state=collapsed}}
{{CProLang|state=collapsed}}
{{程序设计语言}}

[[Category:面向对象的编程语言|Category:面向对象的编程语言]]
[[Category:C語言家族|Category:C語言家族]]
[[Category:2006年建立的程式語言|Category:2006年建立的程式語言]]