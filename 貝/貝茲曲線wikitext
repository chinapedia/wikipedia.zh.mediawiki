{{NoteTA
|G1=Math
|G2=IT
}}
[[File:Bezier_curve.svg|thumb]]
在[[數學|數學]]的[[數值分析|數值分析]]領域中，'''貝茲曲線'''（{{lang-en|Bézier curve}}）是[[计算机圖形學|计算机圖形學]]中相當重要的[[參數曲線|參數曲線]]。更高[[維度|維度]]的廣泛化貝茲曲線就稱作{{link-en|貝茲曲面|Bézier surface}}，其中{{link-en|貝茲三角|Bézier triangle}}是一種特殊的實例。

貝茲曲線於1962年，由[[法國|法國]]工程師[[皮埃爾·貝茲|皮埃爾·貝茲]]（{{lang|fr|Pierre Bézier}}）所廣泛發表，他運用貝茲曲線來為[[汽車|汽車]]的主體進行設計。貝茲曲線最初由{{link-en|保尔·德·卡斯特里奥|Paul de Casteljau}}於1959年運用[[德卡斯特里奥演算法|德卡斯特里奥演算法]]開發，以[[數值穩定性|穩定數值]]的方法求出貝茲曲線。

== 實例說明 ==

=== 線性貝茲曲線 ===
給定點'''P'''<sub>0</sub>、'''P'''<sub>1</sub>，線性貝茲曲線只是一條兩點之間的[[直線|直線]]。這條線由下式給出：

:<math>\mathbf{B}(t)=\mathbf{P}_0 + (\mathbf{P}_1-\mathbf{P}_0)t=(1-t)\mathbf{P}_0 + t\mathbf{P}_1 \mbox{ , } t \in [0,1]</math>
且其等同於[[線性插值|線性插值]]。

=== 二次方貝茲曲線 ===
二次方貝茲曲線的路徑由給定點'''P'''<sub>0</sub>、'''P'''<sub>1</sub>、'''P'''<sub>2</sub>的函數'''B'''（''t''）追蹤：
: <math>\mathbf{B}(t) = (1 - t)^{2}\mathbf{P}_0 + 2t(1 - t)\mathbf{P}_1 + t^{2}\mathbf{P}_2 \mbox{ , } t \in [0,1]</math>

[[TrueType|TrueType]]字型就運用了以[[貝茲樣條|貝茲樣條]]組成的二次貝茲曲線。

=== 三次方貝茲曲線 ===
'''P'''<sub>0</sub>、'''P'''<sub>1</sub>、'''P'''<sub>2</sub>、'''P'''<sub>3</sub>四個點在平面或在三維空間中定義了三次方貝茲曲線。曲線起始於'''P'''<sub>0</sub>走向'''P'''<sub>1</sub>，並從'''P'''<sub>2</sub>的方向來到'''P'''<sub>3</sub>。一般不會經過'''P'''<sub>1</sub>或'''P'''<sub>2</sub>；這兩個點只是在那裡提供方向資訊。'''P'''<sub>0</sub>和'''P'''<sub>1</sub>之間的間距，決定了曲線在轉而趨進'''P'''<sub>2</sub>之前，走向'''P'''<sub>1</sub>方向的「長度有多長」。

曲線的[[參數方程|參數]]形式為：

:<math>\mathbf{B}(t)=\mathbf{P}_0(1-t)^3+3\mathbf{P}_1t(1-t)^2+3\mathbf{P}_2t^2(1-t)+\mathbf{P}_3t^3 \mbox{ , } t \in [0,1]</math>

現代的成象系統，如[[PostScript|PostScript]]、[[Asymptote|Asymptote]]和[[Metafont|Metafont]]，運用了以[[貝茲樣條|貝茲樣條]]組成的三次貝茲曲線，用來描繪曲線輪廓。

== 一般化 ==
<math>n</math>階貝茲曲線可如下推斷。給定點'''P'''<sub>0</sub>、'''P'''<sub>1</sub>、…、'''P'''<sub>n</sub>，其貝茲曲線即

:<math>\mathbf{B}(t)=\sum_{i=0}^n {n\choose i}\mathbf{P}_i(1-t)^{n-i}t^i ={n\choose 0}\mathbf{P}_0(1-t)^nt^{0}+{n\choose 1}\mathbf{P}_1(1-t)^{n-1}t^{1}+\cdots+{n\choose n-1}\mathbf{P}_{n-1}(1-t)^{1}t^{n-1}+{n\choose n}\mathbf{P}_n(1-t)^{0}t^n \mbox{ , } t \in [0,1]</math>。

例如<math>n=5</math>：
:<math>\mathbf{B}(t)=\mathbf{P}_0(1-t)^5+5\mathbf{P}_1t(1-t)^4+10\mathbf{P}_2t^2(1-t)^3+10\mathbf{P}_3t^3(1-t)^2+5\mathbf{P}_4t^4(1-t)+\mathbf{P}_5t^5 \mbox{ , } t \in [0,1]</math>。

如上公式可如下遞歸表達：
用<math>\mathbf{B}_{\mathbf{P}_0\mathbf{P}_1\ldots\mathbf{P}_n}</math>表示由點'''P'''<sub>0</sub>、'''P'''<sub>1</sub>、…、'''P'''<sub>n</sub>所決定的貝茲曲線。則

:<math>\mathbf{B}(t) = \mathbf{B}_{\mathbf{P}_0\mathbf{P}_1\ldots\mathbf{P}_n}(t) = (1-t)\mathbf{B}_{\mathbf{P}_0\mathbf{P}_1\ldots\mathbf{P}_{n-1}}(t) + t\mathbf{B}_{\mathbf{P}_1\mathbf{P}_2\ldots\mathbf{P}_n}(t)</math>

用平常話來說，<math>n</math>階的貝茲曲線，即雙<math>n-1</math>階貝茲曲線之間的插值。

=== 術語 ===
一些關於參數曲線的術語，有
:<math>\mathbf{B}(t) = \sum_{i=0}^n \mathbf{P}_i\mathbf{b}_{i,n}(t),\quad t\in[0,1]</math>
即多項式
:<math>\mathbf{b}_{i,n}(t) = {n\choose i} t^i (1-t)^{n-i},\quad i=0,\ldots n</math>
又稱作''n''階的[[伯恩斯坦多項式|伯恩斯坦基底多項式]]，定義0<sup>0</sup> = 1。

點'''P'''<sub>''i''</sub>稱作貝茲曲線的'''控制點'''。[[多邊形|多邊形]]以帶有[[線|線]]的貝茲點連接而成，起始於'''P'''<sub>0</sub>並以'''P'''<sub>''n''</sub>終止，稱作'''貝茲多邊形'''（或'''控制多邊形'''）。貝茲多邊形的[[凸包|凸包]]（convex hull）包含有貝茲曲線。

=== 註解 ===
*開始於'''P'''<sub>0</sub>並結束於'''P'''<sub>n</sub>的曲線，即所謂的'''端點插值法'''屬性。
*曲線是直線的充分必要條件是所有的控制點都位在曲線上。同樣的，貝茲曲線是直線的充分必要條件是控制點[[共線_(幾何)|共線]]。
*曲線的起始點（結束點）[[切線|相切]]於貝茲多邊形的第一節（最後一節）。
*一條曲線可在任意點切割成兩條或任意多條子曲線，每一條子曲線仍是貝茲曲線。
*一些看似簡單的曲線（如[[圓|圓]]）無法以貝茲曲線精確的描述，或分段成貝茲曲線（雖然當每個內部控制點對單位圓上的外部控制點水平或垂直的的距離為<math>4\left(\sqrt{2} -1\right)/3</math>時，分成四段的貝茲曲線，可以小於千分之一的最大半徑誤差近似於圓）。
*位於固定偏移量的曲線（來自給定的貝茲曲線），又稱作'''偏移曲線'''（假平行於原來的曲線，如兩條鐵軌之間的偏移）無法以貝茲曲線精確的形成（某些平凡實例除外）。無論如何，現存的[[啟發法|啟發法]]通常可為實際用途中給出近似值。

== 建構貝茲曲線 ==

=== 線性曲線 ===
{| style="text-align:center; float:right; font-size:95%;" valign=top
|-
|style="border-bottom: 1px solid #222222;"|[[File:Bézier_1_big.gif|240px]]
|-
|線性貝茲曲線演示動畫，''t''在[0,1]區間
|}
線性貝茲曲線函數中的''t''會經過由'''P'''<sub>0</sub>至'''P'''<sub>1</sub>的'''B'''（''t''）所描述的曲線。例如當''t=0.25''時，'''B'''（''t''）即一條由點'''P'''<sub>0</sub>至'''P'''<sub>1</sub>路徑的四分之一處。就像由0至1的連續''t''，'''B'''（''t''）描述一條由'''P'''<sub>0</sub>至'''P'''<sub>1</sub>的直線。

=== 二次曲線 ===
為建構二次貝茲曲線，可以中介點'''Q'''<sub>0</sub>和'''Q'''<sub>1</sub>作為由0至1的''t''：
*由'''P'''<sub>0</sub>至'''P'''<sub>1</sub>的連續點'''Q'''<sub>0</sub>，描述一條線性貝茲曲線。
*由'''P'''<sub>1</sub>至'''P'''<sub>2</sub>的連續點'''Q'''<sub>1</sub>，描述一條線性貝茲曲線。
*由'''Q'''<sub>0</sub>至'''Q'''<sub>1</sub>的連續點'''B'''（''t''），描述一條二次貝茲曲線。

<center>
{| style="text-align:center; float:none; clear:both; font-size:95%;" valign=top
|-
|style="border-bottom: 1px solid #22ff22;"|[[File:Bézier_2_big.svg|240px]]||
|style="border-bottom: 1px solid #22ff22;"|[[File:Bézier_2_big.gif|240px]]]
|-
|二次貝茲曲線的結構||
|二次貝茲曲線演示動畫，''t''在[0,1]區間
|}</center>

=== 高階曲線 ===
為建構高階曲線，便需要相應更多的中介點。對於三次曲线，可由線性貝茲曲線描述的中介點'''Q'''<sub>0</sub>、'''Q'''<sub>1</sub>、'''Q'''<sub>2</sub>，和由二次曲線描述的點'''R'''<sub>0</sub>、'''R'''<sub>1</sub>所建構：

<center>
{| style="text-align:center; float:none; clear:both; font-size:95%;" valign=top
|-
|style="border-bottom: 1px solid #2222ff;"|[[File:Bézier_3_big.svg|240px]]||
|style="border-bottom: 1px solid #2222ff;"|[[File:Bézier_3_big.gif|240px]]]
|-
|三次貝茲曲線的結構||
|三次貝茲曲線演示動畫，''t''在[0,1]區間
|}</center>

對於四次曲線，可由線性貝茲曲線描述的中介點'''Q'''<sub>0</sub>、'''Q'''<sub>1</sub>、'''Q'''<sub>2</sub>、'''Q'''<sub>3</sub>，由二次貝茲曲線描述的點'''R'''<sub>0</sub>、'''R'''<sub>1</sub>、'''R'''<sub>2</sub>，和由三次貝茲曲線描述的點'''S'''<sub>0</sub>、'''S'''<sub>1</sub>所建構：

<center>
{| style="text-align:center; float:none; clear:both; font-size:95%;" valign=top
|-
|style="border-bottom: 1px solid #ff22ff;"|[[File:Bézier_4_big.svg|240px]]||
|style="border-bottom: 1px solid #ff22ff;"|[[File:Bézier_4_big.gif|240px]]]
|-
|四次貝茲曲線的結構||
|四次貝茲曲線演示動畫，''t''在[0,1]區間
|}</center>

還可參閱五階貝茲曲線的構成：

<center>
{| style="text-align:center; float:none; clear:both; font-size:95%;" valign=top
|-
|style="border-bottom: 1px solid silver;"|[[File:BezierCurve.gif|240px]]
|-
|五次貝茲曲線演示動畫，''t''在[0,1]區間
|}</center>

这些运动轨迹使用[[de_Casteljau演算法|de Casteljau演算法]]计算出贝塞尔曲线。<ref>{{cite web|last=Shene|first=C.K.|title=Finding a Point on a Bézier Curve: De Casteljau's Algorithm|url=http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/Bezier/de-casteljau.html|accessdate=6 September 2012|archive-date=2017-08-15|archive-url=https://web.archive.org/web/20170815161726/http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/Bezier/de-casteljau.html|dead-url=no}}</ref>

== 升階 ==
''n''次貝茲曲線可以轉換為一個形狀完全相同的''n+1''次貝茲曲線。
這在軟體只支援特定階次的貝茲曲線時很有用。
例如，[[cairo_(繪圖)|Cairo]]只支援三次貝茲曲線，你就可以用升階的方法在Cairo畫出二次貝茲曲線。

我們利用<math>\mathbf{B}(t) = (1-t)\mathbf{B}(t) + t\mathbf{B}(t)</math>這個特性來做升階。我們把曲線方程式中每一項<math>\mathbf{b}_{i,n}(t)\mathbf{P}_i</math>都乘上 (1 − ''t'') 或 ''t''，讓每一項都往上升一階。以下是將二階升為三階的範例

: <math>
\begin{align}
& {} \quad (1 - t)^{2}\mathbf{P}_0 + 2(1 - t)t\mathbf{P}_1 + t^{2}\mathbf{P}_2 \\
& = (1 - t)^{3}\mathbf{P}_0 + (1 - t)^{2}t\mathbf{P}_0 + 2(1 - t)^{2}t\mathbf{P}_1 \\
& {} \qquad + 2(1 - t)t^{2}\mathbf{P}_1 + (1 - t)t^{2}\mathbf{P}_2 + t^{3}\mathbf{P}_2 \\
& = (1 - t)^{3}\mathbf{P}_0
+ 3(1 - t)^{2}t\frac{\mathbf{P}_0 + 2\mathbf{P}_1}{3}
+ 3(1 - t)t^{2}\frac{2\mathbf{P}_1 + \mathbf{P}_2}{3}
+ t^{3}\mathbf{P}_2
\end{align}
</math>

對任何的''n''值，我們都可以使用以下等式

:<math>{n+1 \choose i}(1-t)\mathbf{b}_{i,n} = {n \choose i} \mathbf{b}_{i,n+1},
\quad (1-t)\mathbf{b}_{i,n} = \frac{n+1-i}{n+1} \mathbf{b}_{i,n+1}</math>

:<math>{n+1 \choose i+1} t\mathbf{b}_{i,n} = {n \choose i} \mathbf{b}_{i+1,n+1},
\quad t\mathbf{b}_{i,n} = \frac{i+1}{n+1} \mathbf{b}_{i+1,n+1}</math>

:<math>
\begin{align}
\mathbf{B}(t) & = (1-t)\sum_{i=0}^n \mathbf{b}_{i,n}(t)\mathbf{P}_i
+ t\sum_{i=0}^n \mathbf{b}_{i,n}(t)\mathbf{P}_i \\
& = \sum_{i=0}^n \frac{n+1-i}{n+1}\mathbf{b}_{i,n+1}(t)\mathbf{P}_i
+ \sum_{i=0}^n \frac{i+1}{n+1}\mathbf{b}_{i+1,n+1}(t)\mathbf{P}_i \\
& = \sum_{i=0}^{n+1} \left(\frac{i}{n+1}\mathbf{P}_{i-1} + \frac{n+1-i}{n+1}\mathbf{P}_i\right) \mathbf{b}_{i,n+1}(t)
= \sum_{i=0}^{n+1} \mathbf{b}_{i,n+1}(t)\mathbf{P'}_i
\end{align}
</math>

式中<math>\mathbf{P}_{-1}</math> 和 <math>\mathbf{P}_{n+1}</math>可以任意挑選。

因此，新的控制點為<ref>{{citation
|title=Curves and surfaces for computer-aided geometric design
|first=Gerald
|last=Farin
|publisher=[[Elsevier|Elsevier]] Science & Technology Books
|year=1997
|isbn=978 0 12249054 5
|edition=4
}}</ref>

: <math>\mathbf{P'}_i = \frac{i}{n+1}\mathbf{P}_{i-1} + \frac{n+1-i}{n+1}\mathbf{P}_i,\quad i=0,\ldots, n+1.</math>

== 應用 ==

=== 電腦繪圖 ===<!--
[[File:Bézier_curve_in_Adobe_Illustrator_CS2.png|thumb]]]]
[[File:BezierInterpolation.gif|thumb]]-->
由于需要點陣化更精细的解析度时，重新插值（補點）的计算量较小，貝茲曲線被广泛地在计算机图形中用来为平滑曲线建立模型。貝茲曲線是矢量图形文件和相应软件（如PostScript、PDF等）能够处理的唯一曲线，用于光滑地近似其他曲线。

二次和三次貝茲曲線最为常用。

=== 程式範例 ===
下列程式碼為一簡單的實際運用範例，展示如何使用[[C語言|C語言]]標出三次方貝茲曲線。注意，此處僅簡單的計算多項式係數，並讀盡一系列由0至1的t值；實踐中一般不會這麼做，遞歸求解通常會更快速——以更多的記憶體為代價，花費較少的處理器時間。不過直接的方法較易於理解並產生相同結果。以下程式碼已使運算更為清晰。實踐中的最佳化會先計算係數一次，並在實際計算曲線點的迴圈中反複使用。此處每次都會重新計算，損失了效率，但程式碼更清楚易讀。

曲線的計算可在曲線陣列上將相連點畫上直線——點越多，曲線越平滑。

在部分架構中，下以程式碼也可由[[動態规划|動態规划]]進行最佳化。舉例來說，''dt''是一個常數，''cx'' * ''t''則等同於每次反覆就修改一次常數。經反覆應用這種最佳化後，迴圈可被重寫為沒有任何乘法（雖然這個過程不是[[數值穩定性|穩定數值]]的）。

<syntaxhighlight lang=c>
/*
 產生三次方貝茲曲線的程式碼
*/

typedef struct
{
    float x;
    float y;
}
Point2D;

/*
 cp在此是四個元素的陣列:
 cp[0]為起始點，或上圖中的P0
 cp[1]為第一個控制點，或上圖中的P1
 cp[2]為第二個控制點，或上圖中的P2
 cp[3]為結束點，或上圖中的P3
 t為參數值，0 <= t <= 1
*/

Point2D PointOnCubicBezier( Point2D* cp, float t )
{
    float   ax, bx, cx;
    float   ay, by, cy;
    float   tSquared, tCubed;
    Point2D result;

    /*計算多項式係數*/

    cx = 3.0 * (cp[1].x - cp[0].x);
    bx = 3.0 * (cp[2].x - cp[1].x) - cx;
    ax = cp[3].x - cp[0].x - cx - bx;

    cy = 3.0 * (cp[1].y - cp[0].y);
    by = 3.0 * (cp[2].y - cp[1].y) - cy;
    ay = cp[3].y - cp[0].y - cy - by;

    /*計算位於參數值t的曲線點*/

    tSquared = t * t;
    tCubed = tSquared * t;

    result.x = (ax * tCubed) + (bx * tSquared) + (cx * t) + cp[0].x;
    result.y = (ay * tCubed) + (by * tSquared) + (cy * t) + cp[0].y;

    return result;
}

/*
 ComputeBezier以控制點cp所產生的曲線點，填入Point2D結構的陣列。
 呼叫者必須分配足夠的記憶體以供輸出結果，其為<sizeof(Point2D) numberOfPoints>
*/

void ComputeBezier( Point2D* cp, int numberOfPoints, Point2D* curve )
{
    float   dt;
    int    i;

    dt = 1.0 / ( numberOfPoints - 1 );

    for( i = 0; i < numberOfPoints; i++)
        curve[i] = PointOnCubicBezier( cp, i*dt );
}
</syntaxhighlight>

另一種貝茲曲線的應用是在動畫中，描述物件的運動路徑等等。此處，曲線的x、y位置不用來標示曲線，但用來表示圖形位置。當用在這種形式時，連續點之間的距離會變的更為重要，且大多不是平均比例。點將會串的更緊密，控制點更接近每一個點，而更為稀疏的控制點會散的更開。如果需要線性運動速度，進一步處理時就需要循所需路徑將點平均分散。

== 多項式表示法 ==
有時我們可能想要把貝茲曲線表示為[[多項式|多項式]]，而非比較不直接的[[伯恩斯坦多項式|伯恩斯坦多項式]]。使用[[二項式定理|二項式定理]]和貝茲曲線的定義，重新整理後可以得到：
:<math>
\mathbf{B}(t) = \sum_{j = 0}^n {t^j \mathbf{C}_j}
</math>

此處

:<math>
\mathbf{C}_j = \frac{n!}{(n - j)!} \sum_{i = 0}^j \frac{(-1)^{i + j} \mathbf{P}_i}{i! (j - i)!} =
\prod_{m = 0}^{j - 1} (n - m) \sum_{i = 0}^j \frac{(-1)^{i + j} \mathbf{P}_i}{i! (j - i)!}
.</math>

計算曲線上的點時需要多次計算<math>\mathbf{B}(t)</math>，因此事先計算好<math>\mathbf{C}_j</math>會比較實際；然而要小心高階曲線可能會缺乏[[數值穩定性|數值穩定性]]（需使用[[De_Casteljau演算法|De Casteljau演算法]]來處理）。注意其[[空积|空积]]為1。

== 有理貝茲曲線 ==
[[Image:Rational_Bezier_curve-conic_sections.svg|thumb]]
有理貝茲增加可調節的權重，以提供更近似於隨意的形狀。分子是加權的伯恩斯坦形式貝茲曲線，而分母是加權的[[伯恩斯坦多項式|伯恩斯坦多項式]]的總和。

給定''n'' + 1控制點'''P'''<sub>''i''</sub>，有理貝茲曲線可如下描述：
:<math>\mathbf{B}(t) =
\frac{
\sum_{i=0}^n b_{i,n}(t) \mathbf{P}_{i}w_i
}
{
\sum_{i=0}^n b_{i,n}(t) w_i
}</math>
或簡單的
:<math>\mathbf{B}(t) =
\frac{
\sum_{i=0}^n {n \choose i} t^i (1-t)^{n-i}\mathbf{P}_{i}w_i
}
{
\sum_{i=0}^n {n \choose i} t^i (1-t)^{n-i}w_i
}</math>

== 參閱 ==
* [[de_Casteljau算法|de Casteljau算法]]
* [[樣條|樣條]]
* [[貝茲樣條|貝茲樣條]]
* [[貝茲曲面|貝茲曲面]]
* [[貝茲三角|貝茲三角]]
* [[NURBS|NURBS]]
* {{tsl|en|string art|}}，Bézier curves are also formed by many common forms of string art, where strings are looped across a frame of nails.
* [[埃爾米特曲線|埃爾米特曲線]]

== 參考文獻 ==
=== 引用 ===
{{Reflist|30em}}

=== 来源 ===
{{refbegin}}
* Paul Bourke: ''Bézier curves'', https://web.archive.org/web/20060708162825/http://astronomy.swin.edu.au/%7Epbourke/curves/bezier/
* [[Donald_Knuth|Donald Knuth]]: ''Metafont: the Program'', Addison-Wesley 1986, pp. 123-131. Excellent discussion of implementation details; available for free as part of the TeX distribution.
* Dr Thomas Sederberg, BYU ''Bézier curves'', https://web.archive.org/web/20060221000535/http://www.tsplines.com/resources/class_notes/Bezier_curves.pdf
* J.D. Foley ''et al.'': ''Computer Graphics: Principles and Practice in C'' (2nd ed., Addison Wesley, 1992)
{{refend}}

== 外部連結 ==
	
* [http://www.theparticle.com/applets/nyu/BezierApplet/ 三階貝茲曲線applet] {{Wayback|url=http://www.theparticle.com/applets/nyu/BezierApplet/ |date=20210506161246 }}{{en}}
* [http://www.sunsite.ubc.ca/LivingMathematics/V001N01/UBCExamples/Bezier/bezier.html 即時數學貝茲applet] {{Wayback|url=http://www.sunsite.ubc.ca/LivingMathematics/V001N01/UBCExamples/Bezier/bezier.html |date=20210330150620 }}{{en}}
* [http://www.ibiblio.org/e-notes/Splines/Bezier.htm 各種樣條類型的即時數學貝茲applet，樣條的JAVA程式設計] {{Wayback|url=http://www.ibiblio.org/e-notes/Splines/Bezier.htm |date=20210409165813 }}在[http://ibiblio.org/e-notes/Splines/Intro.htm 互動式介紹樣條] {{Wayback|url=http://ibiblio.org/e-notes/Splines/Intro.htm |date=20111216214837 }}{{en}}
* [https://web.archive.org/web/20070930184918/http://delphi.ktop.com.tw/board.php?cid=169&fid=963&tid=21131 Hermite與Bezier曲線繪製方法]
* [http://blog.csdn.net/VisionCat/archive/2007/05/11/1603930.aspx 北斗星君簡介貝茲曲線] {{Wayback|url=http://blog.csdn.net/VisionCat/archive/2007/05/11/1603930.aspx |date=20081007165517 }}

[[Category:樣條|貝茲曲線]]
[[Category:插值论|Category:插值论]]