{{unreferenced|time=2011-12-23T06:49:30+00:00}}
{{noteTA
|G1=IT
}}
[[File:Lambda_lc.svg|thumb]]在程式語言理論中有舉足輕重的地位，因此程式語言理論的非官方標誌是一個小寫的「[[λ|λ]]」字母。]]
'''编程语言理论'''（{{lang-en|Programming language theory}}）是[[计算机科学|计算机科学]]的一个分支，研究[[编程语言|编程语言]]的设计、实现、分析、描述和分类及其各自的特点。它属于计算机科学，既依赖又影响着[[数学|数学]]、[[软件工程|软件工程]]、[[语言学|语言学]]，甚至[[认知科学|认知科学]]。

== 子学科及相关领域 ==
编程语言理论中存在着几个研究领域,或者对编程语言理论产生了深远的影响，其中许多有相当大的重叠。此外，PLT还利用了数学的许多其他分支,包括可计算性理论、类型论和集合论。

=== 形式语义学 ===
在[[计算理论|计算理论]]中，'''形式语义学'''是关注[[计算|计算]]的模式和[[程序设计语言|程序设计语言]]的含义的严格的数学研究的领域。

语言的形式语义是用[[数学模型|数学模型]]去表达该语言描述的可能的计算来给出的。

形式语义学（formal semantics），是程序设计理论的组成部分，以数学为工具，利用符号和公式，精确地定义和解释计算机程序设计语言的语义，使语义形式化的学科。

提供程序设计语言的形式语义的方法很多，其中主要类别有：

* [[指称语义学|指称语义学]]，着重于语言的执行结果而非过程，包括[[域理论|域理论]]；
* [[操作语义学|操作语义学]]，例如抽象机（象[[SECD抽象机|SECD抽象机]]），着重于描述语言的过程；
* [[公理语义学|公理语义学]]，如 谓词变换语义学和代数语义学。

=== 类型论 ===
'''类型论'''提供了设计分析和研究[[类型系统|类型系统]]的形式基础。实际上，很多计算机科学家使用术语“类型论”来称呼对[[编程语言|编程语言]]的类型语言的形式研究，尽管有些人把它限制于对更加抽象的形式化如[[有类型lambda演算|有类型lambda演算]]的研究。

=== 程序分析 ===
'''程序分析'''是指自动分析一个程序的包括正确性、健壮性、安全性和活跃性等特征的过程。 程序分析主要研究两大领域：程序的优化和[[正确性_(计算机科学)|程序的正确性]]。前者研究如何提升程序性能并且降低程序的资源占用，后者研究如何确保程序完成预期的任务。

=== 比较程序语言分析 ===
比较编程语言分析旨在根据编程语言的特点将其分类为不同类型，编程语言的大类通常被称为[[编程范型|编程范型]]。

=== 泛型和元编程 ===
是指某类[[计算机程序|计算机程序]]的编写，这类计算机程序编写或者操纵其它程序（或者自身）作为它们的数据，或者在[[运行时|运行时]]完成部分本应在[[编译时|编译时]]完成的工作。

=== 领域特定语言 ===
指专注于某个[[应用程序|应用程序]]领域的[[计算机语言|计算机语言]]。

=== 编译原理 ===
编译原理是编写编译器的理论。编译器的操作传统上分为语法分析(扫描和解析)、语义分析(确定程序应该做什么)、优化(根据某些指标改进程序的性能，通常是执行速度)和代码生成(用某种目标语言生成和输出等价的程序(通常是CPU的指令集)。

=== 运行时系统 ===
指一种把半编译的运行码在目标机器上运行的环境，介乎[[编译器|编译器]]及[[直译器|解释器]]的运行方式。包括虚拟机、垃圾回收和外部函数接口。
[[Category:電腦科學|Category:電腦科學]]