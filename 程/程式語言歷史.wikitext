{{TA|G1=IT}}
{{多個問題|
{{copyedit}}
{{Expert|time=2015-12-14T03:47:48+00:00}}
}}
{{計算歷史}}
這篇文章在探討'''[[程式語言|程式語言]]'''在歷史上的主要發展。更詳細的事件發生年表，請參閱{{en-link|程式語言年表|Timeline of programming languages}}。

== 1940之前 ==
[[Image:CTR_census_machine.JPG|200px]])，用於1890年的[[人口普查|人口普查]]<ref name=Truesdell>{{cite book |last = Truesdell |first = Leon E. |title = The Development of Punch Card Tabulation in the Bureau of the Census: 1890-1940 |url = https://archive.org/details/bub_gb_MGZqAAAAMAAJ |publisher = US GPO |year = 1965}}</ref>.]]
第一個程式語言比現代的計算機還早誕生。首先，這種語言是種[[代碼|代碼]]。

於1804年發明的[[雅卡尔织布机|雅卡尔织布机]]，運用打孔卡上的坑洞來代表縫紉織布機的手臂動作，以便自動化產生裝飾的圖案。

[[愛達·勒芙蕾絲|愛達·勒芙蕾絲]]在1842年至1843年間花費了九個月，將[[義大利|義大利]][[數學家|數學家]][[费德里科·路易吉_(梅纳布雷亚伯爵)|费德里科·路易吉]]關於[[查爾斯·巴貝奇|查爾斯·巴貝奇]]新發表機器[[分析機|分析機]]的回憶錄翻譯完成。她於那篇文章後面附加了一個用分析機計算[[伯努利数|伯努利数]]方法的細節，被部分歷史學家認為是世界上第一個電腦程序。
<ref>{{citation
| author = J. Fuegi and J. Francis
| title = Lovelace & Babbage and the creation of the 1843 'notes'.
| journal = Annals of the History of Computing
| volume = 25
| issue = 4
| page=19, 25
| doi = 10.1109/MAHC.2003.1253887|date=October–December 2003}}</ref>

[[赫爾曼·何樂禮|赫爾曼·何樂禮]]在觀察[[列車長|列車長]]對乘客票根在特定位置打洞的方式後，意識到他可以把資訊編碼記載到[[打孔卡|打孔卡]]上，隨後根據這項發現使用打孔卡來編碼並紀錄1890年的人口統計資料。

第一個計算機程式碼是針對他們的應用面設計的。在20世紀的前十年主要是用十進位來算數，後來人們發現不只是用文字，也可以用數字來表現邏輯。舉例來說，[[阿隆佐·邱奇|阿隆佐·邱奇]]曾以公式化(formulaic)的方式表達[[λ演算|λ演算]]。[[图灵机|图灵机]]是一種紙帶標記(tape-marking)機器(就像電話公司用的那種)操作方法抽象化後的集合。图灵机這種透過有限數字(finite number)呈現機器的方式，奠定了程式如同[[冯·诺伊曼结构|冯·诺伊曼结构]]計算機中的資料一樣地儲存的基礎。但不同於λ演算，图灵机的程式碼並沒有辦法成為高階程式語言的基石，這是是因為它主要的用途是分析[[計算複雜性理論|演算法的複雜度]]。

就像許多歷史上的"第一次"一樣，第一個現代程式語言也很難界定。最一開始是因為硬體限制而限定了語言，打孔卡允許80行(column)的長度，但某幾行必須用來記錄卡片的順序。[[FORTRAN|FORTRAN]]則納入了一些與英文字詞相同的關鍵字，像是"IF"、"GOTO"(原字詞為go to)，以及"CONTINUE"。之後採用[[磁鼓|磁鼓]]作為記憶體使用，也代表計算機程式也必須插入(interleave)到磁鼓的轉動(rotation)中。和現今比較起來，這也讓程式語言必須更加依賴硬體(hardware-dependent)。

對部分的人認為必須在"程式語言"的狀態確立之前，根據能力(power)以及可讀性(human-readability)的程度來決定歷史上第一個程式語言是什麼語言。提花織布機和[[查爾斯·巴貝奇|查爾斯·巴貝奇]]所製作的[[差分機|差分機]]都具備在大量限制下，簡單描述機器應執行行為的語言。也有種並非設計給人類運用的受限[[特定領域語言|特定領域語言]]，是將打孔卡運用到[[自動演奏鋼琴|自動演奏鋼琴]]上。

== 1940年代 ==
最早被確認的現代化、電力啟動(electrically powered)的計算機約在1940年代被創造出來。程式設計師在有限的速度及記憶體容量限制之下，撰寫人工調整(hand tuned)過的[[組合語言|組合語言]]程式。而且很快就發現到使用組合語言的這種撰寫方式需要花費大量的腦力(intellectual effort)而且很容易出錯(error-prone)。

[[康拉德·楚澤|康拉德·楚澤]]於1948年發表了他所設計的{{en-link|Plankalkül}}程式語言的論文<ref>[http://www-history.mcs.st-andrews.ac.uk/history/Mathematicians/Zuse.html] {{Wayback|url=http://www-history.mcs.st-andrews.ac.uk/history/Mathematicians/Zuse.html |date=20101208145631 }}</ref>。但是在他有生之年卻未能將該語言實作，而他原本的貢獻也被其他的發展所孤立。

== 1950與1960年代 ==
有三個現代程式語言於1950年代被設計出來，這三者所衍生的語言直到今日仍舊廣泛地被採用：
* [[FORTRAN|FORTRAN]] (1955)，名稱取自"'''FOR'''mula '''TRAN'''slator"(公式翻譯器)，由[[約翰·巴科斯|約翰·巴科斯]]等人所發明；
* [[LISP|LISP]]，名稱取自"'''LIS'''t '''P'''rocessor"(列舉處理器)，由[[約翰·麥卡錫|約翰·麥卡錫]]等人所發明；
* [[COBOL|COBOL]]，名稱取自"'''CO'''mmon '''B'''usiness '''O'''riented '''L'''anguage"(通用商業導向語言)，由被[[葛麗絲·霍普|葛麗絲·霍普]]深刻影響的Short Range Committee所發明。

另一個1950年代晚期的里程碑是由美國與歐洲計算機學者針對"演算法的新語言"所組成的委員會出版的《[[ALGOL|ALGOL 60]]報告》（名稱取自"'''ALGO'''rithmic '''L'''anguage"(演算法語言)）。這份報告強化了當時許多關於計算的想法，並提出了兩個語言上的創新功能：
* 嵌套區塊結構：可以將有意義的程式碼片段群組成一個[[块_(编程)|块]]，而非轉成分散且特定命名的程序。
* [[作用域|词法作用域]]：區塊可以有區塊外部無法透過名稱存取，屬於區塊本身的變數、程序以及函式。
另一個創新則是關於語言的描述方式：
* 一種名為[[巴科斯範式|巴科斯-諾爾範式]] (BNF)的數學化精確符號被用於描述語言的語法。之後的程式語言幾乎全部都採用類似BNF的方式來描述程式語法中[[上下文無關文法|上下文無關]]的部份。

Algol 60對之後語言的設計上帶來了特殊的影響，部分的語言很快的就被廣泛採用。後續為了開發Algol的擴充子集合，設計了一個名為{{en-link|Burroughs大型系統|Burroughs large systems}}。

延續Algol的關鍵構想所產生的成果就是[[ALGOL_68|ALGOL 68]]：
* 語法跟語意變的更加正交(orthogonal)，採用匿名的例程(routines)，採用高階(higher-order)功能的遞迴式类型(typing)系統等等。
* 整個語言及語意的部分都透過為了描述語言而特別設計的{{en-link|Van Wijngaarden grammar}}來進行正式的定義，而不僅止於上下文無關的部份。
Algol 68一些較少被使用到的語言功能(如同步與並列區塊)、語法捷徑的複雜系統，以及型態自動強制轉換(coercions)，使得實作者興趣缺缺，也讓Algol 68獲得了“難用”的名聲。[[尼克劳斯·维尔特|尼克劳斯·维尔特]]就乾脆離開該設計委員會，另外再開發出更簡單的[[Pascal语言|Pascal]]語言。

在這段期間被開發出來的重要語言包括有：
* 1951 - Regional Assembly Language
* 1952 - {{en-link|Autocode}}
* 1954 - [[FORTRAN|FORTRAN]]
* 1954 - [[資訊處理語言|IPL]] (LISP的先驅)
* 1955 - {{en-link|FLOW-MATIC}} (COBOL的先驅)
* 1957 - {{en-link|COMTRAN}} (COBOL的先驅)
* 1958 - [[LISP|LISP]]
* 1958 - [[ALGOL_58|ALGOL 58]]
* 1959 - {{en-link|FACT|FACT (computer language)}} (COBOL的先驅)
* 1959 - [[COBOL|COBOL]]
* 1962 - [[APL|APL]]
* 1962 - [[Simula|Simula]]
* 1962 - [[SNOBOL|SNOBOL]]
* 1963 - [[CPL|CPL]] (C的先驅)
* 1964 - [[BASIC|BASIC]]
* 1964 - [[PL/I|PL/I]]
* 1967 - [[BCPL|BCPL]] (C的先驅)

== 1960年代晚期-1970年代晚期：確立了基礎範式 ==
1960年代晚期至1970年代晚期的期間中，程式語言的發展也有了重大的成果。大多數現在所使用的主要[[编程范型|語言範式]]都是在這段期間中發明的：
* '''[[Simula|Simula]]'''，於1960年代晚期由[[克利斯登·奈加特|奈加特]]與[[奧利-約翰·達爾|達爾]]以Algol 60超集合的方式發展，同時也是第一個設計支援[[OOP|物件導向]]進行開發的程式語言。
* '''[[C語言|C]]'''，於1969至1973年間由[[貝爾實驗室|貝爾實驗室]]的研究人員[[丹尼斯·里奇|丹尼斯·里奇]]與[[肯·汤普逊|肯·汤普逊]]所開發，是一種早期的[[系統程式設計|系統程式設計]]語言。
* '''[[Smalltalk|Smalltalk]]'''，於1970年代中期所開發，是一個完全從零開始(ground-up)設計的物件導向程式語言。
* '''[[Prolog|Prolog]]'''，於1972年由{{en-link|Alain Colmerauer|Alain Colmerauer|Colmerauer}}、Roussel以及{{en-link|Robert Kowalski|Robert Kowalski|Kowalski}}所設計，是第一個[[邏輯編程|邏輯程式]]語言。
* '''[[ML語言|ML]]'''，於1973年由[[羅賓·米爾納|羅賓·米爾納]]所發明，是一個基於Lisp所建構的多型(polymorphic)型態系統，同時也是[[型別系統|靜態型別]][[函數程式語言|函數程式語言]]的先驅。

這些語言都各自演展出自己的家族分支，現今多數現代程式語言的祖先都可以追溯他們其中至少一個以上。

在1960年代以及1970年代中[[結構化程式設計|結構化程式設計]]的優點也帶來許多的爭議，特別是在程式開發的過程中完全不使用[[GOTO|GOTO]]。這項爭議跟語言本身的設計非常有關係：某些語言並沒有包含GOTO，這也強迫程式設計師必須結構化地編寫程式。儘管這個爭議在當時吵翻了天，但幾乎所有的程式設計師都同意就算語言本身有提供GOTO的功能，在除了少數罕見的情況下去使用GOTO是種不良的[[程序风格|程序风格]]。結果是之後世代的程式語言設計者發覺到結構化程式語言的爭議實在既乏味又令人眼花繚亂。

在這段期間被開發出來的重要語言包括有：
* 1968 - [[Logo语言|Logo]]
* 1970 - [[Pascal|Pascal]]
* 1970 - [[Forth|Forth]]
* 1972 - [[C語言|C]]
* 1972 - [[Smalltalk|Smalltalk]]
* 1972 - [[Prolog|Prolog]]
* 1973 - [[ML語言|ML]]
* 1975 - [[Scheme|Scheme]]
* 1978 - [[SQL|SQL]] (起先只是一種查詢語言，擴充之後也具備了程式結構)

== 1980年代：增強、模組、效能 ==
1980年代的程式語言與之前相較顯得更為強大。[[C++|C++]]合併了物件導向以及系統程式設計。美國政府標準化一種名為[[Ada|Ada]]的系統程式語言並提供給國防承包商使用。日本以及其他地方運用了大量的資金對採用邏輯程式語言結構的[[第五代程式語言|第五代程式語言]]進行研究。函數程式語言社群則把焦點轉移到標準化ML及Lisp身上。這些活動都不是在開發新的範式，而是在將上個世代發明的構想進一步發揚光大。

然而，在語言設計上有個重大的新趨勢，就是研究運用[[模块化编程|模組]]或大型組織化的程式單元來進行大型系統的開發。[[Modula|Modula]]、Ada，以及ML都在1980年代發展出值得注意的模組化系統。模組化系統常拘泥於採用[[泛型|泛型程式設計]]結構：泛型存在(generics being)、本質(essence)，參數化模組(parameterized modules)。(參閱[[多态|多态]])

儘管沒有出現新的主要程式語言範式，許多研究人員仍就擴充之前語言的構想並將它們運用到新的內容上。舉例來說，{{en-link|Argus|Argus (programming language)}}以及{{en-link|Emerald|Emerald (programming language)}}系統的語言配合物件導向語言運用到[[分散式計算|分散式系統]]上。

1980年代的程式語言實作情況也有所進展。[[计算机系统结构|计算机系统结构]]中[[精简指令集|RISC]]的進展假定硬體應當為[[編譯器|編譯器]]設計，而非身為人類的組合語言程式設計師。藉由[[中央处理器|中央处理器]]速度增快的幫助，編譯技術也越來越積極，RISC的進展對高階語言編譯技術帶來不小的關注。

語言技術持續這些發展並邁入了1990年代。<!--然而，選定開發語言總是會帶動採用新的計算機系統，在1990年代中期，計算機歷史上最重要的其中一個新系統突然大受歡迎。-->

在這段期間被開發出來的重要語言包括有：
* 1980 - [[Ada|Ada]]
* 1983 - [[C++|C++]] (就像有類別的C)
* 1984 - [[Common_Lisp|Common Lisp]]
* 1985 - [[Eiffel|Eiffel]]
* 1986 - [[Erlang|Erlang]]
* 1987 - [[Perl|Perl]]
* 1988 - [[Tcl|Tcl]]
* 1989 - [[FL_(编程语言)|FL]]  (Backus)

== 1990年代：網際網路時代 ==
1990年代未見到有什麼重大的創新，大多都是以前構想的重組或變化。這段期間主要在推動的哲學是提升程式設計師的生產力。許多"[[快速應用程式開發|快速應用程式開發]]" (RAD) 語言也應運而生，這些語言大多都有相應的[[整合開發環境|整合開發環境]]、[[垃圾回收_(計算機科學)|垃圾回收]]等機制，且大多是先前語言的衍生語言。這類型的語言也大多是[[OOP|物件導向]]的程式語言，包含有[[Object_Pascal|Object Pascal]]、[[Visual_Basic|Visual Basic]]，以及[[C_Sharp|C#]]。[[Java|Java]]則是更加保守的語言，也具備垃圾回收機制。與其他類似語言相比，也受到更多的觀注。新的[[脚本语言|脚本语言]]則比RAD語言更新更好。這種語言並非直接從其他語言衍生，而且新的語法更加開放地(liberal)與功能契合。雖然腳本語言比RAD語言來的更有生產力，但大多會有因為小程式較為簡單，但是大型程式則難以使用腳本語言撰寫並維護的顧慮{{Citation needed|date=June 2009}}。儘管如此，腳本語言還是網路層面的應用上大放異彩。

在這段期間被開發出來的重要語言包括有：
* 1990 - [[Haskell|Haskell]]
* 1991 - [[Python|Python]]
* 1991 - [[Visual_Basic|Visual Basic]]
* 1993 - [[Ruby|Ruby]]
* 1993 - [[Lua|Lua]]
* 1994 - [[CLOS|CLOS]] (part of ANSI [[Common_Lisp|Common Lisp]])
* 1995 - [[Java|Java]]
* 1995 - [[Delphi|Delphi (Object Pascal)]]
* 1995 - [[JavaScript|JavaScript]]
* 1995 - [[PHP|PHP]]
* 1997 - [[REBOL|REBOL]]
* 1999 - [[D語言|D]]

== 現今的趨勢 ==
程式語言持續在學術及企業兩個層面中發展進化，目前的一些趨勢包含有：
* 在語言中增加安全性與可靠性驗證機制：額外的堆疊檢查、資訊流(information flow)控制，以及靜態[[執行緒安全|執行緒安全]]。
* 提供模組化的替代機制：[[Mixin|混入]]，[[委托_(面向对象编程)|委托]]，以及[[面向切面的程序设计|剖面導向]]。
* 元件導向(component-oriented)軟體開發。
* [[元編程|元編程]]、[[反射式编程|反射]]或是存取[[抽象語法樹|抽象語法樹]]。
* 更重視分散式及移動式的應用。
* 與資料庫的整合，包含[[XML|XML]]及[[關聯式資料庫|關聯式資料庫]]。
* 支援使用[[Unicode|Unicode]]編寫程式，所以[[原始碼|原始碼]]不會受到[[ASCII|ASCII]]字元集的限制，而可以使用像是非[[拉丁語|拉丁語]]系的腳本或延伸標點符號。
* 圖形化使用者介面所使用的XML([[XUL|XUL]]、[[XAML|XAML]])。

在這段期間被開發出來的重要語言包括有：
* 2001 - [[C_Sharp|C#]]
* 2001 - [[Visual_Basic_.NET|Visual Basic .NET]]
* 2002 - [[F_Sharp|F#]]
* 2003 - [[Scala|Scala]]
* 2003 - [[Factor_(编程语言)|Factor]]
* 2006 - [[Windows_PowerShell|Windows PowerShell]]
* 2007 - [[Clojure|Clojure]]
* 2009 - [[Go|Go]]
* 2014 - [[Swift_(程式語言)|Swift (程式語言)]]

== 程式語言發展史上的傑出人物 ==
* [[約翰·巴科斯|約翰·巴科斯]]，發明了[[Fortran|Fortran]]。
* [[阿兰·库珀|阿兰·库珀]]，開發了[[Visual_Basic|Visual Basic]]。
* [[艾兹格·迪杰斯特拉|艾兹格·迪杰斯特拉]]，開創了正確運用程式語言(proper programming)的框架。
* [[詹姆斯·高斯林|詹姆斯·高斯林]]，開發了[[Oak|Oak]]，該語言為[[Java|Java]]的先驅。
* [[安德斯·海爾斯伯格|安德斯·海爾斯伯格]]，開發了[[Turbo_Pascal|Turbo Pascal]]、[[Delphi|Delphi]]，以及[[C_Sharp|C#]]。
* [[葛麗絲·霍普|葛麗絲·霍普]]，開發了{{en-link|Flow-Matic}}，該語言對[[COBOL|COBOL]]造成了影響。
* [[肯尼斯·艾佛森|肯尼斯·艾佛森]]，開發了[[APL|APL]]，並與{{en-link|许国华 (计算机科学家)|Roger Hui|許國華}}合作開發了[[J語言|J]]。
* [[比爾·喬伊|比爾·喬伊]]，發明了[[vi|vi]]，[[Berkeley_Software_Distribution|BSD]] Unix的前期作者，以及[[SunOS|SunOS]]的發起人，該作業系統後來改名為[[Solaris|Solaris]]。
* [[艾倫·凱|艾倫·凱]]，開創了[[OOP|物件導向程式語言]]，以及[[Smalltalk|Smalltalk]]的發起人。
* [[布萊恩·柯林漢|布萊恩·柯林漢]]，與[[丹尼斯·里奇|丹尼斯·里奇]]合著第一本[[C語言|C]]程式設計語言的書籍，同時也是[[AWK|AWK]]與[[AMPL|AMPL]]程式設計語言的共同作者。
* [[约翰·麦卡锡|约翰·麦卡锡]]，發明了[[LISP|LISP]]。
* [[約翰·馮·諾伊曼|約翰·馮·諾伊曼]]，[[作業系統|作業系統]]概念的發起者。
* [[丹尼斯·里奇|丹尼斯·里奇]]，發明了[[C語言|C]]。
* [[比雅尼·史特勞斯特魯普|比雅尼·史特勞斯特魯普]]，開發了[[C++|C++]]。
* [[肯·汤普逊|肯·汤普逊]]，發明了[[Unix|Unix]]。
* [[尼克劳斯·维尔特|尼克劳斯·维尔特]]，發明了[[Pascal|Pascal]]、[[Modula|Modula]]與[[Oberon|Oberon]]。
* [[拉里·沃爾|拉里·沃爾]]，創造了[[Perl|Perl]]與[[Raku|Raku]]。
* [[吉多·范羅蘇姆|吉多·范羅蘇姆]]，創造了[[Python|Python]]。

== 參閱 ==
* [[計算機協會|ACM]][[程式設計語言研討會歷史|程式設計語言研討會歷史]]
* [[編譯器撰寫歷史|編譯器撰寫歷史]]
* [[計算機硬體歷史_(1960年代前)|計算機硬體歷史]]
* [[程式語言|程式語言]]
* [[計算年表|計算年表]]
* [[程式語言年表|程式語言年表]]
* [[程式語言列表|程式語言列表]]

== 參考文獻 ==
<references/>

== 延伸閱讀 ==
* Sammet, Jean E., "Programming Languages: History and Fundamentals" Prentice-Hall, 1969

== 外部連結 ==
* [https://web.archive.org/web/20110220044217/http://hopl.murdoch.edu.au/ The History of Programming Languages] by Diarmuid Pigott
* [https://web.archive.org/web/20121016231922/http://www.scriptol.com/programming/history.php History and evolution of programming languages].
* [http://www.ulb.ac.be/di/rwuyts/INFO020_2003/grogono-evolution.pdf The Evolution of Programming Languages] {{Wayback|url=http://www.ulb.ac.be/di/rwuyts/INFO020_2003/grogono-evolution.pdf |date=20060513071849 }} by Peter Grogono. PDF.
* [http://www.levenez.com/lang/history.html Graph of programming language history] {{Wayback|url=http://www.levenez.com/lang/history.html |date=20080128230619 }}
* [https://web.archive.org/web/20100402074856/http://hhh.gavilan.edu/dvantassel/history/history.html Topics in history and comparing programming languages] by Dennie Van Tassel.

{{程序设计语言}}
{{DEFAULTSORT:程式語言歷史}}
[[Category:軟體史|Programming languages]]
[[Category:计算机科学史|Category:计算机科学史]]