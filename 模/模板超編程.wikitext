{{Link style|time=2015-12-11T07:27:00+00:00}}
{{noteTA|G1=IT}}
{{编程范式}}
'''模板超編程'''（{{lang-en|'''T'''emplate '''m'''eta'''p'''rogramming}}，縮寫：'''TMP'''）是一種[[超編程|超編程]]技術，[[編譯器|編譯器]]使用[[模板|模板]]產生暫時性的[[源碼|源碼]]，然後再和剩下的源碼混合並[[編譯|編譯]]。這些模板的輸出包括[[編譯時期|編譯時期]][[常數|常數]]、[[資料結構|資料結構]]以及完整的函式。如此利用模板可以被想成編譯期的執行。這種技術被許多語言使用，最為知名的當屬[[C++|C++]]，其他還有[[Curl语言|Curl]]、[[D語言|D]]、[[Eiffel|Eiffel]]，以及语言扩展，如{{le|Template Haskell|Template Haskell}}。

== 模板元编程的构成要素 ==
使用模板作為元编程的技術需要兩階段的操作。首先，模板必須被定義；第二，定義的模板必須被實體化才行。
模板的定義描述了生成源碼的一般形式，而使實體化則導致了某些源碼的組合根據該模板而生成。

模板元編程是一般性地[[圖靈完全|圖靈完全]]（''[[:en:Turing-complete|Turing-complete]]''），這意味著任何可被電算軟體表示的運算都可以透過模板超編程以某種形式去運算。

模板與[[巨集|巨集]]（''[[:en:Macro_(computer_science)|macros]]''）是不同的。所謂巨集只不過是以文字的操作及替換來生成程式碼，雖然同為編譯期的語言特色，但巨集系統通常其編譯期處理流的能力（''compile-time process flow abilities''）有限，且對其所依附之語言的語義及[[型別系統|型別系統]]缺乏認知（一个例外是[[LISP|LISP]]的宏）。

模板元編程沒有可變的[[變數|變數]]——也就是說，變數一旦初始化後就不能夠改動。因此他可以被視為[[函數式編程|函數式編程]]（''[[:en:functional_programming|functional programming]]''）的一種形式。

== 使用模板超編程 ==
模板超編程的語法通常與一般的程式語法迥異，他有其實際的用途。一些使用模板超編程的共同理由是為了實現[[泛型編程|泛型編程]]（''[[:en:generic_programming|generic programming]]''）或是展現自動編譯期最佳化，像是只要在編譯期做某些事一次就好，而無需每次程式執行時去做。

=== 編譯期類別生成 ===
以下將展示究竟何謂"編譯期程式設計"。[[階乘|階乘]]是一個不錯的例子，在此之前我們先來回顧一下一般C++中階乘函式的[[遞迴|遞迴]]寫法：
<syntaxhighlight lang="cpp">
int factorial(int n) 
{
    if (n == 0)
       return 1;
    return n * factorial(n - 1);
}

void foo()
{
    int x = factorial(4); // == (4 * 3 * 2 * 1 * 1) == 24
    int y = factorial(0); // == 0! == 1
}
</syntaxhighlight>
以上的程式碼會在程式執行時決定4和0的階乘。

現在讓我們看看使用了模板超編程的寫法，模板特化提供了"遞迴"的結束條件。這些階乘可以在編譯期完成計算。以下源碼：
<syntaxhighlight lang="cpp">
template <int N>
struct Factorial 
{
    enum { value = N * Factorial<N - 1>::value };
};

template <>
struct Factorial<0> 
{
    enum { value = 1 };
};

// Factorial<4>::value == 24
// Factorial<0>::value == 1
void foo()
{
    int x = Factorial<4>::value; // == 24
    int y = Factorial<0>::value; // == 1
}
</syntaxhighlight>
程式碼如上在編譯時期計算4和0的階乘值，使用該結果值彷彿他們是預定的常數一般。

雖然從程式功能的觀點來看，這兩個版本很類似，但前者是在[[執行期|執行期]]計算階乘，而後者卻是在編譯期完成計算。
然而，為了能夠以此方式使用模板，編譯器必須在編譯期知道模板的參數值，也就是<code>Factorial<X>::value</code>只有當X在編譯期已知的情況下才能使用。換言之，X必須是常數（''constant literal''）或是常數表示式（''constant expression''），像是使用<code>[[sizeof|sizeof]]</code>運算子。

=== 編譯期程式碼最佳化 ===

以上階乘的範例便是編譯期程式碼最佳化的一例，該程式中使用到的階乘在編譯期時便被預先計算並作為數值常數植入執行碼當中，節省了執行期的經常開銷（計算時間）以及記憶體足跡（''memory footprint''）。

編譯期迴圈展開（''loop-unrolling''）是一個更顯著的例子，模板超編程可以被用來產生n維（''n-dimensional''）的[[向量|向量]]類別（當然n必須在編譯期已知）。與傳統n維向量比較，他的好處是迴圈可以被展開，這可以使性能大幅度提升。考慮以下例子，n維向量的加法可以被寫成：
<syntaxhighlight lang="cpp">
template <int dimension>
Vector<dimension>& Vector<dimension>::operator+=(const Vector<dimension>& rhs) 
{
    for (int i = 0; i < dimension; ++i)
        value[i] += rhs.value[i]；
    return *this;
}
</syntaxhighlight>

當編譯器實體化以上的模板函式，可能會生成如下的程式碼：

<syntaxhighlight lang="cpp">
template <>
Vector<2>& Vector<2>::operator+=(const Vector<2>& rhs) 
{
    value[0] += rhs.value[0]；
    value[1] += rhs.value[1]；
    return *this;
}
</syntaxhighlight>

因為模板參數<code>dimension</code>在編譯期是常數，所以編譯器應能展開<code>for</code>迴圈。

=== 靜態多型 ===
[[多型|多型]]是一項共通的標準編程工具，[[衍生類別|衍生類別]]的[[物件|物件]]可以被當作[[基礎類別|基礎類別]]的物件之實體使用，但能夠呼叫衍生物件的函式，或稱方法（''methods''），例如以下的程式碼：
<syntaxhighlight lang="cpp">
class Base
{
    public:
    virtual void method() { std::cout << "Base"; }
};

class Derived : public Base
{
    public:
    virtual void method() { std::cout << "Derived"; }
};

int main()
{
    Base *pBase = new Derived;
    pBase->method(); //outputs "Derived"
    delete pBase;
    return 0;
}
</syntaxhighlight>
喚起的 <code>virtual</code> 函式是屬於位於繼承最下位之類別的。這種動態多型（''dynamically polymorphic''）行為是藉由擁有[[虛擬函式|虛擬函式]]的類別所產生的虛擬函式表（''[[:en:Virtual_method_table|virtual look-up tables]]''）來實行的。虛擬函式表會在執行期被查找，以決定該喚起哪個函式。因此動態多型無可避免地必須承擔這些執行期成本。

然而，在許多情況下我們需要的僅是可以在編譯期決定，無需變動的多型行為。那麼一來，奇怪的遞迴模板樣式（''[[:en:Curiously_recurring_template_pattern|Curiously Recurring Template Pattern]]；'''CRTP'''''）便可被用來達成靜態多型。如下例：
<syntaxhighlight lang="cpp">
template <class Derived>
struct base
{
    void interface()
    {
         // ...
         static_cast<Derived*>(this)->implementation();
         // ...
    }
};

struct derived : base<derived>
{
     void implementation();
};
</syntaxhighlight>
這裡基礎類別模板有著這樣的優點：成員函式的本體在被他們的宣告之前都不會被實體化，而且它可利用 <code>static_cast</code> 並透過自己的函式來使用衍生類別的成員，所以能夠在編譯時產生出帶有多型特性的物件複合物。在現實使用上，[[Boost_C++_Libraries|Boost]]迭代器库[http://www.boost.org/libs/iterator/doc/iterator_facade.html] {{Wayback|url=http://www.boost.org/libs/iterator/doc/iterator_facade.html |date=20080724032841 }}便有採用 CRTP 的技法。

其他類似的使用還有"[[Barton-Nackman_trick|Barton-Nackman trick]]（[[:en:Barton-Nackman_trick|英文]]）"，有時候被稱作"有限制的模板擴張"，共同的功能被可以放在一個基礎類別當中，作為必要的構件使用，以此確保在縮減多餘程式碼時的一致行為。

== 模板超編程的優缺點 ==
* '''編譯期對執行期'''：因為模板的運算以及展開都是在編譯期，這會花相對較長的編譯時間，但能夠獲得更有效率的執行碼。編譯期花費一般都很小，但對於大專案或是普遍依賴模板的程式，也許會造成很大的編譯開銷。
* '''泛型程式設計'''：模板超編程允許程式設計師專注在架構上並委託編譯器產生任何客戶碼要求的實作。因此，模板超編程可達成真正的泛用程式碼，促使程式碼縮小並較好維護。
* '''可讀性'''：對於C++來說，模板超編程的語法及語言特性比起傳統的C++編程，較難以令人理解。因此對於那些在模板超編程經驗不丰富的程式設計師來說，程式可能會變的難以維護。（這要視各語言對於模板超編程語法的實作）
* '''移植性'''：對於C++來說，由於各編譯器的差異，大量依賴模板超編程（特別是最新形式的）的程式碼可能會有移植性的問題。

== 關聯項目 ==
* [[超編程|超編程]]
* [[前處理器|前處理器]]

== 參照 ==
* [[Ulrich_W._Eisenecker|Ulrich W. Eisenecker]]：''Generative Programming: Methods, Tools, and Applications'', Addison-Wesley, ISBN 0-201-30977-7
* [[安德烈·亞歷山德雷斯庫|安德烈·亞歷山德雷斯庫]]：''{{tsl|en|Modern C++ Design|}}：Generic Programming and Design Patterns Applied'', Addison-Wesley, ISBN 3-8266-1347-3
* {{tsl|en|David Abrahams|}}，[[Aleksey_Gurtovoy|Aleksey Gurtovoy]]：''C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond'', Addison-Wesley, ISBN 0-321-22725-5
* [[David_Vandervoorde|David Vandervoorde]]，[[Nicolai_M._Josuttis|Nicolai M. Josuttis]]：''C++ Templates: The Complete Guide'', Addison-Wesley, ISBN 0-201-73484-2
* [[Manuel_Clavel|Manuel Clavel]]：''Reflection in Rewriting Logic: Metalogical Foundations and Metaprogramming Applications'', ISBN 1-57586-238-7

== 外部連結 ==
* [http://www.boost.org/libs/mpl/doc/ The Boost Metaprogramming Library (Boost MPL)] {{Wayback|url=http://www.boost.org/libs/mpl/doc/ |date=20080113220745 }} Boost超編程函式庫
* [http://www.boost.org/libs/spirit/ The Spirit Library] {{Wayback|url=http://www.boost.org/libs/spirit/ |date=20080517054001 }} Boost的Spirit函式庫（使用模板超編程建構）
* [http://www.boost.org/libs/lambda/doc/ The Boost Lambda library] {{Wayback|url=http://www.boost.org/libs/lambda/doc/ |date=20080516060540 }} Boost的Lambda函式庫（可讓你輕鬆使用STL演算法）
* [https://web.archive.org/web/20061004223738/http://osl.iu.edu/%7Etveldhui/papers/Template-Metaprograms/meta-art.html "Using C++ template metaprograms,"] ''C++ Report,'' Vol. 7 No. 4 (May 1995), pp. 36-43 
* [https://web.archive.org/web/20090113001021/http://www.haskell.org/th/ Template Haskell, type-safe metaprogramming in Haskell]
* [http://www.digitalmars.com/d/templates-revisited.html "Templates Revisited"] {{Wayback|url=http://www.digitalmars.com/d/templates-revisited.html |date=20210207224300 }}，一篇關於[[D程式語言|D程式語言]]中模板超編程的文章。
* 文章"[https://web.archive.org/web/20110610133757/http://www.cs.tut.fi/~kk/webstuff/MetaprogrammingCpp.pdf Metaprogramming in C++]"
* 文章"[https://web.archive.org/web/20160303183212/http://lcgapp.cern.ch/project/architecture/ReflectionPaper.pdf Reflection support by means of template metaprogramming]" 
* 文章"[https://web.archive.org/web/20080830032823/http://www.cs.ucsd.edu/%7Ewgg/Statements/mburton-ifip-gw-07-2002.pdf STATIC DATA STRUCTURES]"
* 文章"[http://www.codeproject.com/KB/recipes/meta_programming.aspx Template Meta Programming and Number Theory] {{Wayback|url=http://www.codeproject.com/KB/recipes/meta_programming.aspx |date=20120103213235 }}"
* 文章"[http://www.codeproject.com/KB/cpp/TemplateMetaProgramming.aspx Template Meta Programming and Number Theory: Part 2] {{Wayback|url=http://www.codeproject.com/KB/cpp/TemplateMetaProgramming.aspx |date=20111230204117 }}"

[[Category:计算机编程|T]]
[[Category:C++|T]]