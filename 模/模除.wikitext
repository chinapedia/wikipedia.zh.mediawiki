[[Image:Divmod.svg|thumb]] ({{math|''q''}}) 和 {{colorbox|lightgreen}} [[餘數|餘數]] ({{math|''r''}}) 作為[[被除數|被除數]] ({{math|''a''}}) 的函數時的圖像。左侧是[[除数|除数]]为正的情况，右侧[[除数|除数]]为负。从上至下分别使用了：向零取整、向下取整和[[欧几里德除法|欧几里德除法]]。]]

'''模除'''（又稱'''模数'''、'''取模操作'''、'''取模運算'''等，{{lang-en|modulo}} 有时也称作 modulus）得到的是一个数除以另一个数的余数。

给定两个正整数：[[被除数|被除数]] {{math|''a''}} 和[[除数|除数]] {{math|''n''}}，{{math|''a'' modulo ''n''}} (缩写为 {{math|''a'' mod ''n''}})得到的是使用[[欧几里德除法|欧几里德除法]]时 {{math|''a''/''n''}} 的余数。
举个例子：计算表达式 "5 mod 2" 得到 1，因为 5÷2=2...1（5 除以 2 商 2 餘1）；而 "9 mod 3" 得到 0，因为 9÷3=3...0；注意：如果使用计算器做除法，不能整除时，你不会得到商，而是会得到一个小数，如：5÷2=2.5。

虽然通常情况下 {{math|''a''}} 和 {{math|''n''}} 都是整数，但许多计算系统允许其他类型的数字操作，如：对浮点数取模。一个整数对 {{math|''n''}} 取模的结果范围为： 0 到 {{math|''n'' − 1}}（{{math|''a'' mod 1}}  恒等于 0；{{math|''a'' mod 0}} 则是未定义的，在编程语言里可能会导致[[除以零|除零]]错误）。
有关概念在[[数论|数论]]中的应用请参阅[[模算數|模算數]]。

当 {{math|''a''}} 和 {{math|''n''}} 均为负数时，通常的定义就不适用了，不同的编程语言对结果有不同的处理。

__TOC__
{{clear}}

== 定義与余数的计算 ==
{| class="wikitable sortable"  style="float:right; margin-left:1em; margin-right:0; width:30%;"
|+ 不同[[程式語言|程式語言]]下整数取模运算的符号
|-
! [[程式語言|程式語言]]
! 操作符
! abbr="Sign" | 结果与...同符号
|-
| [[AutoLISP|AutoLISP]]
| <code>(rem d n)</code><ref>{{Cite web|url=http://help.autodesk.com/view/ACD/2018/CHS/?guid=GUID-4CC43BEB-3215-41AE-839B-2DCE6354241A|title=AutoCAD 2018 帮助: rem (AutoLISP)|accessdate=2018-07-12|author=|date=|publisher=Autodesk, Inc.|language=zh}}</ref>
| 被除数
{{NoteTag|1=在 Visual LISP IDE 里测试可知结果与被除数同符号。
(rem 13 3)=>1; (rem -13 3)=>-1; (rem 13 -3)=>1; (rem -13 -3)=>-1}}
|-
| [[AWK|AWK]]
| <code>%</code>
| 被除数
|-
| [[BASIC|BASIC]]
| <code>Mod</code>
| 未定义
|-
| [[C99|C (ISO 1999)]]
| <code>%</code>, <code>div</code>
| 被除数<ref name="C99">{{Cite web|url=http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf|title=The ISO C99 Standard (ISO/IEC 9899:TC3 Committee Draft)|accessdate=2018-07-12|author=ISO/IEC JTC|date=2007-09-07|format=pdf|publisher=open-std.org|pages=6.5.5: 94|language=en |archiveurl=https://web.archive.org/web/20180624115227/http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf|archivedate=2018-06-24|quote=If the quotient a/b is representable, the expression (a/b)*b + a%b shall equal a.}}</ref>
|-
| [[C++11|C++ (ISO 2011)]]
| <code>%</code>, <code>div</code>
| 被除数
|-
| [[C_Sharp_(programming_language)|C#]]
| <code>%</code>
| 被除数
|-
| rowspan="2" | [[Clojure|Clojure]]
| <code>mod</code>
| 除数
|-
| <code>rem</code>
| 被除数
|-
| rowspan="2" | [[CoffeeScript|CoffeeScript]]
| <code>%</code>
| 被除数
|-
| <code>%%</code>
| 除数<ref name="CoffeeScript">{{Cite web|url=https://coffeescript.org/#operators|title=CoffeeScript Language Reference - Operators and Aliases|accessdate=2018-07-12|author=jashkenas|date=|language=en|archiveurl=https://web.archive.org/web/20180711093346/https://coffeescript.org/#expressions|archivedate=2018-07-11|publisher=coffeescript.org|quote=% works just like in JavaScript, while %% provides “dividend dependent modulo”}}</ref>
|-
| rowspan="2" | [[Dart|Dart]]
| <code>%</code>
| 非负
|-
| remainder()
| 被除数
|-
| [[Erlang|Erlang]]
| <code>rem</code>
| 被除数
|-
| [[F#|F#]]
| <code>%</code>
| 被除数
|-
| rowspan="2" | [[Fortran|Fortran]]
| <code>mod</code>
| 被除数
|-
| <code>modulo</code>
| 除数
|-
| [[Go|Go]]
| <code>%</code>
| 被除数
|-
| rowspan="2" | [[Haskell|Haskell]]
| <code>mod</code>
| 除数
|-
| <code>rem</code>
| 被除数
|-
| [[Kotlin|Kotlin]]
| <code>%</code>
| 被除数
|-
| rowspan="2" | [[Java|Java]]
| <code>%</code>
| 被除数
|-
| <code>Math.floorMod</code>
| 除数
|-
| [[JavaScript|JavaScript]]
| <code>%</code>
| 被除数
|-
| [[Lua|Lua]] 5
| <code>%</code>
| 除数
|-
| [[Mathematica|Mathematica]]
| <code>Mod[a, b]</code>
| 除数
|-
| rowspan="2" | [[MATLAB|MATLAB]]
| <code>mod</code>
| 除数
|-
| <code>rem</code>
| 被除数
|-
| [[Pascal_(程式語言)|Pascal]] (ISO-7185 and -10206)
| <code>mod</code>
| 非负
|-
| [[Perl|Perl]]
| <code>%</code>
| 除数
|-
| [[PHP|PHP]]
| <code>%</code>
| 被除数
|-
| rowspan="2"| [[Prolog|Prolog]] (ISO 1995<ref>{{Cite web|url=http://www.deransart.fr//prolog/bips.html|title=Prolog: The ISO directives, control constructs and builtins.|accessdate=2018-07-12|author=J.P.E. Hodgson|date=1999-04-12|publisher=|language=en|archiveurl=https://web.archive.org/web/20171225121735/http://www.deransart.fr//prolog/bips.html|archivedate=2017-12-25|quote=A conforming processor is required to support the arithmetic operations specified by the following tables. They conform to the ISO/IEC 10967-1 Language Independent Arithmetic standard.}}</ref>)
| <code>mod</code>
| 除数
|-
| <code>rem</code>
| 被除数
|-
| rowspan="2" | [[Python|Python]]
| <code>%</code>
| 除数
|-
| <code>math.fmod</code>
| 被除数
|-
| [[Racket|Racket]]
| <code>remainder</code>
| 被除数
|-
| [[R语言|R语言]]
| <code>%%</code>
| 除数
|-
| rowspan="2" | [[Ruby|Ruby]]
|  <code>%, modulo()</code>
| 除数
|-
|  <code>remainder()</code>
| 被除数
|-
| [[Rust|Rust]]
| <code>%</code>
| 被除数
|-
| [[Scala|Scala]]
| <code>%</code>
| 被除数
|-
| rowspan="2" | [[Scheme|Scheme]] R<sup>6</sup>RS<ref name="r6rs">{{Cite web|url=http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_sec_11.7.3.1|title=Revised6 Report on the Algorithmic Language Scheme|accessdate=2018-07-12|author=ROBERT BRUCE FINDLER, JACOB MATTHEWS|date=2007-09-26|publisher=r6rs.org|language=en|archiveurl=https://web.archive.org/web/20180315134554/http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_sec_11.7.3.1|archivedate=2018-03-15}}</ref>
| <code>mod</code>
| 非负
|-
| <code>mod0</code>
| 最靠近0的数<ref name="r6rs"/>
|-
| SQL (SQL:2012)
| <code>%</code>
| 被除数
|-
| [[Swift_(程式語言)|Swift]]
| <code>%</code>
| 被除数
|-
| [[Verilog|Verilog]] (2001)
| <code>%</code>
| 被除数
|-
| rowspan="2" | [[VHDL|VHDL]]
| <code>mod</code>
| 除数
|-
| <code>rem</code>
| 被除数
|-
| [[Visual_Basic|Visual Basic]]
| <code>Mod</code>
| 被除数
|-
| [[WebAssembly|WebAssembly]]
| <code>i32.rem_s, i64.rem_s</code>
| 被除数
|-
| {{tsl|en|x86 assembly language|x86 汇编}}
| <code>IDIV</code>
| 被除数
|}

{| class="wikitable sortable"  style="float:right; clear:right; margin-left:1em; margin-right:0; width:32%;"
|+ 不同[[程式語言|程式語言]]下浮点数取模运算的符号
|-
! [[程式語言|程式語言]]
! 操作符
! abbr="Sign" | 结果与...同符号
|-
| rowspan="2" | [[C99|C (ISO 1999)]]
| <code>fmod</code>
| 被除数
|-
| <code>remainder</code>
| 最靠近0的数
|-
| rowspan="2" | [[C++11|C++ (ISO 2011)]]
| <code>std::fmod</code>
| 被除数
|-
| <code>std::remainder</code>
| 最靠近0的数
|-
| [[C_Sharp_(programming_language)|C#]]
| <code>%</code>
| 被除数
|-
| rowspan="2" | [[Common_Lisp|Common Lisp]]
| <code>mod</code>
| 除数
|-
| <code>rem</code>
| 被除数
|-
| rowspan="2" | [[Dart|Dart]]
| <code>%</code>
| 非负
|-
| remainder()
| 被除数
|-
| [[F#|F#]]
| <code>%</code>
| 被除数
|-
| rowspan="2" | [[Fortran|Fortran]]
| <code>mod</code>
| 被除数
|-
| <code>modulo</code>
| 除数
|-
| [[Go|Go]]
| <code>math.Mod</code>
| 被除数
|-
| [[Haskell|Haskell]] (GHC)
| <code>Data.Fixed.mod'</code>
| 除数
|-
| [[Java|Java]]
| <code>%</code>
| 被除数
|-
| [[JavaScript|JavaScript]]
| <code>%</code>
| 被除数
|-
| [[Perl6|Perl6]]
| <code>%</code>
| 除数
|-
| [[PHP|PHP]]
| <code>fmod</code>
| 被除数
|-
| rowspan="2"| [[Python|Python]]
| <code>%</code>
| 除数
|-
| <code>math.fmod</code>
| 被除数
|-
| rowspan="2" | [[Ruby|Ruby]]
| <code>%, modulo()</code>
| 除数
|-
| <code>remainder()</code>
| 被除数
|-
| rowspan="2" | [[Scheme|Scheme]] R<sup>6</sup>RS
| <code>flmod</code>
| 非负
|-
| <code>flmod0</code>
| 最靠近0的数
|-
| [[Swift_(程式語言)|Swift]]
| <code>truncatingRemainder(dividingBy:)</code>
| 被除数
|}

在数学中，取模运算的结果就是[[欧几里德除法|欧几里德除法]]的余数。当然也有许多其他的定义方式。计算机和计算器有许多种表示和储存数字的方法，因此在不同的硬件环境下、不同的编程语言中，取模运算有着不同的定义。

几乎所有的计算系统中，{{math|''a''}} 除 {{math|''n''}} 得到商 {{math|''q''}} 和余数 {{math|''r''}} 均满足以下式子：
: {{NumBlk
| :
| <math>
\begin{align}
q \,&\in \mathbb{Z} \\
a \,&= n q + r \\
|r| \,&< |n|
\end{align}
</math>
| {{EquationRef|1}}
}}

然而这样做，当余数非 0 时，余数的符号仍然是有歧义的：余数非 0 时，它的符号有两种选择，一个正、一个负。{{noteTag|1=从数学上讲，正和负只是满足不等式的无穷多个解中的两个}}
通常情况下，在数论中总是使用正余数。但在编程语言中，余数的符号取决于编程语言的类型和被除数 {{math|''a''}} 或除数 {{math|''n''}} 的符号。
标准 [[Pascal_(程式語言)|Pascal]] 和 [[ALGOL_68|ALGOL 68]] 总是使用 0 或正余数；另一些编程语言，如 C90 ，当除数 {{math|''a''}} 和除数 {{math|''n''}} 都是负数时，C90 标准并没有做具体的规定，而是留给编译器去定义并实现<ref name="C-CPP-Std">{{Cite book|url=http://www.coding-guidelines.com/cbook/cbook1_2.pdf|title=The New C Standard: An Economic and Cultural Commentary|last=Jones|first=Derek M.|publisher=Addison-Wesley|year=2003|isbn=9780201709179|location=|pages=|language=en|archiveurl=https://web.archive.org/web/20180711080420/http://www.coding-guidelines.com/cbook/cbook1_2.pdf|archivedate=2018-07-11|access-date=2018-07-11}}</ref>。
在大多数系统上 {{math|''a''}} mod 0 时未定义的，虽然有些系统定义它就等于 {{math|''a''}}。更多详情参见表格。

{{bulleted list
| 很多取模的实现都使用了''截断除法''，此时商由截断函数定义定义 {{math|''q'' {{=}} trunc({{sfrac|''a''|''n''}})}}，因此由等式 {{EquationNote|1}} 有，余数''和被除数符号一致''。商向零取整：结果等于普通除法所得的小数靠近 0 方向的第一个整数。
: <math>r = a - n \operatorname{trunc}\left(\frac{a}{n}\right)</math>
| [[高德纳|高德纳]]<ref>{{cite book|first=Donald. E.|last=Knuth|title=The Art of Computer Programming|publisher=Addison-Wesley|year=1972|language=en}}</ref>定义的''取底除法''的商由[[高斯符號|取底函数]]定义：{{math|''q'' {{=}} [{{sfrac|''a''|''n''}}]}}。
因此由等式 {{EquationNote|1}} 有，余数''和除数符号一致''。因为使用了取底函数，商总是向下取整，即使商已经是负数。
: <math>r = a - n \left[\frac{a}{n}\right]</math>
| Raymond T. Boute<ref>{{cite journal
| last = Boute
| first = Raymond T.
| title = The Euclidean definition of the functions div and mod
| journal = ACM Transactions on Programming Languages and Systems
| volume = 14
| issue = 2
| pages = 127–144
| publisher = ACM Press (New York, NY, USA)
| date = April 1992
| url = http://portal.acm.org/citation.cfm?id=128862&coll=portal&dl=ACM
| doi = 10.1145/128861.128862
| language=en}}</ref>使用的欧几里得定义中，余数总是非负的 {{math|0 ≤ ''r''}}，这与欧几里得算法是一致的。
在这种情况下：
: <math>n > 0 \Rightarrow q = \left[\frac{a}{n}\right]</math>
: <math>n < 0 \Rightarrow q = - \left[- \frac{a}{n}\right]</math>
或者等价的：
: <math>q = \sgn(n) \left[ \frac{a}{\left|n\right|} \right]</math>
这里的 {{math|sgn}} 是[[符号函数|符号函数]]，因此
: <math>r = a - |n| \left[ \frac{a}{\left|n\right|} \right]</math>
| Common Lisp 也定义了自己的舍入除法和进位除法，商分别定义为 {{math|''q'' {{=}} round({{sfrac|''a''|''n''}})}} 和 {{math|q {{=}} -[{{sfrac|''-a''|''n''}}]}}。
| {{tsl|en|IEEE 754-1985|IEEE 754-1985|IEEE 754}} 定义了一个取余函数，商被定义为 {{math|{{sfrac|''a''|''n''}}}}，依据{{tsl|en|IEEE 754-1985#Rounding floating-point numbers|IEEE 754-1985#Rounding floating-point numbers|舍入约定}}取整。因此余数的符号选定为''最接近0''。
}}

== 常见错误 ==
当取模的结果与被除数符号相同时，可能会导致意想不到的错误。

举个例子：如果需要判断一个整数是否为奇数，有人可能会测试这个数除 2 的余数是否为 1：
<syntaxhighlight lang="c++">
bool is_odd(int n) {
    return n % 2 == 1;
}
</syntaxhighlight>

但在一个取模结果与被除数符号相同的编程语言里，这样做是错的。因为当被除数 {{math|''n''}} 是奇数且为负数时， {{math|''n''}} mod 2 得到 −1，此时函数返回“假”。

一种正确的实现是测试取模结果是否为 0，因为余数为 0 时没有符号的问题：
<syntaxhighlight lang="c++">
bool is_odd(int n) {
    return n % 2 != 0;
}
</syntaxhighlight>

或者考虑余数的符号，有两种情况：余数可能为 1 或 -1。
<syntaxhighlight lang="c++">
bool is_odd(int n) {
    return n % 2 == 1 || n % 2 == -1;
}
</syntaxhighlight>

== 记号 ==
一些计算器有取模 {{math|mod()}} 按钮，很多编程语言里也有类似的函数，通常像 {{math|mod(''a'', ''n'')}} 这样。
有些语言也支持在表达式内使用 "%"、"mod" 或 "Mod" 作为取模或取余操作符。
: <code>a % n</code>
或
: <code>a mod n</code>
或者在一些没有 {{math|mod()}} 函数的环境中使用等价的：
（注意 'int' 事实上等价于截断函数{{math|{{sfrac|''a''|''n''}}}}，进行了向 0 取整）
: <code>a - (n * int(a/n))</code>

== 等价性 ==
一些取模操作，经过分解和展开可以等同于其他数学运算。这在[[密码学|密码学]]的证明中十分有用，例如：[[迪菲-赫爾曼密鑰交換|迪菲-赫爾曼密鑰交換]]。

* 恒等式：
** {{math|(''a'' mod ''n'') mod ''n'' {{=}} ''a'' mod ''n''}}
** 对所有的正数 {{math|''x''}} 有：{{math|''n''{{sup|''x''}} mod ''n'' {{=}} 0}}
** 如果 {{math|''p''}} 是一个[[质数|质数]]，且不为 {{math|''b''}} 的[[因数|因数]]，此时由[[费马小定理|费马小定理]]有：{{math|''ab''{{sup|''p''−1}} mod ''p'' {{=}} ''a'' mod ''p''}}
* 逆运算：
** {{math|[(−''a'' mod ''n'') + (''a'' mod ''n'')] mod ''n'' {{=}} 0}}.
** {{math|''b''{{sup|−1}} mod ''n''}} 表示[[模反元素|模反元素]]。当且仅当 {{math|''b''}} 与 {{math|''n''}} 互质时，等式左侧有定义：{{math|[(''b''{{sup|−1}} mod ''n'')(''b'' mod ''n'')] mod ''n'' {{=}} 1}}。
* 分配律：
** {{math|(''a'' + ''b'') mod ''n'' {{=}} [(''a'' mod ''n'') + (''b'' mod ''n'')] mod ''n''}}
** {{math|''ab'' mod ''n'' {{=}} [(''a'' mod ''n'')(''b'' mod ''n'')] mod ''n''}}
** {{math|''d'' mod (''abc'') {{=}} (''d'' mod ''a'') + ''a''[(''d'' \ ''a'') mod ''b''] + ''ab''[(''d'' \ ''a'' \ ''b'') mod ''c'']}}，符号 {{math|\}} 是[[欧几里德除法|欧几里德除法]]中的除法操作符，运算结果为商
** {{math|''c'' mod (''a+b'') {{=}} (''c'' mod ''a'') + [''bc'' \ (''a''+''b'')] mod ''b'' - [''bc'' \ (''a'' + ''b'')] mod ''a''}}.
* 除法定义：仅当式子右侧有定义时，即 {{math|''b''}}、{{math|''n''}} 互质时有：{{math|{{sfrac|''a''|''b''}} mod ''n'' {{=}} [(''a'' mod ''n'')(''b''{{sup|−1}} mod ''n'')] mod ''n''}}，其他情况为未定义的。
* 乘法逆元：{{math|[(''ab'' mod ''n'')(''b''{{sup|−1}} mod ''n'')] mod ''n'' {{=}} ''a'' mod ''n''}}.

== 性能问题 ==
可以通过依次计算带余数的除法实现取模操作。特殊情况下，如某些硬件上，存在更快的实现。
例如：2 的 n 次幂的模，可以通过[[位操作|逐位]][[逻辑与|与运算]]实现：
: <code>x % 2<sup>n</sup> == x & (2<sup>n</sup> - 1)</code>

例子，假定 {{math|''x''}} 为正数：
: <code>x % 2 == x & 1</code>
: <code>x % 4 == x & 3</code>
: <code>x % 8 == x & 7</code>

在进行位操作比取模操作效率更高的设备或软件环境中，以上形式的取模运算速度更快。<ref>{{cite web |first= Adam |last= Horvath |url= http://blog.teamleadnet.com/2012/07/faster-division-and-modulo-operation.html |title= Faster division and modulo operation - the power of two |date= July 5, 2012|language=en|archiveurl=https://web.archive.org/web/20180305063518/http://blog.teamleadnet.com/2012/07/faster-division-and-modulo-operation.html|archivedate=2018-03-05}}</ref>

编译器可以自动识别出对 2 的 n 次幂取模的表达式，自动将其优化为 <code>expression & (constant-1)</code>。这样可以在兼顾效率的情况下写出更整洁的代码。这个优化在取模结果与被除数符号一致的语言中（包括 C 语言）不能使用，除非被除数是无符号整数。这是因为如果被除数是负数，则结果也是负数，但 <code>expression & (constant-1)</code> 总是正数，进行这样的优化就会导致错误，无符号整数则没有这个问题。

== 用途 ==
* 取模运算可用于判断一个数是否能被另一个数整除。对 2 取模即可判断整数的奇偶性；从 2 到 n-1 取模则可判断一个数是否为质数。
* [[進制|進制]]之間的轉換。
* 用于求取最大公约数的[[輾轉相除法|輾轉相除法]]使用取模运算。
* 密码学中的应用：从古老的[[凯撒密码|凯撒密码]]到现代常用的[[RSA加密演算法|RSA]]、[[椭圆曲线密码学|椭圆曲线密码]]，它们的实现过程均使用了取模运算。

== 參見 ==
* {{tsl|en|Modulo (disambiguation)|模 (消歧义)}}和{{tsl|en|modulo (jargon)|模 (术语)}} —— “模数（Modulo）”这个词的许多用法，都是 1801 年[[卡爾·弗里德里希·高斯|卡爾·弗里德里希·高斯]]引入[[模算數|模算數]]时产生的。
* [[模幂运算|模幂运算]]
* [[同餘|同餘]]

== 脚注 ==
{{NoteFoot}}

== 参考文献 ==
{{Reflist}}

[[Category:計算機算術|Category:計算機算術]]
[[Category:同餘|Category:同餘]]
[[Category:二元運算|Category:二元運算]]
[[Category:运算符_(编程)|Category:运算符_(编程)]]
[[Category:带有C++代码示例的条目|Category:带有C++代码示例的条目]]