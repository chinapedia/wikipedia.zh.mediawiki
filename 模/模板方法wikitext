[[File:Template_Method_UML.svg|thumb]]類圖]]
'''模板方法模型'''是一種行為設計模型。'''模板方法'''是一個定義在父類別的方法，在'''模板方法'''中會呼叫多個定義在父類別的其他方法，而這些方法有可能只是抽象方法並沒有實作，'''模板方法'''僅決定這些抽象方法的執行順序，這些抽象方法的實作由子類別負責，並且子類別不允許覆寫模板方法。

== 用法 ==
模板方法模式多用在：

* 某些類別的演算法中，實做了相同的方法，造成程式碼的重複。
* 控制子類別必須遵守的一些事項。
* ...

==用例（Java）==
<syntaxhighlight lang="java">
 /**
  * An abstract class that is common to several games in
  * which players play against the others, but only one is
  * playing at a given time.
  */
 
 abstract class Game {
 
     private int playersCount;
 
     abstract void initializeGame();
 
     abstract void makePlay(int player);
 
     abstract boolean endOfGame();
 
     abstract void printWinner();
 
     /* A template method : */
     final void playOneGame(int playersCount) {
         this.playersCount = playersCount;
         initializeGame();
         int j = 0;
         while (!endOfGame()){
             makePlay(j);
             j = (j + 1) % playersCount;
         }
         printWinner();
     }
 }

//Now we can extend this class in order to implement actual games:

 class Monopoly extends Game {
 
     /* Implementation of necessary concrete methods */
 
     void initializeGame() {
         // ...
     }
 
     void makePlay(int player) {
         // ...
     }
 
     boolean endOfGame() {
         // ...
     }
 
     void printWinner() {
         // ...
     }
  
     /* Specific declarations for the Monopoly game. */
 
     // ...
 
 }

 class Chess extends Game {
 
     /* Implementation of necessary concrete methods */
 
     void initializeGame() {
         // ...
     }
 
     void makePlay(int player) {
         // ...
     }
 
     boolean endOfGame() {
         // ...
     }
 
     void printWinner() {
         // ...
     }
  
     /* Specific declarations for the chess game. */
 
     // ...
 
 }

 public class Player {
     public static void main(String[] args) {
         Game chessGame = new Chess();
         chessGame.initializeGame();
         chessGame.playOneGame(1); //call template method
     }
 }
</syntaxhighlight>


{{软件设计模式}}
[[Category:软件设计模式|Category:软件设计模式]]