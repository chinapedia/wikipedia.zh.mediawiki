[[file:Sequential_function_chart.png|thumb]]
'''順序功能流程圖'''（{{lang-en|Sequential function chart}}）簡稱'''SFC'''，是為[[可程式邏輯控制器|可程式邏輯控制器]]（PLC）開發的圖形程式語言，是[[IEC_61131-3|IEC_61131-3]]標準定義的五種語言之一。順序功能流程圖是以{{link-en|GRAFCET|GRAFCET}}為基礎<ref>{{cite book
 |first = R. W.
 |last = Lewis
 |title = Programming Industrial Control Systems Using IEC 1131-3 (Control, Robotics and Sensors)
 |booktitle = Programming industrial control systems using IEC 1131-3
 |url = http://www.amazon.com/Programming-Industrial-Control-Systems-Engineering/dp/0852969503
 |access-date = 2015-03-23
 |archive-date = 2016-03-05
 |archive-url = https://web.archive.org/web/20160305020242/http://www.amazon.com/Programming-Industrial-Control-Systems-Engineering/dp/0852969503
 |dead-url = no
 }}</ref>，而後者又以[[Petri网|Petri网]]為基礎<ref>{{cite conference
 |first = J. L.
 |last = Fernandez
 |coauthors = Sanz, R.; Paz, E.; Alonso, C.
 |title = Using hierarchical binary Petri nets to build robust mobile robot applications: RoboGraph
 |booktitle = IEEE International Conference on Robotics and Automation, 2008.
 |pages = 1372–1377
 |date = 19–23 May 2008
 |location = Pasadena, CA, USA
 |url = http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?tp=&arnumber=4543394&isnumber=4543169
 |doi = 10.1109/ROBOT.2008.4543394
 |access-date = 2015-03-23
 |archive-date = 2015-04-02
 |archive-url = https://web.archive.org/web/20150402180024/http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?tp=&arnumber=4543394&isnumber=4543169
 |dead-url = no
 }}</ref>。

順序功能流程圖可以用來可以分為數個步驟的程式。

順序功能流程圖的主要成分有：
* 步驟及其相關的動作。
* 轉態及其相關的邏輯條件。
* 步驟及轉換之間的連結。

<!-- Deleted image removed: [[File:grafset1.png|thumb]] -->
順序功能流程圖中的步驟可以是有效（active）或無效（inactive）。只會執行有效步驟中的動作，步驟可以依以下任一個方式變為有效。
* 是程式撰寫者指定的初始步驟師。
* 在掃描循環中，此步驟被設定有效，且還沒失效。

若有一個步驟，在它前面的所有步驟都是有效的，而且連接到此步驟的轉態條件成立，此步驟會有效。若進行了一個轉態，所有之前的步驟都會失效，而轉態後的步驟會有效。

和步驟有關的動作可以包括許多種類，最常見的是連續（N）、設定（S）及清除（R）。其中N（連續）會確保只要此動作有效，對應的目標變數會恆為1。SFC的規則提到若有二個步驟對同一個目標變數進行動作N，此變數永遠不會清除為零。動作也可以整合LD（[[階梯圖|階梯圖]]）的程式進來。

順序功能流程圖在本質上是平行處理的語言，多個控制流程可以同時有效。

此語言有些非標準的動作，包括「巨集動作」，也就是一個程式單元的動作可以影響另一個程式單元的狀態。最常見的巨集動作是「forcing」，由一個程序運作單元決定另一個程序運作單元的有效步驟。

==參考資料==
{{Reflist}}

[[Category:图表|Category:图表]]
[[Category:工業計算|Category:工業計算]]
[[Category:IEC_61131|Category:IEC 61131]]
[[Category:程序设计语言|Category:程序设计语言]]