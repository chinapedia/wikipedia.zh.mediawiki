{{noteTA
|G1=IT
|1=zh-hans:高级; zh-hant:高階;
|2=zh-hans:编程; zh-hant:程式;
|3=zh-hans:数组; zh-hant:陣列;
|4=zh-hans:进行运算; zh-hant:平行運算;
|5=zh-hans:源程序; zh-hant:原始程式;
|6=zh-hans:高性能计算; zh-hant:高效能運算;
|7=zh-hans:集成; zh-hant:整合;
}}
{{Infobox programming language
|name = Fortran
|logo = File:Fortran logo.svg
|logo size = 160px
|caption = ''The Fortran Automatic Coding System for the [[IBM_704|IBM 704]]'' (15 October 1956), the first Programmer's Reference Manual for Fortran
|paradigm = [[多重范式编程语言|多重范式]]：[[过程化编程|过程化]]、[[指令式编程语言|指令式]]、[[结构化编程|结构化]]、[[面向对象编程|面向对象]]
|year = {{start date and age|1957}}
|designer = [[約翰·巴科斯|約翰·巴科斯]]
|developer = [[約翰·巴科斯|約翰·巴科斯]]與[[IBM|IBM]]
|latest release version = Fortran 2008（ISO/IEC 1539-1:2010）
|latest release date = 2010年
|typing = [[強类型|強类型]]、[[類型系統|靜態]]
|implementations = Absoft, [[GFortran|GFortran]], {{link-en|G95 (编译器)|G95|G95}}, Intel, Lahey/Fujitsu, [[Open_Watcom|Open Watcom]], Pathscale, PGI, Silverfrost, SUN, [[XL_Fortran|XL Fortran]], others
|dialects =
|influenced_by = {{link-en|Speedcoding|Speedcoding}}
|influenced = [[ALGOL_58|ALGOL 58]], [[PL/I|PL/I]],[[BASIC|BASIC]],[[C語言|C語言]], {{link-en|PACT I|PACT I}}, {{en-link|MUMPS}}, {{link-en|Ratfor|Ratfor}}
| file_ext = <code>.f</code>, <code>.for</code>, <code>.f90</code>, <code>.f95</code>
}}

'''Fortran'''，音譯為'''福傳'''，源自於「公式翻译」（{{lang-en|'''For'''mula '''Tran'''slation}}）的縮寫，是一種[[程式語言|程式語言]]。1957年由[[IBM|IBM]]開發出，是世界上第一个被正式采用並流传至今的[[高階語言|高级编程語言]]。

== 历史 ==
[[File:IBM_704_mainframe.gif|right]]（Lawrence Livermore National Laboratory，LLNL）操作的古老[[IBM_704|IBM 704]][[大型主機|大型主機]]。]]
[[File:Punch-card--fortran.jpg|right]]

Fortran语言是為了滿足[[数值计算|数值计算]]的需求而發展出來的。1953年12月，IBM公司工程師[[約翰·巴科斯|約翰·巴科斯]]（J. Backus）因深深體會編寫程序很困難，而寫了一份備忘錄給董事長{{Link-en|斯伯特·赫德|Cuthbert Hurd}}（Cuthbert Hurd），建議為IBM704系統設計全新的電腦語言以提升開發效率。當時IBM公司的顾问[[冯·诺伊曼|冯·诺伊曼]]强烈反对，因為他認為不切實際而且根本不必要。但赫德批准了這項計劃。1957年，[[IBM公司|IBM公司]]开发出第一套FORTRAN语言，在IBM704電腦上運作。歷史上第一支FORTRAN程式在[[馬里蘭州|馬里蘭州]]的西屋貝地斯核電廠試驗。1957年4月20日星期五的下午，一位IBM軟體工程師決定在電廠內編譯第一支FORTRAN程式，當程式碼輸入後，經過編譯，印表機列出一行訊息：“原始程式錯誤……右側括號後面沒有逗號”，這讓現場人員都感到訝異，修正這個錯誤後，印表機輸出了正確結果。而[[西屋電氣公司|西屋電氣公司]]因此意外地成為FORTRAN的第一個商業用戶。1958年推出FORTRAN Ⅱ，幾年後又推出FORTRAN Ⅲ，1962年推出FORTRAN Ⅳ後，開始廣泛被使用。

1966年，[[美国国家标准学会|美国标准化协会]]制定了Fortran（x3.9-1966，也就是Fortran 66）和Fortran（x3.10-1966）标准。这时Fortran语言还不是结构化的程序设计语言。

1976年，[[美国国家标准学会|美国标准化协会]]重新对Fortran（x3.9-1966）进行了评估，公布了新的Fortran标准，也就是Fortran 77。Fortran 77是具有结构化特性的编程语言。Fortran77在短时间内取得了巨大的成功，广泛地应用于科学和工程计算，几乎统治了[[数值计算|数值计算]]领域。

1980年，Fortran 77被ISO接纳为国际标准。

1991年发布的Fortran 90大幅改进了旧版Fortran的型式，加入了面向对象的观念与提供指针，并同时加强[[陣列|数组]]的功能。

Fortran後來又陸續推出Fortran 95、Fortran 2003、Fortran 2008等更新版本。

=== FORTRAN ===
最早的FORTRAN版本應用於IBM 704系統上，包含了32种语句，包括：

* <code>DIMENSION</code>和<code>EQUIVALENCE</code>语句
* 赋值语句
* 三态''算术''<code>IF</code>语句。{{noteTag|注意：通常人们会认为这一语句对应于IBM 704上的一个三态分支指令。但事实并非如此，704的分支指令只包含了一个目标地址（例如，TZE - 转换AC为零，TNZ - 转换AC为非零，TPL - 转换AC为加，TMI - 转换AC为减）。机器（以及它的后继者如[[IBM_700/7000系列#科学结构（704/709/7090/7094）|700/7000系列]]）确实有一个三态''跳转''指令（CAS - 比较AC与存储），那可能是这一说法的最初起源，但是用这一指令来执行<code>IF</code>的话，会消耗4个指令词，需要把常数零放入存储中，然后执行三个机器循环，而如果使用转换指令来实现<code>IF</code>的话，只需要1到3个指令词就够了，不需要将常数存入存储，只需要1到3个机器循环来执行。一个优化的编译器如FORTRAN最有可能采用的是更精简的和通常来说更快的转换指令，而不是比较指令（使用指换指令同时也允许<code>FREQUENCY</code>语句来优化<code>IF</code>，而如果使用比较指令的话则无法实现）。同时，比较指令还将-0和+0认为是不同的值，而转换零和转换非零语句将它们视为相同的值。}}
* 以<code>IF</code>這個陳述式檢查例外情況（<code>ACCUMULATOR OVERFLOW</code>, <code>QUOTIENT OVERFLOW</code>和<code>DIVIDE CHECK</code>）；<code>IF</code>语句以处理[[front_panel|判断开关和判断指示灯]]
* <code>GOTO</code>，计算的<code>GOTO</code>，<code>ASSIGN</code>，和赋值<code>GOTO</code>
* <code>DO</code>循环
* 格式化的輸入與輸出（Formatted I/O）: <code>FORMAT</code>, <code>READ</code>, <code>READ INPUT TAPE</code>, <code>WRITE</code>, <code>WRITE OUTPUT TAPE</code>, <code>PRINT</code>和<code>PUNCH</code>
* 非格式化的輸入與輸出（Unformatted I/O）: <code>READ TAPE</code>, <code>READ DRUM</code>, <code>WRITE TAPE</code>和<code>WRITE DRUM</code>
* 其他的輸入與輸出：<code>END FILE</code>, <code>REWIND</code>，和<code>BACKSPACE</code>
* <code>PAUSE</code>, <code>STOP</code>，和<code>CONTINUE</code>
* <code>FREQUENCY</code>语句（为编译器提供[[optimization_(computer_science)|优化]]帮助）{{noteTag|FORTRAN中的FREQUENCY最初是被用来给算术IF语句的三种分支状态给出可能性的，以供选择代码生成的方式以及生成的代码的[[基本块|基本块]]的顺序，在全局优化时，会在内存中安排以便于优化。第一个FORTRAN编译器使用这一权重法来在编译时作运行时生成代码的[[Monte_Carlo_method|蒙特卡洛模拟]]。在当时来说是非常复杂的。这一技术最初记载于1957年的一篇关于第一个FORTRAN编译器实现的文章中，作者是J. Backus等人。许多年之后，FREQUENCY语句对代码已经没有作用了，就被作为注释语句对待了，因为编译器不再作这种编译时模拟了。

以下摘自1957的论文："FORTRAN自动编码系统"，作者：Backus等人，FREQUENCY语句和它在编译时[[Monte_Carlo_method|蒙特卡洛模拟]]运行时的用法，以优化生成的代码。引文：
<blockquote>
The fundamental unit of program is the basic block; a basic block is a stretch of program which has a single entry point and a single exit point. The purpose of section 4 is to prepare for section 5 a table of predecessors (PRED table) which enumerates the basic blocks and lists for every basic block each of the basic blocks which can be its immediate predecessor in flow, together with the absolute frequency of each such basic block link. This table is obtained by an actual "execution" of the program in Monte-Carlo fashion, in which the outcome of conditional transfers arising out of IF-type statements and computed GO TO'S is determined by a random number generator suitably weighted according to whatever FREQUENCY statements have been provided.
</blockquote>}}

=== FORTRAN II ===
1958年IBM又推出''FORTRAN II''.支援使用者撰寫副程式（subroutines）以及函數（functions）。有六個新陳述如下：

* <code>SUBROUTINE</code>, <code>FUNCTION</code>，和<code>END</code>
* <code>CALL</code>和<code>RETURN</code>
* <code>COMMON</code>

接下來的幾年內，FORTRAN II繼續又支援<code>DOUBLE PRECISION</code>和<code>COMPLEX</code>等数据类型（data types）。

=== FORTRAN III ===
IBM繼續開發''FORTRAN III''至1958年時已可以內建[[組合語言|組合語言]]碼並新增其它功能；然而這個版本卻從未推出。有如704 FORTRAN和FORTRAN II、FORTRAN III等的開發過程包含了過多的機器相依性（machine-dependent），造成程式碼不易移植到其他機器上的問題。早期提供FORTRAN版本的廠商經常為此所苦。

[[File:FortranCodingForm.agr.jpg|thumb]]

=== FORTRAN IV ===
自1961年開始，由於客戶的強烈要求，IBM開始發展''FORTRAN IV''，目的在於移除一些FORTRAN II中過於依賴機器本身的程式碼（例如：<code>READ INPUT TAPE</code>）同時新增一些新的功能，如<code>LOGICAL</code>資料型別。[[布林運算式|布尔类型]]（TRUE或者FALSE）與''逻辑IF语句''則取代了''算术IF语句''。FORTRAN IV於1962年推出，最早應用於[[IBM_7030|IBM 7030]]（"Stretch"）計算機之上，以及其接續的[[IBM_7090|IBM 7090]]和[[IBM_7094|IBM 7094]]版本。

=== FORTRAN 66 ===
早期的FORTRAN語言發展史上最重要的一件大事也許是'''美國標準協會'''（''American Standards Association''，即今日的[[ANSI|ANSI]]）的委員們開始為FORTRAN制定標準規格，名為"American Standard Fortran." 1966年委員會推出兩套FORTRAN標準版本，分別定義成''FORTRAN''（基於FORTRAN IV，用來應付''de facto''標準）和''Basic FORTRAN''（基於FORTRAN II，並且移除其平台依賴性）。FORTRAN第一套標準後來被稱為''FORTRAN 66''（大家仍習慣稱之為FORTRAN IV）。FORTRAN 66有效的成功第一套工業標準版的FORTRAN。其功能如下：

* 主程序，<code>SUBROUTINE</code>，<code>FUNCTION</code>和<code>BLOCK DATA</code>程序单元
* <code>INTEGER</code>, <code>REAL</code>, <code>DOUBLE PRECISION</code>, <code>COMPLEX</code>和<code>LOGICAL</code>数据类型
* <code>COMMON</code>, <code>DIMENSION</code>和<code>EQUIVALENCE</code>语句
* <code>DATA</code>语句用以指定初始值
* 内部和<code>EXTERNAL</code>（''例如''库）函数
* 赋值语句
* <code>GOTO</code>，赋值<code>GOTO</code>和计算<code>GOTO</code>语句
* 逻辑<code>IF</code>和算术（三态）<code>IF</code>语句
* <code>DO</code>循环
* <code>READ</code>, <code>WRITE</code>, <code>BACKSPACE</code>, <code>REWIND</code>和<code>ENDFILE</code>语句以处理顺序读写
* <code>FORMAT</code>语句
* <code>CALL</code>, <code>RETURN</code>, <code>PAUSE</code>和<code>STOP</code>语句
* <code>DATA</code>和<code>FORMAT</code>语句中的[[霍尔瑞斯常数|霍尔瑞斯常数]]，作为子程序的实际参数
* 最长六个字母的标识符
* 注释行

=== FORTRAN 77 ===
在FORTRAN 66標準推出之後，各家編譯器廠商不斷推出更具擴充性的標準FORTRAN（"Standard Fortran"），這使得ANSI於1969年開始著手於1966標準版本的修正工作。最後定稿於1977年，1978年四月正式推出FORTRAN。新的標準規格也就是著名的''FORTRAN 77''，這個版本是基於FORTRAN 66之上新增許多功能，彌補過去的缺點：

* <code>CHARACTER</code>数据类型，极大地扩展了的字符输入和输出以及对基于字符的数据进行处理的工具
* <code>IMPLICIT</code>语句
* <code>IF</code>和<code>END IF</code>语句的块，以及可选的<code>ELSE</code>和<code>ELSE IF</code>从句，提供改进了的对[[结构化编程|结构化编程]]的语言支持。
* <code>OPEN</code>，<code>CLOSE</code>和<code>INQUIRE</code>语句以改进I/O能力
* 直接访问文件I/O
* <code>PARAMETER</code>语句以指定常数
* <code>SAVE</code>语句以保存本地变量
* 内部函数的通用名称

1978年推出了一個重要的版本FORTRAN 77是為MIL-STD-1753 Release版。這個規格由美國國防部制定，這個標準化的FORTRAN 77編譯器並未引入ANSI FORTRAN 77標準。一些新功能最終合併到Fortran 90標準版。

* <code>DO WHILE</code>和<code>END DO</code>语句
* <code>INCLUDE</code>语句
* <code>IMPLICIT NONE</code>变量，用于<code>IMPLICIT</code>语句
* [[位处理|位处理]]内部函数，基于类似的包含在[[Industrial_Real-Time_Fortran|工业实时Fortran（ANSI/ISA S61.1（1976））]]中的函数

1991年推出[[IEEE|IEEE]] 1003.9 [[POSIX|POSIX]]標準版，為Fortran-77的程式人員提供了POSIX system上的呼叫。有超過一百種功能呼叫被定義在文件上。允許存取POSIX-相容的行程控制（process control）、信號取得（signal handling）、檔案系統控制（file system control）、裝置控制（device control）、程序指定（procedure pointing），以及資料流的輸入與輸出（stream I/O）。

由於成功的修正了FORTRAN 77發展流程，使得原本過於緩慢重複的程式設計可以順利的應付計算機領域迅速的變化。同时，作为将近15年的“标准FORTRAN”，FORTRAN 77成為歷史上最重要的一套電腦語言。

=== Fortran 90 ===
FORTRAN 77的被严重推迟的后续版本，非正式名称是''Fortran 90''，最终于1992年作为ANSI标准发表。这一大版本添加了许多新特性以反映自1978年标准以来发展的在编程方面显著的变化：

* [[free-form_language|自由格式源代码输入]]，以及小写的Fortran关键字
* [[module_(programming)|模块]]，将有关联的[[subprogram|过程]]和数据组合在一起，使它们可以被其它程序单元调用，包括允许限制一些模块的特定部分访问。
* [[recursion|<code>RECURSIVE</code>]]过程
* 极大地改善了参数传递机制，允许在编译时检查[[type_signature|接口]]
* 通用过程的用户自定义接口
* [[運算子多載|運算子多載]]
* 衍生／[[abstract_data_type|抽象]]数据类型
* 新的数据类型定义语法，以指定数据类型和变量的其它属性
* 可以在表达式和赋值语句中按整体操作数组（或数组节），由此极大地简化了数学和工程计算。这些特性包括整体、部分和通配的数组赋值（比如用<code>WHERE</code>语句作选择性赋值），数组常数和表达式，用户定义的数组函数和数组构造。
* [[动态内存分配|动态内存分配]]通过<code>ALLOCATABLE</code>属性和<code>ALLOCATE</code>和<code>DEALLOCATE</code>语句
* [[指针|<code>POINTER</code>]]属性，指针赋值和<code>NULLIFY</code>语句以便于创建和操作动态[[数据结构|数据结构]]
* <code>CASE</code>结构以用于多路选择
* <code>EXIT</code>和<code>CYCLE</code>语句以用于在按顺序地"跳出"正常的<code>DO</code>循环重复
* 最长31个字符的标识符
* 行内注释
* 用户可控制的可定义的数字精度
* 新的和增强的内部过程

=== Fortran 95 ===
''Fortran 95''僅是一個小改版，大部份修正了Fortran 90 standard一些較為顯著的問題。雖然如此，Fortran 95仍有不少的擴充，尤其是在[[High_Performance_Fortran|High Performance Fortran]]的規格：

* <code>FOR ALL</code>和嵌套的<code>WHERE</code>结构以帮助向量化
* 用户定义的<code>PURE</code>和<code>ELEMENTAL</code>过程

Fortran 95的一个重要补充是[[国际标准化组织|ISO]]技术报告''[ftp://ftp.nag.co.uk/sc22wg5/N1351-N1400/N1379.pdf TR-15581：增强的数据类型工具]{{dead link|date=2017年11月 |bot=InternetArchiveBot |fix-attempted=yes }}''，非正式名称是''可分配的TR''。这一标准定义了<code>ALLOCATABLE</code>数组的增强的应用，先于与完全的Fortran 2003兼容的Fortran编译器，以供使用。这些使用包括在过程伪参数列表中以及将函数返回值使用<code>ALLOCATABLE</code>数组作为派生的类型组件。（<code>ALLOCATABLE</code>数组比基于<code>POINTER</code>的数组更受欢迎，因为<code>ALLOCATABLE</code>数组是由Fortran 95保证的，当它们退出范围时会被自动释放掉，避免了[[内存溢出|内存溢出]]的可能性。另外，[[aliasing_(computing)|别名]]也不再是优化数组引用时的一个问题，可以使编译器生成比用指针时更快的代码。）

Fortran 95的第二个补充是[[国际标准化组织|ISO]]技术报告''[ftp://ftp.nag.co.uk/sc22wg5/N1351-N1400/N1378.pdf TR-15580：浮点异常处理]{{dead link|date=2017年11月 |bot=InternetArchiveBot |fix-attempted=yes }}''，非正式名称是''IEEE TR''。这一标准定义了对[[IEEE_754|IEEE浮点算术]]和[[浮点|浮点]][[异常处理|异常处理]]的支持。

=== Fortran 2003 ===
''Fortran 2003''有著更大幅度的改版。[[国际标准化组织|ISO]] [http://www.nag.co.uk/sc22wg5/ Fortran Working Group (WG5)]{{Wayback|url=http://www.nag.co.uk/sc22wg5/ |date=20110423074710 }}的官方网站有关于Fortran 2003新特性的详细总结，并有{{PDFlink|[ftp://ftp.nag.co.uk/sc22wg5/N1601-N1650/N1648.pdf PDF文件]}}或者[ftp://ftp.nag.co.uk/sc22wg5/N1601-N1650/N1648.ps.gz <code>压缩</code>PostScript文件]{{dead link|date=2017年11月 |bot=InternetArchiveBot |fix-attempted=yes }}可供直接下载。

据该文所述，本版本的主要改进包括：
* 增强了衍生类型：带参数的衍生类型，改善了控制的可操作性，改善了结构化的创建和释放。
* 支持[[面向对象编程|面向对象编程]]：[[继承_(计算机科学)|扩展类型和继承]]，[[多态_(计算机科学)|多态]]，动态类型分配，以及类型绑定过程。
* 改善了数据操作：可分配的组件（编入IEEE TR 15581），延期的类型参数，[[易变变量|<code>VOLATILE</code>属性]]，在数组构造和分配语句中显式定义类型，增强的指针，扩展的初始化表达式，增强的内部过程。
* 增强的输入／输出：[[asynchrony|异步]]传输，流访问，用户指定衍生类型的传输操作，用户在格式转换时指定舍入控制，为连接前单元指定常数，<code>FLUSH</code>语句，关键字的规范，访问错误信息。
* [[函数指针|过程指针]]。
* 支持[[IEEE_754|IEEE浮点算法]]和[[浮点|浮点]][[异常处理|异常处理]]（编入IEEE TR 15580）。
* 与[[C语言|C语言]]的交互性
* 支持国际化：访问[[ISO_10646|ISO 10646]]4字节字符和在格式化的数字输入／输出中选择数字或者逗号。 	 
* 与宿主操作系统增强的集成：访问[[命令行|命令行]]参数，[[环境变量|环境变量]]和处理器错误信息。

=== Fortran 2008 ===
Fortran 2003之後的下一個版本是Fortran 2008.一如Fortran 95,這只是一個小改版，略微更正了Fortran 2003的一些問題，並且合併了TR-19767的語言功能。

如同February 2007，新的功能包括了{{noteTag|这份报告中有一个完整列表，可查阅于{{PDFlink|http://www.fortran.bcs.org/2006/ukfortran06.pdf|24.2 KB}}.}}
* [[Co-array_Fortran|Co-array Fortran]] –并行處理模式
* [[位元|BIT]]資料型態

2007年8月，資料型態BIT被刪除了。2008年2月，Coarrays的計畫已缩小，僅有Parallel I/O，而研發團隊也被裁員了。

== FORTRAN的特性 ==
* Fortran语言的最大特性是接近[[数学公式|数学公式]]的自然描述，在计算机里具有很高的执行效率。
* 易学，语法严谨。
* 可以直接对[[矩阵|矩阵]]和[[复数_(数学)|复数]]进行运算，這點[[MATLAB|Matlab]]有繼承。
* 自诞生以来广泛地应用于数值计算领域，积累了大量高效而可靠的[[源程序|源程序]]。
* 很多专用的大型数值运算计算机针对Fortran做了优化。
* 广泛地应用于[[并行计算|并行计算]]和[[高性能计算|高性能計算]]领域。
* Fortran 90，Fortran 95，Fortran 2003的相继推出使Fortran语言具备了现代高级编程语言的一些特性。
* 其矩陣元素在記憶空間儲存順序是採用[[行優先|行優先]]（Column major），[[MATLAB|Matlab]]也承襲這點，目前最多使用的[[C語言|C語言]]則採用[[列優先|列優先]]（Row major）。

== FORTRAN的Hello World程式 ==
下面是一个在标准输出设备上输出[[Hello_World程序|Hello World]]的简单程序，这种程序通常作为开始学习编程语言时的第一个程序： 

以Fortran 90/95自由格式的寫法為例
<syntaxhighlight lang="fortran">
! 驚嘆號之後是註解
program main ! 這行可以省略，但是寫大程式的時候會發生混亂
    write (*,*) "hello, world!" ! 第一個* 表示輸出縮排使用內定值，第二個* 表示不指定輸出格式
    write (unit = *, fmt = * ) "hello, world!" ! 做和上一行一樣的事
    stop ! 這行代表程式結束，可以省略
end program main ! end之後的program main也可以省略，但寫上是比較嚴謹
</syntaxhighlight>

== FORTRAN编译器 ==
* Windows操作系统下：
** '''Visual Fortran'''系列
*** '''Fortran Power Station''' 4.0（FPS 4.0），[[微软公司|微软公司]]开发的Fortran编译器。1997年3月转让给[[DEC公司|DEC公司]]。
*** '''Digital Visual Fortran'''（DVF），Fortran Power Station的DEC公司版本，版本号为5.0.x ~ 6.0.x。1998年1月，DEC公司被[[康柏公司|康柏公司]]收购，Digital Visual Fortran更名为Compaq Visual Fortran。
*** '''Compaq Visual Fortran'''（CVF），上述DVF的进一步发展，版本号6.5.x ~ 6.6.B。2002年5月康柏公司已并入[[惠普公司|惠普公司]]，但仍然称为Compaq Visual Fortran，版本号升级到6.6.C。
*** '''Intel Fortran'''，[[英特尔公司|英特尔公司]]开发的Fortran编译器。事实上，惠普购买了Compaq的Fortran编译器技术之后不久，便留下了用于[[Linux|Linux]]／[[UNIX|UNIX]]系统的相关技术，而将[[Windows|Windows]]平台上的Fortran编译器相关权利全部转售给Intel。因此从CVF 6.6.C之后，Windows平台下的Visual Fortran编译器就改由Intel生产和销售了，（需要[[微软|微软]]Visual Studio外壳的支持才能实现Visual IDE功能，Intel只提供命令行界面的编译器内核）。在Intel手上的版本編號從7.0開始至現在。
** '''Lahey Fortran'''
** '''Absoft Fortran'''
** '''OpenWatcom'''
** '''Silverfrost FTN95'''，个人用户可免费使用的Fortran 95编译器套件。支持编译为Win32或.NET可执行程序，内置名为Plato的IDE，也可通过插件支持[[Visual_Studio|Visual Studio]]，调试器使用SDBG。

* Linux操作系统下：
** '''PGI Fortran'''
** '''g77'''，GNU的Fortran 77编译器，集成在[[GCC|GCC]]中。
** '''gfortran'''，GNU的最新的Fortran编译器，集成在GCC 4.x及以上版本中，目前支持全部Fortran 95、大部分Fortran 2003和Fortran 2008的功能，以替代G77。
** '''Intel Fortran'''
** '''Absoft Fortran'''
** '''g95'''，跟GFORTRAN同为开放源代码的Fortran 95编译器。
** '''[[Sun_Studio|Sun Studio]]'''
** '''[[Open64|Open64]]'''編譯器

== FORTRAN的套件 ==
几个著名的Fortran Package：
* IMSL--国际数学和统计链接库
* MKL--Intel数学核心库
* NAG--NAG数学库
* [[BLAS|BLAS]]--Basic Linear Algebra Subroutines
* [[LAPACK|LAPACK]]--Linear Algebra PACKage

==注解==
<references group="註"/>
== 外部链接 ==
* [http://gcc.gnu.org/fortran gfortran]{{Wayback|url=http://gcc.gnu.org/fortran |date=20041010155241 }}
* [http://gfortran.org/ gfortWiki]{{Wayback|url=http://gfortran.org/ |date=20050208125124 }}
* [http://krsna.lamost.org/popular/fortran/fortran.htm 科学计算的语言——FORTRAN95]{{Wayback|url=http://krsna.lamost.org/popular/fortran/fortran.htm |date=20050305111708 }}
* [http://gams.nist.gov/Problem.html 一个可以查找fortran包的网址（英文）]{{Wayback|url=http://gams.nist.gov/Problem.html |date=20050204062934 }}
*[http://www.tw511.com/2/22/749.html Fortran教學] {{Wayback|url=http://www.tw511.com/2/22/749.html |date=20220417222944 }}

== 參見 ==
* [[High_Performance_Fortran|High Performance Fortran]] -[[高效能運算|高性能計算]]專用的Fortran程式語言

{{-}}
{{程序设计语言|Fortran}}

[[Category:Fortran|]]
[[Category:陣列編程語言|Category:陣列編程語言]]
[[Category:过程式编程语言|Category:过程式编程语言]]
[[Category:数值式编程语言|Category:数值式编程语言]]
[[Category:面向对象的编程语言|Category:面向对象的编程语言]]
[[Category:Fortran编程语言家族|Category:Fortran编程语言家族]]
[[Category:计算机标准|Category:计算机标准]]
[[Category:Unix编程工具|Category:Unix编程工具]]
[[Category:静态类型编程语言|Category:静态类型编程语言]]
[[Category:美国发明|Category:美国发明]]
[[Category:ISO标准化编程语言|Category:ISO标准化编程语言]]