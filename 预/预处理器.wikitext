{{noteTA
|G1=IT
|1=zh-cn:引用;zh-tw:參考;
|2=zh-cn:解引用;zh-tw:反參考;
}}
在[[计算机科学|计算机科学]]中，'''预处理器'''是[[计算机程序|程序]]中处理输入数据，产生能用来输入到其他程序的数据的程序。输出被称为输入数据'''预处理过'''的形式，常用在之后的程序比如[[编译器|编译器]]中。所作处理的数量和种类依赖于预处理器的类型，一些预处理器只能够执行相对简单的文本替换和[[巨集|巨集]]展开，而另一些则有着完全成熟的[[编程语言|编程语言]]的能力。

一个来自[[计算机编程|计算机编程]]的常见的例子是在进行下一步编译之前，对[[源代码|源代码]]执行处理。在一些[[计算机语言|计算机语言]]（例如：[[C语言|C语言]]）中有一个叫做'''预处理'''的[[编译器|翻译]]阶段。

==词法预处理器==
词法预处理器是最低级的预处理器，因为它们只需要[[词法分析|词法分析]]，也就是说，它们在[[语法分析器|语法分析]]处理之前，根据用户定义的规则，进行简单的词法单元替换。典型的词法预处理器产生[[宏替换|宏替换]]，[[头文件|包含]]其他文件的文本，并且条件性地[[编译|编译]]或者包含文件。

===C预处理器===
最常见的例子是[[C预处理器|C预处理器]]，采用以'#'为行首的指示。因为它不知道底层语言，它的使用被批评并且它的许多功能被其它语言直接内建。例如，巨集替换被显式内联和模板替代，包含变为编译期导入（compile-time import，这需要在目标代码中预先保存类型信息，使这个功能无法改进一个语言）；条件编译被<code>if-then-else</code>和死代码消除替代。

===其他预处理器===
其他词法预处理器包括一般用途的[[m4_(language)|m4]]，最常用的跨平台构建系统，比如[[autoconf|autoconf]]，和开源的巨集处理器[[general-purpose|GEMA]]，操作上下文模式。

==句法预处理器==
句法预处理器是由[[Lisp|Lisp]]家族语言引进的。它们的作用是根据若干用户定义的规则转换语法树。对于某些程序语言，这些规则是使用同一种语言来写的（compile-time reflection）。这就是[[Lisp|Lisp]]和[[OCaml|OCaml]]的情况。某些程式語言依靠一個完全的外部語言來定義轉換，例如[[XSLT|XSLT]]處理器處理[[XML|XML]]的方式，或與靜態類型的對應語言[[CDuse|CDuse]]。

靜態處理器常被用來自定程式語言的語法，並透過增加新的primitives或嵌入[[特定領域語言|特定領域語言]]到一般用途的語言裡來擴充。

===自定義語法===
關於自定義語法的一個好例子是在[[OCaml|OCaml]]程式語言裡兩個不同語法的存在。<ref>[http://caml.inria.fr/pub/docs/manual-camlp4/manual007.html The Revised syntax] {{Webarchive|url=https://wayback.archive-it.org/all/20150924210556/http://caml.inria.fr/pub/docs/manual-camlp4/manual007.html |date=2015-09-24 }} from The Caml language website</ref>程式可能平常地由「正常語法」或「校正過的語法」寫成，並且按需求由兩者之一進行程式優化

類似地，一些[[OCaml|OCaml]]語言寫成的程式藉由新運算符的增加來自定化語言的語法。

===擴充語言===
對於從巨集擴充語言最好的範例可在[[LISP|LISP]]語言家族裡找到。這種語言本身就是簡單的動態類型核心模塊，[[Scheme|Scheme]]或[[Common_Lisp|Common Lisp]]的標準分配允許了命令或物件導向的程式編輯，靜態類型亦如此。幾乎所有這些特性都由語法預處理執行，雖然它的「巨集擴充」編譯階段由LISP的編譯器處理這點很值得一提就是。這仍然可以視為預處理的一種形式，因為它在編譯階段前就進行了。

類似地，靜態檢查、類型安全[[正規表式|正規表式]]或[[代碼生成|代碼生成]]可能透過巨集被加入到[[OCaml|OCaml]]的語法和語義裡，如同微線程（亦稱為[[協程|協程]]或[[纖程|纖程]]）、[[单子_(函数式编程)|單子]]或透明的XML操作。

===語言專門化===
==作為模板引擎的預處理器==
任何「一般目的預處理器」，例如[[M4_(程式語言)|M4]]，都可以當成[[模版引擎|模版引擎]]（template engine）使用。

== 参考文献 ==
{{Reflist}}

==外部链接==
* [https://web.archive.org/web/20090214092527/http://lispm.dyndns.org/news?ID=NEWS-2005-07-08-1 DSL Design in Lisp]
* [http://www.paulgraham.com/progbot.html Programming from the bottom up]
* The [http://www.owl-s.org/tools.en.html#gpp Generic PreProcessor]
* Gema, the [http://gema.sourceforge.net General Purpose Macro Processor]
* The [[PIKT|PIKT]] [http://pikt.org/pikt/ref/ref.4.piktc.html piktc] [http://pikt.org/pikt/ref/ref.3.html text, script, and configuration file preprocessor]
* [http://freshmeat.net/projects/minimac-macro-processor minimac, a minimalist macro processor]
* [http://igormaznitsa.com/projects/jcp/index.html Java Comment Preprocessor]

[[Category:程序设计语言|Category:程序设计语言]]