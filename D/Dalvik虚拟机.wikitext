{{NoteTA|G1=IT}}
{{Infobox software
| name = Dalvik
| logo =
| screenshot =
| caption =
| collapsible =
| author = Dan Bornstein
| developer =
| released = <!-- {{Start date|YYYY|MM|DD}} -->
| discontinued =
| latest release version =
| latest release date = <!-- {{Start date and age|YYYY|MM|DD}} -->
| latest preview version =
| latest preview date = <!-- {{Start date and age|YYYY|MM|DD}} -->
| frequently updated =
| programming language =
| operating system = [[Linux|Linux]]
| platform = [[Android|Android]]
| size =
| language =
| status =
| genre = [[虚拟机|虚拟机]]
| license = [[Apache_License|Apache License]] 2.0
| website = https://source.android.com/devices/tech/dalvik/index.html
}}
{{Infobox file format
| name = Dalvik执行文件
| extension = .dex
}}
'''Dalvik虚拟机'''，是[[Google|Google]]等厂商合作开发的[[Android|Android]]移动设备平台的核心组成部分之一。它可以支持已转换为.dex（即「Dalvik Executable」）格式的[[Java|Java]]应用程序的运行。.dex格式是专为Dalvik设计的一种压缩格式，适合[[内存|内存]]和[[处理器|处理器]]速度有限的系统。Dalvik由Dan Bornstein编写的，名字来源于他的祖先曾经居住过的小渔村[[達爾維克|達爾維克]]（{{lang|is|Dalvík}}），位于[[冰島|冰島]][[埃亚峡湾|埃亚峡湾]]。

大多数[[虚拟机|虚拟机]]包括[[JVM|JVM]]都是一種[[堆疊機器|堆疊機器]]，而Dalvik虚拟机则是[[寄存器机|寄存器机]]。两种架构各有优劣，一般而言，基于堆疊的机器需要更多指令，而基于寄存器的机器指令更长。

從[[Android_5.0|Android 5.0]]版起，[[Android_Runtime|Android Runtime]]（ART）取代Dalvik成為系統內預設虛擬機。

==架構==
dx工具是一种用來轉換Java class成為DEX格式的工具。多個类被包含在一個dex文件之中。各個类中重複的字串和其他常數只在DEX中存放一次，以節省空間。Java字節碼（bytecode）被轉換成Dalvik虛擬機所使用的替代指令集。一個未壓縮dex文件通常稍小於一個已經壓縮的.jar檔。

安裝到行動設備之時，Dalvik可執行檔可能會被修改。為了獲得進一步优化，虚拟机可能會调整文件内部分数据的[[字节序|端序]]、[[内联函数|内联]]一些函数和简单的结构体、并短路掉一些不必要的操作。

当Android启动时，Dalvik VM监视所有的程序（APK），并且创建依存关系树，为每个程序优化代码并存储在Dalvik缓存中。Dalvik第一次加载后会生成Cache文件，以提供下次快速加载，所以第一次會很慢。

{{Fact|Dalvik直譯器採用預先算好的Goto位址，每個指令对内存的访问都在64字节边界上对齊。這樣可以節省一個指令後進行查表的時間。為了強化功能, Dalvik還提供了快速翻译器（Fast Interpreter）。|time=2013-02-11T13:54:27+00:00}}

==dx==
dx是一套工具，可以將Java .class轉換成.dex格式。一個dex檔通常會有多個.class。由於dex有時必須進行优化，會使檔案大小增加1-4倍，以ODEX结尾。

==差異==
* Dalvik虚拟机早期并没有使用[[即时编译|即时编译]]（JIT）技术。从[[Android_2.2|Android 2.2]]开始，Dalvik虚拟机也支持JIT。
* Dalvik虚拟机有自己的[[字节码|字节码]]，並非使用Java字节码。
* Dalvik基于暫存器，而JVM基于堆疊。
* Dalvik VM透過Zygote進行類別的预加载，Zygote会完成虚拟机的初始化，也是與JVM不同之處。

== 参考资料 ==
*[http://sites.google.com/site/developerdaychina/google-developer-day-2008-china/android-dalvik-vm Dan Bornstein的讲座资料]{{Wayback|url=http://sites.google.com/site/developerdaychina/google-developer-day-2008-china/android-dalvik-vm |date=20090221000002 }}

{{Android}}

[[Category:Android|Category:Android]]
[[Category:Java虚拟机|Category:Java虚拟机]]