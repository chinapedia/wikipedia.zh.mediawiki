{{多個問題|
{{expert|time=2014-10-06T07:05:18+00:00}}
{{unreferenced|time=2014-10-06T07:05:18+00:00}}
{{No footnotes|time=2010-05-12T13:14:02+00:00 }}
}}
'''享元模式'''（英語：Flyweight Pattern）是一種軟體[[設計模式_(計算機)|設計模式]]。它使用物件用來儘可能減少記憶體使用量；於相似物件中分享儘可能多的資訊。當大量物件近乎重複方式存在，因而使用大量記憶體時，此法適用。通常物件中的部分狀態(state)能夠共享。常見做法是把它們放在資料結構外部，當需要使用時再將它們傳遞給享元。

典型的享元模式的例子為[[文書處理器|文書處理器]]中以圖形結構來表示字符。一個做法是，每個[[字形|字形]]有其字型外觀, 字模 metrics, 和其它格式資訊，但這會使每個字符就耗用上千位元組。取而代之的是，每個字符參照到一個共享字形物件，此物件會被其它有共同特質的字符所分享；只有每個字符（文件中或頁面中）的位置才需要另外儲存。

== 示例 ==
===[[Java|Java]]===
以下程式用來解釋上述的文字。這個例子用來解釋享元模式利用只加載执行任務时所必需的最少資料，因而減少記憶體使用量。

<syntaxhighlight lang="java">
public enum FontEffect {
    BOLD, ITALIC, SUPERSCRIPT, SUBSCRIPT, STRIKETHROUGH
}

public final class FontData {
    /**
     * A weak hash map will drop unused references to FontData.
     * Values have to be wrapped in WeakReferences, 
     * because value objects in weak hash map are held by strong references.
     */
    private static final WeakHashMap<FontData, WeakReference<FontData>> FLY_WEIGHT_DATA =
        new WeakHashMap<FontData, WeakReference<FontData>>();
    private final int pointSize;
    private final String fontFace;
    private final Color color;
    private final Set<FontEffect> effects;

    private FontData(int pointSize, String fontFace, Color color, EnumSet<FontEffect> effects) {
        this.pointSize = pointSize;
        this.fontFace = fontFace;
        this.color = color;
        this.effects = Collections.unmodifiableSet(effects);
    }

    public static FontData create(int pointSize, String fontFace, Color color,
        FontEffect... effects) {
        EnumSet<FontEffect> effectsSet = EnumSet.noneOf(FontEffect.class);
        for (FontEffect fontEffect : effects) {
            effectsSet.add(fontEffect);
        }
        // We are unconcerned with object creation cost, we are reducing overall memory consumption
        FontData data = new FontData(pointSize, fontFace, color, effectsSet);

        // Retrieve previously created instance with the given values if it (still) exists
        WeakReference<FontData> ref = FLY_WEIGHT_DATA.get(data);
        FontData result = (ref != null) ? ref.get() : null;
        
        // Store new font data instance if no matching instance exists
        if (result == null) {
            FLY_WEIGHT_DATA.put(data, new WeakReference<FontData> (data));
            result = data;
        }
        // return the single immutable copy with the given values
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof FontData) {
            if (obj == this) {
                return true;
            }
            FontData other = (FontData) obj;
            return other.pointSize == pointSize && other.fontFace.equals(fontFace)
                && other.color.equals(color) && other.effects.equals(effects);
        }
        return false;
    }

    @Override
    public int hashCode() {
        return (pointSize * 37 + effects.hashCode() * 13) * fontFace.hashCode();
    }

    // Getters for the font data, but no setters. FontData is immutable.
}
</syntaxhighlight>

==外部連結==
*[https://web.archive.org/web/20090515033126/http://www.lepus.org.uk/ref/companion/Flyweight.xml UML 和 LePUS3 （一種形式塑模語言）中的享元模式]
*"[http://www.javaworld.com/javaworld/jw-07-2003/jw-0725-designpatterns.html 使你的程式飛起來 - 實作享元以改善效能] {{Wayback|url=http://www.javaworld.com/javaworld/jw-07-2003/jw-0725-designpatterns.html |date=20131105213545 }}"
*"[https://web.archive.org/web/20081120123754/http://codeproject.com/gen/design/testvalidators.asp 享元模式]"
*[https://web.archive.org/web/20100501123706/http://www.allapplabs.com/java_design_patterns/flyweight_pattern.htm 結構模式 - 享元模式]


{{软件设计模式}}
[[Category:軟體設計模式|Category:軟體設計模式]]