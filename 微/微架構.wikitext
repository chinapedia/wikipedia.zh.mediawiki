{{article issues
|
{{Expand|time=2010-06-02T05:49:21+00:00}}
{{Expert|time=2010-06-02T05:49:21+00:00}}
{{Expand language|en}}

}}
{{NoteTA|G1=IT}}
[[File:Intel_Core2_arch.svg|thumb]]的微架構]]

'''微架構'''（{{lang-en|microarchitecture}}），也被叫做'''計算機組織'''，微架構使得[[指令集架構|指令集架構]]（ISA）可以在處理器上被執行。指令集架構可以在不同的微架構上執行。
[[電腦系統結構|計算機結構]]是一門探討微架構與指令集兩者互動的一門學問。

==和指令集架構的關係==
指令集架構是指在處理器內被處理的程式，指令集架構為[[組合語言|組合語言]]的設計師和編譯器所見。指令集架構包含execution model，[[暫存器|暫存器]]，地址以及資料格式。微架構包含處理器內部的構成以及這些構成起來的部分如何執行指令集架構。微架構通常被表示成[[流程圖|流程圖]]，以描述機器內部元件的連結狀況，從一個閘或是暫存器，到[[算術邏輯單元|算術邏輯單元]]（ALU）。圖上分布著[[資料路徑|資料路徑]]（可以顯示資料在微架構的位置）以及[[控制路徑|控制路徑]]（顯示資料該被什麼指令所處理）。

每個微架構的的元件都被表示成藉數個[[邏輯閘|邏輯閘]]所建構而成的工具。每個邏輯閘都被表示成藉電晶體建構成的零件。擁有不同微架構的機器可能擁有相同的指令集架構，因此可以執行相同的程式。由於半導體科技的進步，新型的處理器可以以較快的速度執行相同的指令集架構。

==微架構的概念==
[[File:Intel_i80286_arch.svg|left]]微架構]]

现时，[[指令管線化|流水线]][[数据路徑|数据路徑]]是微架構中最常被使用的数据路徑。這種作法也被普遍的用於微處理器，[[微控制器|微控制器]]，以及[[数字信号处理器|数字信号处理器]]。流水线的結構允許多個指令在同一時間執行，不同的指令在微架構不同的位置執行。流水线分有好幾個不同的階段（stage），這些階段是微架構的基礎。這些階段包含取指令，译码，執行指令，以及將資料寫回。一些結構還包含其他階段，像是對記憶體做存取的動作。流水线是微架構其中一項主要的工作。執行單元也是微架構的基本元件。執行單元包含[[算術邏輯單元|算術邏輯單元]]（ALU），[[浮點運算器|浮點運算器]]（FPU），load/store單元，分支預測，以及[[單指令多数据|SIMD]]。這些單元在處理器內進行計算。執行單元的數量，他們的延迟（記憶體存取資料的時間）及吞吐量（將資料存到或是讀取出記憶體的速度）影響微架構的效能。 




===指令週期===
{{Main|指令週期}}
所有的[[中央處理器|中央處理器]]，微處理器藉由以下的步驟來執行程式：
# 讀取指令並將其译码
# 找到需要用到的資料以執行指令
# 執行指令
# 將結果寫回

指令週期將會不斷循環，直到電力用盡。

===執行速度===
上面的步驟看起來簡單，但階層記憶體使這些步驟變得複雜，階層記憶體包含[[快取|快取]]，[[電腦數據存貯器|主記憶體]]，以及非揮發性的記憶體，例如[[硬碟|硬碟]]（這是指令和資料儲存的地方），總是比處理器處理資料的速度慢。步驟（2）常常導致lengthy（在CPU內）delay，這種延遲是在数据通過[[匯流排|匯流排]]時產生。一直以來，一個不變的目標是在同一時間內執行更多指令，以提升程式執行的效率。這導致邏輯和電路設計變得更複雜。一開始，只有大型電腦和超級電腦使用這種技術，因為這種技術需要大量的電路。當半導體產業發展起來後，這樣的技術被加裝在單一的半導體晶片上。詳見[[摩爾定律|摩爾定律]]（集成電路可容納的晶体管數量，每二年增加一倍）。

===指令集的選擇===
指令集從過去以來不斷的變化，從一開始的簡單到後來的複雜。最近，[[load-store結構|load-store結構]]，[[超長指令字|VLIW]]以及[[EPIC|EPIC]]是最普遍的指令集。結構處理[[data_parallelism|data parallelism]]的方法包括[[單指令流多數據流|SIMD]]以及[[並行向量處理機|向量]]。一些指令集，例如CISC；多早期的裝置使用"[[複雜指令集架構|CISC]]"。

然而，對[[指令集架構|指令集架構]]的選擇可能會對實作高效能的機器產生大的影響。發展RISC處理器是一個好的策略，可以將指令給簡化。這樣的指令容易在管線內被擷取，解碼與執行，由於指令頻繁的被使用，快取便被頻繁的使用，這樣就使記憶體存取的時間降低。 

===流水线(pipeline)===
{{Main|指令流水线化}}

在目前，能夠最有效的提升效能的方法就是[[指令流水线化|流水线]]。早期的處理器是等一個指令執行完所有步驟後，然後才輪到下一個指令執行。大部分的電路在某一個步驟結束後就處在閒置的狀態，例如，對指令進行解碼的電路在指令進入執行階段後就處於閒置狀態。

流水线化的電路藉由允許多個指令在同一時間，在電路上不同的位置進行不同的工作。例如，處理器可以在最後一個指令等待結果寫回時對另一個指令解碼。這使得處理器在同一時間可以處理四個指令，使處理器的效能增加了四倍。

RISC藉由將每個階段分割清楚並讓每個階段都花費一樣的時間執行來讓流水线變小和變得容易建構—每個階段花費1個cycle的時間。處理器使用了有如工廠[[流水线|流水线]]的設計，當指令由一邊進來的同時就有另一個指令從另一邊出去。由於[[RISC流水线|RISC流水线]]是降低複雜度的設計，使得流水线核心跟指令快取可以被裝置在同一個芯片內，這是精簡指令集較為快速的原因。早期的裝置，例如[[SPARC|SPARC]]和[[MIPS架構|MIPS]]比[[英特爾|Intel]]和[[摩托羅拉|Motorola]]的CISC還快10倍。

==與指令集架構的關係==
指令集架構大致上和處理器的程式設計模型（programming model）一樣。指令集架構包括執行模型（execution model），[[暫存器|暫存器]]（Processor register），位址和數據格式等。微架構包括處理器的組成部份和對指令集架構的連接和操作。一個系統的微架構通常以描述不同微架構組成部份如何互相連接的平面圖代表，而這些微架構組成部份可以是簡單的邏輯閘（Logic gates），電阻，或是算術邏輯單元（Arithmetic logic unit　，ALU）等大型元件。這些平面圖通常把數據路徑（[http://en.wikipedia.org/wiki/Datapath Data path] {{Wayback|url=http://en.wikipedia.org/wiki/Datapath |date=20220606120023 }}）和控制路徑（control path）分開。每個組成部份會以示意圖表達他們和執行他們的邏輯閘之間的連繫。

== 几種典型的微架構 ==
=== Intel ===
* [[Pentium|P5]]
* [[英特爾P6|P6]]
* [[NetBurst|NetBurst]]
* [[Core微架构|Core]]
* [[Nehalem|Nehalem]]/[[Westmere|Westmere]]
* [[Sandy_Bridge|Sandy Bridge]]/[[Ivy_Bridge|Ivy Bridge]]
* [[Haswell|Haswell]]/[[Broadwell|Broadwell]]
* [[Skylake|Skylake]]
* [[Kaby_Lake|Kaby Lake]]
* [[Coffee_Lake|Coffee Lake]]
* [[Comet_Lake|Comet Lake]]
* [[Ice_Lake|Ice Lake]]

=== AMD ===
{{Main|AMD CPU微架構列表}}
* [[AMD_K5|K5]] - AMD的首个原创微架构。K5基于Am29000的微架构，并且添加了一个x86的解码器。即使这个设计的原理和Pentium Pro相同，而实际性能更像是Pentium。
* [[AMD_K6|K6]] - K6并非基于K5,而是基于当时已经被AMD所收购了的NexGen所设计的Nx686处理器，K6的针脚兼容Intel Pentium。
** [[AMD_K6-2|K6-2]]微架构 - 增加了3DNow! SIMD指令集。
** [[AMD_K6-III|K6-III]]微架构 - 有3级缓存，64KB L1一级缓存，256KB L2二级全速缓存，最高可达2MB的主板装载（motherboard mounted）L3三级缓存。
* [[AMD_K7|K7]] - 是AMD Athlon和Athlon XP的微架构。

* [[AMD_K8|K8]]微架构 - 全球首款[[x86-64|x86-64]]處理器，集成了[[記憶體控制器|記憶體控制器]]（Integrated Memory Controller），采用[[HyperTransport|HyperTransport]]技術，增加了[[SSE|SSE]]指令集。后期的K8增加了SSE3。K8在2003年4月22日上市。HyperTransport取代了传统的[[前端总线|前端总线]]，让CPU直接和[[內存|內存]]链接。

* K9 - 被取消。

* [[K10|K10]]微架构 - 代号为Barcelona ,是AMD系列的第十代微架构，最多内置四个核心，共享Level 3 Cache第三级缓存，128位浮点单元，支援AMD-V Nested Paging Virtualization和HyperTransport 3.0。

* [[AMD_Bulldozer|Bulldozer]] - 是继K10之后，使用AMD M-SPACE模块化设计方法（modular design methodology）的微架构。Bulldozer是为功耗在10W至100W类别的处理器而设计，应用了XOP，[[FMA|FMA]]和CVT16指令集，并且部分產品整合了[[GPU|GPU]]核心（[[AMD_APU|AMD APU]]）。

*[[Zen微架構|Zen微架構]] - AMD在[[2017年|2017年]]推出的微架構，是多年來效能最接近Intel的產品。採用[[14納米製程|14納米製程]]。

*[[Zen+微架構|Zen+微架構]] - AMD在[[2018年|2018年]]推出的微架構，CPU晶片採用[[12納米製程|12納米製程]]。

*[[Zen_2微架構|Zen 2微架構]] - AMD在[[2019年|2019年]]推出的微架構，CPU晶片採用[[7納米製程|7納米製程]]。
*Zen 3 - AMD在2020年推出的微架構

== 微架構的發展方向 ==
{{listdev}}

== 参考文献 ==
{{Reflist}}
* 《计算机科学技术百科全书》（第二版）. 作者：张效祥. 出版社：清华大学出版社,2005年. ISBN：7302105944, 9787302105947

== 參見 ==
* [[AMD_CPU微架构列表|AMD CPU微架构列表]]
* [[指令集架構|指令集架構]]
*[[计算机系统结构|计算机系统结构]]
{{-}}
{{CPU technologies}}
{{Computer Science}}

[[Category:微處理器|Category:微處理器]]
[[Category:中央處理器|Category:中央處理器]]
[[Category:電腦架構|Category:電腦架構]]
[[Category:計算機科學|Category:計算機科學]]
[[Category:計算機架構|Category:計算機架構]]
[[Category:指令處理|Category:指令處理]]