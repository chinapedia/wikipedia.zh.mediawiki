{{NoteTA|G1=IT}}
'''设备文件'''在[[类Unix系统|类Unix系统]]中是一个设备驱动程序的界面，并被存储在[[文件系统|文件系统]]中，就像常规文件。

在[[微软|微软]]的[[MS-DOS|MS-DOS]]、OS-2和[[Windows|Windows]]等[[操作系统|操作系统]]中也有专门的设备文件。它们允许应用程序使用设备驱动程序，通过标准[[输入输出|输入输出]]系统调用与驱动程序交互，从而简化了许多任务，也带来了与设备特性、功能无关的用户级I/O。

设备文件通常为周边设备提供简单的接口，如[[打印机|打印机]]。它也可访问这些设备的特定资源，如硬盘分区。它还可以访问没有连接到任何真实设备的[[系统资源|系统资源]]，如[[数据接受器|数据接受器]]和[[随机数生成器|随机数生成器]]。

在类Unix操作系统中包含两类设备节点，分别为字符文件与块文件。它们的区别是操作系统和硬件如何向它们读写数据。它们合称为'''设备特定文件'''，与之对应的是[[命名管道|命名管道]]，它既不连接到任何设备，也不是一个文件。

MS-DOS的设备文件借鉴了Unix的特殊文件的概念。MS-DOS的早期版本并不支持文件目录层次，设备文件的文件名被设定为[[保留字|保留字]]以区分普通文件，新文件或新目录不能够使用这些设备文件的文件名。

在支持chroot进程独立的Unix系统（例如[[Solaris_Containers|Solaris Containers]]）中，每个chroot环境中常规情况下都需要一个独立的<tt>/dev</tt>,它们的挂载点在主机的文件系统中各种地方显示。通过限制设备节点只能放入<tt>/dev</tt>内的chroot实例中，chroot环境可以强制实行硬件隔离（比Unix的[[文件系统权限|文件系统权限]]还要严格的一种[[访问控制|访问控制]]，可以禁止特定应用程序访问或命名硬件）。

MS-DOS通过开放设备文件的形式保证了设备包含性，应用程序尝试访问正在被使用的设备时会无法访问设备节点。Unix与Linux在[[并发控制|并发控制]]上采取了多种设备驱动程序的原理。<ref>{{en icon}}{{cite book |last=Corbet |first=Jonathan |last2=Kroah-Hartman |first2=Greg |last3=Rubini |first3=Alessandro |date=2005 |title=Linux Device Drivers, 3rd Edition |url=http://www.makelinux.net/ldd3/chp-6-sect-6 |publisher=[[O'Reilly|O'Reilly]] |page= |isbn= |quote=The next step beyond a single-open device is to let a single user open a device in multiple processes but allow only one user to have the device open at a time. |access-date=2018-04-30 |archive-url=https://web.archive.org/web/20170922125937/http://www.makelinux.net/ldd3/chp-6-sect-6 |archive-date=2017-09-22 |dead-url=yes }}</ref>

== 实现 ==
本质上讲，设备节点对应于操作系统分配的资源。Unix通过存放于节点结构中的''主设备号''和''从设备号''来识别这些资源。在各种[[操作系统|操作系统]]和[[系统平台|系统平台]]上，这些数都是被唯一分配的。通常，主数用于指定[[驱动程序|驱动程序]]，而次数用于指定驱动程序控制的某一特定设备（驱动程序可能控制多个设备），在这种情况下，系统可能把次数作为参数传给驱动程序。

计算机就像对待普通文件那样，用标准[[系统调用|系统调用]]访问设备节点。根据硬件的接口类型和操作系统处理[[输入输出|输入输出]]的方式，设备文件可以分成两类。

== 设备 ==
=== 字符设备 ===
[[Image:Nuvola-fs-chardev.svg|64px]]
''字符设备''是指每次与系统传输1个字符的设备。这些设备节点通常为[[传真|传真]]、[[虚拟终端|虚拟终端]]和串口[[调制解调器|调制解调器]]之类设备提供流通信服务，它通常不支持[[随机存取|随机存取]]数据。

字符设备在实现时，大多不使用[[缓存器|缓存器]]。系统直接从设备读取／写入每一个字符。

=== 块设备 ===
[[Image:Nuvola-fs-blockdev.svg|64px]]
''块设备''是指与系统间用块的方式移动数据的设备。这些设备节点通常代表可寻址设备，如[[硬盘|硬盘]]、[[CD-ROM|CD-ROM]]和[[内存|内存]]区域。

块设备通常支持[[随机存取|随机存取]]和寻址，并使用[[缓存器|缓存器]]。操作系统为输入输出分配了缓存以存储一块数据。当程序向设备发送了读取或者写入数据的请求时，系统把数据中的每一个字符存储在适当的缓存中。当缓存被填满时，会采取适当的操作（把数据传走），而后系统清空缓存。

=== 伪设备 ===
在类Unix操作系统中，设备节点并不一定要对应物理设备。没有这种对应关系的设备是''伪设备''。操作系统运用了它们提供的多种功能。部份經常使用到的偽設備包括：

;<code>[[设备文件系统/dev/null|设备文件系统//dev/null]]</code>:接受并丟棄所有輸入；即不產生任何輸出。
;<code>[[设备文件系统/dev/full|设备文件系统//dev/full]]</code>:永遠在被填滿狀態的設備。
;<code>[[设备文件系统/dev/loop|设备文件系统//dev/loop]]</code>:[[Loop設備|Loop設備]]
;<code>[[设备文件系统/dev/zero|设备文件系统//dev/zero]]</code>:產生連續的NUL字元的串流(數值為0)。
;<code>[[设备文件系统/dev/random|设备文件系统//dev/random]]</code>:產生一個虛假隨機的任意長度字元串流。(Blocking)
;<code>[[设备文件系统/dev/urandom|设备文件系统//dev/urandom]]</code>:產生一個虛假隨機的任意長度字元串流。(Non-Blocking)

== 创建节点 ==
节点是由''mknod''系统调用创建的。在命令行中，有同名的程序来创建节点。rename和unlink系统调用可以用于移动和删除节点，相应的命令是mv和rm。在使用cp命令时加上<code>-R</code>或<code>-a</code>参数，可以创建一个与原设备节点具有同样属性的节点。

== 命名约定 ==
在基于Linux的系统中，设备节点一般在<code>/dev</code>下，通常使用如下的前缀：
* fb：frame缓冲
* fd：[[软盘|软盘]]
* hd：[[IDE|IDE]][[硬盘|硬盘]]或光驱
* lp：[[打印机|打印机]]
* par：[[并口|并口]]
* pt：伪终端
* s：[[SCSI|SCSI]]设备
** scd：SCSI音频光驱
** sd：SCSI硬盘
** sg：SCSI通用设备
** sr：SCSI数据光驱
** st：SCSI[[磁带|磁带]]
* tty：[[终端|终端]]
** ttyS：[[串口|串口]]

大部分设备的前缀名后面跟随一个数字，它唯一指定某一设备。硬盘驱动器的前缀名后面跟随一个字母和一个数字，字母用于指明设备，而数字用于指明分区。因此，<code>/dev/sda3</code>指定了硬盘上的一个分区，<code>/dev/pts/14</code>指定了一个网络终端会话。

一些Linux发行版用SCSI层来定义非IDE硬盘的硬盘设备，例如SATA硬盘、USB磁盘等，因此虽然一块硬盘可能并不是SCSI硬盘，但仍可以通过<code>sd</code>设备访问它。

==参考资料==
{{reflist}}

{{Filesystem}}
{{Unixtree}}
{{Linux内核}}

[[Category:文件系统|S]]
[[Category:设备文件|S]]
[[Category:类Unix系统|Category:类Unix系统]]