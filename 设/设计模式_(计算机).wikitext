{{Multiple issues|
{{refimprove|time=2018-10-22T17:50:58+00:00}}
{{Expand language|1=en|time=2020-09-27T11:48:51+00:00}}
}}
{{noteTA
|G1=IT
}}
在[[軟體工程|軟體工程]]中，'''設計模式'''（{{lang|en|design pattern}}）是對[[軟體設計|軟體設計]]中普遍存在（反覆出現）的各種問題，所提出的解決方案。這個術語是由[[埃里希·伽瑪|埃里希·伽瑪]]（Erich Gamma）等人在1990年代從[[建筑设计|建筑设计]]領域引入到[[計算機科學|計算機科學]]的。

設計模式並不直接用來完成[[程式碼|程式碼]]的編寫，而是描述在各種不同情況下，要怎麼解決問題的一種方案。[[面向对象程序设计|面向对象]]設計模式通常以[[类_(计算机科学)|類別]]或[[物件_(電腦科學)|物件]]來描述其中的關係和相互作用，但不涉及用來完成應用程式的特定類別或物件。設計模式能使不穩定依賴於相對穩定、具體依賴於相對抽象，避免會引起麻煩的緊耦合，以增強軟體設計面對並適應變化的能力。

並非所有的軟體模式都是設計模式，設計模式特指軟體“設計”層次上的問題。還有其他非設計模式的模式，如[[架構模式|架構模式]]。同时，[[演算法|演算法]]不能算是一種設計模式，因為演算法主要是用來解決計算上的問題，而非設計上的問題。

随着软件开发社群对设计模式的兴趣日益增长，已经出版了一些相关的专著，定期召开相应的研讨会，而且[[沃德·坎宁安|沃德·坎宁安]]（Ward Cunningham）为此发明了[[WikiWiki|WikiWiki]]用来交流设计模式的经验。

== 發展歷史 ==
建筑师[[克里斯托佛·亚历山大|克里斯托佛·亚历山大]]在1977/79年编制了一本汇集'''设计模式'''的书，但是这种设计模式的思想在建筑设计领域里的影响远没有后来在软件开发领域里传播的广泛。

[[肯特·贝克|肯特·贝克]]和[[沃德·坎宁安|沃德·坎宁安]]在1987年，利用克里斯托佛·亚历山大在建筑设计领域里的思想开发了''设计模式''，并把此思想应用在Smalltalk中的图形用户接口（GUI）的生成中。一年后，[[埃里希·伽瑪|埃里希·伽瑪]]在他的[[苏黎世大学|苏黎世大学]]博士毕业论文中开始尝试把这种思想改写为适用于软件开发。与此同时James Coplien 在1989年至1991年也在利用相同的思想致力于C++的开发，而后于1991年发表了他的著作''Advanced C++ Programming Styles and Idioms''。同年，Erich Gamma 得到了博士学位，然后去了美国，在那与Richard Helm、Ralph Johnson、John Vlissides 合作出版了《[[设计模式：可复用面向对象软件的基础|设计模式：可复用面向对象软件的基础]]》（{{lang|en|Design Patterns - Elements of Reusable Object-Oriented Software}}） 一书，在此书中共收录了 23 種'''设计模式'''。

这四位作者在软件开发领域里以“四人帮”（英語，Gang of Four，简称GoF）而闻名，并且他们在此书中的协作导致了软件设计模式的突破。有時，GoF也會用於代指《设计模式》这本书。

== 表述格式 ==

表述一个软件设计模式的格式根据作者的不同，划分和名称等都会有所不同。常用的GoF描述模式的格式大致分为以下这些部分：

* 模式名：每一个模式都有自己的名字，模式的名字使得我们可以讨论我们的设计。
* 问题：在面向对象的系统设计过程中反复出现的特定场合，它导致我们采用某个模式。
* 解决方案：上述问题的解决方案，其内容给出了设计的各个组成部分，它们之间的关系、职责划分和协作方式。
* 别名：一個模式可以有超過一個以上的名稱。這些名稱應該要在這一節註明。
* 动机：在哪種情況使用该模式，是本節提供的方案（包括問題與來龍去脈）的責任。
* 適用性：模式適用於哪些情況、模式的背景等等。
* 结构：這部分常用類圖與互動圖闡述此模式。
* 参与者：這部分提供一份本模式用到的類與物件清單，與它們在設計下扮演的角色。
* 合作：描述在此模式下，類與物件間的互動。
* 影響：采用该模式对软件系统其他部分的影响，比如对系统的扩充性、可移植性的影响。影响也包括负面的影响。這部分應描述使用本模式後的結果、副作用、與权衡(trade-off)。
* 實作：這部分應描述實現該模式、該模式的部分方案、實現該模式的可能技術、或者建議實現模式的方法。
* 示例：簡略描繪出如何以程式語言來使用模式。
* 已知应用：業界已知的實作範例。
* 相关模式：這部分包括其他相關模式，以及與其他類似模式的不同。

== 分类 ==
《[[设计范例|设计模式]]》一书原先把设计模式分为创建型模式、结构型模式、行为型模式，把它们通过授权、聚合、诊断的概念来描述。若想更进一步了解关于[[面向对象的程序设计|面向对象]]设计的背景，参考[[接口模式|接口模式]]、[[內聚性_(計算機科學)|内聚性]]。若想更进一步了解关于面向对象编程的背景，参考[[繼承_(計算機科學)|繼承]]，[[介面_(程式設計)|接口]]，[[多型_(物件導向程式設計)|多型]]。

{| class="wikitable"
|-
! 划分类型
! 模式名称
! 描述
! 《[[设计范例|设计模式]]》中提及
! 《[[代碼大全|代碼大全]]》中提及<ref name="McConnell2004">{{cite book
 |title=[[Code_Complete|Code Complete]]
 |first=Steve
 |last=McConnell
 |authorlink=Steve McConnell
 |publisher=[[Microsoft_Press|Microsoft Press]]
 |isbn=978-0735619678
 |chapter=Design in Construction
 |quote=Table 5.1 Popular Design Patterns
 |edition=2nd edition
 |pages=[https://archive.org/details/isbn_0735619670/page/n103 104]
|date=June 2004}}</ref>
|-
|rowspan=10 |'''[[創建型模式|創建型模式]]'''
|- 
| [[抽象工厂模式|抽象工厂模式]]
| 为一个产品族提供了统一的创建接口。当需要这个产品族的某一系列的时候，可以从抽象工厂中选出相应的系列创建一个具体的工厂类。
| {{yes}}
| {{yes}}
|-
| [[工厂方法模式|工厂方法模式]]
| 定义一个接口用于创建对象，但是让子类决定初始化哪个类。工厂方法把一个类的初始化下放到子类。
| {{yes}}
| {{yes}}
|-
| [[生成器模式|生成器模式]]
| 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
| {{yes}}
| {{no}}
|-
| [[惰性初始模式|惰性初始模式]]
| 推迟对象的创建、数据的计算等需要耗费较多资源的操作，只有在第一次访问的时候才执行。
| {{no}}
| {{no}}
|-
| [[对象池模式|对象池模式]]
| 通过回收利用对象避免获取和释放资源所需的昂贵成本。
| {{no}}
| {{no}}
|-
| [[原型模式|原型模式]]
| 用原型实例指定创建对象的种类，并且通过拷贝这些原型,创建新的对象。
| {{yes}}
| {{no}}
|-
| [[单例模式|单例模式]]
| 确保一个类只有一个实例，并提供对该实例的全局访问。
| {{yes}}
| {{yes}}
|-
| {{link-en|多例模式|Multiton pattern}}
| 确保一个类只有命名的实例，并提供对这些实例的全局访问。
| {{no}}
| {{no}}
|-
| [[RAII|资源获取为初始化]]
| 通过绑定到合适对象的生命周期来确保资源被适当地释放。
| {{no}}
| {{no}}
|-
|rowspan=8 |'''[[結構型模式|結構型模式]]'''
|-
| [[适配器模式|适配器模式]]
| 将某个类的接口转换成客户端期望的另一个接口表示。适配器模式可以消除由于接口不匹配所造成的类兼容性问题。 
| {{yes}}
| {{yes}}
|-
| [[桥接模式|桥接模式]]
| 将一个抽象与实现解耦，以便两者可以独立的变化。
| {{yes}}
| {{yes}}
|-
| {{le|组合模式|Composite pattern}}
| 把多个对象组成树状结构来表示局部与整体，这样用户可以一样的对待单个对象和对象的组合。
| {{yes}}
| {{yes}}
|-
| [[修饰模式|修饰模式]]
| 向某个对象动态地添加更多的功能。修饰模式是除类继承外另一种扩展功能的方法。
| {{yes}}
| {{yes}}
|-
| [[外观模式|外观模式]]
| 为子系统中的一组接口提供一个一致的界面， 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
| {{yes}}
| {{yes}}
|-
| [[享元模式|享元]]
| 通过共享以便有效的支持大量小颗粒对象。
| {{yes}}
| {{no}}
|-
| [[代理模式|代理]]
| 为其他对象提供一个代理以控制对这个对象的访问。
| {{yes}}
| {{no}}
|-
|rowspan=15 | '''[[行為型模式|行為型模式]]'''
|-
| {{le|黑板系统|Blackboard (design pattern)|黑板}}
| 广义的观察者在系统范围内交流信息，允许多位读者和写者。
| {{no}}
| {{no}}
|-
| [[责任链模式|责任链]]
| 为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。 
| {{yes}}
| {{no}}
|-
| [[命令模式|命令]]
| 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。 
| {{yes}}
| {{no}}
|-
| {{le|解释器模式|Interpreter pattern|解释器}}
| 给定一个语言, 定义它的文法的一种表示，并定义一个解释器, 该解释器使用该表示来解释语言中的句子。 
| {{yes}}
| {{no}}
|-
| [[迭代器模式|迭代器]]
| 提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。
| {{yes}}
| {{yes}}
|-
| [[中介者模式|中介者]]
| 包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用，从而使它们可以松散偶合。当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用，保证这些作用可以彼此独立的变化。
| {{yes}}
| {{no}}
|-
| {{le|备忘录模式|Memento pattern|备忘录}}
| 备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。
| {{yes}}
| {{no}}
|-
| [[空对象模式|空对象]]
| 通过提供默认对象来避免空引用。
| {{no}}
| {{yes}}
|-
| [[观察者模式|观察者模式]]
| 在对象间定义一个一对多的联系性，由此当一个对象改变了状态，所有其他相关的对象会被通知并且自动刷新。
| {{yes}}
| {{yes}}
|-
| {{le|规格模式|Specification pattern|规格}}
| 以布尔形式表示的可重绑定的商业逻辑。
| {{no}}
| {{no}}
|-
| {{le|状态模式|State pattern|状态}}
| 让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。
| {{yes}}
| {{no}}
|-
| [[策略模式|策略]]
| 定义一个算法的系列，将其各个分装，并且使他们有交互性。策略模式使得算法在用户使用的时候能独立的改变。
| {{yes}}
| {{yes}}
|-
| [[模板方法模式|模板方法]]
| 模板方法模式准备一个抽象类，将部分逻辑以具体方法及具体构造子类的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先构建一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。
| {{yes}}
| {{yes}}
|-
| [[访问者模式|访问者]]
| 封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改，接受这个操作的数据结构可以保持不变。访问者模式适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。
| {{yes}}
| {{no}}
|-
|rowspan=11 | '''[[併發型模式|併發型模式]]'''
| [[主动对象|主动对象]]
|
| {{no}}
| {{no}}
|-
| [[阻碍模式|阻碍]]
|
| {{no}}
| {{no}}
|-
| [[双重检查锁定模式|双重检查锁定]]
|
| {{no}}
| {{no}}
|-
| [[守卫模式|守卫]]
|
| {{no}}
| {{no}}
|-
| [[领导者/追随者模式|领导者/追随者]]
|
| {{no}}
| {{no}}
|-
| [[管程|监测对象模式]]
|
| {{no}}
| {{no}}
|-
| [[读写锁模式|读写锁]]
|
| {{no}}
| {{no}}
|-
| [[调度模式|调度]]
|
| {{no}}
| {{no}}
|-
| [[线程池模式|线程池模式]]
|
| {{no}}
| {{no}}
|-
| [[线程特定存储模式|线程特定存储]]
|
| {{no}}
| {{no}}
|-
| [[反应器模式|反应器]]
|
| {{no}}
| {{no}}
|}

== 參閱 ==
* [[设计范例|设计范例]]
* [[反模式|反模式]]，对某个问题经常出现的、在设计中应该尽量避免的、坏的设计方案。
* [[模式挖掘|模式挖掘]]
* [[软件重构|软件重构]]
* [[程序设计实践|程序设计实践]]

== 参考资料 ==

{{reflist}}
* Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides: <cite>Design Patterns</cite>, Addison-Wesley, 1995, hardcover, 395 pages, ISBN 978-0-201-63361-0, <cite>Design Patterns CD</cite>, 1997 ISBN 978-0-201-63498-3
* Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, Michael Stal: <cite>Pattern-oriented Software Architecture, Volume 1: A System of Patterns</cite>, John Wiley & Sons Ltd., ISBN 978-0-471-95869-7
* Douglas Schmidt: <cite>Pattern-oriented Software Architecture. Volume 2: Patterns for Concurrent and Networked Objects</cite>, John Wiley & Sons Ltd., ISBN 978-0-471-60695-6
* Alan Shalloway, James R. Trott: <cite>Design Patterns Explained: A New Perspective on Object-Oriented Design</cite>, Addison-Wesley, ISBN 978-0-201-71594-1
* Martin Fowler: <cite>Patterns of Enterprise Application Architecture</cite>, Addison-Wesley, ISBN 978-0-321-12742-6

== 外部連結 ==
* [http://java.sun.com/blueprints/corej2eepatterns/Patterns/index.html Java J2EE模式目录]{{Wayback|url=http://java.sun.com/blueprints/corej2eepatterns/Patterns/index.html |date=20040211041951 }}

* [http://c2.com/cgi/wiki?CategoryPattern 设计模式列表]{{Wayback|url=http://c2.com/cgi/wiki?CategoryPattern |date=20040412154947 }}.
* [https://web.archive.org/web/19981205090720/http://www.mindspring.com/~mgrand/pattern_synopses.htm mgrand的书]介绍了许多模式
* [https://web.archive.org/web/20040402022107/http://hillside.net/patterns/onlinepatterncatalog.htm hillside.net模式目录]
* [http://patterndigest.com/ 设计模式会通]{{Wayback|url=http://patterndigest.com/ |date=20040321050314 }}
* [http://alphaworks.ibm.com/tech/dptk 设计模式工具箱]{{Wayback|url=http://alphaworks.ibm.com/tech/dptk |date=20040405162420 }}
* [http://www.microsoft.com/china/msdn/events/webcasts/shared/webcast/consyscourse/CsharpOOD.aspx C#面向對象設計模式縱橫談系列課程]{{Wayback|url=http://www.microsoft.com/china/msdn/events/webcasts/shared/webcast/consyscourse/CsharpOOD.aspx |date=20070228063047 }}
* [https://refactoringguru.cn/design-patterns 设计模式目录]{{Wayback|url=https://refactoringguru.cn/design-patterns |date=20200728214632 }}

{{软件设计模式}}
{{Authority control}}
[[Category:软件设计模式|]]