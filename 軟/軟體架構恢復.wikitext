'''軟體架構恢復'''是一種從[[软件|软件]]系統程式或[[原始碼|原始碼]]中提取[[軟體架構|軟體架構]]的方法。提取軟體架構的流程包括將許多的程式實體（例如檔案、類別、函數等）轉換為子系統，其轉換的準則可能是和應用程式有關的，也可能和應用程式無關。從{{le|舊有系統|legacy system}}中恢復軟體架構的原因是以往的程式沒有架構文件，就算有，也可能已和實際實現的系統有相當的差異，

軟體架構恢復也可能是為了要進行軟體改造，所要求提出的程序<ref name="ieeesw">{{Cite journal |doi=10.1109/MS.2016.49 | title = Software Retrofit in High-Availability Systems: When Uptime Matters | journal = IEEE Software |volume = 32 |issue = 3 |pages = 11–17 |year = 2015 |last=Ronzon |first=T. }}</ref>。

== 作法 ==
大部份軟體架構恢復的作法會針對系統進行[[靜態程序分析|靜態程序分析]]，若是針對[[物件導向|物件導向]]系統，其中有大量的[[多态_(计算机科学)|函數多型]]以及{{le|晚期繫結|Late binding|動態連結}}機制，就需要用{{le|動態程序分析|dynamic program analysis}}來理解系統的行為、物件的交叉作用，以這些資料來重建架構。在恢復架構的過程中，會依系統動態分析的結果來決定將程式實體組合成架構元素的方式，並且考慮在{{le|使用例分析|Use-case analysis}}中，出現交叉作用的模式、以及其類型（類別以及介面）<ref>{{cite book |first=T. |last=Lutellier |first2=D. |last2=Chollak |first3=J. |last3=Garcia |first4=L. |last4=Tan |first5=D. |last5=Rayside |first6=N. |last6=Medvidovic |first7=R. |last7=Kroeger |chapter=Comparing Software Architecture Recovery Techniques Using Accurate Dependencies |title=2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, Florence |year=2015 |isbn=978-1-4799-1934-5 |pages=69–78 |doi=10.1109/ICSE.2015.136}}</ref>。

== 相關條目 ==
* [[逆向工程|逆向工程]]
* [[軟體考古學|軟體考古學]]
* [[软件架构|软件架构]]
* {{le|System appreciation|System appreciation}}

== 參考資料 ==
{{reflist}}

[[Category:软件架构|Category:软件架构]]
[[Category:資料恢復|Category:資料恢復]]