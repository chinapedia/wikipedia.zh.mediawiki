{{howto|time=2010-03-09T05:39:53+00:00}}
{{NoteTA
|G1 = IT
|1 = zh-hans:面向服务的体系结构; zh-hant:服務導向架構;
}}

'''面向服务的体系结构'''（{{lang-en|service-oriented architecture}}）並不特指一種技術，而是一種分散式運算的軟體設計方法。軟體的部分組件（呼叫者），可以透過網路上的通用協定呼叫另一個應用軟體元件執行、運作，讓呼叫者獲得服務。SOA原則上採用[[开放标准|开放标准]]、与軟體资源进行[[交互|交互]]并采用表示的标准方式。因此應能跨越廠商、產品與技術。一項服務應視為一個獨立的功能單元，可以遠端存取並獨立執行與更新，例如在線查詢信用卡帳單。

SOA中的一項服務應有以下四個特性：

# 針對某特定要求的輸出，該服務就是運作一項商業邏輯
# 具有完備的特性（self-contained）
# 消費者並不需要瞭解此服務的運作過程
# 可能由底層其他服務組成

== SOA是什么 ==
企业系统的架构师认为SOA能够帮助业务迅速和高效地响应变化的市场条件<ref>Christopher Koch [http://www.cio.com/archive/030105/blueprint.html A New Blueprint For The Enterprise] {{Wayback|url=http://www.cio.com/archive/030105/blueprint.html |date=20070318002258 }}, ''CIO Magazine'', Mar 1 2005</ref>。服务導向的架构在宏观（服务）上，而不是在微观上（对象），因此提高了重複使用性。同时，服务導向的架构可以简化与传统系统的互连和使用。

在某种意义上说，服务導向的架构可以被认为是一种演化，而不是革命。它捕捉到了之前体系架构的许多最佳实践或实际应用。比如在通信系统中，近年來進展有限的解決方案多採用完全靜態的綁定來與網路中的其他設備溝通，但若正式採用SOA方式，解決方案就更能妥善定位，進而突顯定義明確且可高度跨平台操作介面的重要性。<ref>Norbert Bieberstein [http://www.ibmpressbooks.com/bookstore/product.asp?isbn=0131870025&rl=1 Service-Oriented Architecture Compass 2006] {{Wayback|url=http://www.ibmpressbooks.com/bookstore/product.asp?isbn=0131870025&rl=1 |date=20071211000845 }}</ref>

有些人质疑服务導向的架构是不是1970年代模块化编程，1980年代的面向事件设计，1990年代的基于接口/构件设计的一种复兴？(1990s){{Fact|time=2007-07-16T11:04:18Z}}。 服务導向的架构提升了将用户从服务实现分开的目标。服务可以运行在不同的服务器上，并通过网络被访问。 这也大大增加了服务的重用{{Fact|time=2007-07-16T11:04:18Z}}。

== SOA的原則 ==
以下指導原則是開發，維護和使用SOA的基本原則<ref>Yvonne Balzer [https://www-128.ibm.com/developerworks/cn/webservices/ws-improvesoa/ 改進您的 SOA 專案規劃] {{Wayback|url=https://www-128.ibm.com/developerworks/cn/webservices/ws-improvesoa/ |date=20060712221336 }}, ''[[IBM|IBM]]'', 2004年8月1日</ref>：
*可重複使用、[[粒度|粒度]]、[[模組性|模組性]]、可組合型、物件化原件、構件化以及[[具交互操作性|具交互操作性]]
*符合開放標準（通用的或行業的）
*服務的識別和分類，提供和發佈，監控和跟蹤。

下面是一些特定的體系架構原則：
*服務[[封裝|封裝]]
*服務[[鬆耦合|鬆耦合]]（Loosely Coupled） - 服務之間的關係最小化，只是互相知道。
*服務契約 - 服務按照服務描述文檔所定義的服務契約行事。
*服務抽象 - 除了服務契約中所描述的內容，服務將對外部隱藏邏輯。
*服務的重用性 - 將邏輯分佈在不同的服務中，以提高服務的重用性。
*服務的可組合性 - 一組服務可以協調工作並組合起來形成一個組合服務。
*服務自治 – 服務對所封裝的邏輯具有控制權
*服務無狀態 – 服務將一個活動所需保存的資訊最小化。
*服務的可被發現性 – 服務需要對外部提供描述資訊，這樣可以通過現有的發現機制發現並訪問這些服務。<ref>Thomas Erl [http://www.serviceorientation.org/p0.asp Serviceorientation.org - About the Principles] {{Wayback|url=http://www.serviceorientation.org/p0.asp |date=20070502072011 }}, 2005-2006</ref>

除此以外，在定義一個SOA實現時，還需要考慮以下因素：
*生命週期管理
*有效使用系統資源
*服務成熟度和性能

==服務導向的架构和Web服务协议==
{{Unreferencedsect|time=2012-11-12T05:53:51+00:00}}
服務導向的架构通常被定义为通过Web服务协议栈暴露的服务{{Fact|time=2007-07-16T11:04:18Z}}。与SOA相关的Web服务的标准主要有：
* [[XML|XML]] - 一种[[标记语言|标记语言]]，用于以文档格式描述消息中的数据。
* [[HTTP|HTTP]]（或[[HTTPS|HTTPS]]） - 客户端和服务端之间用于传送信息而发送请求/回复的协议。
* [[SOAP|SOAP]]（Simple Object Access Protocol） - 在计算机网络上交换基于XML的消息的协议，通常是用HTTP。
* [[WSDL|WSDL]]（Web Services Description Language，Web服务描述语言） - 基于XML的描述语言，用于描述与服务交互所需的服务的公共接口，协议绑定，消息格式。
* [[UDDI|UDDI]]（Universal Description, Discovery, and Integration，是统一描述、发现和集成） - 基于XML的注册协议，用于发布WSDL并允许第三方发现这些服务。

注意，一个系统要成为服務導向的系统并不需要这些协议，比如一些服務導向的系统可以通过[[CORBA|CORBA]]实现。

== 参考文献 ==
{{Reflist|30em}}

== 外部链接 ==

== 参见 ==
* [[企业应用集成|企业应用集成]]
* [[Web服务|Web服务]]

{{-}}
{{軟體工程}}
{{Authority control}}

[[Category:软件架构|Category:软件架构]]
[[Category:企业应用集成|Category:企业应用集成]]
[[Category:Web服务|Category:Web服务]]