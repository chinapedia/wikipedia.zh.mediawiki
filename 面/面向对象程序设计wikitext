{{NoteTA
|G1 = IT
|1 = zh-cn:类; zh-tw:類別;
|2=zh-cn:编程;zh-hk:編程;zh-tw:程式設計;
|3=zh-cn:面向对象程序设计;zh-hant:物件導向程式設計;
|4=zh-cn:数据;zh-hant:資料;
}}
{{各地中文名
|cn=面向对象程序设计
|tw=物件導向程式設計
|hk=物件導向程式設計
}}
{{编程范式}}
'''物件導向程式設計'''（{{lang-en|Object-oriented programming}}，[[缩写|缩写]]：{{lang|en|OOP}}）是種具有[[对象_(计算机科学)|物件]]概念的[[编程范型|程式設計典範]]，同时也是一种程式开发的抽象方针。它可能包含[[数据|資料]]、[[特性_(计算机科学)|特性]]、[[源代码|程式碼]]與[[方法_(電腦科學)|方法]]。对象則指的是[[类_(计算机科学)|類別]]（class）的实例。它将[[物件_(電腦科學)|对象]]作为[[计算机程序|程序]]的基本单元，将程序和[[数据|数据]][[封裝_(物件導向程式設計)|封装]]其中，以提高软件的重用性、灵活性和扩展性，物件裡的程序可以訪問及經常修改物件相關連的資料。在物件導向程式編程裡，電腦程式會被設計成彼此相關的物件<ref>{{Cite journal
  | last = Kindler | first =  E.
  | last2 = Krivy | first2 = I.
  | title = Object-Oriented Simulation of systems with sophisticated control
  | publisher = International Journal of General Systems
  | year = 2011 | pages = 313–343}}</ref><ref>{{Cite book|last=Lewis|first=John|last2=Loftus|first2= William|title=Java Software Solutions Foundations of Programming Design 6th ed|publisher=Pearson Education Inc.|year=2008|isbn=0-321-53205-8}}, section 1.6 "Object-Oriented Programming"</ref>。

面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想，这与传统的思想刚好相反：传统的程序设计主张将程序看作一系列[[函数|函数]]的集合，或者直接就是一系列对电脑下达的指令。面向对象程序设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，因此它们都可以被看作一个小型的“机器”，即对象。目前已经被证实的是，面向对象程序设计推广了程序的灵活性和可维护性，并且在大型项目设计中广为应用。此外，支持者声称面向对象程序设计要比以往的做法更加便于学习，因为它能够让人们更简单地设计并维护程序，使得程序更加便于分析、设计、理解。反对者在某些领域对此予以否认。

当我们提到面向对象的时候，它不仅指一种程序设计方法。它更多意义上是一种程序开发方式。在这一方面，我们必须了解更多关于[[面向对象系统分析|面向对象系统分析]]和[[面向对象设计|面向对象设计]]（Object Oriented Design，简称OOD）方面的知识。許多流行的程式語言是物件導向的,它們的風格就是會透由物件來創出實例。

重要的物件導向程式語言包含[[Common_Lisp|Common Lisp]]、[[Python|Python]]、[[C++|C++]]、[[Objective-C|Objective-C]]、[[Smalltalk|Smalltalk]]、[[Delphi|Delphi]]、[[Java|Java]]、[[Swift_(编程语言)|Swift]]、[[C♯|C#]]、[[Perl|Perl]]、[[Ruby|Ruby]]、[[JavaScript|JavaScript]] 與 [[PHP|PHP]]等。

== 特徵 ==
物件導向程式編程的定義是使用「物件」來做設計，但並非所有的程式語言都直接支援「物件導向程式編程」相關技術與結構。对于OOP的准确定义及其本意存在着不少争论。通常，OOP被理解为一种将程序分解为封装数据及相关操作的模块而进行的编程方式。有别于其它编程方式，OOP中的与某数据类型相关的一系列操作都被有机地封装到该数据类型当中，而非散放于其外，因而OOP中的数据类型不仅有着状态，还有着相关的行为。

OOP理论，及与之同名的OOP实践相结合创造出了新的一个编程架构；OOP思想被广泛认为是非常有用的，以致一套新的[[编程范型|编程范型]]被创造了出来。（其它的[[编程范型|编程范型]]例如函数式编程或过程式编程专注于程序运行的过程，而逻辑编程专注于引发程序代码执行的断言）。对面向模拟系统的语言（如：SIMULA 67）的研究及对高可靠性系统架构（如：高性能操作系统和CPU的架构）的研究最终导致了OOP的诞生。其中由[[Deborah_J._Armstrong|Deborah J. Armstrong]]进行的长达40年之久的计算机著作调查中，显示出了一系列面向对象程序设计的基本理论。物件導向程式特徵被條列如下<ref name="ArmstrongQuarks">Deborah J. Armstrong. ''The Quarks of Object-Oriented Development''. A survey of nearly 40 years of computing literature which identified a number of fundamental concepts found in the large majority of definitions of OOP, in descending order of popularity: Inheritance, Object, Class, Encapsulation, Method, Message Passing, Polymorphism, and Abstraction.</ref><ref>[[John_C._Mitchell|John C. Mitchell]], ''Concepts in programming languages'', Cambridge University Press, 2003, ISBN 0-521-78098-5, p.278.  Lists: Dynamic dispatch, abstraction, subtype polymorphism, and inheritance.</ref><ref>Michael Lee Scott, ''Programming language pragmatics'', Edition 2, Morgan Kaufmann, 2006, ISBN 0-12-633951-1, p. 470.  Lists encapsulation, inheritance, and dynamic dispatch.</ref><ref name="pierce">{{Cite book|last=Pierce|first=Benjamin|title=[[Types_and_Programming_Languages|Types and Programming Languages]]|publisher=MIT Press|year=2002|isbn=0-262-16209-1}}, section 18.1 "What is Object-Oriented Programming?"  Lists: Dynamic dispatch, encapsulation or multi-methods (multiple dispatch), subtype polymorphism, inheritance or delegation, open recursion ("this"/"self")</ref>

===分享非物件導向程式前身語言===

物件導向程式設計通常共享高階編程語言的低階功能。可用於建構一個程序的基本工具包括：
* [[变量_(程序设计)|變數]] 能儲存一些內建型態的資訊如[[整数|整數]]與[[字符|字元]]，也有些是[[資料結構|資料結構]]像是[[字符串|字串]]、[[串列_(抽象資料型別)|串列]]與[[哈希表|雜湊表]]等包含內建或複合的變數如指標。
*[[计算机程序|程序]]：也稱為函式、方法或例程，是指輸入資料產生輸出結果，現代語言還包含結構化編程結構如[[程式迴圈|程式迴圈]]與[[條件|條件]]。

===類與对象===
支持面向对象編程語言通常利用[[继承_(计算机科学)|繼承]]其他類達到代碼重用和可擴展性的特性。而類有兩個主要的概念：

* [[类_(计算机科学)|類]]（Class）：定義了一件事物的抽象特點。類的定義包含了數據的形式以及對數據的操作。
* [[对象_(计算机科学)|对象]]（Object）：是類的實例（Instance）。

其中[[类_(计算机科学)|类]]（Class）定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。举例来说，“[[狗|狗]]”这个类会包含狗的一切基础特征，即所有“狗”都共有的特征或行为，例如它的品种、毛皮颜色和吠叫的能力。类可以为程序提供模版和结构。一个类的方法和属性被称为“[[成员|成员]]”。
我们来看一段[[伪代码|伪代码]]：

 -{}-
 类'''狗'''
 开始
     公有成员:
         吠叫():
     私有成员:
         毛皮颜色:
         品种:
 结束

在这串代码中，我们声明了一个类，这个类具有一些狗的基本特征。关于[[公有成员|公有成员]]和[[私有成员|私有成员]]，请参见下面的继承性的内容。

[[对象_(计算机科学)|对象]]（Object）是类的[[实例|实例]]。物件有時會對應到現實世界中的事物，舉例來說，一個圖形程式可能有圓形、矩形與畫面等物件，一個線上購物系統可能有購物車、顧客與產品等類別。<ref>{{cite book|last=Booch|first=Grady|title=Software Engineering with Ada|year=1986|publisher=Addison Wesley|isbn=978-0805306088|page=220|url=https://en.wikiquote.org/wiki/Grady_Booch|quote=Perhaps the greatest strength of an object-oriented approach to development is that it offers a mechanism that captures a model of the real world.|access-date=2016-03-06|archive-date=2021-05-14|archive-url=https://web.archive.org/web/20210514133340/https://en.wikiquote.org/wiki/Grady_Booch|dead-url=no}}</ref>。有時对象會表示更抽象的實體，比如一個被開啟的檔案或是一個提供美國慣用量測轉換的服務。每個对象就是一個特定類別的實例（例如，名稱是“瑪麗”的物件可能是類別雇員的一個實例）。程序在面向对象編程當中被視為方法，變數被視為成員或屬性。例如，“[[狗|狗]]”这个类列举狗的特点，从而使这个类定义了世界上所有的狗。而莱丝这个对象则是一条具体的狗，它的属性也是具体的。狗有皮毛颜色，而莱丝的皮毛颜色是棕白色的。因此，莱丝就是狗这个类的一个实例。一个具体对象属性的值被称作它的“[[状态|状态]]”。（系统给对象分配内存空间，而不会给类分配内存空间。这很好理解，类是抽象的，系统不可能给抽象的东西分配空间，而对象则是具体的。）

假设我们已经在上面定义了狗这个类，我们就可以用这个类来定义对象：

 -{}-
 定义'''莱丝'''是'''狗'''
 莱丝.毛皮颜色 : 棕白色
 莱丝.吠叫()

我们无法让狗这个类去吠叫，但是我们可以让对象“莱丝”去吠叫，正如狗可以吠叫，但没有具体的狗就无法吠叫。

类和对象就好比是“实型”和“1.23”，“实型”是一种数据的类型，而“1.23”是一个真正的“实数”（即对象）。所有的“实数”都具有“实型”所描诉的特征，如“实数的大小”，系统则分配内存给“实数”存储具体的数值。

===動態配置與訊息傳遞機制===
定義上[[動態配置|動態配置]]是指方法會隨著實例動態的改變。而[[訊息傳遞_(軟體)|訊息傳遞機制]]（Message Passing）是指一個物件通過接受訊息、處理訊息、傳出訊息或使用其他類別的方法來實作一定功能。如：'''莱丝'''可以通过'''吠叫'''引起'''人'''的注意，从而导致一系列的事发生。

===封裝性===
具備[[封裝_(物件導向程式設計)|封裝性]]（Encapsulation）的物件導向程式設計隱藏了某一方法的具體執行步驟，取而代之的是通過訊息傳遞機制傳送訊息給它。封裝是通過限制只有特定類別的物件可以存取這一特定類別的成員，而它們通常利用介面實作訊息的傳入傳出。举个例子，接口能确保幼犬这一特征只能被赋予狗这一类。通常來說，成員會依它們的存取權限被分為3種：[[公有成員|公有成員]]、[[私有成員|私有成員]]以及[[保護成員|保護成員]]。有些語言更進一步：[[Java|Java]]可以限制同一包內不同類別的存取；[[C♯|C#]]和[[VB.NET|VB.NET]]保留了為類別的成員聚集準備的關鍵字：internal（C#）和Friend（VB.NET）；Eiffel語言則可以讓使用者指定哪個類別可以存取所有成員。

因此，举例来说，“狗”这个类有“吠叫()”的方法，这一方法定义了狗具体该通过什么方法吠叫。但是，莱丝的朋友并不知道它到底是如何吠叫的。

从实例来看：

 -{}-
 /* 一个面向过程的程序会这样写： */
 定义'''莱丝'''
 莱丝.设置音调(5)
 莱丝.吸气()
 莱丝.吐气()
 
 /* 而当狗的吠叫被封装到类中，任何人都可以简单地使用： */
 定义'''莱丝'''是'''狗'''
 莱丝.吠叫()

=== 继承 ===
[[继承性|继承性]]（Inheritance）是指，在某种情况下，一个类会有“[[子类|子类]]”。子类比原本的类（称为[[父类|父类]]）要更加具体化。例如，“[[狗|狗]]”这个类可能会有它的[[子类|子类]]“[[牧羊狗|牧羊犬]]”和“[[吉娃娃|吉娃娃犬]]”。在这种情况下，“莱丝”可能就是牧羊犬的一个[[实例|实例]]。子类会继承父类的{{Link-en|属性 (计算机科学)|Attribute (computing)|属性}}和[[行为|行为]]，并且也可包含它们自己的。我们假设“狗”这个类有一个[[方法_(计算机科学)|方法]]（行为）叫做“吠叫()”和一个属性叫做“毛皮颜色”。它的子类（前例中的牧羊犬和吉娃娃犬）会继承这些成员。这意味着程序员只需要将相同的代码写一次。

在伪代码中我们可以这样写：

 -{}-
 类'''牧羊犬''' : 继承'''狗'''
 
 定义'''莱丝'''是'''牧羊犬'''
 莱丝.吠叫()    /* 注意这里调用的是狗这个类的吠叫方法。*/

回到前面的例子，“牧羊犬”这个类可以继承“毛皮颜色”这个属性，并指定其为棕白色。而“吉娃娃犬”则可以继承“吠叫()”这个方法，并指定它的音调高于平常。子类也可以加入新的成员，例如，“吉娃娃犬”这个类可以加入一个方法叫做“颤抖()”。设若用“牧羊犬”这个类定义了一个实例“莱丝”，那么莱丝就不会颤抖，因为这个方法是属于吉娃娃犬的，而非牧羊犬。事实上，我们可以把继承理解为“是”或“属于”。莱丝“是”牧羊犬，牧羊犬“属于”狗类。因此，莱丝既得到了牧羊犬的属性，又继承了狗的属性。
我们来看伪代码：

 -{}-
 类'''吉娃娃犬''' : 继承'''狗'''
 开始
     公有成员:
         颤抖()
 结束
 类'''牧羊犬''' : 继承'''狗'''
 
 定义'''莱丝'''是'''牧羊犬'''
 莱丝.颤抖()    /* 错误：颤抖是吉娃娃犬的成员方法。 */

当一个类从多个父类继承时，我们称之为“[[多重继承|多重继承]]”。如一只狗既是吉娃娃犬又是牧羊犬（虽然事实上并不合逻辑）。多重继承并不总是被支持的，因为它很难理解，又很难被好好使用。

=== 多型 ===
[[多型_(物件導向程式設計)|多型]]（Polymorphism）是指由继承而产生的相关的不同的类，其对象对同一消息会做出不同的响应<ref>[[谭浩强|谭浩强]]：《C++面向对象程序设计》，清华大学出版社，2006年1月第一版。ISBN 978-7-302-12315-6</ref>。例如，狗和鸡都有“叫()”这一方法，但是调用狗的“叫()”，狗会吠叫；调用鸡的“叫()”，鸡则会啼叫。
我们将它体现在伪代码上：

 -{}-
 类'''狗'''
 开始
     公有成员:
         叫()
         开始
             吠叫()
         结束
 结束
 
 类'''鸡'''
 开始
     公有成员:
         叫()
         开始
             啼叫()
         结束
 结束
 
 定义'''莱丝'''是'''狗'''
 定义'''鲁斯特'''是'''鸡'''
 莱丝.叫()
 鲁斯特.叫()

这样，虽然同样是做出'''叫'''这一种行为，但莱丝和鲁斯特具体做出的表现方式将大不相同。多态性的概念可以用在[[运算符重载|运算符重载]]上，可以根据需求查看相关界面。

=== 抽象性 ===
[[抽象化_(计算机科学)|抽象]]（Abstraction）是简化复杂的现实问题的途径，它可以为具体问题找到最恰当的类定义，并且可以在最恰当的继承级别解释问题。举例说明，莱丝在大多数时候都被当作一条狗，但是如果想要让它做牧羊犬做的事，你完全可以调用牧羊犬的方法。如果狗这个类还有[[动物|动物]]的父类，那么你完全可以视莱丝为一个动物。

== 历史 ==
面向对象程序设计的雏形，早在1960年代的[[Simula|Simula]]语言中即可发现，当时的[[程序设计|程序设计]]领域正面临着一种危机：在软硬件环境逐渐复杂的情况下，软件如何得到良好的维护？面向对象程序设计在某种程度上通过强调[[可重复性|可重复性]]解决了这一问题。20世纪70年代的[[Smalltalk|Smalltalk语言]]在面向对象方面堪称经典——以至于30年后的今天依然将这一语言视为面向对象语言的基础。

计算机科学中对象和实例概念的最早萌芽可以追溯到[[麻省理工学院|麻省理工学院]]的[[PDP-1|PDP-1]]系统。这一系统大概是最早的基于容量架构（capability based architecture）的实际系统。另外1963年Ivan Sutherland的[[Sketchpad|Sketchpad]]应用中也蕴含了同样的思想。对象作为编程实体最早是于1960年代由[[Simula_67|Simula 67]]语言引入思维。Simula这一语言是[[奧利-約翰·達爾|奧利-約翰·達爾]]和[[克利斯登·奈加特|克利斯登·奈加特]]在[[奥斯陆|奥斯陆]]的{{en-link|挪威计算中心|Norwegian Computing Center}}为模拟环境而设计的。（据说，他们是为了模拟船只而设计的这种语言，并且对不同船只间属性的相互影响感兴趣。他们将不同的船只归纳为不同的类，而每一个对象，基于它的类，可以定义它自己的属性和行为。）这种办法是分析式程序的最早概念体现。在分析式程序中，我们将真实世界的对象映射到抽象的对象，这叫做“模拟”。Simula不仅引入了“类”的概念，还应用了实例这一思想——这可能是这些概念的最早应用。

20世纪70年代[[施乐|施乐]]PARC研究所发明的[[Smalltalk|Smalltalk]]语言将面向对象程序设计的概念定义为，在基础运算中，对[[对象_(计算机科学)|对象]]和[[消息|消息]]的广泛应用。[[Smalltalk|Smalltalk]]的创建者深受Simula 67的主要思想影响，但[[Smalltalk|Smalltalk]]中的对象是完全动态的——它们可以被创建、修改并销毁，这与Simula中的静态对象有所区别。此外，[[Smalltalk|Smalltalk]]还引入了[[继承性|继承性]]的思想，它因此一举超越了不可创建实例的程序设计模型和不具备继承性的Simula。此外，Simula 67的思想亦被应用在许多不同的语言，如[[Lisp|Lisp]]、[[Pascal_(编程语言)|Pascal]]。

面向对象程序设计在80年代成为了一种主导思想，这主要应归功于[[C++|C++]]——[[C语言|C语言]]的扩充版。在[[图形用户界面|图形用户界面]]（GUI）日渐崛起的情况下，面向对象程序设计很好地适应了潮流。GUI和面向对象程序设计的紧密关联在Mac OS X中可见一斑。Mac OS X是由[[Objective-C|Objective-C]]语言写成的，这一语言是一个仿[[Smalltalk|Smalltalk]]的C语言扩充版。面向对象程序设计的思想也使[[事件处理|事件处理]]式的程序设计更加广泛被应用（虽然这一概念并非仅存在于面向对象程序设计）。一种说法是，GUI的引入极大地推动了面向对象程序设计的发展。

[[苏黎世联邦理工学院|苏黎世联邦理工学院]]的尼克劳斯·维尔特和他的同事们对抽象数据和模块化程序设计进行了研究。[[Modula-2|Modula-2]]将这些都包括了进去，而[[Oberon|Oberon]]则包括了一种特殊的面向对象方法——不同于[[Smalltalk|Smalltalk]]与[[C++|C++]]。

面向对象的特性也被加入了当时较为流行的语言：[[Ada|Ada]]、[[BASIC|BASIC]]、[[Lisp|Lisp]]、[[Fortran|Fortran]]、[[Pascal_(编程语言)|Pascal]]以及种种。由于这些语言最初并没有面向对象的设计，故而这种糅合常常会导致兼容性和维护性的问题。与之相反的是，“纯正的”面向对象语言却缺乏一些程序员们赖以生存的特性。在这一大环境下，开发新的语言成为了当务之急。作为先行者，[[Eiffel|Eiffel]]成功地解决了这些问题，并成为了当时较受欢迎的语言。

在过去的几年中，[[Java语言|Java语言]]成为了广为应用的语言，除了它与[[C语言|C]]和[[C++|C++]]语法上的近似性。Java的可移植性是它的成功中不可磨灭的一步，因为这一特性，已吸引了庞大的程序员群的投入。

在最近的计算机语言发展中，一些既支持面向对象程序设计，又支持[[面向过程程序设计|面向过程程序设计]]的语言悄然浮出水面。它们中的佼佼者有[[Python|Python]]、[[Ruby|Ruby]]等等。

正如[[面向过程程序设计|面向过程程序设计]]使得[[结构化程序设计|结构化程序设计]]的技术得以提升，现代的面向对象程序设计方法使得对[[设计模式_(计算机)|設計模式]]的用途、[[契約式設計|契約式設計]]和[[建模語言|建模語言]]（如[[UML|UML]]）技术也得到了一定提升。

==物件導向編程語言==
支持部分或绝大部分面向对象特性的语言即可称为基于对象的或面向对象的语言。[[Simula|Simula]] (1967)被視為第一個具有物件導向]特性的語言。早期，完全面向对象的语言主要包括[[Smalltalk|Smalltalk]]等语言，目前较为流行的语言中有[[Java|Java]]、[[C_Sharp|C#]]、[[Eiffel|Eiffel]]等。随着软件工业的发展，比较早的程序導向的语言在近些年的发展中也纷纷吸收了许多物件導向的概念，比如[[C语言|C]]→[[C++|C++]]，C→[[Objective-C|Objective-C]]，[[BASIC|BASIC]]→[[Visual_Basic|Visual Basic]]→[[Visual_Basic_.NET|Visual Basic .NET]]，[[Pascal_(程式語言)|Pascal]]→[[Object_Pascal|Object Pascal]]，[[Ada|Ada]]→[[Ada95|Ada95]]。「純粹」的物件導向語言, 因為所有的東西都是由物件所組成，例如：[[Eiffel|Eiffel]], [[Emerald_(编程语言)|Emerald]],<ref>{{cite web|url=http://www.emeraldprogramminglanguage.org/|title=The Emerald Programming Language|date=2011-02-26|access-date=2016-03-06|archive-date=2021-04-21|archive-url=https://web.archive.org/web/20210421185826/http://www.emeraldprogramminglanguage.org/|dead-url=no}}</ref> [[Jade_(编程语言)|JADE]], [[Obix|Obix]], [[Ruby|Ruby]], [[Scala|Scala]], [[Smalltalk|Smalltalk]], [[Self|Self]].

=== 腳本中的OOP ===
近年來，面向对象的程序设计越来越流行于[[脚本语言|脚本语言]]中。[[Python|Python]]和[[Ruby|Ruby]]是建立在OOP原理的脚本語言，[[Perl|Perl]]和[[PHP|PHP]]亦分別在Perl 5和PHP 4時加入物件導向特性。

==參見==
* [[一次且僅一次|一次且僅一次]]（once and only once，OAOO）
*[[Distributed_Component_Object_Model|Distributed Component Object Model]]
*[[Unified_Modeling_Language|UML]]

== 參考文獻 ==
{{Reflist|30em}}

==延伸閱讀==
*{{Cite book
|first=Martin
|last=Abadi
|authorlink=Martin Abadi
|author2=[[Luca_Cardelli|Luca Cardelli]]
|year=1998
|title=A Theory of Objects
|publisher=[[Springer_Verlag|Springer Verlag]]
|isbn=0-387-94775-2
}}
*{{Cite book
|first=Harold
|last=Abelson
|authorlink=Harold Abelson
|author2=[[Gerald_Jay_Sussman|Gerald Jay Sussman]]
|year=1997
|title=Structure and Interpretation of Computer Programs
|url=http://mitpress.mit.edu/sicp/
|publisher=[[MIT_Press|MIT Press]]
|isbn=0-262-01153-0
|access-date=2016-03-06
|archive-date=2017-12-26
|archive-url=https://web.archive.org/web/20171226134539/http://mitpress.mit.edu/sicp/
|dead-url=no
}}
*{{Cite journal
|first = Deborah J.
|last = Armstrong
|date = February 2006
|title = The Quarks of Object-Oriented Development
|journal = Communications of the ACM
|volume = 49
|issue = 2
|pages = 123–128
|issn = 0001-0782
|url = http://portal.acm.org/citation.cfm?id=1113040
|accessdate = 8 August 2006
|doi = 10.1145/1113034.1113040
|archive-date = 2020-01-22
|archive-url = https://web.archive.org/web/20200122041147/https://dl.acm.org/doi/10.1145/1113034.1113040
|dead-url = no
}}
*{{Cite book
|first=Grady
|last=Booch
|authorlink=Grady Booch
|year=1997
|title=Object-Oriented Analysis and Design with Applications
|publisher=[[Addison-Wesley|Addison-Wesley]]
|isbn=0-8053-5340-2
}}
*{{Cite book
|first=Peter
|last=Eeles
|authorlink=
|author2=[[Oliver_Sims|Oliver Sims]]
|year=1998
|title=Building Business Objects
|url=https://archive.org/details/buildingbusiness0000eele
|publisher=[[John_Wiley_&_Sons|John Wiley & Sons]]
|isbn=0-471-19176-0
}}
*{{Cite book
|first=Erich
|last=Gamma
|authorlink=Erich Gamma
|coauthors=[[Richard_Helm|Richard Helm]], [[Ralph_Johnson_(computer_scientist)|Ralph Johnson]], [[John_Vlissides|John Vlissides]]
|year=1995
|title=Design Patterns: Elements of Reusable Object Oriented Software
|publisher=Addison-Wesley
|isbn=0-201-63361-2
}}
*{{Cite book
|first=Paul
|last=Harmon
|authorlink=Paul Harmon (management author)
|author2=William Morrissey
 |year=1996
|title=The Object Technology Casebook - Lessons from Award-Winning Business Applications
|url=https://archive.org/details/objecttechnology00harm
|publisher=John Wiley & Sons
|isbn=0-471-14717-6
}}
*{{Cite book
|first=Ivar
|last=Jacobson
|authorlink=Ivar Jacobson
|year=1992
|title=Object-Oriented Software Engineering: A [[Use_case|Use Case]]-Driven Approach
|publisher=Addison-Wesley
|isbn=0-201-54435-0
}}
*{{Cite book
 |first        = Alan
 |last         = Kay
 |authorlink   = Alan Kay
 |title        = The Early History of Smalltalk
 |url          = http://gagne.homedns.org/%7etgagne/contrib/EarlyHistoryST.html
 |access-date  = 2016-03-06
 |archive-url  = https://web.archive.org/web/20050404075821/http://gagne.homedns.org/~tgagne/contrib/EarlyHistoryST.html#
 |archive-date = 2005-04-04
 |dead-url     = yes
}}
*{{Cite book
|first=Bertrand
|last=Meyer
|authorlink=Bertrand Meyer
|year=1997
|title=[[Object-Oriented_Software_Construction|Object-Oriented Software Construction]]
|publisher=[[Prentice_Hall|Prentice Hall]]
|isbn=0-13-629155-4
|url=
}}
*{{Cite book
|first=Rudolf
|last=Pecinovsky
|year=2013
|title=OOP - Learn Object Oriented Thinking & Programming
|publisher=Bruckner Publishing
|isbn=978-80-904661-8-0
|url=http://pub.bruckner.cz/titles/oop
|ref=harv
|access-date=2016-03-06
|archive-date=2021-05-14
|archive-url=https://web.archive.org/web/20210514133517/https://pub.bruckner.cz/titles/oop
|dead-url=no
}}
*{{Cite book
|first=James
|last=Rumbaugh
|authorlink=James Rumbaugh
|author2=Michael Blaha |author3=William Premerlani |author4=Frederick Eddy |author5=William Lorensen
 |year=1991
|title=Object-Oriented Modeling and Design
|url=https://archive.org/details/objectorientedmo00rumb
|publisher=Prentice Hall
|isbn=0-13-629841-9
}}
*{{Cite book
|first=Stephen
|last=Schach
|authorlink=
|year=2006
|title=Object-Oriented and Classical Software Engineering, Seventh Edition
|publisher=[[McGraw-Hill|McGraw-Hill]]
|isbn=0-07-319126-4
}}
*{{Cite book
|first=Axel-Tobias
|last=Schreiner
|year=1993
|title=Object oriented programming with ANSI-C
|publisher=Hanser
|isbn=3-446-17426-5
|id={{hdl|1850/8544}}
}}
*{{Cite book
|first=David A.
|last=Taylor
|year=1992
|title=Object-Oriented Information Systems - Planning and Implementation
|url=https://archive.org/details/objectorientedin00tayl
|publisher=John Wiley & Sons
|isbn=0-471-54364-0
}}
*{{Cite book
|first=Matt
|last=Weisfeld
|authorlink=|year=2009
|title=The Object-Oriented Thought Process, Third Edition
|publisher=[[Addison-Wesley|Addison-Wesley]]
|isbn=0-672-33016-4
}}
*{{Cite book
|first=David
|last=West
|authorlink=|year=2004
|title=Object Thinking (Developer Reference)
|publisher=[[Microsoft_Press|Microsoft Press]]
|isbn=0735619654
}}

==外部連結==
{{Wikiquote|Object-orientation}}
{{Wikiversity|at=Topic:Object-Oriented Programming}}
{{Wikibooks|Object Oriented Programming}}

*{{dmoz|Computers/Programming/Methodologies/Object-Oriented|Object-oriented programming}}
*[http://www.codeproject.com/Articles/22769/Introduction-to-Object-Oriented-Programming-Concep Introduction to Object Oriented Programming Concepts (OOP) and More] {{Wayback|url=http://www.codeproject.com/Articles/22769/Introduction-to-Object-Oriented-Programming-Concep |date=20210514133424 }} by L.W.C. Nirosh
*[http://software.intel.com/en-us/blogs/2008/08/22/flaws-of-object-oriented-modeling/ Discussion about the flaws of OOD] {{Wayback|url=http://software.intel.com/en-us/blogs/2008/08/22/flaws-of-object-oriented-modeling/ |date=20200408233731 }}
*[http://java.sun.com/docs/books/tutorial/java/concepts/index.html OOP Concepts (Java Tutorials)] {{Wayback|url=http://java.sun.com/docs/books/tutorial/java/concepts/index.html |date=20100224234831 }}

{{-}}
{{编程语言类别}}
{{Computer Science}}
{{Authority control}}

{{DEFAULTSORT:Object-Oriented Programming}}
[[Category:编程典范|Category:编程典范]]
[[Category:面向对象的程序设计|]]
[[Category:软件开发|Category:软件开发]]
[[Category:軟體工程|Category:軟體工程]]