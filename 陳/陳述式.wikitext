{{Unreferenced |time=2010-03-20T06:28:47+00:00 }}
{{NoteTA
|G1 = IT
|T = zh-cn:语句 (程序设计); zh-tw:敘述 (程式設計); zh-hk:陳述式;
|1 = zh-cn:语句;zh-tw:敘述; zh-hk:陳述式;
}}
{{各地中文名
|cn = 语句
|tw = 敘述、陳述、陳述式、語句
}}
在計算機科學的編程中，'''敘述'''（又稱-{zh-cn:'''陈述式'''、'''叙述''';zh-tw:'''陳述式'''、'''語句''';zh-hk:'''敘述'''、'''語句''';}-、'''述句'''、'''描述式'''、'''陳述句'''）是指令式編程語言中最小的獨立元素，表達程序要執行的一些動作。多數敘述是以高階語言編寫成一或多個敘述的序列，用於命令計算機執行指定的一系列操作。單一個敘述本身也具有內部結構（例如表達式）。

許多語言（例如說，[[C語言|C語言]]）將敘述與定義句（definition）分隔的很明確，因為敘述只會有運算符號以及一些宣告[[標識符號|標識符號]]（identifier）的定義。我們也可以找出簡單敘述與複合敘述之間的差異；後者會在一個段落中包含了許多敘述。

== 敘述的種類 ==
以下是主要通用的敘述種類，加上典型的指令式語言的範例：

=== 簡單敘述（simple statement） ===
*[[指定敍述|指定(賦值)]]
**C, Fortran: <code>''A '''=''' A + 5''</code>
**Pascal: <code>''A ''':=''' A + 5''</code>

*[[子程序|呼叫]]
**C: <code>CLEARSCREEN()</code>

*[[回傳_(電腦科學)|回傳]]'''：<code>return 5;</code>

*[[goto|goto]]
**C: <code>goto 1</code>

*[[斷言_(程式)|斷言]]
**C: <code>assert(ptr != NULL);</code>

=== 複合敘述（compound statement） ===
* '''[[block_(程式設計)|block]]'''：<code>begin integer NUMBER; WRITE('Number? '); READLN(NUMBER); A:= A*NUMBER end</code>
* '''[[条件语句|if语句]]'''：<code>if A > 3 then WRITELN(A) else WRITELN("NOT YET"); end</code>
* '''[[Switch敘述|Switch敘述]]'''：<code>switch (c) { case 'a'：alert(); break; case 'q'：quit(); break; }</code>
* '''[[While迴圈|While迴圈]]'''：<code>while NOT EOF DO begin READLN end</code>
* '''[[Do-while迴圈|Do-while迴圈]]'''：<code>do { computation(&i); } while (i < 10);</code>
* '''[[For迴圈|For迴圈]]'''：<code>for A:=1 to 10 do WRITELN(A) end</code>

== 表示式 ==
在大多數編程語言中，敘述與表達式互相對比，兩者不同之處在於，敘述是為了運作它們的[[副作用_(程式設計)|副作用]]而執行；表達式則一定會傳回評估後的結果，而且通常不產生副作用。在[[指令式編程|指令式編程]]中，[[Algol_68|Algol 68]]是敘述可有回傳值的少數幾種語言。在混合指令式和[[函數程式語言|函數式]]的編程語言（如Lisp）中，表達式和敘述之間的分野並不存在：即段落中只為了副作用且不返回值，而依序執行的表達式，也被認為是“表達式”。在純函數式編程中沒有敘述；一切都是可被評估的表達式。

在措辭中經常出現這樣的區別：一個敘述是被“執行”(execute)，而一個表達式是被“評估”或對其“求值”(evaluate)。一些語言中具備了exec和eval函數：比如在Python中，<code>exec</code>應用於敘述，而<code>eval</code>應用於表達式。

== 程式語言 ==
敘述的語意（sematic）以及句法（syntax）是依據每個[[程式語言|程式語言]]的定義來規定的。

許多的程式語言不允許[[自我修改程式碼|自我修改程式碼]]（self-modifying code）。或者說，多數程式語言不允許在執行時間創造新的敘述（[[SNOBOL_4|Snobol 4]]則是一個允許這樣作的例子）或者修改現有的敘述（[[Lisp|Lisp]]則是一個反例）。

== 參見 ==
* [[控制流程|控制流程]]
* [[表示式|表示式]]（作為對比）
* [[Comparison_of_programming_languages_(syntax)#Statements|Comparison of Programming Languages - Statements]]

==參考資料==
*[http://www。pcmag。com/encyclopedia_term/0,2542,t=program+statement&i=49804,00。asp] {{Wayback|url=http://www/ |date=20080202072252 }}

{{Authority control}}
{{DEFAULTSORT:Statement (Programming)}}
[[Category:程序架構|Category:程序架構]]