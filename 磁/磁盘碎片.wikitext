{{noteTA|G1=IT}}
{{多個問題|
{{expert-subject|time=2011-12-21T13:02:36+00:00}}
{{Expand English|time=2020-08-18T09:59:17+00:00}}
{{copyedit|time=2018-04-23T02:33:31+00:00}}
{{roughtranslation|time=2018-04-23T02:33:31+00:00}}
}}
[[File:FragmentationDefragmentation.gif|thumb]]
在[[计算_(计算机科学)|计算]]领域，'''文件系统碎片'''（{{lang-en|File system fragmentation}}，或称'''磁盘碎片'''、'''文件系统老化'''）是[[文件系统|文件系统]]将文件内容非连续排列以允许就地修改其内容的后果，亦是[[碎片化|碎片化]]的一个特例。磁盘碎片会增加磁盘磁头移动的频率，即增加了[[寻道时间|寻道时间]]，这会降低磁盘读写性能，进而影响[[操作系统|操作系统]]及[[软件|软件]]的性能。另外，文件系统不能承受无限制的碎片。对现有碎片的更正称为{{le|碎片整理|Defragmentation}}，是将文件和可用空间重新组织为连续区域的过程。

现代计算机中的[[固态硬盘|固态硬盘]]（SSD）不是真正的磁盘，也不是“旋转的”，所以没有磁盘碎片的问题。事实上，对这些驱动器进行碎片整理反而会缩短它们的使用寿命。

== 原因 ==
在[[分区|分区]]上[[磁盘格式化|首次初始化文件系统]]时，它只包含一些小的内部结构，其他区域则是一个连续的空白区块。{{efn|一些文件系统，例如[[NTFS|NTFS]]和[[ext2|ext2]]+，可能为了特殊目的预先分配空的连续区域。}} 这意味着文件系统能够将新创建的文件放置在分区的任何位置。在文件系统被创建后的一段时间内，其中的文件布局近乎最佳。而当[[操作系统|操作系统]]或[[应用软件|软件]]被安装或[[存档|存档]]被解包时，单独的文件最终会按顺序生成，因此相关文件的位置彼此接近。

当已有文件被删除或截断时，将会产生新的可用空间；而当新数据被附加到现有文件时，通常不会在文件结束的地方重新开始写入，因为那里可能已经分配给了另一个文件。因此，必须分配新的磁盘空间片段。随着时间的推移，相同的因素使得自由空间以及频繁附加的文件变得碎片化。可用空间变短也意味着文件系统不再能够为新文件分配连续空间，而必须将它们分解成碎片。当文件系统变满并且不存在大量连续的可用空间时尤其如此。

=== 范例 ===
[[File:File_system_fragmentation.svg|缩略图]]
下面的例子是一个简化表示：

新硬盘有5个文件，将其分别命名为A、B、C、D、E，并按顺序连续保存。每个文件使用10个块空间。（在这个例子中，块的大小并不重要。）剩余的磁盘空间则是一个空闲块。因此，可以在文件E之后创建并保存附加文件。

== 類型 ==
在以下幾個層次上可能會出現文件系統碎片：
* 各個文件中的碎片
* 可用空間碎片
* [[訪問局部性|訪問局部性]]減少，在獨立但相關文件之間

=== 文件碎片 ===
{{空章節|time=2020-02-20T06:40:56+00:00|section=4}}

=== 可用空間碎片 ===
{{Empty section|time=2020-08-18T09:54:02+00:00}}

=== 文件分散 ===
{{See also|{{tsl|en|File sequence|文件序列}}}}
文件分割，也稱為相關文件碎片，或者應用程序級（文件）碎片，指缺乏引用的局部性（在存儲介質中）在相關文件之間。

== 消極後果 ==
對於消費級硬盤驅動器而言，磁盘碎片是個很嚴重的問題。因為增大差距在順序訪問速度和{{tsl|en|rotational latency|旋轉延遲}}（以及較小程度上尋道時間）之間其上文件系統通常放置。<ref name="seagate-future">{{cite conference |first=Mark H. |last=Kryder |publisher=[[Seagate_Technology|Seagate Technology]] |date=2006-04-03 |title=Future Storage Technologies: A Look Beyond the Horizon |conference=Storage Networking World conference |url=http://www.snwusa.com/documents/presentations-s06/MarkKryder.pdf |format=[[PDF|PDF]] |archiveurl=https://web.archive.org/web/20060717001830/http://www.snwusa.com/documents/presentations-s06/MarkKryder.pdf |archivedate=17 July 2006}}</ref>因此，碎片是在文件系統的研究與設計的一個重要問題。碎片的遏制不僅很大程度上依賴於文件系統在磁盤上的格式，還取決於它的實現。<ref name="mcvoy-extent">{{cite conference |first=L. W. |last=McVoy |first2=S. R. |last2=Kleiman |date=Winter 1991 |title=Extent-like Performance from a UNIX File System |booktitle=Proceedings of [[USENIX|USENIX]] winter '91 |pages=33–43 |location=Dallas, Texas |publisher=[[Sun_Microsystems,_Inc.|Sun Microsystems, Inc.]] |url=http://www.cis.upenn.edu/~bcpierce/courses/dd/papers/mcvoy-extent.ps |format=[[PostScript|PostScript]] |accessdate=2006-12-14 |archive-date=2007-02-21 |archive-url=https://web.archive.org/web/20070221101751/http://www.cis.upenn.edu/~bcpierce/courses/dd/papers/mcvoy-extent.ps |dead-url=no }}</ref>相對於[[硬盘|机械硬盘]]，文件系統碎片对[[固態硬盤|固態硬盤]]造成的性能影響较小，因為不涉及機械{{tsl|en|seek time|尋道時間}}。<ref name=":0">{{Cite web|url = http://www.hanselman.com/blog/TheRealAndCompleteStoryDoesWindowsDefragmentYourSSD.aspx|title = The real and complete story - Does Windows defragment your SSD?|date = 3 December 2014|accessdate = |website = Scott Hanselman's blog|last = Hanselman|first = Scott|archive-date = 2014-12-22|archive-url = https://web.archive.org/web/20141222171607/http://www.hanselman.com/blog/TheRealAndCompleteStoryDoesWindowsDefragmentYourSSD.aspx|dead-url = no}}</ref>但是，文件系統還需要儲存另一個元數據對於相對應的文件，每條元數據本身需要佔用空間，並且需要處理動力和處理器時間。如果達到碎片的最大極限，將會導致寫入請求失敗。

在簡單的文件系統基準測試中，往往省略了碎片因素，因為模拟現實的老化和碎片化是困難的。<ref name="workload-benchmarks">{{cite journal |first=Keith Arnold |last=Smith |date=January 2001 |title=Workload-Specific File System Benchmarks |publisher=[[Harvard_University|Harvard University]] |location=[[Cambridge,_Massachusetts|Cambridge, Massachusetts]] |url=http://www.eecs.harvard.edu/vino/fs-perf/papers/keith_a_smith_thesis.pdf |format=[[PDF|PDF]] |accessdate=2006-12-14 |deadurl=yes |archiveurl=https://web.archive.org/web/20041117233607/http://www.eecs.harvard.edu/vino/fs-perf/papers/keith_a_smith_thesis.pdf |archivedate=2004-11-17 }}</ref>

== 緩和 ==
=== 防止碎片 ===
为了避免碎片的产生，文件系统或操作系统会通过写入缓存区，将待写入的数据缓存在内存中，一段时间后才连续写入到磁盘中，减少大量的小数据量的直接写入；又或者为一个文件对象分配一段连续的空闲空间（如[[Extent_(檔案系統)|Extent]]技术）以方便连续写入。对于应用程序，如果在知道文件的大小固定的情况下，也可以直接创建相应文件大小的空白文件作为预分配处理，虽然这不及由文件系统分配连续空闲空间直接和高效。

=== 碎片整理 ===
{{main|{{le|碎片整理|Defragmentation}}}}

== 注釋 ==
{{notelist}}

== 參考文獻 ==
{{Reflist|3}}

[[Category:磁盘操作系统|Category:磁盘操作系统]]