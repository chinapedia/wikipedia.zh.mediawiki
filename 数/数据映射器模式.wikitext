在[[软件工程|软件工程]]中，'''对象映射器模式'''（data mapper pattern）是一种[[架构模式|架构模式]]。它在[[Martin_Fowler|Martin Fowler]]的2003年著《企业应用架构的模式》书中命名<ref>{{cite book |last=Fowler |first=Martin |title=Patterns of enterprise application architecture |publisher=Addison-Wesley |year=2003 |isbn=978-0-321-12742-6 |url=https://books.google.com/books?id=FyWZt5DdvFkC&lpg=PA1&dq=Patterns%20of%20Enterprise%20Application%20Architecture%20by%20Martin%20Fowler&pg=PT187#v=onepage&q=active%20record&f=false |quote=映射器层在对象和数据库之间移动数据同时保持它们相互独立并独立于映射器自身。 |access-date=2020-11-08 |archive-date=2016-12-23 |archive-url=https://web.archive.org/web/20161223180739/https://books.google.com/books?id=FyWZt5DdvFkC&lpg=PA1&dq=Patterns%20of%20Enterprise%20Application%20Architecture%20by%20Martin%20Fowler&pg=PT187#v=onepage&q=active%20record&f=false |dead-url=no }}</ref>。符合这个模式的对象的接口将包括函数比如创建、读取、更新和删除，在代表数据存储中的领域实体类型的对象上进行操作。

数据映射器是，在持久化数据存储（经常是[[关系数据库|关系数据库]]）和内存中数据表示（[[业务逻辑|领域层]]）之间，进行双向转移的[[数据访问层|数据访问层]]。这个模式的目标是，保持内存中表示和持久化数据之间相互独立，并独立于数据映射器自身。数据访问层是由一个或多个映射器（或[[数据访问对象|数据访问对象]]）构成，它们进行数据转移。映射器实现在范围上有所不同。通用映射器将处理很多不同的领域实体类型，专用映射器只处理一种或一些。

== 实现 ==
这个概念的实现可在很多编程语言的各种[[软件框架|框架]]中见到。

=== [[Java|Java]]/[[.NET|.NET]] ===
* [[MyBatis|MyBatis]][[持久化框架|持久化框架]]。
* [[Hibernate|Hibernate]]（[[NHibernate|NHibernate]]）[[持久化框架|持久化框架]]。

=== [[Node.js|Node.js]]/[[TypeScript|TypeScript]] ===
* Bookshelf.js<ref>[http://bookshelfjs.org/ Bookshelf.js] {{Wayback|url=http://bookshelfjs.org/ |date=20210307213643 }}</ref>库。
* TypeORM<ref>[https://typeorm.github.io/ TypeORM]</ref>库。
* Massive.js<ref>[https://massivejs.org/ Massive.js] {{Wayback|url=https://massivejs.org/ |date=20201111230450 }}</ref>库。
* Prisma<ref>[https://www.prisma.io/ Prisma] {{Wayback|url=https://www.prisma.io/ |date=20210319075905 }}</ref>。
* Objection.js<ref>[https://vincit.github.io/objection.js/ Objection.js] {{Wayback|url=https://vincit.github.io/objection.js/ |date=20210128003214 }}</ref>库。
* MikroORM<ref>[https://mikro-orm.io/ MikroORM] {{Wayback|url=https://mikro-orm.io/ |date=20210303045049 }}</ref>库。

=== [[PHP|PHP]] ===
* Atlas [[ORM|ORM]]（数据映射器、表格数据网关、查询建造器和PDO包装器）<ref name="Atlas">{{cite web|url=http://atlasphp.io/|title=Atlas ORM{{spaced ndash |archiveurl=http://atlasphp.io}} Atlas|access-date=2020-11-08|archive-date=2021-01-22|archive-url=https://web.archive.org/web/20210122201442/http://atlasphp.io/|dead-url=no}}</ref>。
* [[Doctrine_(PHP)|Doctrine2]][[对象关系映射器|对象关系映射器]]（ORM）和数据库抽象层<ref name="Doctorine2">{{cite web|url=http://www.doctrine-project.org/blog/your-own-orm-doctrine2.html#doctrine2-and-activerecord|title=Doctrine2 and ActiveRecord{{spaced ndash }} Doctrine2|publisher=[[Doctrine_(PHP)|Doctrine2]]|access-date=2013-04-02|archive-url=https://web.archive.org/web/20130721044554/http://www.doctrine-project.org/blog/your-own-orm-doctrine2.html#doctrine2-and-activerecord|archive-date=2013-07-21}}</ref>。
* Cycle<ref>[https://github.com/cycle/orm Cycle] {{Wayback|url=https://github.com/cycle/orm |date=20201111193646 }}</ref> [[ORM|ORM]]（PHP数据映射器ORM和数据建模引擎）<ref name="Cycle">{{cite web|url=https://github.com/cycle/orm|title=Cycle ORM{{spaced ndash }} Cycle|access-date=2020-11-08|archive-date=2020-11-11|archive-url=https://web.archive.org/web/20201111193646/https://github.com/cycle/orm|dead-url=no}}</ref>。

=== [[Python|Python]] ===
* [[SQLAlchemy|SQLAlchemy]]库。
* mincePy<ref>[https://mincepy.readthedocs.io/en/latest/ mincePy]</ref>库。

=== [[Ruby|Ruby]] ===
* DataMapper<ref>[http://datamapper.org/ DataMapper] {{Wayback|url=http://datamapper.org/ |date=20200117212905 }}</ref>库（实际上这个库实现了[[主动记录|主动记录]]设计模式，它的后继者DataMapper 2（现在的ROM<ref>[http://rom-rb.org/ ROM] {{Wayback|url=http://rom-rb.org/ |date=20210224121222 }}</ref>）致力于实际上实现它所命名的这个设计模式）。

=== [[Elixir|Elixir]] ===
* Ecto<ref>[https://github.com/elixir-ecto/ecto Ecto] {{Wayback|url=https://github.com/elixir-ecto/ecto |date=20210322024635 }}</ref>[[持久化框架|持久化框架]]。

== 参见 ==
* [[主动记录模式|主动记录模式]]
* [[对象关系映射|对象关系映射]]

==引用 ==
{{Reflist|2}}

{{DEFAULTSORT:Data mapper pattern}}
[[Category:软件设计模式|Category:软件设计模式]]