{{NoteTA
|G1=IT}}
在[[计算机网络|计算机网络]]中, '''原始套接字'''（raw socket）是一种[[网络套接字|网络套接字]]，允许直接发送/接收[[网际协议|IP协议]][[網路封包|数据包]]而不需要任何[[传输层|传输层]]协议格式。

== 简介 ==

对于标准的套接字，通常[[有效负载|数据]]按照选定的[[传输层|传输层]]协议(例如[[传输控制协议|TCP]]、[[用户数据包协议|UDP]])自动封装，socket用户并不知道在网络介质上广播的数据包含了这种协议包头。

从原始套接字读取数据包含了传输层协议包头。用原始套接字发送数据，是否自动增加传输层协议包头是可选的。

原始套接字用于安全相关的应用程序，如[[nmap|nmap]]。原始套接字一种可能的用例是在[[使用者空間|用户空间]]实现新的传输层协议。<ref>{{cite web|url=http://linux.die.net/man/7/raw|title=raw(7): IPv4 raw sockets - Linux man page|work=die.net|accessdate=2017-03-14|archive-date=2016-09-07|archive-url=https://web.archive.org/web/20160907203842/http://linux.die.net/man/7/raw|dead-url=no}}</ref> 原始套接字常在网络设备上用于[[路由协议|路由协议]]，例如[[因特网组管理协议|IGMP]]v4、[[开放式最短路径优先|开放式最短路径优先]]协议 (OSPF)、[[互联网控制消息协议|互联网控制消息协议]] (ICMP)。[[Ping|Ping]]就是发送一个ICMP响应请求包然后接收ICMP响应回复.<ref>{{cite web|url=http://www.faqs.org/faqs/internet/tcp-ip/raw-ip-faq/|title=Raw IP Networking FAQ|work=faqs.org|accessdate=2017-03-14|archive-date=2012-01-19|archive-url=https://web.archive.org/web/20120119012356/http://www.faqs.org/faqs/internet/tcp-ip/raw-ip-faq/|dead-url=no}}</ref>

== 实现 ==
大部分套接字API都支持原始套接字功能。[[Winsock|Winsock]]自2001年起在[[Windows_XP|Windows XP]]上支持原始套接字。但由于安全原因，2004年微软限制了Winsock的原始套接字功能。<Ref>
Ian Griffiths for IanG on Tap. 12 August, 2004. [http://www.interact-sw.co.uk/iangblog/2004/08/12/norawsockets Raw Sockets Gone in XP SP2] {{Wayback|url=http://www.interact-sw.co.uk/iangblog/2004/08/12/norawsockets |date=20210209131912 }}
</ref>

==例子==
下例在Linux上实现了[[Ping|Ping]]程序的主要功能：
<syntaxhighlight lang="cpp">
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <arpa/inet.h>
#include <netdb.h>

/* 校验和計算 */
u_int16_t checksum(unsigned short *buf, int size)
{
	unsigned long sum = 0;
	while (size > 1) {
		sum += *buf;
		buf++;
		size -= 2;
	}
	if (size == 1)
		sum += *(unsigned char *)buf;
	sum = (sum & 0xffff) + (sum >> 16);
	sum = (sum & 0xffff) + (sum >> 16);
	return ~sum;
}

/* protocol指定的raw socket创建 */
int make_raw_socket(int protocol)
{
	int s = socket(AF_INET, SOCK_RAW, protocol);
	if (s < 0) {
		perror("socket");
		exit(EXIT_FAILURE);
	}
	return s;
}

/* ICMP头部的作成 */
void setup_icmphdr(u_int8_t type, u_int8_t code, u_int16_t id, u_int16_t seq, struct icmphdr *icmphdr)
{
	memset(icmphdr, 0, sizeof(struct icmphdr));
	icmphdr->type = type;
	icmphdr->code = code;
	icmphdr->checksum = 0;
	icmphdr->un.echo.id = id;
	icmphdr->un.echo.sequence = seq;
	icmphdr->checksum = checksum((unsigned short *)icmphdr, sizeof(struct icmphdr));
}

int main(int argc, char **argv)
{
	int n, soc;
	char buf[1500];
	struct sockaddr_in addr;
	struct in_addr insaddr;
	struct icmphdr icmphdr;
	struct iphdr *recv_iphdr;
	struct icmphdr *recv_icmphdr;

	if (argc < 2) {
		printf("Usage : %s IP_ADDRESS\n", argv[0]);
		return 1;
	}

	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = inet_addr(argv[1]);
	soc = make_raw_socket(IPPROTO_ICMP);
	setup_icmphdr(ICMP_ECHO, 0, 0, 0, &icmphdr);

	/* ICMP包的送信 */
	n = sendto(soc, (char *)&icmphdr, sizeof(icmphdr), 0, (struct sockaddr *)&addr, sizeof(addr));
	if (n < 1) {
		perror("sendto");
		return 1;
	}

	/* ICMP包的受信 */
	n = recv(soc, buf, sizeof(buf), 0);
	if (n < 1) {
		perror("recv");
		return 1;
	}

	recv_iphdr = (struct iphdr *)buf;
	/* 从IP包头获取IP包的长度，从而确定icmp包头的开始位置 */
	recv_icmphdr = (struct icmphdr *)(buf + (recv_iphdr->ihl << 2));
	insaddr.s_addr = recv_iphdr->saddr;
	/* 检查送信包的源地址匹配受信包的目的地址  */
	if (!strcmp(argv[1], inet_ntoa(insaddr)) && recv_icmphdr->type == ICMP_ECHOREPLY)
		printf("icmp echo reply from %s\n", argv[1]);
	close(soc);
	return 0;
}
</syntaxhighlight>

下例是binding一个原始套接字并使用：
<syntaxhighlight lang="cpp">
#include<stdio.h>
#include<stdlib.h>
#include<sys/socket.h>
#include<features.h>
#include<linux/if_packet.h>
#include<linux/if_ether.h>
#include<errno.h>
#include<sys/ioctl.h>
#include<net/if.h>
 
#define PACKET_LENGTH	1024
 
int CreateRawSocket(int protocol_to_sniff)
{
	int rawsock;
	if((rawsock = socket(PF_PACKET, SOCK_RAW, htons(protocol_to_sniff)))== -1) {
		perror("Error creating raw socket: ");
		exit(-1);
	}
	return rawsock;
}
 
int BindRawSocketToInterface(char *device, int rawsock, int protocol)
{
	struct sockaddr_ll sll;
	struct ifreq ifr;

	memset(&sll, 0, sizeof(sll));
	memset(&ifr, 0, sizeof(ifr));
	/* First Get the Interface Index  */
	strncpy((char *)ifr.ifr_name, device, IFNAMSIZ);
	if((ioctl(rawsock, SIOCGIFINDEX, &ifr)) == -1) {
		printf("Error getting Interface index !\n");
		exit(-1);
	}
	/* Bind our raw socket to this interface */
	sll.sll_family = AF_PACKET;
	sll.sll_ifindex = ifr.ifr_ifindex;
	sll.sll_protocol = htons(protocol);
	if((bind(rawsock, (struct sockaddr *)&sll, sizeof(sll)))== -1) {
		perror("Error binding raw socket to interface\n");
		exit(-1);
	}
	return 1;
}
 
int SendRawPacket(int rawsock, unsigned char *pkt, int pkt_len)
{
	int sent= 0;
 	/* A simple write on the socket ..thats all it takes ! */
 	if((sent = write(rawsock, pkt, pkt_len)) != pkt_len) {
		return 0;
	}
	return 1;
}

/* argv[1] is the device e.g. eth0
   argv[2] is the number of packets to send */
 
main(int argc, char **argv)
{
	int raw;
	unsigned char packet[PACKET_LENGTH];
	int num_of_pkts;

	/* Set the packet to all A's */
	memset(packet, 'A', PACKET_LENGTH);
	/* Create the raw socket */
	raw = CreateRawSocket(ETH_P_ALL);
	/* Bind raw socket to interface */
	BindRawSocketToInterface(argv[1], raw, ETH_P_ALL);
	num_of_pkts = atoi(argv[2]);
	while((num_of_pkts--)>0) {
 		if(!SendRawPacket(raw, packet, PACKET_LENGTH)) {
			perror("Error sending packet");
		} else {
			printf("Packet sent successfully\n");
		}
	}
	close(raw);
	return 0;
}
</syntaxhighlight>

==参见==
* [[IPv4#报文结构|IPv4包格式]]
* {{tsl|en|IPv6 packet|IPv6包格式}}

==参考文献==
{{reflist}}

==外部链接==
* [http://metacpan.org/module/Net::RawIP Net::RawIP; module for Perl applications.] Created by [https://web.archive.org/web/20050623074557/http://www.ic.al.lg.ua/~ksv/ Sergey Kolychev].
* Network Programming for Microsoft Windows (ISBN 0-7356-1579-9)
* [https://web.archive.org/web/20100106225718/http://blogs.msdn.com/michael_howard/archive/2004/08/12/213611.aspx A little more info on raw sockets and Windows XP SP2 - Michael Howard's Web Log] an indication of what's actually allowed on Windows.
* [http://sock-raw.org/papers/sock_raw SOCK_RAW Demystified: article describing inner workings of Raw Sockets] {{Wayback|url=http://sock-raw.org/papers/sock_raw |date=20210224165542 }}
*[http://www.pdbuchan.com/rawsock/rawsock.html C language examples of Linux raw sockets for IPv4 and IPv6] - David Buchan's C language examples of IPv4 and IPv6 raw sockets for Linux.

[[Category:網路插座|Category:網路插座]]
[[Category:封包|Category:封包]]