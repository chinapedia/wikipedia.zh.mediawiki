'''比较并交换(compare and swap, CAS)'''，是原子操作的一种，可用于在多线程编程中实现不被打断的数据交换操作，从而避免多线程同时改写某一数据时由于执行顺序不确定性以及中断的不可预知性产生的数据不一致问题。
该操作通过将内存中的值与指定数据进行比较，当数值一样时将内存中的数据替换为新的值。

== 概述 ==
一个CAS操作的过程可以用以下c代码表示: <ref>{{cite conference |last1=Mullender |first1=Sape |first2=Russ |last2=Cox |title=Semaphores in Plan 9 |conference=3rd International Workshop on [[Plan_9_from_Bell_Labs|Plan 9]] |year=2008 |url=http://doc.cat-v.org/plan_9/IWP9/2008/iwp9_proceedings08.pdf#page=63 |language=en |access-date=2015-08-04 |archive-date=2016-10-17 |archive-url=https://web.archive.org/web/20161017051315/http://doc.cat-v.org/plan_9/IWP9/2008/iwp9_proceedings08.pdf#page=63 |dead-url=no }}</ref>
<syntaxhighlight lang="c" line="1">
int cas(long *addr, long old, long new)
{
    /* Executes atomically. */
    if(*addr != old)
        return 0;
    *addr = new;
    return 1;
}
</syntaxhighlight>
在使用上，通常会记录下某块内存中的''旧值''，通过对''旧值''进行一系列的操作后得到''新值''，然后通过CAS操作将''新值''与''旧值''进行交换。如果这块内存的值在这期间内没被修改过，则''旧值''会与内存中的数据相同，这时CAS操作将会成功执行 使内存中的数据变为''新值''。如果内存中的值在这期间内被修改过，则'''一般'''<ref>见ABA问题一节</ref>来说''旧值''会与内存中的数据不同，这时CAS操作将会失败，''新值''将不会被写入内存。

=== 应用 ===
在应用中CAS可以用于实现无锁数据结构，常见的有无锁队列（先入先出）<ref>{{cite journal en
|author = Edya Ladan-Mozes · Nir Shavit
|date = 30 November 2007
|title = An optimistic approach to lock-free FIFO queues
|doi = 10.1007/s00446-007-0050-0
|url = http://people.csail.mit.edu/edya/publications/OptimisticFIFOQueue-journal.pdf
|language = en
|format = PDF
|access-date = 2015-08-04
|archive-date = 2016-03-13
|archive-url = https://web.archive.org/web/20160313144954/http://people.csail.mit.edu/edya/publications/OptimisticFIFOQueue-journal.pdf
|dead-url = no
}}</ref>
以及无锁栈（先入后出）。对于可在任意位置插入数据的链表以及双向链表，实现无锁操作的难度较大。<ref>{{Cite web |url = http://www.codeproject.com/Articles/723555/A-Lock-Free-Doubly-Linked-List |title = A Lock Free Doubly Linked List |author = SarmadAsghar |date = 12 Feb 2014 |language = en |accessdate = 2015-08-04 |archive-date = 2015-07-18 |archive-url = https://web.archive.org/web/20150718133505/http://www.codeproject.com/Articles/723555/A-Lock-Free-Doubly-Linked-List |dead-url = no }}</ref>

=== ABA问题 ===
ABA问题是无锁结构实现中常见的一种问题，可基本表述为：
# 进程P1读取了一个数值A
# P1被挂起(时间片耗尽、中断等)，进程P2开始执行
# P2修改数值A为数值B，然后又修改回A
# P1被唤醒，比较后发现数值A没有变化，程序继续执行。
对于P1来说，数值A未发生过改变，但实际上A已经被变化过了，继续使用可能会出现问题。在CAS操作中，由于比较的多是指针，这个问题将会变得更加严重。试想如下情况：
    top
     |
     V   
   0x0014
 | Node A | --> |  Node X | --> ……
有一个栈(先入后出)中有top和节点A，节点A目前位于栈顶top指针指向A。现在有一个进程P1想要pop一个节点，因此按照如下无锁操作进行
<syntaxhighlight lang="c">
pop()
{
  do{
    ptr = top;            // ptr = top = NodeA
    next_prt = top->next; // next_ptr = NodeX
  } while(CAS(top, ptr, next_ptr) != true);
  return ptr;   
}
</syntaxhighlight>
而进程P2在执行CAS操作之前打断了P1，并对栈进行了一系列的pop和push操作，使栈变为如下结构：
    top
     |
     V  
   0x0014
 | Node C | --> | Node B | --> |  Node X | --> ……
进程P2首先pop出NodeA，之后又push了两个NodeB和C，由于内存管理机制中广泛使用的内存重用机制，导致NodeC的地址与之前的NodeA一致。

这时P1又开始继续运行，在执行CAS操作时，由于top依旧指向的是NodeA的地址(实际上已经变为NodeC)，因此将top的值修改为了NodeX，这时栈结构如下：
                                    top
                                     |
    0x0014                           V
  | Node C | --> | Node B | --> |  Node X | --> ……
经过CAS操作后，top指针错误地指向了NodeX而不是NodeB。

== 实现 ==
CAS操作基于CPU提供的原子操作指令实现。对于Intel X86处理器，可通过在汇编指令前增加LOCK前缀来锁定系统总线，使系统总线在汇编指令执行时无法访问相应的内存地址。而各个编译器根据这个特点实现了各自的原子操作函数。<ref>zacklin, http://blog.csdn.net/zacklin/article/details/7445442</ref>

* '''C语言'''，[[C11|C11]]的头文件<stdatomic.h>。由GNU提供了对应的__sync系列函数完成原子操作。 <ref>{{Cite web |url=https://gcc.gnu.org/onlinedocs/gcc-4.1.1/gcc/Atomic-Builtins.html |title=存档副本 |accessdate=2015-08-05 |archive-date=2015-08-11 |archive-url=https://web.archive.org/web/20150811061806/http://gcc.gnu.org/onlinedocs/gcc-4.1.1/gcc/Atomic-Builtins.html |dead-url=no }}</ref><ref name="ch">陈浩, http://coolshell.cn/articles/8239.html {{Wayback|url=http://coolshell.cn/articles/8239.html |date=20150905123603 }}</ref>
* '''[[C++11|C++11]]'''，STL提供了atomic系列函数。<ref>{{Cite web |url=http://en.cppreference.com/w/cpp/atomic |title=存档副本 |accessdate=2015-08-05 |archive-date=2015-08-13 |archive-url=https://web.archive.org/web/20150813124731/http://en.cppreference.com/w/cpp/atomic |dead-url=no }}</ref><ref name="ch" />
* '''JAVA'''，sun.misc.Unsafe提供了compareAndSwap系列函数。<ref>{{Cite web |url=http://www.docjar.com/docs/api/sun/misc/Unsafe.html |title=存档副本 |accessdate=2015-08-05 |archive-date=2015-07-22 |archive-url=https://web.archive.org/web/20150722055613/http://www.docjar.com/docs/api/sun/misc/Unsafe.html |dead-url=no }}</ref>
* '''C#'''，通过Interlocked方法实现。<ref>{{Cite web |url=https://msdn.microsoft.com/en-us/library/System.Threading.Interlocked_methods(v=vs.110).aspx |title=存档副本 |accessdate=2015-08-05 |archive-date=2015-01-10 |archive-url=https://web.archive.org/web/20150110150120/http://msdn.microsoft.com/en-us/library/system.threading.interlocked_methods(v=vs.110).aspx |dead-url=no }}</ref>
* '''Go'''， 通过import "sync/atomic"包实现。<ref>{{Cite web |url=https://golang.org/pkg/sync/atomic/ |title=存档副本 |accessdate=2015-08-05 |archive-date=2015-08-08 |archive-url=https://web.archive.org/web/20150808212421/http://golang.org/pkg/sync/atomic/ |dead-url=no }}</ref>
* '''Windows'''，通过[[Windows_API|Windows API]]实现了InterlockedCompareExchangeXYZ系列函数。<ref>{{Cite web |url=https://msdn.microsoft.com/en-us/library/windows/desktop/ms684122(v=vs.85).aspx |title=存档副本 |accessdate=2017-03-02 |archive-date=2017-03-02 |archive-url=https://web.archive.org/web/20170302113927/https://msdn.microsoft.com/en-us/library/windows/desktop/ms684122(v=vs.85).aspx |dead-url=no }}</ref><ref name="ch" />

== 参考资料 ==
{{Reflist}}

== 外部链接 ==

[[Category:協同控制|Category:協同控制]]
[[Category:計算機算術|Category:計算機算術]]