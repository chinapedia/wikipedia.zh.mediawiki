{{dablink|这是一篇关于数据单位的文章。如果希望了解字处理软件，请看[[Microsoft_Word|Microsoft Word]]。}}
{{多個問題|
{{roughtranslation|time=2020-05-06T04:41:04+00:00}}
{{expand language|1=en|page=|time=2020-05-06T04:36:21+00:00}}
{{no footnotes|time=2020-05-06T04:36:21+00:00}}
{{refimprove|time=2020-05-06T04:36:21+00:00}}
{{TARequired}}
}}
{{noteTA
|G1=IT
|T=zh-hans:字 (计算机) ;zh-hant:字組 (電腦)
|1=zh-hans:字节; zh-hant:位元組;
|2=zh-hans:信息; zh-hant:資訊;
|3=zh-hans:数据; zh-hant:資料;
|4=zh-hans:类型; zh-hant:型態;
|5=zh-hans:比特; zh-hant:位元;
|6=zh-hans:兆字节; zh-hant:百萬位元組;
|7=zh-hans:太字节; zh-hant:兆位元組;
|8=zh-hans:泽字节; zh-hant:皆位元組;
|9=zh-hans:尧字节; zh-hant:佑位元組;
|10=zh-hans:构架; zh-hant:架構;
|11=zh-hans:字; zh-hant:字組;
|12=zh-hans:默认; zh-hant:預設;
|13=zh-hans:存储; zh-hant:儲存;
|14=zh-hans:兼容; zh-hant:相容;
|15=zh-hans:程序; zh-hant:程式;
|16=zh-hans:运行; zh-hant:運作;

}}
{{N-bit}}
在[[電腦|電腦]]领域，对于某种特定的计算机设计而言，'''字'''（{{lang-en|word}}）是用于表示其自然的数据单位的术语。在这个特定電腦中，字組是其用来一次性处理事务的一个固定长度的-{zh-cn:位;zh-tw:位元}-（bit）组。一个字組的位数（即'''字长'''）是[[電腦系统结构|電腦系统结构]]中的一个重要特性。

字組長度在计算机结构和操作的多个方面均有体现。電腦中大多数[[寄存器|寄存器]]的大小是一个字长。電腦处理的典型数值也可能是以字长为单位。[[CPU|CPU]]和[[内存|内存]]之间的数据传送单位也通常是一个字长。还有在内存中用于指明一个存储位置的地址也经常是以字长为单位的。

现代電腦的字长通常为16、32、64-{zh-cn:位;zh-tw:位元}-。其他曾经使用过的字长有：8、9、12、18、24、36、39、40、48、60-{zh-cn:位;zh-tw:位元}-；[[slab_(computer_science)|slab]]是早期的另一个字长实例。某些最早期的電腦是[[十进制|十进制]]的而不是[[二进制|二进制]]的，通常拥有10位或者12位的十进制数字作为字长，还有一些早期的電腦根本就没有固定字长。

有时候字长被定义为某个特定值是为了与早期的電腦保持[[兼容性|兼容]]。现在[[个人電腦|个人電腦]]中最通用的[[微处理器|微处理器]]（例如：[[Intel|Intel]]的[[Pentium|Pentium]]系列和[[AMD|AMD]]的[[Athlon|Athlon]]系列）就是一个例子。它们中的[[IA-32|IA-32]]构架是早期的具有16位字长的[[Intel_8086|Intel 8086]]构架的扩展。而IA-32处理器仍然支持8086（[[x86|x86]]）程序程式所以在IA-32中，-{zh-cn:“;zh-hant:「}-字段-{zh-cn:”;zh-hant:」}-的含义仍然为16位，尽管事实上它运行起来（特别是当默认操作数为32位时）更像一台32位電腦。类似地，在更新型的[[x86-64|x86-64]]构架中，-{zh-cn:“;zh-hant:「}-字組-{zh-cn:”;zh-hant:」}-仍然是16位的，虽然64位操作数更为常见。

== 字的使用 ==
根据计算机的组织情况，字长单位可能被应用到：

* '''整数'''–计算机处理的[[整数|整数]]值通常可以有若干种不同的长度，但是其中总有一种正好是该构架的字长。如果有的话，其他的整数长度很可能是字长的倍数或分数。小尺寸的整数尺寸通常是为了提高存储效率；当它被载入处理器时，它经常被转换成字长尺寸的形式。

* '''浮点数'''–计算机处理的[[浮点数|浮点数]]通常是一个字长或字长的倍数。

* '''地址'''–计算机处理的存储器地址必须有足够的尺寸，以便可以表示需要的数值范围，但是又不能过大。经常使用的尺寸是字，不过也可以是字的倍数或分数。

* '''寄存器'''– [[处理器寄存器|处理器寄存器]]根据它要处理的数据类型被设计成适当的尺寸，例如：整数、浮点数、地址。许多计算机构架使用“通用”寄存器，它们可以存储任何类型的数据，可以允许存储哪怕是最大的数据类型。它们的尺寸通常是其构架的字长。

* '''存储器－处理器传送'''–当处理器从存储器子系统读取数据至寄存器，或者，写寄存器数据到存储器，传送的数据通常是字。在简单的存储系统中，字在[[数据总线|数据总线]]上传送，它一般为一个字或半个字。在使用[[缓存|缓存]]的存储系统，在处理器和一级缓存之间传送的是一个字长，而在更低级的[[存储层次|存储层次]]上传送的可能是更大的尺寸（这尺寸是字的倍数）。

* '''编址单位'''–在一个给定的构架中，连续的地址值对应连续的存储器单位；该单位就是编址单位。在大部分计算机中，这个单位或者是一个字符（例如：字节）或者是一个字（少部分计算机也使用位（bit）编址单位）。如果单位是字，那么用指定长度的地址就可以访问较大数量的存储空间。另一方面，如果单位是字节，那么就可以访问单个的字符（i.e. selected during the memory operation）。

* '''指令'''– [[机器指令|机器指令]]通常是字长的分数或倍数。因为指令和数据经常共享同一个存储子系统，所以自然作出这样的选择。而在[[哈佛结构|哈佛架构（Harvard architecture）]]中，指令和数据的长度并不需要有关联。

== 字长的选择 ==
在设计计算机时，字长的选择是非常重要的。设计上的考虑倾向于为特定的用途（如地址）设定特定的位长。然而，出于经济的考虑，又应该仅使用一种尺寸，或者很少的几种与基本尺寸成倍数或分数（约数）关系的尺寸。这个首选的基本尺寸就成为该构架的字长。

[[字符|字符]]的尺寸对于字长的选择也有影响。20世纪60年代中期以前，字符大部分以6位存储；这样最多允许64个字符，因此不能有大写字母。由于将字长定义成字符尺寸的倍数在处理时间和存储空间上都比较划算，所以这个时期字长也就被定义为6位（在二进制机器上）的倍数。通常的选择是36位字长，这也是适合于浮点数格式的一个长度。

随着[[IBM|IBM]][[IBM360|360]]系统的引入——该系统使用8位字符，并支持大小写字母——标准的字符（确切地说：[[字节|字节]]）尺寸也转变成为8位。从那以后，字长也自然变成了8的倍数，16、32、64位字长被广泛使用。

=== 各种字长的架构 ===
早期的计算机设计中包括可变字长设计。在这类设计中，数字操作数没有固定的长度，它们通过检查某个特殊字符来判断是否结束。这样的机器使用[[BCD|BCD]]编码表示数字，例如[[IBM_702|IBM 702]]、[[IBM_705|IBM 705]]、[[IBM_7080|IBM 7080]]、[[IBM_7010|IBM 7010]]、[[UNIVAC_1050|UNIVAC 1050]]、[[IBM_1401|IBM 1401]]和[[IBM_1620|IBM 1620]]。

大部分这样的机器一次处理一个存储单元，因为每条指令和数据占用的数个单元，所以指令将使用数个周期来读取存储器。这类机器经常因为这个原因变得非常慢。例如，在[[IBM_1620_Model_I|IBM 1620 Model I]]上，取指令需要8个周期，只是为了读取12个数字（[[IBM_1620_Model_II|Model II]]降低到6个周期，不过如果指令不需要取其中的一个1个地址域的话，可以只需要4个周期；如果两个都不需要，则只需要1个周期）

=== 字和字节编址 ===
字长对计算机构架的存储器模式有很大的影响。特别是：通常选择字作为存储器的编址方案，所谓存储器编址方案就是地址码能够指定的最小存储单位。In this approach，編號相鄰的記憶體字組，其位址編號相差一。在计算机中这样很自然，因为它通常总是要处理以字为单位的数据（或者是以字的倍数）。并且具有让指令可以使用最小的长度来指定一个地址的优点，这样，就可以减少指令长度或者可以定义更多的指令条数。

当计算机很大的工作量是用来处理字节时，通常定义字节作为地址编址单位要比字更好。这样做字符串中的单个字符可以通过地址直接指定。当然，一个字仍然可以被地址访问，但是比起字编址方案，它的地址将使用更多的位数。在这种组织结构中，字长需要被定义为字符长度的整数倍。这种编址方案在IBM 360中被使用，此后即变成计算机设计中最普遍的方案。

=== 2的幂 ===
数据常常要占用不同大小的存储空间，例如，有些数值比其他的数值要求有更高的精度。通常使用的长度是编址单位（以字为单位编址或以字节为单位编址）的倍数，这个倍数常常是的2的幂。这样做是比较便利的，因为这样的话，将一个处理对象在数组中的索引值转化为这个处理对象的地址只需要进行一个移位操作（这在硬件上只需要进行布线的变化）而不需要进行乘操作。某些时候这样的做法还可以避免除操作。因此，一些现代计算机设计使用的字长（或者其他的操作数）是2的幂乘以字节尺寸。

== 字长家族 ==
随着计算机设计日益复杂，一个单一字长的核心作用在计算机架构中已经不那么重要。虽然硬件有能力支持更宽的数据类型，但是在扩展处理器性能时，市场却有强大的压力要求新产品保持[[向后兼容|向后兼容]]。因此，在一个新构架的向后兼容的设计中，核心的字长不得不与原始机型的字长共存。原始的字长在未来设计中保持可用，这就构成了字长家族的基础。

这种情形的一个主要的实例是[[x86|x86]]系列的设计。原始的[[8086|8086]]构架无疑是使用16位字长的。[[80386|80386]]在[[8086|8086]]的基础上进行了大幅改进，使其基于32位系统构架。如果不用考虑其他因素，它将是32位的，但是作为8086的扩展，它的字长继续被当作16位的。（也因此，有人说80386和它的后继处理器是"32位"的（32-bit），但不是32位字的（32-bit word），原文：As a result of this, one hears of the 80386 and successor processors as being "32-bit", but usually not as having a 32-bit word.——译者）同样的情形最近又发生了，当[[AMD64|AMD64]]构架使64位在系统构架具有主要地位，但是它仍然没有放弃对16位和32位的支持。

因此，今天我们看到的计算机体系结构更多的是基于一个有联系的、类似的字长家族，而不是一个单一的字长体系结构。这些尺寸以整因子（integral factors）——通常是2的幂——互相关联。直接将它们中的任何一个尺寸定义为该系统的字长是武断的，因为这些尺寸的设计可能是因为这一系列体系构架的发展的历史原因，而不是体系自己的最新设计中的特性。

== Dword和Qword ==
在计算机科学中, '''dword'''（双倍字）是一种数据单位，它是字的二倍或者说是qword的一半。在具有16位字长的[[x86|x86]]平台上，dword数据单位具有32位长度。

'''qword'''（四倍字）是一种大小是字长的四倍的数据单位。在通用的x86平台上，该单位的数据具有64位，因为x86系统的字定义为16位（不论实际的机器上工作在那个基本位长上的）

另外，Intel使用术语'''double quadruple word'''，或者DQWord（双四倍字）来指定128位数据，这在[[SSE|SSE]]和它的更原始版本中可以看到。

== 字长表 ==
{| class="wikitable" align="center"
!年份
!计算机<br />架构
!字长
!整数<br />长度
!浮点数<br />长度
!指令长度
!编址单位
!字符<br />长度
|- align="center"
|1941
|[[Z3|Zuse Z3]]
|22 b
|–
|''w''
|8 b
|''w''
|–
|- align="center"
|1942
|[[Atanasoff-Berry_Computer|ABC]]
|50 b
|''w''
|–
|–
|–
|–
|- align="center"
|1944
|[[Harvard_Mark_I|Harvard Mark I]]
|23 d
|''w''
|–
|24 b
|–
|–
|- align="center"
|1946<br />（1948）<br />{1953}
|[[ENIAC|ENIAC]]<br />（w/[https://web.archive.org/web/20100103050402/http://ftp.arl.mil/~mike/comphist/48eniac-coding/ Panel #16]）<br />{w/}
|10 d
|''w'', 2''w''<br />（''w''）<br />{''w''}
|–
|–<br />（2''d'', 4''d'', 6''d'', 8''d''）
|–<br />–<br />{''w''}
|–
|- align="center"
|1951
|[[UNIVAC_I|UNIVAC I]]
|12 d
|''w''
|–
|½''w''
|''w''
|1 d
|- align="center"
|1952
|[[IAS_machine|IAS machine]]
|40 b
|''w''
|–
|½''w''
|''w''
|5 b
|- align="center"
|1952
|[[IBM_701|IBM 701]]
|36 b
|½''w'', ''w''
|–
|½''w''
|½''w'', ''w''
|6 b
|- align="center"
|1952
|[[UNIVAC_60|UNIVAC 60]]
|''n'' d
|1''d'', ... 10''d''
|–
|–
|–
|2''d'', 3''d''
|- align="center"
|1953
|[[IBM_702|IBM 702]]
|''n'' d
|0''d'', ... 511''d''
|–
|5''d''
|''d''
|1 d
|- align="center"
|1953
|[[UNIVAC_120|UNIVAC 120]]
|''n'' d
|1''d'', ... 10''d''
|–
|–
|–
|2''d'', 3''d''
|- align="center"
|1954<br />（1955）
|[[IBM_650|IBM 650]]<br />（w/[[IBM_653|IBM 653]]）
|10 d
|''w''
|–<br />（''w''）
|''w''
|''w''
|2 d
|- align="center"
|1954
|[[IBM_704|IBM 704]]
|36 b
|''w''
|''w''
|''w''
|''w''
|6 b
|- align="center"
|1954
|[[IBM_705|IBM 705]]
|''n'' d
|0''d'', ... 255''d''
|–
|5''d''
|''d''
|1 d
|- align="center"
|1954
|[[IBM_NORC|IBM NORC]]
|16 d
|''w''
|''w'', 2''w''
|''w''
|''w''
|–
|- align="center"
|1956
|[[IBM_305|IBM 305]]
|''n'' d
|1''d'', ... 100''d''
|–
|10''d''
|''d''
|1 d
|- align="center"
|1958
|[[UNIVAC_II|UNIVAC II]]
|12 d
|''w''
|–
|½''w''
|''w''
|1 d
|- align="center"
|1958
|[[Semi_Automatic_Ground_Environment|SAGE]]
|32 b
|½''w''
|–
|''w''
|''w''
|6 b
|- align="center"
|1958
|[[Autonetics_Recomp_II|Autonetics Recomp II]]
|40 b
|''w'', 79 b, 8''d'', 15''d''
|2''w''
|½''w''
|½''w'', ''w''
|5 b
|- align="center"
|1959
|[[IBM_1401|IBM 1401]]
|''n'' d
|1''d'', ...
|–
|''d'', 2''d'', 4''d'', 5''d'', 7''d'', 8''d''
|''d''
|1 d
|- align="center"
|1959<br />（TBD）
|[[IBM_1620|IBM 1620]]
|''n'' d
|2''d'', ...
|–<br />（4''d'', ... 102''d''）
|12''d''
|''d''
|2 d
|- align="center"
|1960
|[[UNIVAC_LARC|LARC]]
|12 d
|''w'', 2''w''
|''w'', 2''w''
|''w''
|''w''
|2 d
|- align="center"
|1960
|[[IBM_1410|IBM 1410]]
|''n'' d
|1''d'', ...
|–
|''d'', 2''d'', 6''d'', 7''d'', 11''d'', 12''d''
|''d''
|1 d
|- align="center"
|1960
|[[IBM_7070|IBM 7070]]
|10 d
|''w''
|''w''
|''w''
|''w'', ''d''
|2 d
|- align="center"
|1960
|[[PDP-1|PDP-1]]
|18 b
|''w''
|–
|''w''
|''w''
|6 b
|- align="center"
|1961
|[[IBM_7030|IBM 7030]]<br />（Stretch）
|64 b
|1''b'', ... 64''b'',<br />1''d'', ... 16''d''
|''w''
|½''w'', ''w''
|b, ½''w'', ''w''
|1 b, ... 8 b
|- align="center"
|1961
|[[IBM_7080|IBM 7080]]
|''n'' d
|0''d'', ... 255''d''
|–
|5''d''
|''d''
|1 d
|- align="center"
|1962
|[[UNIVAC_III|UNIVAC III]]
|25 b, 6 d
|''w'', 2''w'', 3''w'', 4''w''
|–
|''w''
|''w''
|6 b
|- align="center"
|1962
|[[UNIVAC_1107|UNIVAC 1107]]
|36 b
|<sup>1</sup>/<sub>6</sub>''w'', ⅓''w'', ½''w'', ''w''
|''w''
|''w''
|''w''
|6 b
|- align="center"
|1962
|[[IBM_7010|IBM 7010]]
|''n'' d
|1''d'', ...
|–
|''d'', 2''d'', 6''d'', 7''d'', 11''d'', 12''d''
|''d''
|1 d
|- align="center"
|1962
|[[IBM_7094|IBM 7094]]
|36 b
|''w''
|''w'', 2''w''
|''w''
|''w''
|6 b
|- align="center"
|1963
|[[Gemini_Guidance_Computer|Gemini Guidance Computer]]
|39 b
|26 b
|–
|13 b
|13 b, 26 b
|–
|- align="center"
|1963<br />（1966）
|[[Apollo_Guidance_Computer|Apollo Guidance Computer]]
|15 b
|''w''
|–
|''w'', 2''w''
|''w''
|–
|- align="center"
|1964
|[[CDC_6600|CDC 6600]]
|60 b
|''w''
|''w''
|¼''w'', ½''w''
|''w''
|6 b
|- align="center"
|1965
|[[IBM_360|IBM 360]]
|32 b
|½''w'', ''w'',<br />1''d'', ... 16''d''
|''w'', 2''w''
|½''w'', ''w'', 1½''w''
|8 b
|8 b
|- align="center"
|1965
|[[UNIVAC_1108|UNIVAC 1108]]
|36 b
|<sup>1</sup>/<sub>6</sub>''w'', ¼''w'', ⅓''w'', ½''w'', ''w'', 2''w''
|''w'', 2''w''
|''w''
|''w''
|6 b, 9 b
|- align="center"
|1965
|[[PDP-8|PDP-8]]
|12 b
|''w''
|–
|''w''
|''w''
|8 b <!-- Used ASR-33 Teletype ASCII -->
|- align="center"
|1970
|[[PDP-11|PDP-11]]
|16 b
|''w''
|2''w'', 4''w''
|''w'', 2''w'', 3''w''
|8 b
|8 b
|- align="center"
|1971
|[[Intel_4004|Intel 4004]]
|4 b
|''w'', ''d''
|–
|2''w'', 4''w''
|''w''
|–
|- align="center"
|1972
|[[Intel_8008|Intel 8008]]
|8 b
|''w'', 2''d''
|–
|''w'', 2''w'', 3''w''
|''w''
|8 b
|- align="center"
|1972
|[[Calcomp_900|Calcomp 900]]
|9 b
|''w''
|–
|''w'', 2''w''
|''w''
|8 b
|- align="center"
|1974
|[[Intel_8080|Intel 8080]]
|8 b
|''w'', 2''w'', 2''d''
|–
|''w'', 2''w'', 3''w''
|''w''
|8 b
|- align="center"
|1975
|[[Cray-1|Cray-1]]
|64 b
|24 b, ''w''
|''w''
|¼''w'', ½''w''
|''w''
|8 b
|- align="center"
|1975
|[[Motorola_6800|Motorola 6800]]
|8 b
|''w'', 2''d''
|–
|''w'', 2''w'', 3''w''
|''w''
|8 b
|- align="center"
|1975
|[[MOS_Technology_6501|MOS Tech. 6501]]<br />[[MOS_Technology_6502|MOS Tech. 6502]]
|8 b
|''w'', 2''d''
|–
|''w'', 2''w'', 3''w''
|''w''
|8 b
|- align="center"
|1976
|[[Zilog_Z80|Zilog Z80]]
|8 b
|''w'', 2''w'', 2''d''
|–
|''w'', 2''w'', 3''w'', 4''w'', 5''w''
|''w''
|8 b
|- align="center"
|1978<br />（1980）
|[[Intel_8086|Intel 8086]]<br />（w/[[Intel_8087|Intel 8087]]）
|16 b
|½''w'', ''w'', 2''d''<br />（''w'', 2''w'', 4''w''）
|–<br />（2''w'', 4''w'', 5''w'', 17''d''）
|½''w'', ''w'', ... 7''w''
|8 b
|8 b
|- align="center"
|1978
|[[VAX|VAX]]-11/780
|32 b
|¼''w'', ½''w'', ''w'', 1''d'', ... 31''d'', 1''b'', ... 32''b''
|''w'', 2''w''
|¼''w'', ... 14¼''w''
|8 b
|8 b
|- align="center"
|1979
|[[Motorola_68000|Motorola 68000]]
|32 b
|¼''w'', ½''w'', ''w'', 2''d''
|–
|½''w'', ''w'', ... 7½''w''
|8 b
|8 b
|- align="center"
|1982<br />（1983）
|[[Motorola_68020|Motorola 68020]]<br />（w/[[Motorola_68881|Motorola 68881]]）
|32 b
|¼''w'', ½''w'', ''w'', 2''d''
|–<br />（''w'', 2''w'', 2½''w''）
|½''w'', ''w'', ... 7½''w''
|8 b
|8 b
|- align="center"
|1985
|[[ARM_architecture|ARM1]]
|32 b
|''w''
|–
|''w''
|8 b
|8 b
|- align="center"
|1985
|[[MIPS_architecture|MIPS]]
|32 b
|¼''w'', ½''w'', ''w''
|''w'', 2''w''
|''w''
|8 b
|8 b
|- align="center"
|1989
|[[Intel_80486|Intel 80486]]
|16 b
|½''w'', ''w'', 2''d''<br />''w'', 2''w'', 4''w''
|2''w'', 4''w'', 5''w'', 17''d''
|½''w'', ''w'', ... 7''w''
|8 b
|8 b
|- align="center"
|1989
|[[Motorola_68040|Motorola 68040]]
|32 b
|¼''w'', ½''w'', ''w'', 2''d''
|''w'', 2''w'', 2½''w''
|½''w'', ''w'', ... 7½''w''
|8 b
|8 b
|- align="center"
|1991
|[[PowerPC|PowerPC]]
|32 b
|¼''w'', ½''w'', ''w''
|''w'', 2''w''
|''w''
|8 b
|8 b
|- align="center"
|2000
|[[IA-64|IA-64]]
|64 b
|8 b, ¼''w'', ½''w'', ''w''
|½''w'', ''w''
|41 b
|8 b
|8 b
|- align="center"
|2002
|[[XScale|XScale]]
|32 b
|''w''
|''w'', 2''w''
|½''w'', ''w''
|8 b
|8 b
|-
!colspan=8|''说明：'' b:位, d: 10进制数, ''w'':该构架的字长, ''n'':变量长度（variable size）
|}

== 參見 ==
* [[位元|位元]]
* [[位元組|位元組]]
* [[32位元|32位元]]
* [[64位元|64位元]]

== 参考资料 ==
* Gerrit A. Blaauw & Frederick P. Brooks, ''Computer Architecture: Concepts and Evolution''（Addison-Wesley, 1997, ISBN 0-201-10557-8）
* Anthony Ralston & Edwin D. Reilly, ''Encyclopedia of Computer Science Third Edition''（Van Nostrand Reinhold, 1993, ISBN 0-442-27679-6）

{{数据类型}}

[[Category:資訊單位|Category:資訊單位]]