{{noteTA
|T=zh-hans:字符串搜索算法; zh-hant:字串搜尋演算法;
|G1=IT
}}
'''字串搜尋演算法'''（'''String searching algorithms'''）又稱'''字串比對演算法'''（'''string matching algorithms'''）是一种[[搜索_(计算机)|搜索]][[算法|算法]]，是[[字串演算法|字串演算法]]中的一類，用以試圖在一長字符串或文章中，找出其是否包含某一個或多個字符串，以及其位置。

最直觀的解法是比對，如下例中，在字符串haystack中找出字符串needle
<syntaxhighlight lang="c">
char* haystack;
char* needle;
int hlen, nlen, found;
int i,j,k;

found = 0;
hlen = strlen(haystack);
nlen = strlen(needle);
for (i = 0; i < hlen; ++i) {
    for (j = 0; j < nlen; ++j) {
        if (haystack[i+j] != needle[j]) break;
        if (j == nlen - 1) found = 1;
    };
};
return found;
</syntaxhighlight>
上例中，若字符串needle存在於字符串haystack中，則傳回1，否則傳回0。

但是此直觀算法的複雜度為 O(mn)，其中haystack的長度為n、needle的長度為m，所以另有更快速的算法。

== 部分算法比较 ==
令 ''m'' 为模式的长度， ''n'' 为要搜索的字符串长度， ''k''为字母表长度。

{| class="wikitable"
|-
! 算法
! 预处理时间
! 匹配时间
|-
! 朴素算法
| 0 <!-- that is a zero, not an O --> (无需预处理)
| Θ(nm)
|-
! [[Rabin-Karp算法|Rabin-Karp算法]]
| Θ(m)
| 平均 Θ(n + m),<br/>最差 Θ((n−m)m)
|-
! 基于[[有限状态机|有限状态机]]的搜索
| Θ(mk)
| Θ(n)
|-
! [[克努斯-莫里斯-普拉特算法|克努斯-莫里斯-普拉特算法]]
| Θ(m)
| Θ(n)
|-
! [[Boyer-Moore字符串搜索算法|Boyer-Moore字符串搜索算法]]
| Θ(m + k)
| 最好Ω(n/m),<br/>最坏 O(n)
|-
! [[Bitap算法|Bitap算法]]
| Θ(m + k)
| O(mn)
|}

==外部連結==
*[http://www.cs.ucr.edu/%7Estelo/pattern.html Huge (maintained) list of pattern matching links]{{Wayback|url=http://www.cs.ucr.edu/%7Estelo/pattern.html |date=20090323134808 }}
*[http://johannburkard.de/software/stringsearch/ StringSearch — high-performance pattern matching algorithms in Java]{{Dead link}} – Implementations of many String-Matching-Algorithms in Java (BNDM, Boyer-Moore-Horspool, Boyer-Moore-Horspool-Raita, Shift-Or)
*[http://www-igm.univ-mlv.fr/~lecroq/string/index.html Exact String Matching Algorithms—Animation in Java]{{Wayback|url=http://www-igm.univ-mlv.fr/~lecroq/string/index.html |date=20090918081336 }}
*[https://web.archive.org/web/20070718051302/http://www.dcs.shef.ac.uk/~sam/stringmetrics.html String similarity metrics]
*Project Dedupe http://dedupe.sourceforge.net{{dead link|date=2017年12月 |bot=InternetArchiveBot |fix-attempted=yes }}
*[https://web.archive.org/web/20070630034621/http://www.concentric.net/~Ttwang/tech/stringscan.htm Boyer-Moore-Raita-Thomas]

{{字符串}}
[[Category:字符串匹配算法|Category:字符串匹配算法]]