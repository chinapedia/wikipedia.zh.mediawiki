{{noteTA
|G1=IT
}}
'''计算复杂性理论'''（Computational complexity theory）是[[理论计算机科学|理论计算机科学]]和数学的一个分支，它致力于将可计算问题根据它们本身的[[复杂性|复杂性]]分类，以及将这些类别联系起来。一个可计算问题被认为是一个原则上可以用计算机解决的问题，亦即这个问题可以用一系列机械的数学步骤解决，例如[[算法|算法]]。

如果一个问题的求解需要相当多的资源（无论用什么算法），则被认为是难解的。计算复杂性理论通过引入数学计算模型来研究这些问题以及定量计算解决问题所需的资源（时间和空间），从而将资源的确定方法正式化了。其他复杂性测度同样被运用，比如通信量（应用于通信复杂性），电路中门的数量（应用于电路复杂性）以及中央处理器的数量（应用于并行计算）。计算复杂性理论的一个作用就是确定一个能或不能被计算机求解的问题的所具有的实际限制。

在理论计算机科学领域，与此相关的概念有算法分析和可计算性理论。两者之间一个关键的区别是前者致力于分析用一个确定的算法来求解一个问题所需的资源量，而后者则是在更广泛意义上研究用所有可能的算法来解决相同问题。更精确地说，它尝试将问题分成能或不能在现有的适当受限的资源条件下解决这两类。相应地，在现有资源条件下的限制正是区分计算复杂性理论和可计算性理论的一个重要指标：后者关心的是何种问题原则上可以用算法解决。

== 简介 ==

计算复杂性理论所研究的资源中最常见的是时间（要通过多少步[[演算|演算]]才能解决问题）和空间（在解決問題時需要多少[[記憶體|記憶體]]）。其他資源亦可考慮，例如在[[并行计算|并行计算]]中，需要多少并行處理器才能解決問題。

時間複雜度是指在[[電腦科學|電腦科學]]與工程領域完成一個[[演算法|演算法]]所需要的時間，是衡量一個演算法優劣的重要參數。時間複雜度越小，說明該演算法效率越高，則該演算法越有價值。

空間複雜度是指電腦科學領域完成一個演算法所需要占用的[[記憶空間|存儲空間]]，一般是輸入參數的函數。它是演算法優劣的重要度量指標，一般來說，空間複雜度越小，演算法越好。我們假設有一個[[圖靈機|圖靈機]]來解決某一類語言的某一問題，設有<math>X</math>個字（word）屬於這個問題，把<math>X</math>放入這個圖靈機的輸入端，這個圖靈機為解決此問題所需要的工作帶格子數總和稱為'''空間'''。

複雜度理論和[[可计算性理论|可计算性理论]]不同，可计算性理論的重心在於問題能否解決，不管需要多少資源。而复杂性理论作为计算理论的分支，某种程度上被认为和算法理论是一种“矛”与“盾”的关系，即算法理论专注于设计有效的算法，而复杂性理论专注于理解为什么对于某类问题，不存在有效的算法。

== 历史 ==

在20世纪50年代，Trahtenbrot和Rabin的论文被认为是该领域最早的文献。而一般说来，被公认为奠定了计算复杂性领域基础的是Hartmanis和Stearns的1960年代的论文On the computational complexity of algorithms。在这篇论文中，作者引入了时间[[复杂性类|复杂性类]]<math>\text{TIME}(f(n))</math>的概念，并利用[[對角論證法|对角线法]]证明了[[时间层级定理|时间层级定理]]（Time Hierarchy Theorem）。

在此之后，许多研究者对复杂性理论作出了贡献。期间重要的发现包括：对[[随机算法|随机算法]]的[[去随机化|去随机化]]（derandomization）的研究，对[[近似算法|近似算法]]的[[不可近似性|不可近似性]]（hardness of approximation）的研究，以及[[交互式证明系统|交互式证明系统]]理论和[[零知识证明|零知识证明]]（Zero-knowledge proof）等。特别的复杂性理论对近代[[密码学|密码学]]的影响非常显著，而最近，复杂性理论的研究者又进入了[[博弈论|博弈论]]领域，并创立了“[[算法博弈论|算法博弈论]]”（algorithmic game theory）这一分支。

== 基本概念和工具 ==

=== 计算模型与计算资源 ===

计算复杂性理论的研究对象是[[算法|算法]]在执行时所需的[[计算资源|计算资源]]，而为了讨论这一点，我们必须假设算法是在某个[[计算模型|计算模型]]上运行的。常讨论的计算模型包括[[图灵机|图灵机]]（Turing machine）和[[电路(复杂度)|电路]]（circuit），它们分别是[[一致性计算模型|一致性]]（uniform）和[[非一致性计算模型|非一致性]]（non-uniform）计算模型的代表。而计算资源与计算模型是相关的，如对图灵机我们一般讨论的是时间、空间和随机源，而对电路我们一般讨论电路的大小。

由[[邱奇-图灵论题|邱奇-图灵论题]]（Church-Turing thesis），所有的一致的计算模型与图灵机在[[多项式时间|多项式时间]]意义下是等价的。而由于我们一般将多项式时间作为有效算法的标志，该论题使得我们可以仅仅关注图灵机而忽略其它的计算模型。

=== 判定性问题和可计算性 ===

{{main|判定性问题}}

我们考虑对一个算法问题，什么样的回答是我们所需要的。比如搜索问题：给定数组<math>A</math>，和一个数<math>s</math>，我们要问<math>s</math>在不在<math>A</math>中（判定性问题，decision problem）。而进一步的，<math>s</math>如果在<math>A</math>中的话，<math>s</math>的位置是什么（搜索型问题，search problem）。再比如完美匹配问题（perfect matching）：给定一个[[二分图|二分图]]<math>G=(V,E)</math>，我们问是不是存在边集<math>E</math>，使得二分图中每个结点恰好属于该边集的一条边（判定型问题）。而进一步的，<math>E</math>存在的话，<math>E</math>具体是什么（搜索型问题）。

自然的，我们会发现对于一般的算法问题<math>A</math>，我们都可以这样来问：首先，解是不是存在的？其次，如果解存在，这个解具体是什么？这就是<math>A</math>的判定型问题和<math>A</math>的搜索型问题（又称函数型问题）区分来源的直观解释。对判定型问题的回答只需是“是”或“否”，而对搜索型问题，需要返回解的具体形式或者“解不存在”。所以一个对<math>A</math>的搜索型问题的算法自然的也是对<math>A</math>的判定型问题的算法。反之，给定了一个<math>A</math>的判定型问题的算法，是否存在<math>A</math>的搜索型问题的算法，在[[可计算性理论|可计算性理论]]和计算复杂性理论中有着不同的回答，这也是理解计算复杂性理论与它的前身可计算性理论不同的一个基本的观察。

在[[可计算性理论|可计算性理论]]中，可以说明，判定型问题和搜索型问题在可计算性的意义下是等价的（见[[決定性問題|Decision problem]]）。而在计算复杂性中，Khuller和Vazirani在1990年代证明了在P≠NP的假设下，平面图4-着色问题的判定型问题是在P中的，而寻找其字典序第一的着色是NP难的。<ref>Khuller, S. and Vazirani, V. V. 1991. Planar graph coloring is not self-reducible, assuming   P≠NP . Theor. Comput. Sci. 88, 1 (Oct. 1991), 183-183.</ref>

所以在可计算性理论中，只关注判定型问题是合理的。在计算复杂性理论中，虽然一些基本的复杂性类（如P，NP和PSPACE），以及一些基本的问题（P和NP关系问题等）是用判定型问题来定义的，但函数型问题复杂性类也被定义（如FP，FNP等），而且一些特别的函数型问题复杂性类，如TFNP，也正在逐渐受到关注。

=== 算法分析 ===

上面提到计算复杂性理论的研究对象是执行一项计算任务所用的资源，特别的，时间和空间是最重要的两项资源。

我们用时间作例子来讨论算法分析的一些基础知识。如果将输入的长度（设为<math>n</math>）作为变量，而我们关注的是算法运行时间與<math>n</math>的函数关系<math>T(n)</math>。因为一个算法在不同的计算模型上实现时<math>T(n)</math>可能会有常数因子的差别（参见[[可计算性理论|可计算性理论]]），我们使用[[大O符号|大O表达式]]来表示<math>T(n)</math>，这使得我们可以忽略在不同计算模型上实现的常数因子。

以搜索这个计算任务为例。在搜索问题中，给定了一个具体的数<math>s</math>，和长度为<math>n</math>的数组<math>A</math>（数组中数的位置用1到<math>n</math>作标记），任务是当<math>s</math>在<math>A</math>中时，找到<math>s</math>的位置，而<math>s</math>不在<math>A</math>中时，需要报告"未找到"。这时输入的长度即为<math>n+1</math>。下面的过程即是一个最简单的算法：我们依次扫过<math>A</math>中的每个数，并与<math>s</math>进行比较，如果相等即返回当前的位置，如果扫遍所有的数而算法仍未停止，则返回"未找到"。

如果我们假设<math>s</math>在<math>A</math>中每个位置的[[機率|機率]]都相同，那么算法在找到<math>s</math>的条件下需要<math>\frac{1}{n}(1+2+\cdots+n)=\frac{n(n+1)}{2n}=\frac{n+1}{2}</math>的时间。如果<math>s</math>不在<math>A</math>中，那么需要<math>(n+1)</math>的时间。由大O表达式的知识我们知道算法所需的时间即为<math>O(n)</math>。

而如果我们进一步假设<math>A</math>是已排序的，那么我们有[[二分查找算法|二分查找算法]]，使得算法的运行时间是<math>O(\log n)</math>。可以看出执行一项计算任务，不同的算法在运行时间上是有很大差异的。

=== 复杂性类 ===

将计算问题按照在不同计算模型下所需资源的不同予以分类，从而得到一个对算法问题“难度”的类别，就是复杂性理论中复杂性类概念的来源。例如一个问题如果在确定性图灵机上所需时间不会超过一个确定的多项式（以输入的长度为多项式的不定元），那么我们称这类问题的集合为P（polynomial time Turing machine）。而将前述定义中的“确定性图灵机”改为“不确定性图灵机”，那么所得到的问题集合为NP（non-deteministic polynomial time Turing machine）。类似的，设<math>n</math>为输入的长度，那我们可以定义“在确定性图灵机上所需空间不超<math>O(\log n)</math>的算法问题的集合”（即为<math>L</math>），“存在深度为<math>O(\log n)</math>，输入的度（fan-in）为<math>O(1)</math>的电路族（circuit family）的算法问题的集合”（即为NC<sup>1</sup>）等等复杂性类。

定义复杂性类问题的目的是为了将所有的算法问题进行分类，以确定当前算法的难度，和可能的前进方向。这是复杂性理论的一个主线之一：对算法问题进行抽象和分类。例如透过大O表达式，我们可以对忽略因计算模型不同而引入的常数因子。而第二个重要的理论假设，就是将多项式时间作为有效算法的标志（与之对应的是指数时间）。这样，复杂性类使得我们可以忽略多项式阶的不同而專注于多项式时间和指数时间的差别。（对多项式时间作为有效算法的标志这一点是有一定争议的，比如，如果算法的运行时间<math>n^{10}</math>，那它也可以看作是缓慢的，见[[#理论与实践|理论与实践]]。）在本文的其余章节，“有效算法”等价于“多项式算法”

=== 归约 ===

[[归约|归约]]（reduction）是将不同算法问题建立联系的主要的技术手段，并且在某种程度上，定义了算法问题的相对难度。简单来说，假设我们有算法任务<math>A</math>和<math>B</math>，如果我们想说“<math>A</math>比<math>B</math>简单”（记为<math>A\leq B</math>），它应该是什么意思呢？从归约的观点来看，就是说如果我们有了<math>B</math>的有效算法<math>M</math>，那么我们有一个有效算法<math>N</math>，它可以引用<math>M</math>，最终它要解决<math>A</math>问题。

我们以[[点集覆盖问题|点集覆盖问题]]（vertex cover）和[[独立集问题|独立集问题]]（independent set）为例来进行说明。这两个问题都是[[图论|图论]]中的问题。假设给定了无向图<math>G=(V,E)</math>，和一个自然数<math>k</math>，点集覆盖问题是要找到<math>V</math>的子集<math>S</math>，使得对<math>\forall e\in E</math>，有<math>s\in S</math>，使得<math>s\in e</math>，且<math>|S|\leq k</math>；而独立集问题也是要找<math>V</math>的子集<math>S</math>，要求是<math>\forall s_1,s_2\in S, (s_1,s_2)\notin E</math>，且<math>|S|\leq k</math>。

一个简单的观察即是：对<math>G=(V,E)</math>，一个<math>S\subset V</math>是覆盖点集，当且仅当<math>S</math>在<math>G</math>的[[补图|补图]]中是独立点集（而且保持集合大小）。利用这个观察，假设我们有了解决覆盖点集问题的算法<math>M</math>，我们设计解决独立点集的算法N如下：
* 算法<math>N</math>。
** 输入：给定无向图<math>G=(V,E)</math>，自然数<math>k</math>；
** 输出：一个大小小于等于<math>k</math>的独立点集（如果存在，否则返回“不存在”）；
** 已知：算法<math>M</math>，输入为(无向图<math>G</math>, 自然数<math>k</math>)，输出大小小于等于<math>k</math>的覆盖点集，如果这样的点集存在。否则返回“不存在”；
* 算法步骤：
*# 对<math>G</math>，产生<math>G</math>的补图<math>G'</math>；
*# 调用<math>M</math>，输入为<math>(G',k)</math>；
*# 如果<math>M</math>返回“不存在”，输出不存在。如果<math>M</math>返回<math>S\subset V</math>，输出<math>S</math>。

可以看出若产生补图这一步是有效的，那么如果<math>M</math>有效，<math>N</math>也是有效的。一般的，如果我们有一个<math>B</math>有效的算法<math>M</math>，和利用<math>B</math>作为“神谕”（oracle）的解决<math>A</math>问题的算法<math>N</math>，那么如果<math>N</math>是有效的，则我们有有效的解决<math>A</math>问题的算法<math>N'</math>——只需将<math>N</math>中查询B的操作换作具体的<math>M</math>算法即可。而这一性质的基本解释是：将多项式的不定元用另一个多项式代替，那么得到的仍是一个多项式。

所以从归约的观点来看，下面的说法可以看作与“<math>A</math>比<math>B</math>简单”（记为<math>A\leq B</math>）等价：
* <math>A</math>归约到<math>B</math>（reduces <math>A</math> to <math>B</math>, or <math>A</math> is reducible to <math>B</math>, or <math>A</math> can be reduced to <math>B</math>）；
* 存在通过查询<math>B</math>问题来解决<math>A</math>问题的算法（there exists an algorithm that asks oracles of <math>B</math>, and solves <math>A</math>）。

== NP与P关系问题及相关理论 ==

计算复杂性理论最成功的成果之一是[[NP完备|NP完备]]理论。通过该理论，我们可以理解为什么在程序设计与生产实践中遇到的很多问题至今没有找到多项式算法。而该理论更为计算复杂性中的核心问题：P与NP的关系问题指明了方向。

=== NP和P的定义 ===

在上面我们已经知道，NP是指“在非确定性图灵机上有多项式时间算法的问题”的集合，而P是指“在确定性图灵机上有多项式时间算法的问题”的集合。这里我们都考虑的是判定型问题，即考虑一个语言<math>L</math>，我们要判断一个字符串<math>x</math>是不是在<math>L</math>中。那么，一个等价的理解是：NP是指对在<math>L</math>中的<math>x</math>，有多项式长度的证据<math>w</math>，而且对语言<math>(x,w)</math>是有多项式时间算法的；而P是指对<math>L</math>中的<math>x</math>，有多项式时间算法判断<math>x</math>在不在<math>L</math>中。

举个例子，就是考虑完美匹配问题、点集覆盖问题和图不同构问题。这三个问题都有图论背影，问题的描述如下：
* 完美匹配问题：给定图<math>G=(V,E)</math>，找到边的子集<math>F\subset E</math>，使得对任意的<math>v\in V</math>，存在唯一的<math>e\in F,v\in e</math>；
* 点集覆盖问题：给定图<math>G=(V,E)</math>，和自然数<math>k</math>，找到点的子集<math>U\subset V</math>，使得对任意的<math>e\in E</math>，存在<math>v\in U, v\in e</math>，且<math>|U|\leq k</math>；
* 图不同构问题：给定图<math>G=(V,E), H=(U,F), |G|=|H|</math>。我们说<math>G</math>和<math>H</math>是同构的，是指<math>\exists T:V\rightarrow U</math>，对任意的<math>s, t\in V</math>，满足<math>E(s,t)=F(T(s),T(t))</math>（这里我们把边集<math>E</math>看作<math>V\times V\rightarrow \{0,1\}</math>的映射）。图不同构是问对<math>G</math>和<math>H</math>，是不是'''不存在'''这样的映射。

关于这三个问题，它们在复杂性理论中，目前的地位如下：
* 完美匹配问题：在P中。可以利用{{tsl|en|Edmond's algorithm|艾德蒙德算法}}得到<math>O(\sqrt V E)</math>运行时间的算法；
* 点集覆盖问题：在NP中，而不知道是否在P中。实际上，它是NP完备问题，给出它的多项式算法将意味着证明NP=P。它在NP中，原因是给定一个点的子集<math>U\subset V</math>，我们可以在多项式时间中验证这是否是一个满足<math>|U|\leq k</math>的点集覆盖：<math>U</math>的大小很好验证。然后只需对每一条边<math>e</math>，遍历<math>U</math>中每一个元素<math>v</math>，检查是否有<math>v\in e</math>即可。运行时间至多为<math>O(VE)</math>；
* 图不同构问题：在AM中，而不知道是否在NP中。它之所以困难，一个直观的想法是：给定两个图<math>G</math>和<math>H</math>，首先这个问题的“证据”很难定义——不像点集覆盖问题中，一个解就是一个点集，而且点集大小<math>\leq k\leq |V|</math>是多项式大小。这里最直接的证据的定义，是说必须遍历所有的映射<math>T:V\rightarrow U</math>，并对所有的映射验证是否满足同构的定义。而这样一个证据是指数大小的。

这样我们有了：在P中、在NP而不知道是不是在P中、在AM中而不知道是不是在NP中的三个问题。

=== NP与P关系问题 ===

[[File:Complexity_classes.svg|thumb]] (JACM)|volume=22|number=1|year=1975|pages=151–171|url=http://portal.acm.org/citation.cfm?id=321877&dl=ACM&coll=&CFID=15151515&CFTOKEN=6184618|format=PDF|doi=10.1145/321864.321877|access-date=2007-05-16|archive-date=2020-04-27|archive-url=https://web.archive.org/web/20200427145441/http://portal.acm.org/citation.cfm?id=321877&dl=ACM&coll=&CFID=15151515&CFTOKEN=6184618|dead-url=no}}</ref>]]

由于在多项式时间可以判断<math>x</math>在不在<math>L</math>中，蕴含着<math>x</math>本身就是其在<math>L</math>中的证据的含义，所以P⊂NP。这个包含关系是不是严格的呢？或者说，是不是有语言<math>L\in</math>NP，使得<math>L\notin</math>P？这就是著名的NP与P关系问题。从这个问题在1970年代被正式的提出之后，有[[NP完备|NP完备]]理论赋予了它在实践上的重要性，有[[证明复杂性|证明复杂性]]理论赋予了它纯数学理论上的重要性，有[[PCP理论|PCP理论]]和[[NP完备|NP完备]]理论赋予了它算法理论上的重要性。这些理论或者在根本上依赖于NP和P关系问题的某些假设，或者本身就是试图去理解NP和P关系问题而发展出来的，这使得它成为了[[理论计算机科学|理论计算机科学]]乃至数学的中心问题之一。在2000年，[[克雷数学研究所|克雷数学研究所]] 提出了新世纪的数学中七个中心问题，NP与P关系问题就是其中的一个。

关于NP与P关系问题最早发展出的理论是NP完备理论。我们在下面一节简单了解NP完备理论。

=== NP完备理论 ===

{{main|NP完备}}

由上面归约的知识我们知道，算法问题之间可以根据归约来定义相对的难度。即对问题<math>A</math>和问题<math>B</math>，我们认为<math>A</math>比<math>B</math>简单，记为<math>A\leq B</math>，就是存在使用<math>B</math>问题解来解决<math>A</math>问题的算法<math>M</math>，且<math>M</math>是多项式时间的。那么，在一个复杂性类中，有没有可能存在“最难的问题”呢？具体的对NP，就是说是不是存在问题<math>A\in</math>NP，使得对<math>\forall B\in</math>NP，有<math>B\leq A</math>呢？对这样的问题，我们称它是NP完备的。

这个问题乍看起来很不容易把握。因为这需要对所有的NP中的语言L，去找到一个L到A的归约算法。然而1970年代的由[[史提芬·古克|史蒂芬·库克]]和[[列昂尼德·列文|列昂尼德·列文]]分别发现的[[Cook-Levin理论|库克-列文定理]]，证明了[[布尔表达式|布尔表达式]]（Boolean formula）的[[可满足性问题|可满足性问题]]（SAT问题）是NP完备的。概括的说，他们证明了，有一个通用的过程对NP中任意语言在非确定性图灵机上运行历史用布尔表达式来编码，使得该布尔表达式是可满足的，当且仅当该运行历史是对给定输入，接受该输入的。这样，我们就有了第一个被证明是NP完备的问题。

在库克给出SAT问题是NP完备之后不久，[[理查德·卡普|理查德·卡普]]证明了21个[[图论|图论]]、[[组合数学|组合数学]]中常见的问题都是NP完备的。这赋予了NP完备问题在实践中的重要性。现在，已经有成千个在实践中遇到的算法问题被证明是NP完备的（参见[[卡普的二十一個NP-完全問題|NP完备问题列表]]），特别的有许多问题，如[[旅行商问题|旅行商问题]]等的最优算法会带来很大的经济效益（旅行商问题的最优解可以给出最优的电路布线方案，而SAT的最优算法会促进程序验证等问题的进步）。由NP完备的定义，我们知道对这其中任何一个问题的多项式算法都将给出所有NP问题，也包括所有NP完备问题的多项式算法。然而尽管实际问题中遇到很多NP完备的问题，而且有很多问题在不同领域有着相当的重要性而被大量研究，至今，仍没有对NP完备问题的多项式算法，这是一些理论计算机科学家认为NP≠P的理由之一。

对NP和P关系问题，NP完备理论给出了如下的暗示：如果要证明NP=P，一个可能的方向是对NP完备问题给出多项式算法；如果要证明NP≠P，那么必然的一个结果是NP完备问题没有多项式算法。

=== 电路复杂性 ===

{{main|电路复杂性}}

[[电路复杂性|电路复杂性]]理论在1990年代以前，被众多研究者认为是解决NP与P关系问题的可能的途径之一。电路复杂性研究的对象是非一致性的计算模型[[电路_(复杂性)|电路]]，并考虑计算一个[[布尔函数|布尔函数]]所需的最小的电路的深度（depth）和大小（size）等资源。其中，大小为多项式大小的电路族可以计算的布尔函数被记为[[P/poly|P/poly]]。可以证明，P包含在P/poly之中，而[[卡普-利普顿定理|卡普-利普顿定理]]（Karp-Lipton theorem）表明若P/poly在NP之中，则[[多项式层级|多项式层级]]（polynomial hierarchy）将会坍缩至第二层，这是一个不大可能的结果。这两个结果结合起来表明，P/poly可以当作是分离NP与P的一个中间的工具，具体的途径就是证明任一个NP完全问题的电路大小的下界。在直观上说，电路复杂性也绕过了NP与P问题的第一个困难：[[相对化证明困难|相对化证明困难]]（relativizing proofs）。

在1980年代，电路复杂性途径取得了一系列的成功，其中包括[[奇偶性函数|奇偶性函数]]（Parity function）在<math>AC^0</math>中的下界为指数，以及[[团问题|团问题]]（clique problem）在[[单调性电路|单调性电路]]（monotone circuit）中的下界为指数。然而在1994年{{tsl|en|Alexander Razborov|Razborov}}和{{tsl|en|Steven Rudich|Rudich}}的著名论文[[自然性证明|自然性证明]]（Natural proof）中指出，上面所用证明电路下界的方法，在[[单向函数|单向函数]]存在的前提下是不可能分离NP和P的。该结果使很多专家对证明电路下界来分离NP和P的前景表示不乐观。

=== 其它NP与P关系问题相关的理论 ===

* [[去随机化|去随机化]]理论：包括[[伪随机数发生器|伪随机数发生器]]dom generator）和extractor的构造等；
* [[不可近似性_(算法)|不可近似性]]：以[[PCP定理|PCP定理]]为基础，基于NP≠P和更强的[[唯一性游戏假设|唯一性游戏假设]]（Unique game conjecture），可以证明对一些问题不存在某近似比的[[近似算法|近似算法]]；

== 理论与实践 ==

计算复杂性的初衷是理解不同算法问题的难度，特别的是一些重要算法问题的困难性。为了确切的描述一个问题的困难性，计算复杂性的第一步抽象是认为多项式时间是有效的，非多项式时间是困难的。这基于[[指数函数|指数函数]]增长速度的“违反直觉”的特性：如果一个算法的时间复杂性为<math>2^n</math>，取输入的规模是100，在运算速度是<math>10^{12}</math>每秒（关于[[CPU|CPU]]速度，参见[[每秒指令|Instructions per second]]，其中报告截止2009年，主流个人电脑的运算速度可以看作是<math>4\times 10^{10}</math>每秒）的情况下，该程序将会运行<math>4\times 10^{10}</math>年，几乎是[[宇宙年龄|宇宙年龄]]。这为多项式时间被看作是有效时间提供了直观上的证据。

然而多项式的指数很大的时候，算法在实践中也不能看作是有效的。如<math> n^{10}</math>的多项式算法，取问题规模大小为1000，那么几乎就是<math>2^{100}</math>的大小。另一方面，即便一个问题没有多项式算法，它可能会有近似比很好的近似算法（参见[[近似算法|近似算法]]），或有很好的[[启发式算法|启发式算法]]（heuristics）。启发式算法的特点是在理论上没有精确的行为的分析，或者可以表明存在很坏的输入，在这些输入上运行很慢。然而在大多数时候，它都能快速解决问题。计算复杂性中对应的理论分析是[[平均复杂性理论|平均复杂性理论]]（average-case complexity theory）和[[光滑分析|光滑分析]]（smooth analysis）。实际中的例子包括{{tsl|en|Presburger arithmetic|}}、[[布尔可满足性问题|布尔可满足性问题]]（参见[[布尔可满足性问题|SAT solver]]）和[[背包问题|背包问题]]。

== 参考文献 ==
=== 引用 ===
{{Reflist}}

=== 来源 ===
{{refbegin}}
; 書籍
* {{Citation
| last1=Arora
| first1=Sanjeev
| authorlink1=Sanjeev Arora
| last2=Barak
| first2=Boaz
| title=Computational Complexity: A Modern Approach
| url=http://www.cs.princeton.edu/theory/complexity/
| publisher=[[Cambridge_University_Press|Cambridge]]
| year=2009
| isbn=978-0-521-42426-4
| zbl=1193.68112
| accessdate=2018-06-22
| archive-date=2021-03-20
| archive-url=https://web.archive.org/web/20210320063128/https://theory.cs.princeton.edu/complexity/
| dead-url=no
}}
* {{Citation
| last1=Downey
| first1=Rod
| last2=Fellows
| first2=Michael
| authorlink2=Michael Fellows
| title=Parameterized complexity
| url=https://www.springer.com/sgw/cda/frontpage/0,11855,5-0-22-1519914-0,00.html?referer=www.springer.de%2Fcgi-bin%2Fsearch_book.pl%3Fisbn%3D0-387-94883-X
| publisher=[[Springer-Verlag|Springer-Verlag]]
| location=Berlin, New York
| year=1999
}}
* {{citation
| last=Du
| first=Ding-Zhu
| author2=Ko, Ker-I
| title=Theory of Computational Complexity
| publisher=[[John_Wiley_&_Sons|John Wiley & Sons]]
| year=2000
| isbn=978-0-471-34506-0
}}
* {{Garey-Johnson}}
* {{Citation
| last=Goldreich
| first=Oded
| authorlink=Oded Goldreich
| url = http://www.wisdom.weizmann.ac.il/~oded/cc-book.html
| title = Computational Complexity: A Conceptual Perspective
| publisher = Cambridge University Press
| year = 2008
}}
* {{Citation
| editor1-last=van Leeuwen
| editor1-first=Jan
| editor1-link = Jan van Leeuwen
| title=Handbook of theoretical computer science (vol. A): algorithms and complexity
| publisher=[[MIT_Press|MIT Press]]
| isbn=978-0-444-88071-0
| year=1990
}}
* {{citation
 | last = Papadimitriou
 | first = Christos
 | authorlink = Christos Papadimitriou
 | title = Computational Complexity
 | edition = 1st
 | year = 1994
 | publisher = Addison Wesley
 | isbn = 0-201-53082-1
}}
* {{Citation
|last=Sipser
|first=Michael
|authorlink=Michael Sipser
|title=[[Introduction_to_the_Theory_of_Computation|Introduction to the Theory of Computation]]
|edition=2nd
|year=2006
|publisher=[[Thomson_Learning|Thomson Course Technology]]
|location=USA
|isbn=0-534-95097-3
}}

; 期刊文章
* {{Citation | last1=Khalil | first1=Hatem | last2=Ulery | first2=Dana | author2-link=Dana Ulery | title = A Review of Current Studies on Complexity of Algorithms for Partial Differential Equations |publisher=ACM '76 Proceedings of the 1976 Annual Conference |year=1976 | page = 197 | url = http://portal.acm.org/citation.cfm?id=800191.805573 |doi = 10.1145/800191.805573 |journal = Proceedings of the annual conference on - ACM 76 }}
* {{Citation | last1=Cook | first1=Stephen | author1-link=Stephen Cook | title=An overview of computational complexity | publisher=ACM | year=1983 | journal=Commun. ACM | issn=0001-0782 | volume=26 | issue=6 | pages=400–408 | doi=10.1145/358141.358144 | url=http://www.europrog.ru/paper/sc1982e.pdf | access-date=2018-06-22 | archive-url=https://web.archive.org/web/20180722003012/http://www.europrog.ru/paper/sc1982e.pdf | archive-date=2018-07-22 | dead-url=yes }}
* {{Citation | last1=Fortnow | first1=Lance | last2=Homer | first2=Steven | title=A Short History of Computational Complexity | year=2003 | journal=Bulletin of the EATCS | volume=80 | pages=95–133 | url=http://people.cs.uchicago.edu/~fortnow/papers/history.pdf | accessdate=2018-06-22 | archive-date=2021-03-20 | archive-url=https://web.archive.org/web/20210320063124/http://people.cs.uchicago.edu/~fortnow/papers/history.pdf | dead-url=no }}
* {{Citation | last = Mertens |first = Stephan |title=Computational Complexity for Physicists | publisher=IEEE Educational Activities Department | location=Piscataway, NJ, USA |year=2002 | journal=Computing in Science and Eng. |ISSN = 1521-9615 | volume=4 | issue=3 | pages=31–47 | doi = 10.1109/5992.998639 | arxiv=cond-mat/0012185 }}
{{refend}}

== 外部連結 ==
{{Commonscat}}
*[https://complexityzoo.uwaterloo.ca/Complexity_Zoo The Complexity Zoo] {{Wayback|url=https://complexityzoo.uwaterloo.ca/Complexity_Zoo |date=20190827233504 }}
*{{springer|title=Computational complexity classes|id=p/c130160}}
* [https://mathoverflow.net/q/34487 What are the most important results (and papers) in complexity theory that every one should know?]
* [https://www.scottaaronson.com/papers/philos.pdf Scott Aaronson: Why Philosophers Should Care About Computational Complexity] {{Wayback|url=https://www.scottaaronson.com/papers/philos.pdf |date=20210412155822 }}

== 參見 ==
{{Portal|计算机科学}}
* [[時間複雜度|時間複雜度]]
* [[遊戲複雜度|遊戲複雜度]]
* [[空间复杂度|空间复杂度]]
* [[计算理论|计算理论]]
** [[可计算性理论|可计算性理论]]
** [[計算複雜性理論|計算複雜性理論]]

{{-}}
{{complexityclasses}}
{{Computer Science}}

{{Authority control}}

[[Category:理论计算机科学|Category:理论计算机科学]]
[[Category:計算複雜性理論|]]