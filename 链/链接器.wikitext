{{NoteTA|G1=IT|1=zh-cn:链接;zh-tw:鏈結;zh-hk:連結}}
{{Otheruses|鐵路連接器|subject=電腦上的-{zh-hans:连结器;zh-hant:連結器}-|other=[[鐵路車輛|鐵路車輛]]上使用的-{zh-hans:连结器;zh-hant:連結器}-}}
{{unreferenced|time=2019-03-20T07:01:32+00:00}}
[[Image:Linker.svg|thumb]]
'''链接器'''（{{lang-en|Linker}}），又譯為'''-{zh-cn:链結器;zh-tw:連結器;zh-hk:鏈結器}-'''、'''-{zh-cn:连结器;zh-tw:鏈接器;zh-hk:鏈接器}-'''，是一个[[计算机程序|程序]]，将一个或多个由[[编译器|编译器]]或[[汇编器|汇编器]]生成的[[目标文件|目标文件]]外加[[函式庫|库]]，链接为一个[[可执行文件|可执行文件]]。

在[[IBM|IBM]][[大型主机|大型主机]]比如{{le|OS/360|OS/360}}上，链接器是linkage editor；在[[Unix-like|Unix-like]]系統上常用的链接器是{{Internal link helper/en|GNU ld|GNU linker}}。目标文件是包括[[机器码|机器码]]和链接器可用信息的程序-{zh-hant:模組;zh-hans:模块}-。简单的讲，链接器的工作就是解析未定义的符号引用，将目标文件中的占位符替换为符号的地址。链接器还要完成程序中各目标文件的地址空间的组织，这可能涉及重定位工作。

大多数现代[[操作系统|操作系统]]都提供{{Internal link helper/en|动态链接|Dynamic linking}}和{{Internal link helper/en|静态链接|Static linking}}两种形式。

==增量链接==
'''增量链接'''（Incremental Linking），是针对大型软件的源代码的很小改动就需要花费很长时间全部重新链接问题。特别是程序开发时，不可避免地要不断修改、重新编译、链接、调试程序，链接的耗时大大影响了编程者工作效率。解决办法是：所有函数不再首尾紧挨着存放在内存地址空间，而是在函数之间加上padding区域作为间隔，为函数添加几句指令稍微变长留有余地。只要函数的代码改动不大，没有超过原padding所占的空间，链接器只需延长该函数自身，这大大提高了链接的速度。还可以在可执行文件的整个.text节末尾设置一个较大的padding区域，或者使用.textbss节，用来存放修改后变大很多的函数。为了解决由此带来的函数入口地址需要重定位，在.text节中增加ILT表（Incremental Linking Table），所有的函数调用都是通过间接跳转(jum)指令实现，因此函数地址改变仅需要修改ILT表。  

Visual Studio在Debug模式下具有动态编译链接功能，也即“Edit and Continue”功能。一个函数在Visual Studio中设断点或单步调试，这时该函数在.text节中；修改源代码后继续执行该函数，Visual Studio会重新编译该函数并把它加载到.textbss节中的未利用地址空间（原为padding的部分），并修改对该函数调用时跳转所用的ILT表条目以及当前EIP寄存器值。
{{Authority control}}
[[Category:程序设计工具|Category:程序设计工具]]
[[Category:编译器软件|Category:编译器软件]]