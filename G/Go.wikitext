{{Expand language|en}}{{NoteTA|G1=IT}}
{{Infobox programming language
| name                   = Go
| logo                   = Go Logo Blue.svg
| paradigm              = [[編譯語言|編譯型]]，[[並行計算|-{zh-hant:並行處理;zh-hans:可平行化}-]]，[[結構化程式設計|結構化]]，[[指令式編程|指令式]]
| year                  = {{start date and age|2009|11|10}}
| designer              = {{tsl|en|Robert Griesemer|羅伯特·格瑞史莫}}<br />[[羅勃·派克|羅勃·派克]]<br />[[肯·汤普逊|肯·汤普逊]]
| developer             = [[Google|Google]]
| latest release version = {{wikidata|property|reference|edit|P548=Q2804309|P348}}
| latest release date      = {{wikidata|qualifier|P548=Q2804309|P348|P577}}，{{Time ago|{{wikidata|qualifier|raw|P548=Q2804309|P348|P577}}}}
| latest_preview_version=
| latest_preview_date   =
| typing                =
| file_ext              = .go
| implementations       = gc (8g，6g，5g)，gccgo
| dialects              =
| inspired_by           = [[C++|C++]]及[[Python|Python]]
| influenced_by         = [[C语言|C]]、[[Oberon|Oberon]]、[[Limbo_(程式語言)|Limbo]]、[[Newsqueak|Newsqueak]]<ref name="langfaq"/>
| operating_system      = [[Linux|Linux]]、[[macOS|macOS]]、[[FreeBSD|FreeBSD]]、[[Windows|Windows]]
| license               = [[BSD_licenses|BSD]]
| website               = https://golang.org/<br/>https://golang.google.cn/<ref>{{Cite web |url=http://blog.sina.com.cn/s/blog_9c079b040102yv1q.html |title=Golang.google.cn 上线_Google黑板报_新浪博客 |access-date=2020-09-14 |archive-date=2021-08-14 |archive-url=https://web.archive.org/web/20210814022518/http://blog.sina.com.cn/s/blog_9c079b040102yv1q.html }}</ref>
}}

[[File:Golang.png|thumb]]），Go的吉祥物]]
'''{{lang|en|Go}}'''（又稱'''{{lang|en|Golang}}'''<ref>{{Cite web |url=https://www.techcrunch.com/2009/11/10/google-go-language/ |title=Google-go-language |accessdate=2018-05-07 |archive-date=2020-11-28 |archive-url=https://web.archive.org/web/20201128121154/https://techcrunch.com/2009/11/10/google-go-language/ |dead-url=no }}</ref>）是[[Google|Google]]開發的一种[[静态类型|静态]][[强类型|强类型]]、[[編譯語言|編譯型]]、[[並行計算|-{zh-hant:並發型;zh-hans:并发型}-]]，并具有[[垃圾回收_(計算機科學)|垃圾回收功能]]的[[编程语言|编程语言]]。

{{tsl|en|Robert Griesemer|羅伯特·格瑞史莫}}、[[羅勃·派克|羅勃·派克]]及[[肯·汤普逊|肯·汤普逊]]於2007年9月开始设计Go，<ref name="langfaq">{{Cite web |url=http://golang.org/doc/go_faq.html |title=Language Design FAQ |accessdate=2009-11-12 |archive-date=2013-01-02 |archive-url=https://web.archive.org/web/20130102205822/http://golang.org/doc/go_faq.html |dead-url=no }}</ref>稍後伊恩·蘭斯·泰勒（{{lang|en|Ian Lance Taylor}}）、拉斯·考克斯（{{lang|en|Russ Cox}}）加入專案。Go是基於[[Inferno_(网站服务)|Inferno]][[作業系統|作業系統]]所開發的。<ref>{{Cite web |url=http://golang.org/src/cmd/goyacc/goyacc.go |title=goyacc.go: '''Derived from Inferno's utils/iyacc/yacc.c''' |accessdate=2009-11-20 |archive-date=2010-08-02 |archive-url=https://web.archive.org/web/20100802201900/http://golang.org/src/cmd/goyacc/goyacc.go |dead-url=no }}</ref>Go於2009年11月正式宣布推出，成為[[開放原始碼|開放原始碼]]專案，支援[[Linux|Linux]]、[[macOS|macOS]]、[[Windows|Windows]]等作業系統。<ref>{{Cite web |url=http://golang.org/doc/install.html#tmp_29 |title=Installing Go |accessdate=2009-11-12 |archive-date=2012-03-20 |archive-url=https://web.archive.org/web/20120320091541/http://golang.org/doc/install.html#tmp_29 |dead-url=no }}</ref>

在2016年，Go被軟體評價公司{{tsl|en|TIOBE Programming Community Index||TIOBE}}選為「TIOBE 2016年最佳語言」。<ref>{{Cite web |url=https://www.bnext.com.tw/article/42761/tiobe-2016-program-language |title=存档副本 |accessdate=2018-09-17 |archive-date=2018-09-17 |archive-url=https://web.archive.org/web/20180917105246/https://www.bnext.com.tw/article/42761/tiobe-2016-program-language |dead-url=no }}</ref>

目前，Go每半年发布一个二级版本（即从{{lang|en|a.x}}升级到{{lang|en|a.y}}）。

== 描述 ==

Go的语法接近[[C语言|C语言]]，但对于{{tsl|en|type declaration|变量的声明}}有所不同。Go支持[[垃圾回收_(计算机科学)|垃圾回收功能]]。Go的[[并行计算|并行计算]]模型是以[[東尼·霍爾|東尼·霍爾]]的[[交談循序程式|交談循序程式]]（CSP）为基础，采取类似模型的其他语言包括[[Occam|Occam]]和[[Limbo|Limbo]]<ref name="langfaq"/>，Go也具有这个模型的特征，比如[[通道_(编程)|通道]]传输。通过goroutine和通道等并行构造可以建造[[线程池|线程池]]和[[管道_(软件)|管道]]等<ref>{{Cite web |url=http://talks.golang.org/2012/concurrency.slide |title=Go Concurrency Patterns |website=golang.org |accessdate=2020-05-07 |archive-date=2021-02-05 |archive-url=https://web.archive.org/web/20210205062324/https://talks.golang.org/2012/concurrency.slide |dead-url=no }}</ref>。在1.8版本中開放插件（Plugin）的支持，這意味著現在能從Go中動態載入部分函式。

与C++相比，Go並不包括如[[枚举|枚举]]、[[异常处理|异常处理]]、[[繼承_(計算機科學)|继承]]、[[泛型|泛型]]、[[斷言_(程式)|断言]]、[[虚函数|虚函数]]等功能，但增加了 切片(Slice) 型、并发、管道、[[垃圾回收_(计算机科学)|垃圾回收功能]]、[[介面_(資訊科技)|接口]]等特性的语言级支持<ref name="langfaq"/>。Go 2.0版本將支持泛型<ref>{{Cite web |url=https://github.com/golang/go/issues/15292 |title=存档副本 |accessdate=2018-09-17 |archive-date=2020-11-08 |archive-url=https://web.archive.org/web/20201108093319/https://github.com/golang/go/issues/15292 |dead-url=no }}</ref>，對於[[斷言_(程式)|断言]]的存在，則持負面態度，同時也為自己不提供型別[[繼承_(計算機科學)|继承]]來辯護。

不同于[[Java|Java]]，Go原生提供了[[关联数组|关联数组]]（也称为[[哈希表|哈希表]]（Hashes）或字典（Dictionaries））。

== 批評 ==
儘管 Go 的官方與支持者對於語言中不使用[[泛型|泛型]]與[[異常處理|異常處理]]有著大量辯解說詞，但批評聲也從未停過。
在發表 Go 語言 2.0 的草案時，官方稱沒有[[泛型|泛型]]、[[異常處理|異常處理]]與[[軟體模組|模組]]對於 Golang 發展造成很大的阻礙<ref>{{cite web |title=Go 2 Draft Designs |url=https://go.googlesource.com/proposal/+/master/design/go2draft.md |accessdate=2021-03-15 |archive-date=2021-01-26 |archive-url=https://web.archive.org/web/20210126080935/https://go.googlesource.com/proposal/+/master/design/go2draft.md }}</ref>，
等同承認 Golang 沒有這些特色是設計錯誤。

Golang 的[[垃圾回收_(計算機科學)|垃圾回收]]機制一直被人詬病，直到 Golang 1.8 版本[[垃圾回收_(計算機科學)|垃圾回收]]的功能才較為穩定。然而儘管如此，Golang 的垃圾回收還是遠遠落後 [[Java虛擬機器|JVM]] 的 G1 和 ZGB。
[[Discord|Discord]] 的研發團隊在2020年初甚至發表一篇部落格，宣布把其中一個服務由從 Golang 轉移至 [[Rust|Rust]]，理由是 Go 的垃圾回收會導致每2分鐘出現一次卡頓，並且 Discord 研發團隊測試了
Go 語言的1.8、1.9、1.10版本這個問題都沒有改善<ref>{{cite web |title=Why Discord is switching from Go to Rust |url=https://discord.com/blog/why-discord-is-switching-from-go-to-rust |accessdate=2021-03-15 |archive-date=2022-05-11 |archive-url=https://web.archive.org/web/20220511130634/https://discord.com/blog/why-discord-is-switching-from-go-to-rust }}</ref>。

== 历史 ==
2007年，[[Google|Google]]设计Go，目的在于提高在[[多核心處理器|多核]]、网络机器（networked machines）、大型[[代码库|代码库]]（codebases）的情况下的开发效率。<ref>{{cite web|title=Go at Google: Language Design in the Service of Software Engineering|url=https://talks.golang.org/2012/splash.article|accessdate=2018-10-08|archive-date=2021-01-25|archive-url=https://web.archive.org/web/20210125205239/https://talks.golang.org/2012/splash.article|dead-url=no}}</ref>当时在Google，设计师们想要解决其他语言使用中的缺点，但是仍保留他们的优点。<ref>{{cite web|title=Another Go at Language Design|url=http://www.stanford.edu/class/ee380/Abstracts/100428.html|date=2010-04-28|last=Pike|first=Rob|work=Stanford EE Computer Systems Colloquium|publisher=[[Stanford_University|Stanford University]]|accessdate=2020-01-14|archive-date=2014-06-12|archive-url=https://web.archive.org/web/20140612224454/http://www.stanford.edu/class/ee380/Abstracts/100428.html|dead-url=no}} [https://www.youtube.com/watch?v=7VcArS4Wpqk Video available] {{Wayback|url=https://www.youtube.com/watch?v=7VcArS4Wpqk |date=20161125090122 }}.</ref>

* 静态类型和[[运行时|运行时]]效率。（如：[[C++|C++]]）
* 可读性和易用性。（如：[[Python|Python]] 和 [[JavaScript|JavaScript]]）<ref>{{cite web|title=Frequently Asked Questions (FAQ) - The Go Programming Language|url=https://golang.org/doc/faq#different_syntax|accessdate=2016-02-26|work=golang.org|archive-date=2017-02-25|archive-url=https://web.archive.org/web/20170225155234/https://golang.org/doc/faq#different_syntax|dead-url=no}}</ref>
* 高性能的网络和[[多进程|多进程]]。

设计师们主要受他们之间流传的“不要像C++”启发。<ref>{{cite web|title=Dr. Dobb's: Interview with Ken Thompson|url=http://www.drdobbs.com/open-source/interview-with-ken-thompson/229502480|accessdate=2014-02-07|author=Andrew Binstock|date=2011-05-18|archive-date=2014-03-13|archive-url=https://web.archive.org/web/20140313072938/http://www.drdobbs.com/open-source/interview-with-ken-thompson/229502480|dead-url=no}}</ref><ref>{{cite web|title=Less is exponentially more|url=http://commandcenter.blogspot.mx/2012/06/less-is-exponentially-more.html|last=Pike|first=Rob|year=2012|accessdate=2020-01-14|archive-date=2016-03-21|archive-url=https://web.archive.org/web/20160321021201/http://commandcenter.blogspot.mx/2012/06/less-is-exponentially-more.html|dead-url=no}}</ref><ref>{{cite web|title=The Evolution of Go|url=https://talks.golang.org/2015/gophercon-goevolution.slide#4|author=Robert Griesemer|year=2015|accessdate=2020-01-14|archive-date=2017-01-16|archive-url=https://web.archive.org/web/20170116214316/https://talks.golang.org/2015/gophercon-goevolution.slide#4|dead-url=no}}</ref>

Go於2009年11月正式宣布推出，<ref>{{cite web|title=Hey! Ho! Let's Go!|url=https://opensource.googleblog.com/2009/11/hey-ho-lets-go.html|accessdate=2018-05-17|publisher=Google|last6=Kim|website=Google Open Source|first7=Adam|last7=Langley|first6=Jini|last1=Griesemer|first1=Robert|last5=Cox|first4=Ian|last4=Taylor|first3=Ken|last3=Thompson|first2=Rob|last2=Pike|first5=Russ|archive-date=2021-01-26|archive-url=https://web.archive.org/web/20210126104550/https://opensource.googleblog.com/2009/11/hey-ho-lets-go.html|dead-url=no}}</ref>版本1.0在2012年3月发布。<ref>{{cite news|last1=Shankland|first1=Stephen|title=Google's Go language turns one, wins a spot at YouTube: The lower-level programming language has matured enough to sport the 1.0 version number. And it's being used for real work at Google.|url=https://www.cnet.com/news/googles-go-language-turns-one-wins-a-spot-at-youtube/|department=News|website=CNet|publisher=CBS Interactive Inc|publication-date=March 30, 2012|access-date=2017-08-06|quote=Google has released version 1 of its Go programming language, an ambitious attempt to improve upon giants of the lower-level programming world such as C and C++.|archive-date=2020-11-25|archive-url=https://web.archive.org/web/20201125062447/https://www.cnet.com/news/googles-go-language-turns-one-wins-a-spot-at-youtube/|dead-url=no}}</ref><ref>{{cite web|title=Release History|url=https://golang.org/doc/devel/release.html|accessdate=2014-12-11|archive-date=2017-02-17|archive-url=https://web.archive.org/web/20170217063007/https://golang.org/doc/devel/release.html|dead-url=no}}</ref>之后，Go广泛应用于Google的产品<ref name="faq">{{cite news|url=https://golang.org/doc/faq#internal_usage|title=Go FAQ: Is Google using Go internally?|accessdate=2013-03-09|archive-date=2017-02-25|archive-url=https://web.archive.org/web/20170225155234/https://golang.org/doc/faq#internal_usage|dead-url=no}}</ref>以及许多其他组织和开源项目。

在2016年11月，Go（一种[[无衬线体|无衬线体]]）和Go Mono 字体（一种[[等宽字体|等宽字体]]）分别由设计师{{tsl|en|Charles Bigelow|查爾斯·比格洛}}和{{tsl|en|Kris Holmes|克莉絲·荷姆斯}}发布。两种字体均采用了{{tsl|en|WGL4|}}，并且依照着 DIN 1450 标准，可清晰地使用了 large x-height 和 letterforms 。<ref>{{cite web|title=Go fonts – The Go Blog|url=https://blog.golang.org/go-fonts|accessdate=2019-03-12|date=2016-11-16|publisher=Go|archive-date=2019-07-31|archive-url=https://web.archive.org/web/20190731212445/https://blog.golang.org/go-fonts|dead-url=no}}</ref><ref>{{cite web|title=Go Font TTFs|url=https://github.com/golang/image/tree/master/font/gofont/ttfs|accessdate=2019-04-02|publisher=Google|website=GitHub|archive-date=2019-07-31|archive-url=https://web.archive.org/web/20190731155156/https://github.com/golang/image/tree/master/font/gofont/ttfs|dead-url=no}}</ref>

在2018年8月，原生的图标更换了。<sup>待描述完整</sup> 然而，Gopher mascot 仍旧命相同的名字。<ref>{{Cite web|title=Go's New Brand – The Go Blog|url=https://blog.golang.org/go-brand|website=blog.golang.org|access-date=2018-11-09|archive-date=2020-11-25|archive-url=https://web.archive.org/web/20201125062447/https://blog.golang.org/go-brand|dead-url=no}}</ref>

在2018年8月，Go的主要贡献者发布了两个关于语言新功能的“草稿设计——[[泛型|泛型]]和[[异常处理|异常处理]]，同时寻求Go用户的反馈。<ref>{{cite web|title=Go 2 Draft Designs|url=https://go.googlesource.com/proposal/+/master/design/go2draft.md|accessdate=2018-09-12|archive-date=2021-01-26|archive-url=https://web.archive.org/web/20210126080935/https://go.googlesource.com/proposal/+/master/design/go2draft.md|dead-url=no}}</ref><ref>{{cite web|title=The Go Blog: Go 2 Draft Designs|url=https://blog.golang.org/go2draft|date=2018-08-28|accessdate=2020-01-14|archive-date=2021-01-31|archive-url=https://web.archive.org/web/20210131154158/https://blog.golang.org/go2draft|dead-url=no}}</ref>Go 由于在1.x时，缺少对[[泛型|泛型]]编程的支持和冗长的[[异常处理|异常处理]]而备受批评。

=== 版本历史 ===
{| class="wikitable"
|+
!主要版本
!发布日期
!语言改动<ref>{{Cite web|title=Release History - The Go Programming Language|url=https://golang.org/doc/devel/release.html|website=golang.org|access-date=2018-08-24|archive-date=2017-02-17|archive-url=https://web.archive.org/web/20170217063007/https://golang.org/doc/devel/release.html|dead-url=no}}</ref>
!其他改动
|-
|1 – 1.0.3
|2012-03-28
|初始版本
|
|-
|1.11 – 1.11.6
|2018-08-24
|无
|
* Go 1.11 增加 WebAssembly 的实验入口。
* Go 1.11 初次支持新概念 “modules”, 是 GOPATH 的代替品，并支持版本和包的分发。
* Go 1.11 停止支持 Windows XP 和 Windows Vista.
* Go 1.11.3 以及之后会修复  crypto/x509 包的 TLS 认证的脆弱性（vulnerability） .
|-
|1.12.1
|2019-02-25
|无
|
* Opt-in 对TLS 1.3支持
* 增强对 modules 的支持( 为在 Go 1.13 称为默认选择做准备)
* 支持 <code>windows/arm</code>
* 提高 macOS & iOS 向前兼容
|-
|1.13.1
|2019-09-03
|
* Go 已支持更统一和更现代化的 数字字义前缀 （{{tsl|en|Integer literal||number literal}} prefixes  ）
|
* crypto/tls 包中对TLS 1.3 的支持。（Go 1.14 将会移除 opt-out）
* 支持错误包装（Error wrapping）

<br />
|}

== 代码示例 ==

=== Hello World ===
下面是用Go写成的[[Hello_World|Hello World]]程序：

<syntaxhighlight lang="go">
package main

import "fmt"

func main() {
    fmt.Println("Hello, World")
}
</syntaxhighlight>

=== HTTP網頁伺服器 ===
透過Go僅需幾行程式碼就完成HTTP網頁伺服器的實現：

<syntaxhighlight lang="go">
package main

import (
    "io"
    "net/http"
)

func hello(w http.ResponseWriter, r *http.Request) {
    io.WriteString(w, "Hello world!")
}

func main() {
    http.HandleFunc("/", hello)
    http.ListenAndServe(":8000", nil)
}

</syntaxhighlight>

=== Echo命令程序 ===
下面的例子说明了怎样用Go去实现一个像[[UNIX|Unix]]中的[[Echo_(命令)|Echo命令]]程序<ref>{{Cite web |url=http://golang.org/doc/go_tutorial.html |title=存档副本 |accessdate=2009-11-20 |archive-date=2013-07-08 |archive-url=https://www.webcitation.org/6HxxJ2A8V?url=http://tour.golang.org/ |dead-url=no }}</ref>：

<syntaxhighlight lang="go">
package main

import (
    "os"
    "flag"
)

var omitNewline = flag.Bool("n", false, "don't print final newline")

const (
    Space   = " "
    Newline = "\n"
)

func main() {
    flag.Parse() // Scans the arg list and sets up flags
    var s string = ""
    for i := 0; i < flag.NArg(); i++ {
        if i > 0 {
            s += Space
        }
        s += flag.Arg(i)
    }
    if !*omitNewline {
        s += Newline
    }
    os.Stdout.WriteString(s)
}
</syntaxhighlight>

== 语言特征 ==

=== 撰寫風格 ===
Go有定義如下的撰寫風格
# 每行程式結束後不需要撰寫分號（;）。
# 大括號（{）不能夠換行放置。
# if判斷式和for迴圈不需要以小括號包覆起來。
# 使用 tab 做排版
除了第二點外（換行會產生編譯錯誤），在不符合上述規定時，仍舊可以編譯，但使用了內建gofmt工具後，會自動整理程式碼，使之符合規定的撰寫風格。

=== 專案架構 ===
Go的{{tsl|en|Workspace|工作區}}位於<code>GOPATH</code>，其目录結構如下<ref>{{cite web|title=How to Write Go Code|url=https://golang.org/doc/code.html|publisher=The Go Programming Language|language=en|archive-url=https://web.archive.org/web/20190213155415/https://golang.org/doc/code.html|archive-date=2019-02-13|access-date=2017-11-15|dead-url=no}}</ref>：
<pre>src
pkg
bin</pre>
三個目录的用途分別為
{| class="wikitable"
|-
! 目录 !! 用途
|-
| src || 引用的外部[[函式庫|庫]]
|-
| pkg || [[編譯|編譯]]時，生成的{{tsl|en|Object file|對象文件}}
|-
| bin || 編譯後的程式
|}

舉例來說，整個專案目录可能會如下：
<pre>bin/
    hello                          # 生成的執行檔
    outyet                         # 生成的執行檔
pkg/
    linux_amd64/
        github.com/golang/example/
            stringutil.a           # 編譯時，生成的對象檔案
src/
    github.com/golang/example/
        .git/                      # 外部 Git 庫的詮釋資料
 hello/
     hello.go               # Git 庫的程式碼
 outyet/
     main.go                # Git 庫的程式碼
     main_test.go           # Git 庫的程式碼（測試用的程式）
 stringutil/
     reverse.go             # Git 庫的程式碼
     reverse_test.go        # Git 庫的程式碼（測試用的程式）
    golang.org/x/image/
        .git/                      # 外部 Git 庫的詮釋資料
 bmp/
     reader.go              # Git 庫的程式碼
     writer.go              # Git 庫的程式碼

</pre>

=== 轻型协程 ===
Go的主要特色在於易于使用的併行設計，叫做Goroutine，透過Goroutine能夠讓程式以異步的方式執行，而不需要擔心一個函式導致程式中斷，因此Go也非常地適合網路服務。假設有個程式，裡面有兩個函式：

<syntaxhighlight lang="go">
func main() {
    // 假設 loop 是一個會重複執行十次的迴圈函式。
    // 迴圈執行完畢才會往下執行。
    loop()
    // 執行另一個迴圈。
    loop()
}
</syntaxhighlight>

這個時候透過Go讓其中一個函式同步執行，如此就不需要等待該函式執行完後才能執行下一個函式。

<syntaxhighlight lang="go">
func main() {
    // 透過 `go`，我們可以把這個函式同步執行，
    // 如此一來這個函式就不會阻塞主程式的執行。
    go loop()
    // 執行另一個迴圈。
    loop()
}
</syntaxhighlight>

Goroutine是類似線程的概念，属于[[纖程|纖程]](区别于[[协程|协程]]和[[线程|线程]])。線程屬於系統層面，通常來說建立一個新的線程會消耗較多的資源且管理不易；而协程的主要作用是提供在一個線程內的併發性，卻不能利用多個处理器線程。而 Goroutine就像輕量級的線程，一個Go程式可以執行超過數萬個 Goroutine<ref>{{Cite web|url=http://stackoverflow.com/questions/8509152/max-number-of-goroutines|title=Max number of goroutines|accessdate=2017-03-20|work=stackoverflow.com|archive-date=2020-11-25|archive-url=https://web.archive.org/web/20201125220935/https://stackoverflow.com/questions/8509152/max-number-of-goroutines|dead-url=no}}</ref>，並且這些效能都是原生級的，隨時都能夠關閉、結束，且運行在多個處理器執行緒上。一個核心裡面可以有多個Goroutine，透過GOMAXPROCS參數你能夠限制Gorotuine可以佔用幾個系統線程來避免失控。

在內建的官方套件中也不時能夠看見Goroutine的應用，像是net/http中用來監聽網路服務的函式實際上是建立一個不斷執行迴圈的Goroutine；同时搭配了[[epoll|epoll]] 等IO[[多路復用|多路復用]]機制维护Goroutine的[[事件循环|事件循环]]。

== 编译器 ==
当前有两个Go[[编译器|编译器]]分支，分别为官方编译器gc和[[gccgo|gccgo]]。官方编译器在初期使用C写成，后用Go重写从而实现{{tsl|en|Bootstrapping (compilers)|自举}}<ref>{{Cite web |url=http://www.infoq.com/cn/news/2015/01/golang-15-bootstrapped |title=Google公布实现Go 1.5自举的计划 |accessdate=2015-06-09 |archive-date=2018-08-07 |archive-url=https://web.archive.org/web/20180807063845/http://www.infoq.com/cn/news/2015/01/golang-15-bootstrapped |dead-url=no }}</ref>。Gccgo是一个使用标准GCC作为后端的Go编译器<ref>{{Cite web |url=http://golang.org/doc/go_faq.html#Implementation |title=Go FAQ: Implementation |accessdate=2009-11-12 |archive-date=2013-01-02 |archive-url=https://web.archive.org/web/20130102205822/http://golang.org/doc/go_faq.html#Implementation |dead-url=no }}</ref>。

官方编译器支持跨平台编译（但不支持CGO），允许将原始码编译为可在目标系统、架构上执行的二进制文件。

Gccgo 是Go程序设计语言的编译器前端，最初是在谷歌开发的，并于2009年11月发布。它最初是由Ian Lance Taylor写的，它使用GCC来实现的。
如今，Gccgo 已经不再依赖GCC编译器，因此如果您使用另一个编译器来构建也是可行的。

GCCGO能生成很好的执行代码，但缺少逃逸检测，会在很多小内存的分配和回收上损失一些性能。而另一个Go语言编译器 GC 却实现的不严谨，对32位系统支持很差。
在ARM芯片架构上不使用GCCGO编译的代码是靠不住的。

Gccgo目前的开源协议的地址：https://github.com/golang/gofrontend/blob/master/LICENSE {{Wayback|url=https://github.com/golang/gofrontend/blob/master/LICENSE |date=20210915064244 }}

<ref>Gccgo 的官方[https://github.com/golang/gofrontend/blob/master/ Readme.md]文件</ref>

== 參考文獻 ==
{{reflist|2}}

== 外部連結 ==
{{div col|2}}
* {{官方网站}}
* [https://golang.org/doc/faq Golang FAQ]{{Wayback|url=https://golang.org/doc/faq |date=20170225155234 }}
* {{YouTube|id=rKnDgT73v8s|title=The Go Programming Language}}
* IRC：{{irc|go-nuts}}（irc.freenode.net）
* [https://groups.google.com/forum/m/#!forum/golang-nuts 邮件列表]{{Webarchive|url=https://archive.today/20190314091543/https://groups.google.com/forum/m/%23!topic/soc.culture.tamil/BCnIDKAkH6Y/discussion#!forum/golang-nuts |date=2019-03-14 }}
{{div col end}}

{{DEFAULTSORT:Go}}
{{Google公司}}
{{程序设计语言}}
{{肯·汤普逊 navbox}}
[[Category:Go语言|Category:Go语言]]
[[Category:Google軟體|Category:Google軟體]]
[[Category:过程式编程语言|Category:过程式编程语言]]
[[Category:基于类的编程语言|Category:基于类的编程语言]]
[[Category:并发编程语言|Category:并发编程语言]]
[[Category:跨平台軟體|Category:跨平台軟體]]
[[Category:美国发明|Category:美国发明]]
[[Category:使用BSD许可证的软件|Category:使用BSD许可证的软件]]
[[Category:自由編譯器與直譯器|Category:自由編譯器與直譯器]]
[[Category:用Go編程的自由軟件|Category:用Go編程的自由軟件]]
[[Category:2009年建立的程式語言|Category:2009年建立的程式語言]]