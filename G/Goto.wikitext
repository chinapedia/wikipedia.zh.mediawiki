{{NoteTA|G1=IT}}
{{Lowercase title}}

'''GOTO'''是一条可以在许多计算机[[编程语言|编程语言]]中找到的[[语句|语句]]。它是英文单词''[[wiktionary:go|go]]''和''[[wiktionary:to|to]]''的组合。当执行这条语句的时候，它将[[控制流程|控制流程]]无条件地转到另一条语句（也叫「[[跳转|跳转]]」）。跳转语句需要指明[[標記_(程式語言)|標記]]，在不同语言中，標記可以是[[标识符|标识符]]或[[行号|行号]]。在[[机器码|机器码]]级别，<tt>goto</tt>是一种[[分支_(計算機科學)|分支]]的形式。

在一些语言中，可以不用显示地使用<tt>goto</tt>[[关键字|关键字]]而实现同样的功能，例如<tt>break</tt>或<tt>continue</tt>关键字可以跟随一个标识符。[[SNOBOL|SNOBOL]]语言支持一种语句的后缀形式，可以在本条语句执行完毕后实现无条件跳转。

GOTO语句被大部分[[高级语言|高级语言]]支持，只有很少的高级语言不支持GOTO语句。例如，<tt>goto</tt>是一个[[Java|Java]]语言的[[保留字|保留字]]，但是不允许使用。

== 用法 ==
<tt>goto</tt>语句通常和[[条件表达式|IF语句]]一起使用来实现一个条件跳转。

    '''IF''' ''条件'' '''THEN''' '''goto''' ''标签'';

编程语言一般对<code>goto</code>语句跳转的位置加以严格限制。例如，在[[C语言|C]]中，不允许跳转至另一个函数中的標記位置。<ref>{{Cite web |url=http://c0x.coding-guidelines.com/6.8.6.1.html |title=C Standard section 6.8.6.1 The goto statement |accessdate=2009-05-16 |archive-date=2007-12-24 |archive-url=https://web.archive.org/web/20071224215314/http://c0x.coding-guidelines.com/6.8.6.1.html |dead-url=yes }}</ref>[[setjmp.h|Setjmp]]函数提供了对非本地goto的支持。

===例子===
以下C++例子中，我們要在2D[[陣列|陣列]]<code>ar</code>中找尋有沒有100這個數。如果找到，要立即停止搜尋，節省時間。
<syntaxhighlight lang="cpp">
for (int i=0; i<n; i++)
    for (int j=0; j<m; j++)
        if (ar[i][j]==100)goto found;
...

found:
...
</syntaxhighlight>

如果使用<code>break</code>只能跳出目前所在的一個<code>for</code>循環，因此需要使用<code>goto</code>跳出所有循環。

== 对于goto使用的批评 ==
GOTO语句一直是批评和争论的目标，主要的负面影响是使用GOTO语句使程序的可读性变差，甚至成为不可维护的「[[面条代码|面条代码]]」。随着[[结构化编程|结构化编程]]在二十世纪六十年代到七十年代变得越来越流行，许多[[计算机科学家|计算机科学家]]得出结论，即程序应当总是使用被称为「结构化」[[控制流程|控制流程]]的命令，如[[程式迴圈|迴圈]]以及if-then-else语句来替代GOTO。甚至在今天，许多[[程序风格|程序风格]]编码标准禁止使用GOTO语句。为GOTO语句辩护的人认为，加以限制地使用GOTO语句不会导致低质量的代码，并且声称在许多编程语言中，一些任务如果不使用一条或多条GOTO语句是无法被直接实现的。如[[有限状态自动机|有限状态自动机]]的实现、跳出嵌套[[程式迴圈|循环]]以及[[异常处理|异常处理]]。

大概最著名的对于GOTO的批评是[[艾兹格·迪杰斯特拉|艾兹格·迪杰斯特拉]]在1968年的一篇名稱為《GOTO语句有害論》的論文。<ref>{{cite journal
 |  author = [[Edsger_Dijkstra|Edsger Dijkstra]]
 |   title = Go To Statement Considered Harmful
 | journal = Communications of the ACM
 |  volume = 11
 |   issue = 3
 |     url = http://portal.acm.org/citation.cfm?id=1241518&coll=ACM&dl=ACM&CFID=11218690&CFTOKEN=24551268
 |   pages = 147–148
 |   doi = 10.1145/362929.362947
 |date=March 1968}}</ref>迪杰斯特拉认为不加限制地使用GOTO语句应当从高级语言中废止，因为它使分析和验证程序正确性（特别是涉及循环）的任务变得复杂。另外一种观点出现在[[高德纳|高德纳]]的''Structured Programming with go to Statements'' <ref>{{cite journal 
 |author=[[Donald_Knuth|Donald Knuth]] 
 |title=Structured Programming with go to Statements 
 |journal=Computing Surveys 
 |volume=6 
 |issue=4 
 |year=1974 
 |url=http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf 
 |pages=261–301 
 |doi=10.1145/356635.356640 
 |deadurl=yes 
 |archiveurl=https://web.archive.org/web/20090824073244/http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf 
 |archivedate=2009-08-24 
 |access-date=2009-05-16 
 }}</ref>中，文章分析了许多常见编程任务，然后发现其中的一些使用GOTO将得到最理想的结构。

这些批评在一些编程语言的设计上起到了效果。虽然[[Ada|Ada]]语言的设计者在二十世纪七十年代晚期意识到了对于GOTO的批评，这条语句仍旧被包含进去，主要是用来支持自动生成那些<tt>goto</tt>语句必不可少的代码。<ref>{{cite book
 |     title = Programming in Ada 2005
 |    author = {{tsl|en|John Barnes (computer scientist)||John Barnes}}
 |      page = 114–115
 |      date = 2006-06-30
 | publisher = [[艾迪生韦斯利|Addison Wesley]]
 |      isbn = 0-32-134078-7}}</ref>但是，作为goto语句目的地的标签必须使用双尖括号括起来（如：<tt><<Start_Again>></tt>），而这个语法在其他语言中都不被使用。这使得检查程序中goto目的地的存在变得容易。goto语句本身使用简单的形式<tt>'''goto''' Start_Again;</tt>.

== 变体 ==
有许多不同的语言构成可以看作是''goto''的变形：

=== 限制的GOTO ===
許多語言，如[[C語言|C語言]]和[[Java|Java]]，提供了相關的控制流语句，如<tt>break</tt>和<tt>continue</tt>，它們都是有效地被限制的goto語句。它們的作用是無條件跳轉，但是只能夠跳到[[程式迴圈|迴圈]]塊結束的位置——繼續進入下一迴圈（continue）或者結束迴圈（break）。對於break語句，部分語言允許附加特定參數來控制結束迴圈的範圍，例如[[PHP|PHP]]允許標記數字參數代表跳出嵌套語句的層數，<ref>{{Cite web |url=http://www.php.net/manual/en/control-structures.break.php |title=PHP: break - Manual |accessdate=2018-09-14 |work=www.php.net |language=en |archive-date=2021-01-28 |archive-url=https://web.archive.org/web/20210128170829/https://www.php.net/manual/en/control-structures.break.php |dead-url=no }}</ref>Java允許例如在迴圈語句開始前添加<code><标签名>:</code>，在迴圈內以標籤名作為參數代表跳轉到該迴圈語句的結束位置。

對於Java而言，雖然<tt>goto</tt>是作為保留字，但沒有賦予其功能，從而限制goto的使用。

=== switch/case结构 ===
[[C语言|C语言]]、[[C++|C++]]和[[Java|Java]]中的[[switch语句|switch语句]]高效地实现了一个多路''goto''，跳转目标由表达式的值来选择。

== 参见 ==
* [[非结构化编程|非结构化编程]]
* [[控制流|控制流]]
* [[GOSUB|GOSUB]]
* [[三次法则_(程序設計)|三次法則]]
*[[组合子逻辑|组合子逻辑]]
*[[柯里化|柯里化]]
*[[λ演算|λ演算]]
*[[极小化求值|极小化求值]]
*[[求值策略|求值策略]]

== 参考 ==
{{reflist}}

== 外部链接 ==
* [https://web.archive.org/web/20090822145609/http://www.geek-central.gen.nz/peeves/programming_discipline.html A Structured Discipline of Programming]
* [http://www.stevemcconnell.com/ccgoto.htm Using gotos] {{Wayback|url=http://www.stevemcconnell.com/ccgoto.htm |date=20170602054716 }}. Summarized arguments agains and pro usage of goto

[[Category:BASIC程序设计语言家族|Category:BASIC程序设计语言家族]]
[[Category:控制流程|Category:控制流程]]