{{noteTA
|G1=IT
}}
在[[计算机安全|计算机安全]]和[[程序设计|程序设计]]中，'''缓冲区过读'''<ref>{{cite web |url=http://cwe.mitre.org/data/definitions/126.html |title=CWE – CWE-126: Buffer Over-read (2.6) |publisher=Cwe.mitre.org |date=February 18, 2014 |accessdate=April 10, 2014 |archive-date=2018-02-08 |archive-url=https://web.archive.org/web/20180208124312/https://cwe.mitre.org/data/definitions/126.html |dead-url=no }}</ref>是一类[[程序错误|程序错误]]，即[[计算机程序|程序]]从[[緩衝器|緩衝器]]读出数据时超出了边界，而读取了（或试图读取）相邻的内存。这是有违{{link-en|内存安全|memory safety}}的一个例子。

通过构造恶意输入，使得缺乏[[边界检查|边界检查]]的程序读取不该访问到的内存，可以触发缓冲区过读，如在[[心脏出血漏洞|心脏出血漏洞]]里的那样。引发的原因也可能仅仅是编程中的错误。这可能会导致异常的程序行为，包括[[随机存取存储器|内存]]访问错误、不正确的结果、{{link-en|崩溃 (计算机科学)|crash (computing)|崩溃}}或系统安全性损害。因而，有许多[[漏洞|漏洞]]都因其而生，还可能被[[Exploit|恶意利用]]以访问特权信息。

通常与缓冲区过读相联系的[[编程语言|编程语言]]语言包括[[C语言|C]]和[[C++|C++]]，这些语言都没有提供内置的保护机制，以防止使用[[指標_(電腦科學)|指针]]访问[[虚拟内存|虚拟内存]]任意位置的数据，并且不会自动检查读取该内存块的数据是否安全；对应的例子如试图读取比数组更多的元素，以及没有向{{link-en|空终止字符串|null-terminated string}}末尾追加终止符。[[边界检查|边界检查]]可以防止缓冲区过读<ref>{{cite web
 | url = http://www.fort-knox.org/files/younan_malloc.pdf
 | title = Efficient protection against heap-based buffer overflows without resorting to magic
 | date = 2013-02-25
 | accessdate = 2014-04-24
 | author1 = Yves Younan
 | author2 = Wouter Joosen
 | author3 = Frank Piessens
 | publisher = Dept. of Computer Science, Katholieke Universiteit Leuven
 | format = PDF
 | archive-url = https://web.archive.org/web/20130905132446/http://fort-knox.org/files/younan_malloc.pdf
 | archive-date = 2013-09-05
 | dead-url = yes
 }}</ref>，而[[模糊测试|模糊测试]]有助于检测出这些错误。

== 参见 ==
* [[缓冲区溢出|缓冲区溢出]]
* [[计算机安全|计算机安全]]
* [[型別安全|型別安全]]

== 参考 ==
{{Reflist}}

== 外部链接 ==
* [https://web.archive.org/web/20140424142313/http://telussecuritylabs.com/threats/show/TSL20140102-03 PHP DateInterval Heap Buffer Overread Denial of Service]
* [https://bugs.php.net/bug.php?id=66060 PHP Bug #66060: Heap buffer over-read in DateInterval]


{{内存管理}}

{{Computer-security-stub}}

[[Category:程式錯誤|Category:程式錯誤]]
[[Category:電腦記憶體|Category:電腦記憶體]]
[[Category:保全漏洞|Category:保全漏洞]]