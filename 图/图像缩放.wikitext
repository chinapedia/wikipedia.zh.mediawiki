{{多個問題|
{{expand language|1=en|page=|time=2019-12-29T18:39:45+00:00}}
{{inappropriate tone|time=2019-12-29T18:39:45+00:00}}
{{unreferenced|time=2019-12-29T18:39:45+00:00}}
}}
在'''计算机图形学'''中，'''图像缩放'''指的是通过增加或去掉像素来改变图片的尺寸。由于要在效率和图像质量比如平滑度和清晰度之间做折衷，图像缩放并不是个简单的过程。当图像尺寸增大的时候，组成图像的像素也越来越大，图像看上去就变"柔和"了。而缩小图像的时候，图像就变得平滑和清晰了。

除了为了适应显示区域而缩小图片外，图像缩小技术更多的是被用来产生预览图片。图像放大技术一般被用来令一个较小的图像填充一个大的屏幕。当你放大一张图像时，你不能可能获得更多的细节，因此图像的质量将不可避免的下降。不过也有很多技术可以保证在放大图像即增加像素的时候，图像的质量不变。
==缩放方法==
图片的缩放可以用很多种方法，现在考虑把下面的图片放大1倍：

[[File:Image-before-scaling.png|File:Image-before-scaling.png]]

最简单的方法是用[[近邻取样插值|近邻取样插值]]（{{lang|en|Nearest-neighbor interpolation}}），将四个像素用原图一个像素的颜色填充.

[[Image:Image-after-trivial-scaling.png|Image:Image-after-trivial-scaling.png]]

放大后的图像是原图的2倍大小，并且也保留了原图的所有细节.只是结果并不让人满意，有阶梯状锯齿（注意字母W）.

其他的缩放方法能更好的保留原图平滑的线条.举个例子，用[[双线性插值|双线性插值]]，可以得到下面的结果：

[[File:Image-after-linear-interpolation.png|File:Image-after-linear-interpolation.png]]

线性（或双线性）插值在改变图片尺寸上一般比近邻插值效果好.不过也会导致一些不期望的细节柔化并且还是会导致锯齿.更好的方法包括[[双三次插值|双三次插值]]：

[[File:Image-after-cubic-interpolation.png|File:Image-after-cubic-interpolation.png]]

对于低像素，颜色数少的图像放大，用[[hqx|hqx]]或者[[点阵图缩放算法|点阵图缩放算法]]（{{tsl|en|Pixel art scaling algorithms|Pixel art scaling algorithms}}）可以得到更好的结果.生成的图片可以得到较好的边缘锯齿细节.下图使用hq2x:

[[File:Image-after-hq2x.png|File:Image-after-hq2x.png]]

对于缩放照片（以及含有大量颜色的[[位图|位图]]），使用抗锯齿算法[[超级采样|超级采样]]（{{lang|en|Supersampling}}）可以得到较好的结果.

== 参见 ==
* {{tsl|en|Pixel art scaling algorithms|Pixel art scaling algorithms}}
* [[双三次插值|双三次插值]]
* [[双线性插值|双线性插值]]
* {{tsl|en|Lanczos resampling|Lanczos resampling}}
* [[样条插值|样条插值]]
* [[接縫裁剪|接縫裁剪]]
* {{tsl|en|Supersampling|Supersampling}}

== 外部链接 ==
* [http://www.dpreview.com/learn/?/Glossary/Digital_Imaging/Interpolation_01.htm  Interpolation by Vincent Bockaert]{{Wayback|url=http://www.dpreview.com/learn/?%2FGlossary%2FDigital_Imaging%2FInterpolation_01.htm |date=20200806110753 }}
* [http://www.leptonica.com/scaling.html General Scaling - Leptonica]{{Wayback|url=http://www.leptonica.com/scaling.html |date=20110713201330 }}
* [http://www.codeproject.com/KB/graphics/freeimage_display_demo.aspx FreeImage Display Demo]{{Wayback|url=http://www.codeproject.com/KB/graphics/freeimage_display_demo.aspx |date=20110604235843 }}

[[Category:图像处理|Category:图像处理]]