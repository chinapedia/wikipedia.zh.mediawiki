在[[邏輯|邏輯]]、[[數學|數學]]及[[電腦科學|電腦科學]]裡，[[函數|函數]]或[[運算|運算]]的'''元數'''是指所需的參數或[[運算元|運算元]]的數量。[[關係_(數學)|關係]]的元數則是指其對應之[[笛卡兒積|笛卡兒積]]的維度。

元數主要用在下面類型的函數之中：f : ''V'' → ''S''，其中的''V'' ⊂ ''S''<sup>''n''</sup>，且''S''是某個[[集合|集合]]。此類函數通常稱為在''S''上的「運算」，且稱''n''是這個運算的元數。

== 例子 ==
「元數」一詞其實在一般情況之下並不怎麼常使用。例如，與其說「[[加法|加法]]運算的元數是2」或「加法是個元數2的運算」，更多人會說「加法是個二元運算」。

=== 0元 ===
有時，將一個[[常數項|常數]]視為一個0元運算或0元函數是很有用的。

而且，在非[[函數程式語言|函數程式語言]]裡，一個沒有參數的函數可以是有意義的，且不必然是個常數（因為有[[副作用_(電腦科學)|副作用]]）。通常，此類函數實際上會有個「隱藏輸入」，可能是個[[全局變數|全局變數]]，包含整個系統的狀態（時間、未使用記憶體、…）。後者是個很重要的例子，即使在「純」函數程式語言裡也有其存在。

=== 一元 ===
在數學和程式語言中，一元運算的例子包括正負值、[[C語言|C語言]]之類程式語言中的遞增和遞減運算子，以及數學中的[[階乘|階乘]]、[[倒數|倒數]]、[[高斯符號|高斯符號]]、[[絕對值|絕對值]]、[[共軛複數|共軛複數]]和[[範數|範數]]。

所有在[[λ演算|λ演算]]中的函數，以及部份[[函數程式語言|函數程式語言]]（尤其是那些衍生自[[ML語言|ML語言]]的程式語言）在技術上是一元的。

=== 二元 ===
大部份在程式語言中出現的運算子多是二元運算的形式。在程式語言及數學裡，這些二元運算可以是乘法、加法及除法。「或」、「[[邏輯異或|異或]]」、「且」、「蘊涵」等邏輯聯結詞一般也被當做二元運算子使用。

=== 三元 ===
在[[C語言|C語言]]、[[C++|C++]]、[[C♯|C#]]、[[Java|Java]]、[[Perl|Perl]]等各種程式語言中，都會有個三元運算子「<code>?:</code>」，稱為[[條件運算符|條件運算符]]。[[Forth|Forth]]中也有一個三元運算子「<code>*/</code>」。這個運算子會將前兩個數字相乘，然後再除以第三個數字，中介的乘積結果會以兩倍的位元儲存，以防中介的結果溢位。[[dc|dc]]中也有一些三元運算子，如「<tt>|</tt>」，會從堆疊中彈出三個值來，且以隨意的精確度有效地計算出<math>x^y \mod z</math>來。另外，許多[[組合語言|組合語言]]的指令為三元或更多元，如「<tt>MOV %AX, (%BX,%CX)</tt>」，會將暫存器<tt>BX</tt>和<tt>CX</tt>的和所指的記憶體位址中的內容載入（MOV）暫存器<tt>AX</tt>之中。

=== n元 ===
從數學的角度來看，有''n''個參數的函數總是可以想成是有1個參數的函數，其參數為某個[[積空間|積空間]]的元素。不過，在標記上，當做是''n''元函數會比較簡單，如[[多重線性映射|多重線性映射]]（此映射在''n''≠1時不是積空間上的線性映射）。

在程式語言中也一樣，有數個參數的函數總是可以被定義成以某個[[物件複合|複合類型]]做為單一參數的函數，如[[多元組|多元組]]，或[[柯里化|柯里化]]的[[高階函數|高階函數]]。

== 參考資料 ==
*{{Citation
  | last = Quine
  | first = W. V. O.
  | title = Mathematical logic
  | year = 1940
  | place = Cambridge, MA
  | publisher = Harvard University Press
 }}

[[Category:抽象代數|Category:抽象代數]]
[[Category:泛代數|Category:泛代數]]

[[cs:Operace_(matematika)#Arita_operace|cs:Operace (matematika)#Arita operace]]