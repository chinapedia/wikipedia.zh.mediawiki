{{noteTA
|G1=IT
}}

在[[计算机科学|计算机科学]]领域，'''达夫设备'''（[[英文|英文]]：'''Duff's device'''）是串行复制（serial copy）的一种{{Tsl|en|Program optimization|程序优化|优化}}{{Tsl|en|implementation|实现 (计算机科学)|实现}}，通过[[汇编语言|汇编语言]]编程时一常用方法，实现[[循环展开|展开循环]]，进而提高执行效率。这一方法据信为当时供职于[[卢卡斯影业|卢卡斯影业]]的{{Tsl|en|Tom Duff||汤姆·达夫}}于1983年11月发明，并可能是迄今为止利用[[C语言|C语言]]{{Tsl|en|Switch statement|switch语句}}特性所作的最巧妙的实现。

== 优化背景 ==
在编程时，[[循环展开|循环展开]]注重于利用批量处理，减少总处理分支数。而在串行复制数据时，当总循环次数无法被展开后循环的增量整除时，一般就用直接跳转到展开后循环体中部的方式，完成剩余数据的复制流程。

因此，根据[[循环展开|循环展开]]的思想，针对串行复制数据的需要，汤姆·达夫以每次迭代时赋最多8个值的方式，用C语言写出了一个优化实现，成功优化了串行复制的效率。

== 原版代码 ==
若要将数组元素复制进[[存储器映射输入输出|存储器映射输出]][[寄存器|寄存器]]，较为直接的做法如下所示：
<syntaxhighlight lang="c">
send(to, from, count)
register short *to, *from;
register count;
{
    do {                /* 假定了count > 0 */
        *to = *from++;    
    } while (--count > 0);
}
</syntaxhighlight>
注意这段代码所实现的并非“存储器到存储器”的复制，因而不需<code>*to++</code>，采用[[循环展开|循环展开]]将循环体展开为8叠（eight-fold），代码如下：
<syntaxhighlight lang="c">
send(to, from, count)
register short *to, *from;
register count;
{
    register n = count % 8;
    while (n-- > 0) {
        *to = *from++;
    }
    n = count / 8;
    if (n == 0) return;     
    do {
        *to = *from++;
        *to = *from++;
        *to = *from++;
        *to = *from++;
        *to = *from++;
        *to = *from++;
        *to = *from++;
        *to = *from++;
    } while (--n > 0)
}
</syntaxhighlight>

达夫洞察到可以利用上汇编程序员的跳转到循环体内的技术，这可以通过交错一条switch语句和一个循环来实现，即把switch的{{mono|case}}标记在循环体内对应于{{mono|count/8}}的余数的各个点上<ref name="drdobbs">{{cite web
 | url = http://www.drdobbs.com/a-reusable-duff-device/184406208?queryText=%2522duff%2527s%2Bdevice%2522
 | title = A Reusable Duff Device
 | date = August 1, 2005
 | access-date = September 18, 2015
 | last = Holly
 | first = Ralf
 | publisher = [[Dr._Dobb's_Journal|Dr. Dobb's Journal]]
 | archive-date = 2020-02-26
 | archive-url = https://web.archive.org/web/20200226123415/https://www.drdobbs.com/a-reusable-duff-device/184406208?queryText=%2522duff%2527s%2Bdevice%2522
 | dead-url = no
 }}</ref>：
<syntaxhighlight lang="c">
send(to, from, count)
register short *to, *from;
register count;
{
	register n = (count + 7) / 8;
	switch (count % 8) {
	case 0:	do { *to = *from++;
	case 7:		 *to = *from++;
	case 6:		 *to = *from++;
	case 5:		 *to = *from++;
	case 4:	     *to = *from++;
	case 3:      *to = *from++;
	case 2:      *to = *from++;
	case 1:      *to = *from++;
	        } while (--n > 0);
	}
}
</syntaxhighlight>

== 实现机制 ==
达夫设备基于[[汇编语言|汇编语言]]编程中常用的“在复制时最小化判断数和分支数”所用算法，并以C语言实现。代码看起来虽与环境格格不入，但仍可与C相容，其因有二：

一方面，C语言对<tt>switch</tt>语句的规范较松。达夫设备发明时，正值《[[C程序设计语言_(书)|C程序设计语言]]》第一版引领[[C语言|C语言]]规范，而按其中规定，在<tt>switch</tt>控制语句内，条件标号（<tt>case</tt>）可以出现在任意子语句之前，充作其前缀。另外，若未加入<tt>break</tt>语句，则在<tt>switch</tt>语句在根据条件判定，跳转到对应标号，并开始执行后，控制流会无视其余条件标号限定，一直执行到switch嵌套语句的末尾，此即switch语句的“掉落”（fall-through）特性。利用以上特性，这段代码便可从连续地址中将count个数据复制到存储器映射输出寄存器中。

另一方面，C语言对跳转到循环内部提供了支持，因而此处的switch/case语句便可跳转到循环内部。

许多C语言编译器会仿效[[汇编语言|汇编语言]]的编程方式，将switch语句转换为{{Tsl|en|jump table|转移表}}，从而提高执行效率。在C语言中，switch语句默认的“掉落”特性长期以来亦备受争议，而达夫也发觉，“这段代码成为了这一讨论中某些观点的论据，但我不确定到底是支持还是否定（这些观点）。”

== 性能表现 ==
{| class="wikitable" align="right" style="margin-left: 1.5em;"
|+
!功能等价的版本<br /><code>switch</code>和<code>while</code>不交错
|-
| <syntaxhighlight lang="c">
send(to, from, count)
register short *to, *from;
register count;
{
    register n = count / 8;
    switch (count % 8) {
        case 7: *to = *from++;
        case 6: *to = *from++;
        case 5: *to = *from++;
        case 4: *to = *from++;
        case 3: *to = *from++;
        case 2: *to = *from++;
        case 1: *to = *from++;
        case 0: ;
    }
    if (n == 0) return;
    do {
        *to = *from++;
        *to = *from++;
        *to = *from++;
        *to = *from++;
        *to = *from++;
        *to = *from++;
        *to = *from++;
        *to = *from++;
    } while (--n > 0)
}
</syntaxhighlight>
|}
从速度上说，由于采用了[[循环展开|循环展开]]技巧，使所需处理的分支数减少，从而降低了在处理分支时，中断与刷新[[流水线_(计算机)|流水线]]的巨大运算开销，因而相较于简单、直接的循环代码，这段代码的执行效率较高。另外，由代码易知，若不带switch语句，则这段代码只能复制8*n个数据项，而若count无法为8整除，则仍有count%8（即count除于8的余数）项未处理；有鉴于此，此间嵌入了switch/case语句，负责处理剩余数据。

但是，达夫设备亦有其局限性。在某些环境下，利用switch/case语句处理剩余数据项，有时并非最优选择；相对应的，若采用双循环机制可能反倒更快（实现一个展开后的循环复制8*n个数据项，和另一循环复制剩余数据项）。究其肇因，则常是由于编译器无法针对达夫设备进行优化，但亦可能是因某些架构的流水线与{{Tsl|en|Predication (computer architecture)|预测 (计算机架构)|分支预测}}机制有所差异<ref>[http://www.l33tskillz.org/usenix2003/notes/t-09-5/ James Ralston's USENIX 2003 Journal]{{dead link|date=十月 2017 |bot=InternetArchiveBot }}</ref>。除此以外，据测试看，当从XFree86 Server 4.0代码中清理掉所有达夫设备代码后，执行效能却大幅提升<ref>{{cite web | url = http://lkml.indiana.edu/hypermail/linux/kernel/0008.2/0171.html | author = [[曹子德|曹子德]] | title = Re: [PATCH] Re: Move of input drivers, some word needed from you | work = Linux Kernel Archive Mailing List | access-date = 2013-07-08 | archive-date = 2014-01-08 | archive-url = https://web.archive.org/web/20140108180846/http://lkml.indiana.edu/hypermail/linux/kernel/0008.2/0171.html | dead-url = no }}</ref>。因此，若打算使用达夫设备，最好先针对所用的硬件架构、优化等级和编译器对达夫设备进行{{Tsl|en|Benchmark (computing)|基准测试 (计算机)|基准测试}}，而后再做定夺。

== 斯特劳斯鲁普版代码 ==
原版的达夫设备仅能满足将数据复制到一个（存储器映射）寄存器的需求。若要在存储地址间串行复制数据，则在每次引用指针to时，都需进行一次自增操作，如下所示：

<syntaxhighlight lang="c">
  *to++ = *from++;
</syntaxhighlight>

此版代码摘自[[比雅尼·斯特劳斯特鲁普|比雅尼·斯特劳斯特鲁普]]著《[[C++程式語言_(書)|C++程序设计语言]]》一书的“这段代码有何用？（what does this code do?）”练习部分，而他之所以如此修改，很可能是因考虑到编程新手一般对[[存储器映射输入输出|存储器映射输出]][[寄存器|寄存器]]一无所知。值得一提的是，针对串行复制的需求，标准C语言库提供了[[memcpy|memcpy]]函数，而其效率不会比斯特劳斯鲁普版的达夫设备低，并可能包含了针对特定架构的优化，从而进一步大幅提升执行效率<ref name="amd2002">{{cite web |url=http://web.mit.edu/ehliu/Public/ProjectX/Meetings/AMD_block_prefetch_paper.pdf |publisher=[[麻省理工学院|mit.edu]] |first=Mike |last=Wall |title=Using Block Prefetch for Optimized Memory Performance |date=2002-03-19 |accessdate=2012-09-22 |archive-date=2017-08-30 |archive-url=https://web.archive.org/web/20170830073838/http://web.mit.edu/ehliu/Public/ProjectX/Meetings/AMD_block_prefetch_paper.pdf |dead-url=no }}</ref><ref name="fog2012">{{cite web|url=http://www.agner.org/optimize/optimizing_assembly.pdf|pages=100 ff|title=Optimizing subroutines in assembly language|first=Agner|last=Fog|date=2012-02-29|accessdate=2012-09-22|publisher=Copenhagen University College of Engineering|archive-date=2021-03-29|archive-url=https://web.archive.org/web/20210329014447/https://www.agner.org/optimize/optimizing_assembly.pdf|dead-url=no}}</ref>。

==参见==
* [[协程|协程]]{{snd}} 受达夫设备的影响，有人采用C/C++的“<tt>switch</tt>掉落”特性实现协程<ref name="tatham">{{cite web|url=http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html|author=Simon Tatham|title=Coroutines in C|year=2000|access-date=2013-07-07|archive-date=2019-11-09|archive-url=https://web.archive.org/web/20191109155253/https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html|dead-url=no}}</ref>。 
* {{en-link|Jensen设备|Jensen's Device}}

== 参考资料 ==
{{FOLDOC|Duff's+device|Duff's device}}
{{reflist|2}}

== 外部链接 ==
* [http://www.lysator.liu.se/c/duffs-device.html 汤姆·达夫本人对达夫设备机制的解释] {{Wayback|url=http://www.lysator.liu.se/c/duffs-device.html |date=20090122031707 }}{{en}}
* [http://c-faq.com/misc/duffexpln.html Duff's device] {{Wayback|url=http://c-faq.com/misc/duffexpln.html |date=20200914113457 }}, C-FAQ.com{{en}}
* [http://drdobbs.com/web-development/184406208 A Reusable Duff Device] {{Wayback|url=http://drdobbs.com/web-development/184406208 |date=20110530171541 }}, Dr.Dobb's Journal{{en}}

[[Category:C语言|Category:C语言]]