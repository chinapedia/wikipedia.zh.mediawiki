{{noteTA
|G1 = IT
|G2 = FL
|1=zh-cn:访问; zh-tw:訪問
}}
{{about|程式語言'''Ruby'''|寶石類的'''Ruby'''|紅寶石|印刷用語'''Ruby字元'''|旁註標記}}

{{Infobox programming language
|name = Ruby
|logo = Ruby_logo.png
|logo size = 105px
|paradigm = [[面向对象程序设计|面向对象]]、[[指令式编程|指令式]]、[[函数编程语言|函数式]]
|year = 1995年
|designer = [[松本行弘|松本行弘]]
|developer = 松本行弘等人
|latest_release_version = 3.1.2
|latest_release_date = {{Release date and age|2022|04|12}}
|typing = [[动态类型|动态类型]]
|implementations = {{link-en|Ruby MRI|Ruby MRI}}、[[YARV|YARV]]、{{link-en|Rubinius|Rubinius}}、{{link-en|MagLev|MagLev (software)}}、[[JRuby|JRuby]]、<br />{{link-en|MacRuby|MacRuby}}、{{link-en|RubyMotion|RubyMotion}}、{{link-en|HotRuby|HotRuby}}、[[IronRuby|IronRuby]]、<br />[https://github.com/mruby/mruby mruby]
|dialects = 
|influenced_by = [[Ada|Ada]]<ref name="nov2pro">
{{cite book
   | last=Cooper
   | first=Peter
   | title=Beginning Ruby: From Novice to Professional
   | edition=2nd
   | series=Beginning from Novice to Professional
   | year=2009
   | publisher=APress
   | location=Berkeley
   | isbn=1-4302-2363-4
   | page=101
   | quote=To a lesser extent, Python, LISP, Eiffel, Ada, and C++ have also influenced Ruby.}}
</ref>、[[C++|C++]]<ref name="nov2pro" />、[[CLU|CLU]]<ref name="bini">
{{cite book
   | last=Bini
   | first=Ola
   | title=Practical JRuby on Rails Web 2.0 Projects: Bringing Ruby on Rails to Java
   | url=https://archive.org/details/practicaljrubyon00bini
   | year=2007
   | publisher=APress
   | location=Berkeley
   | isbn=1-59059-881-4
   | page=[https://archive.org/details/practicaljrubyon00bini/page/n30 3]
   | quote=It draws primarily on features from Perl, Smalltalk, Python, Lisp, Dylan, and CLU.}}
</ref>、[[Dylan_(编程语言)|Dylan]]<ref name="bini" />、[[Eiffel|Eiffel]]<ref name="nov2pro" />、<br />[[Lisp|Lisp]]<ref name="bini" />、[[Perl|Perl]]<ref name="bini" />、[[Python|Python]]<ref name="bini" />、[[Smalltalk|Smalltalk]]<ref name="bini" />
|influenced = [[Clojure|Clojure]]、[[D语言|D]]<ref>{{Cite web |url=http://www.digitalmars.com/d/1.0/ |title=Intro – D Programming Language 1.0 – Digital Mars |accessdate=2013-10-30 |archive-date=2018-12-25 |archive-url=https://web.archive.org/web/20181225131635/https://digitalmars.com/d/1.0/%0a%20 |dead-url=no }}</ref>、[[Elixir|Elixir]]、[[Falcon编程语言|Falcon]]、{{link-en|Fancy|Fancy (programming language)}}<ref>{{cite web
   | url=http://rubini.us/2011/02/23/introduction-to-fancy/
   | title=Introduction to Fancy
   | last=Bertels
   | first=Christopher
   | date=23 February 2011
   | work=Rubinius blog
   | publisher=Engine Yard
   | accessdate=2011-07-21
   | archive-date=2018-12-25
   | archive-url=https://web.archive.org/web/20181225131621/https://rubinius.com/2011/02/23/introduction-to-fancy/%0A%20
   | dead-url=no
   }}</ref>、[[Groovy|Groovy]]<br />、{{link-en|Ioke|Ioke (programming language)}}<ref>{{cite web
 |url         = http://ioke.org/
 |title       = Ioke
 |last        = Bini
 |first       = Ola
 |work        = Ioke.org
 |accessdate  = 2011-07-21
 |quote       = inspired by Io, Smalltalk, Lisp and Ruby
 |deadurl     = yes
 |archiveurl  = https://web.archive.org/web/20110721091046/http://www.ioke.org/
 |archivedate = 2011-07-21
}}</ref>、{{link-en|Mirah|Mirah (programming language)}}、[[Nu|Nu]]<ref>{{cite web
   | url=http://programming.nu/about
   | title=About Nu™
   | last=Burks
   | first=Tim
   | work=Programming Nu™
   | publisher=Neon Design Technology, Inc.
   | accessdate=2011-07-21
   | archive-url=https://web.archive.org/web/20110724191313/http://programming.nu/about
   | archive-date=2011-07-24
   | dead-url=yes
   }}</ref>、{{link-en|Reia|Reia (programming language)}}、{{link-en|Potion|Potion (programming language)}}
|operating_system = [[跨平台|跨平台]]
|license = [[Ruby许可证|Ruby许可证]]<ref>{{Cite web |url=http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/COPYING?view=markup |title=COPYING in Ruby official source repository |accessdate=2013-10-30 |archive-date=2017-03-20 |archive-url=https://web.archive.org/web/20170320052254/https://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/COPYING?view=markup |dead-url=no }}</ref> / [[BSD许可证|BSD许可证]]<ref>{{Cite web |url=http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/BSDL?view=markup |title=BSDL in Ruby official source repository |access-date=2013-10-30 |archive-date=2022-03-21 |archive-url=https://web.archive.org/web/20220321143246/https://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/BSDL?view=markup }}</ref> / [[GNU通用公共许可证|GNU通用公共许可证]]第二版<ref>{{cite web |url = http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/GPL?view=markup |title = Contents of /trunk/GPL |publisher =  |accessdate = 2 May 2015 |archive-date = 2022-03-21 |archive-url = https://web.archive.org/web/20220321143223/https://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/GPL?view=markup }}</ref>
|website = {{official url}}
}}

'''Ruby''' 是一种[[面向对象的程序设计|面向对象]]、[[指令式编程|指令式]]、[[函数编程语言|函数式]]、[[动态语言|动态]]的[[通用编程语言|通用编程语言]]。在20世纪90年代中期由[[日本|日本]][[電腦科學家|電腦科學家]][[松本行弘|松本行弘]]（Matz）设计并开发。

遵守[[BSD许可证|BSD许可证]]和Ruby License<ref>{{Cite web |url=http://www.ruby-lang.org/en/LICENSE.txt |title=Ruby License |accessdate=2004-09-25 |archive-date=2011-08-22 |archive-url=https://www.webcitation.org/617jSCkBK?url=http://www.ruby-lang.org/en/LICENSE.txt |dead-url=no }}</ref>{{NoteTag|Ruby早期遵守[[GPL|GPL]]協議。}}。它的灵感与特性来自于[[Perl|Perl]]、[[Smalltalk|Smalltalk]]、[[Eiffel|Eiffel]]、[[Ada|Ada]]以及[[Lisp|Lisp]]语言。由Ruby语言本身还发展出了[[JRuby|JRuby]]（[[Java|Java]]平台）、[[IronRuby|IronRuby]]（[[.NET|.NET]]平台）等其他平台的Ruby语言替代品。

== 歷史 ==
[[File:Yukihiro_Matsumoto.JPG|150px]]]]

Ruby的作者－－松本行弘於1993年2月24日開始編寫Ruby，直至1995年12月才正式公開發佈於fj（[[新聞群組|新聞群組]]）。之所以稱為Ruby是取法自[[Perl|Perl]]，因為Perl的發音與6月的[[誕生石|誕生石]]pearl（珍珠）相同，Ruby選擇以7月的[[誕生石|誕生石]]ruby（紅寶石）命名。

Ruby相較之下比其他類似的程式語言（如[[Perl|Perl]]或[[Python|Python]]）年輕，又因為Ruby是日本人發明的，所以早期的非[[日文|日文]]資料和程式都比較貧乏，在網上仍然可以找到早期對Ruby的資料太少之類的批評。約於2000年，Ruby開始進入[[美國|美國]]，英文的資料開始發展。

2004年，[[Ruby_on_Rails|Rails]]框架誕生，Ruby更加廣為人知，Ruby並於2006年為TIOBE獲選為年度程式語言。

== Ruby的理念 ==
减少编程时候的不必要的琐碎时间，令编写程序的人高兴，是设计Ruby语言的Matz的一个首要的考虑；其次是良好的界面设计。他强调系统设计必须强调人性化，而不是一味从机器的角度设想<ref>{{Cite web |url=http://www.artima.com/intv/ruby4.html |title=The Philosophy of Ruby, A Conversation with Yukihiro Matsumoto, Part I by Bill Venners on 2003-09-29 (Artima Developer，英文) |access-date=2007-09-17 |archive-date=2019-07-05 |archive-url=https://web.archive.org/web/20190705113402/https://www.artima.com/intv/ruby4.html }}</ref>。
{{cquote|人们特别是电脑工程师们，常常从机器着想。他们认为：“这样做，机器就能运行的更快；这样做，机器运行效率更高；这样做，机器就会怎样怎样怎样。”实际上，我们需要从人的角度考虑问题，人们怎样编写程序或者怎样使用机器上应用程序。我们是主人，他们是仆人。}}

遵循着{{en-link|最小惊讶原则|Principle of least astonishment}}，Ruby语言通常非常直观，按照编程人认为它应该的方式运行。

Ruby的作者認為'''Ruby > (Smalltalk + Perl) / 2'''{{Fact|time=2007-09-02T13:00:33Z}}，表示Ruby是一個语法像Smalltalk一样完全[[面向对象|面向对象]]、脚本執行、又有Perl強大的文字處理功能的程式語言。

== Ruby的版本体系 ==
Ruby版本号的构成形式是（MAJOR）.（MINOR）.（TEENY），均为只有1位的整数；如“1.8.6”、“1.9.3”。

1.9版系统的TEENY不小于1时为稳定版，TEENY为0的版本是开发版。在1.9之前的版本中偶数MINOR代表稳定版，奇数MINOR代表开发版。<ref>[Ruby语言入门东南大学出版社2010年4月第一版P19]</ref>

== Ruby的Hello World程序 ==
下面是一个在标准输出设备上输出[[Hello_World程序|Hello World]]的简单程序：

<syntaxhighlight lang="Ruby">
#!/usr/bin/env ruby
puts "Hello, world!"
</syntaxhighlight>

或者是在irb互動式命令列的模式下：

<syntaxhighlight lang="Ruby">
>>puts "Hello, world!"
Hello, world!
=> nil
</syntaxhighlight>

== Ruby的特点 ==
=== 變數與函數的命名規則 ===
乍看之下與Perl的命名規則有些類似，不過Perl的命名用來區分純量、陣列與映射；而Ruby的命名規則用來表示變數與類別的關係。Ruby的變數有以下幾種：
* 一般小寫字母、底線開頭：-{zh-tw:變數;zh:變量;zh-cn:变量}-（Variable）。
* <code>$</code>開頭：-{zh-tw:全域變數;zh:全局變量;zh-cn:全局变量}-（Global variable）。
* <code>@</code>開頭：-{zh-tw:實例變數;zh:實例變量;zh-cn:实例变量}-（Instance variable）。
* <code>@@</code>開頭：-{zh-tw:類別變數;zh:類別變量;zh-cn:类变量}-（Class variable）類別变量被共享在整个继承链中
* 大寫字母開頭：常數（Constant）。

有些函數則會加一個後綴，用來表示函數的用法，跟變數命名規則不同，函數的命名規則只是習慣，不具強制性，即使你不照規則命名也不影響程式運作
* <code>=</code>結尾：赋值方法，相當於其他程式語言的<code>set</code>開頭的方法，算是一種[[語法糖|語法糖]]。
* <code>!</code>結尾：破壞性方法，呼叫這個方法會修改本來的物件，這種方法通常有個非破壞性的版本，呼叫非破壞性的版本會回傳一個物件的副本。
* <code>?</code>結尾：表示這個函數的回傳值是個布林值。

=== 多種字串表示法 ===
Ruby提供了多種字串的表示方法，方便撰寫有大量文字資料的程式。除了来自C语言的引号表示法之外，还有来自于Perl的百分号字面量记法，以及方便书写大量内容的Heredoc记法。Ruby可以方便地以<code>#{variable_name}</code>的方式向字符串中插入变量。

<syntaxhighlight lang="ruby">
a = '\n这是一个单引号的字符串，反斜线和变量插值不会被转义'

b = %q{这是一个不可转义的字符串}

c = "\n这是一个双引号的字符串，反斜线和变量插值会被转义\n#{a}"

d = %Q{\n這是一個常量字串，特殊内容同样会被转义\n}

e = <<BLOCK
这是一个以Heredoc方式书写的常量字符串，可转义，结尾标志不可缩进
BLOCK

f = <<-BLOCK
      这是一个可以缩进的Heredoc字符串
    BLOCK

g = <<~BLOCK
      这是一个可以缩进的Heredoc字符串
      缩进会被自动去掉，在2.3版本中引入
    BLOCK

h = %/\t这是一个可转义的的字符串\n/
</syntaxhighlight>

=== 動態修改物件、類別 ===
Ruby是动态语言，你可以在程序中修改先前定义过的類別。
也可以在某个类別的实例中定义该实例特有的方法，这叫做原型方法（prototype）。
<syntaxhighlight lang="Ruby">
class MyClass
  def the_method
    "general method"
  end
end

mc = MyClass.new
def mc.the_method
  "special for this instance."
end

mc.the_method
</syntaxhighlight>

=== 強大的反射機制與元編程 ===
Ruby的反射功能相當驚人，甚至可以自行追蹤程式運作，或是取出private變數、攔截方法的呼叫。
常常與『可以動態的修改物件』這項特色結合，做為『元編程』的功能：程式在運行時，
可以由程式設計師提供的資訊，自行生成、修改類別或物件，這項功能大大的提高了撰寫程式碼的效率。
在[[Ruby_on_Rails|Rails]]之中，就大量使用了這種特性。

以下為用Rails使用元編程的範例：

<syntaxhighlight lang="Ruby">
class Project < ActiveRecord::Base
  belongs_to :portfolio
  has_one    :project_manager
  has_many   :milestones
end
</syntaxhighlight>
在這個例子中，<code>Project</code>類別繼承<code>Base</code>類別，<code>Base</code>類別內建的<code>belongs_to</code>、<code>has_one</code>、<code>has_many</code>方法，便會根據參數來修改Project類別的內容，並自行建立其他相關的方法。程式設計師可以更專心處理程式的運作，而不必為每個類別重複得撰寫程式碼。

=== 豐富靈活的迴圈表示 ===
<syntaxhighlight lang="ruby">
# 使用 for，在 1 到 3 取出值 1、2、3 到 outer_i 裡操作。
for outer_i in 1..3 do
  puts "for: #{outer_i * 100}"
end

# 在 1 到 3 的集合裡針對每個值，放到 i 裡操作。
(1..3).each do |i|
  puts "each: #{i * 100}"
end

# 只要符合 outer_i 小於等於 300，則進入迴圈。
outer_i = 100
while outer_i <= 300
  puts "while: #{outer_i}"
  outer_i += 100
end

# 直到 outer_i 大於 300 前，都可以進入迴圈。
outer_i = 100
until outer_i > 300
  puts "until: #{outer_i}"
  outer_i += 100
end

# 無限迴圈，用 break 來打斷迴圈。
outer_i = 100
loop do
  break if outer_i > 300

  puts "loop: #{outer_i}"
  outer_i += 100
end

# 作 3 次迴圈，i 從 0 開始遞增 1。
3.times do |i|
  puts "times: #{(i + 1) * 100}"
end

# 從 1 遞增 1 到 3，值傳入 i 來操作。
1.upto(3) do |i|
  puts "upto: #{i * 100}"
end

# 從 3 遞減 1 到 1，值傳入 i 來操作。
3.downto(1) do |i|
  puts "downto: #{400 - i * 100}"
end

# 從 100 開始以每步 +100 邁向 300。
100.step(300, 100) do |i|
  puts "step: #{i}"
end
</syntaxhighlight>

=== 其他特色 ===
* 完全物件導向：任何東西都是物件，沒有基礎型別
* 變數是[[動態类型|動態类型]]。
* 任何東西都有值：不管是四則運算、邏輯表達式還是一個語句，都有回傳值。
* [[运算符重载|运算符重载]]
* [[垃圾回收_(計算機科學)|垃圾回收]]
* 强类型<ref>{{Cite web |url=http://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-python/ |title=To Ruby From Python |access-date=2010-10-26 |archive-date=2022-02-22 |archive-url=https://web.archive.org/web/20220222052643/http://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-python/ }}</ref>
* -{zh:变量无需声明;zh-tw:不必事先宣告變數;zh-cn:变量无需声明}-
* 在[[Windows|Windows]]上，載入[[DLL|DLL]]

== 比較與批評 ==
=== 讓人意外之處 ===
* 在Ruby中，只有<code>false</code>和<code>nil</code>表示false，其它的所有值都表示true（包括<code>0</code>、<code>0.0</code>、<code>""</code>、<code>[]</code>）<ref>[http://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-python/ To Ruby From Python] {{Wayback|url=http://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-python/ |date=20220222052643 }}，When tested for truth, only false and nil evaluate to a false value. Everything else is true (including 0, 0.0, "", and []).</ref>。這點和C語言的『用<code>0</code>代表<code>false</code>』不同。
* Ruby的字串是可改變的，這與Java固定不變的字串不同。在Ruby中，常用<code>Symbol</code>对象来表示不可变的字符串。Ruby 2.3提供了默认冻结字符串的选项，在源码开头添加魔术注释<code># frozen_string_literal: true</code>可以打开这个选项，当用户试图更改<code>String</code>对象时会抛出运行时异常。同时，松本行弘表示，在Ruby 3中，字符串将是默认不可变的。<ref>{{Cite web |url=https://bugs.ruby-lang.org/issues/11473 |title=Immutable String literal in Ruby 3. |access-date=2017-11-27 |archive-date=2022-04-15 |archive-url=https://web.archive.org/web/20220415151759/https://bugs.ruby-lang.org/issues/11473 }}</ref>
* Ruby的繼承功能相當脆弱，儘管Ruby是一個物件導向語言，Ruby內的許多規則，卻使得子類別有可能不小心就覆寫了父類別的功能，在《The Ruby Programming Language》一書中，建議除非程式設計師對一個類別相當了解，否則盡可能不要使用繼承。

=== 和Perl 6比較 ===
* [[CPAN|CPAN]]上排名第一名，同時也是[[Perl_6|Perl 6]]的開發者的[[唐鳳|唐鳳]]（Autrijus / Audrey）說：「Ruby就是『沒有到處打廣告的Perl 6』」。<ref>Perl 6於2019年10月更名為[[Perl_6|Raku]]。</ref><ref>{{Cite web |url=http://www.openfoundry.org/index.php?option=com_content&Itemid=1&id=188&task=view |title=存档副本 |access-date=2013-10-22 |archive-url=https://web.archive.org/web/20150924060834/http://www.openfoundry.org/index.php?option=com_content&Itemid=1&id=188&task=view |archive-date=2015-09-24 |dead-url=yes }}</ref>
* 松本行弘在接受[[歐萊禮|歐萊禮]]（O'Reilly）訪問時，提到「Ruby借用了很多Perl的東西……，Python遠比Perl要少……」、「我認為Ruby這個名字作為Perl之後的一門語言的名字真是再恰當不過了。」<ref>{{Cite web |url=http://blog.csdn.net/eiffelqiu/archive/2004/02/04/19869.aspx |title=O'Reilly訪問Matz。 |accessdate=2007-07-20 |archive-date=2009-07-28 |archive-url=https://web.archive.org/web/20090728061954/http://blog.csdn.net/eiffelqiu/archive/2004/02/04/19869.aspx |dead-url=no }}</ref>
* Perl之父[[拉里·沃爾|拉里·沃爾]]（Larry Wall）說：「很多方面上我還是很喜歡Ruby的，這是因為那些部分是從Perl借過去的。：-）」、「我還喜歡Ruby的C<*>一元星號操作符，所以我把它加到Perl 6裡面。」<ref>{{Cite web |url=http://www.perlchina.org/archive/archive.php?action=archive&page=39 |title=Larry Wall On Perl, Religion, and…… |accessdate=2007-07-20 |archive-date=2007-07-29 |archive-url=https://web.archive.org/web/20070729075423/http://www.perlchina.org/archive/archive.php?action=archive&page=39 |dead-url=no }}</ref>

== 程式範例 ==
{{howto}}
下面的代码可以在Ruby [[shell|shell]]中运行，比如irb互動式命令列，或者保存为文件并运行命令<code>ruby <filename></code>。

* 一些基本的Ruby代码：

<syntaxhighlight lang="ruby">
# Everything, including a literal, is an object, so this works:
-199.abs                                                # 199
"ruby is cool".length                                   # 12
"Rick Astley".index("c")                                # 2
"Nice Day Isn't It?".downcase.split(//).sort.uniq.join  # " '?acdeinsty"
</syntaxhighlight>

* 一些转换：

<syntaxhighlight lang="ruby">
puts "What's your favorite number?"
number = gets.chomp
outputnumber = number.to_i + 1
puts outputnumber.to_s + ' is a bigger and better favorite number.'
</syntaxhighlight>

=== 集合 ===
* 构造和使用[[数组|数组]]：

<syntaxhighlight lang="ruby">
a = [1,'hi', 3.14, 1, 2, [4, 5]]

p a[2]           # 3.14
p a.[](2)# 3.14
p a.reverse      # [[4, 5], 2, 1, 3.14, 'hi', 1]
p a.flatten.uniq # [1, 'hi', 3.14, 2, 4, 5]
</syntaxhighlight>

* 构造和使用关联数组：

<syntaxhighlight lang="ruby">
hash = { :water => 'wet', :fire => 'hot' }
puts hash[:fire] # Prints:  hot

hash.each_pair do |key, value| # Or:  hash.each do |key, value|
puts "#{key} is #{value}"
end

# Prints:  water is wet
#          fire is hot

hash.delete :water # Deletes :water => 'wet'
hash.delete_if {|k,value| value=='hot'} # Deletes :fire => 'hot'
</syntaxhighlight>

=== -{zh-hans:块; zh-hant:區塊}-和迭代器 ===
* 有两个语法用于创建-{zh-hans:块; zh-hant:區塊}-：

<syntaxhighlight lang="ruby">
{ puts "Hello, World!" } # Note the { braces }
#or
do puts "Hello, World!" end
</syntaxhighlight>

* 传参数的-{zh-hans:块; zh-hant:區塊}-使用闭包[[闭包_(计算机科学)|Closure]]：

<syntaxhighlight lang="ruby">
# In an object instance variable (denoted with '@'), remember a block.
def remember(&a_block)
  @block = a_block
end

# Invoke the above method, giving it a block which takes a name.
remember {|name| puts "Hello, #{name}!"}

# When the time is right (for the object) -- call the closure!
@block.call("Jon")
# => "Hello, Jon!"
</syntaxhighlight>

* 从方法中返回闭包：

<syntaxhighlight lang="ruby">
def create_set_and_get(initial_value=0) # Note the default value of 0
  closure_value = initial_value
  return Proc.new {|x| closure_value = x}, Proc.new { puts closure_value }
end

setter, getter = create_set_and_get  # ie. returns two values
setter.call(21)
getter.call # => 21
</syntaxhighlight>

* 迭代调用调用时提供的-{zh-hans:块; zh-hant:區塊}-：

<syntaxhighlight lang="ruby">
def use_hello
  yield "hello"
end

# Invoke the above method, passing it a block.
use_hello {|string| puts string} # => 'hello'
</syntaxhighlight>

* 使用-{zh-hans:块; zh-hant:區塊}-迭代数组：

<syntaxhighlight lang="ruby">
array = [1, 'hi', 3.14]
array.each { |item| puts item }
# => 1
# => 'hi'
# => 3.14

array.each_index { |index| puts "#{index}: #{array[index]}" }
# => 0: 1
# => 1: 'hi'
# => 2: 3.14

(3..6).each { |num| puts num }
# => 3
# => 4
# => 5
# => 6
</syntaxhighlight>

像inject()方法可以接收一个参数和一个-{zh-hans:块; zh-hant:區塊}-。迭代的注入列表的每一个成员，执行函数时保存总和。这同[[函数编程语言|函数编程语言]]中的foldl函数相类似，比如：

<syntaxhighlight lang="ruby">
[1,3,5].inject(10) {|sum, element| sum + element} # => 19
</syntaxhighlight>

首先-{zh-hans:块; zh-hant:區塊}-接收到了10（inject的参数）当作变量sum，并且1（数组的第一个元素）当作变量element；这会返回11。11又被当作下一步的sum变量，它加上3得到了14。14又被加上了5，最终返回结果19。

* -{zh-hans:块; zh-hant:區塊}-运行在内置的方法中：

<syntaxhighlight lang="ruby">
File.open('file.txt', 'w') do |file| # 'w' denotes "write mode".
  file.puts 'Wrote some text.'
end                                  # File is automatically closed here

File.readlines('file.txt').each do |line|
puts line
end
# => Wrote some text.
</syntaxhighlight>

* 使用枚举器和块求1到10的平方：

<syntaxhighlight lang="ruby">
(1..10).collect {|x| x*x} # => [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
</syntaxhighlight>

=== -{zh-hans:类; zh-hant:類別}- ===
下面的代码定义一个命名为Person的-{zh-hans:类; zh-hant:類別}-。含有一个「initialize」方法，用于构选创建一个新对象，它还有两个方法，一个重载了<=>比较运算符（这样<code>Array#sort</code>可以使用age排序）另一个重载了<code>to_s</code>方法（这样<code>Kernel#puts</code>可以格式化输出），<code>attr_reader</code>是Ruby中元数据编程的例子：<code>attr_accessor</code>为实例变量定义了getter和setter方法，<code>attr_reader</code>只是一个getter方法。另外，方法中最后的声明是它的返回值，也允许显式的使用「return」语句。

<syntaxhighlight lang="ruby">
class Person
  attr_reader :name, :age
  def initialize(name, age)
    @name, @age = name, age
  end
  def <=>(person) # Comparison operator for sorting
    @age <=> person.age
  end
  def to_s
    "#@name (#@age)"
  end
end

group = [
  Person.new("Bob", 33),
  Person.new("Chris", 16),
  Person.new("Ash", 23)
]

puts group.sort.reverse
</syntaxhighlight>

* 下面按age倒序输出了三个名字：

<syntaxhighlight lang="text">
Bob(33)
Ash(23)
Chris(16)
</syntaxhighlight>

== 各種版本 ==
[[Matz's_Ruby_interpreter|Matz's Ruby interpreter]], 最初也是最常見的Ruby版本, 簡稱MRI, 用C語言撰寫.

[[JRuby|JRuby]]，類似[[Python|Python]]的[[Jython|Jython]]，一個可於[[Java|Java]]上執行Ruby的語言，支援Java的介面和類別。最新發布版爲9.1.6.0（2016-11-09），與Ruby 2.3兼容。它的官方網站為[https://web.archive.org/web/20110208071026/http://jruby.org/ jruby.org]。

[[mruby|mruby]]是一个轻量级的Ruby解释器，可以嵌入到其它应用程序中，或者作为库链接到应用中。

== 參見 ==
* [[Python|Python]]（經常和Ruby比較<ref>{{Cite web |url=http://www.infoq.com/cn/news/2007/05/guido-python |title=Guido談Python 3000及與Ruby的競爭。 |access-date=2007-07-23 |archive-date=2012-11-20 |archive-url=https://web.archive.org/web/20121120205204/http://www.infoq.com/cn/news/2007/05/guido-python }}</ref>）
* [[Perl|Perl]]
** [[Perl_6|Perl 6]]（vs. Ruby）
* [[QtRuby|QtRuby]]：[[Qt|Qt]]的Ruby綁定
* [[Smalltalk|Smalltalk]]
* [[Ruby_on_Rails|Ruby on Rails]]：一个MVC的快速網站开发应用框架。
* [[RGSS|RGSS]]：使用Ruby為基礎的遊戲腳本系統。

== 注释 ==
{{NoteFoot}}

== 参考文献 ==
{{Reflist|30em}}

== 外部連結 ==
* [http://www.ruby-lang.org/ Ruby的官方网站]{{Wayback|url=http://www.ruby-lang.org/ |date=20200108175215 }}
* [https://web.archive.org/web/20040926003428/http://www.rubycentral.com/book/ 《Programming Ruby》網路版]
* [https://web.archive.org/web/20130805082318/http://raa.ruby-lang.org/ Ruby Application Archive]
* [https://web.archive.org/web/20060812164344/http://rubyforge.org/ RubyForge]提供一個類似[[SourceForge|SourceForge]]和Freshmeat的環境給用Ruby或給Ruby寫的工具，現已停止運營。
* [https://web.archive.org/web/20171229223014/http://ruby-doc.org/ Ruby Documentation project]
* [https://archive.is/20070517233550/http://www.meshplex.org/wiki/Ruby/Ruby_on_Rails_programming_tutorials Full Ruby on Rails Tutorial]
* [http://tryruby.org/ TryRuby]{{Wayback|url=http://tryruby.org/ |date=20110928182220 }}{{en}}
* [http://ruby.tw/ Ruby Taiwan社群] {{Wayback|url=http://ruby.tw/ |date=20220418032406 }}
* [http://ruby-china.org/ Ruby中国社区] {{Wayback|url=http://ruby-china.org/ |date=20200818050535 }}目前中国Ruby开发者公认的Ruby中文社区。
* [https://www.toptal.com/ruby/how-to-set-up-a-microservices-architecture 微服务架构在Ruby中]{{Dead link}}{{en}}

{{-}}
{{程序设计语言|Ruby}}
{{網頁技術與標準}}

[[Category:Ruby|]]
[[Category:程序设计语言|Category:程序设计语言]]
[[Category:腳本語言|Category:腳本語言]]
[[Category:面向文本编程语言|Category:面向文本编程语言]]
[[Category:面向对象的编程语言|Category:面向对象的编程语言]]
[[Category:基于类的编程语言|Category:基于类的编程语言]]
[[Category:ISO标准化编程语言|Category:ISO标准化编程语言]]
[[Category:1995年建立的程式語言|Category:1995年建立的程式語言]]