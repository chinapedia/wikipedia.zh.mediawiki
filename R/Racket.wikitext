{{noteTA|G1=IT}}
{{Infobox programming language
| name                   = Racket
| logo                   = Racket-logo.svg
| logo_size               = 120px
| paradigm               = [[编程范型|多范型]]: [[函数式编程|函数式]], [[反射式编程|反射式]], [[元编程|元编程]], [[面向语言编程|面向语言]], [[面向对象编程|面向对象]], [[过程式编程|过程式]], [[模块化编程|模块化]], [[逻辑编程|逻辑式]]
| screenshot             = Drracket.png
| screenshot caption     = 运行于[[Ubuntu|Ubuntu]]的DrRacket
| year                   = {{Start date and age|1995}}
| developer              = PLT Inc.
| latest_release_version = {{wikidata|property|reference|edit|Q28975406|P348}}
| latest_release_date = {{wikidata|qualifier|Q28975406|P348|P577}}，{{Time ago|{{wikidata|qualifier|raw|Q28975406|P348|P577}}}}
| frequently updated     = yes
| typing                 = [[动态类型|动态类型]], [[强类型|强类型]], [[静态类型|静态类型]]
| implementations        =
| dialects               = [http://docs.racket-lang.org/ts-guide/ Typed Racket], [http://docs.racket-lang.org/lazy/ Lazy Racket], [http://docs.racket-lang.org/scribble/ Scribble], [http://docs.racket-lang.org/frtime/ FrTime], more
| influenced             = [[Clojure|Clojure]]<ref name="typed-clojure-thesis">{{cite thesis|last=Bonnaire-Sergeant|first=Ambrose|title=A Practical Optional Type System for Clojure|publisher=The University of Western Australia|year=2012}}</ref>、[[Rust|Rust]]、[[Scheme|Scheme]]<ref name="r6rs">{{cite web |url=http://www.r6rs.org |title=Revised<sup>6</sup> Report on the Algorithmic Language Scheme (R6RS) |last1=Sperber |first1=Michael |last2=Dybvig |first2=R. Kent |last3=Flatt |first3=Matthew |last4=Van Straaten |first4=Anton, et al. |date=August 2007 |publisher=Scheme Steering Committee |accessdate=2011-09-13 |archive-date=2013-06-25 |archive-url=https://www.webcitation.org/6HcvveNv7?url=http://www.r6rs.org/ |dead-url=no }}</ref>
| influenced_by          = [[Scheme|Scheme]], [[Eiffel|Eiffel]]<ref>{{cite web |url=http://www.ccs.neu.edu/racket/pubs/dls10-sf.pdf |title=DLS 2010: Contracts for First-Class Classes |last1=Strickland |first1=T.S. |last2=Fellesisen |first2=Matthias |year=2010 |accessdate=2014-03-05 |archive-date=2013-05-23 |archive-url=https://www.webcitation.org/6GpxBuN6l?url=http://www.ccs.neu.edu/racket/pubs/dls10-sf.pdf |dead-url=yes }}</ref>
| standard               = [[R5RS|R5RS]], [[R6RS|R6RS]]
| operating_system       = [[跨平台|跨平台]]
| platform               = [[x86|x86]], [[PowerPC|PowerPC]], [[SPARC|SPARC]], [[MIPS|MIPS]], [[ARM|ARM]]
| license                = [[GNU宽通用公共许可证|LGPL]]
| website                = {{URL|racket-lang.org}}
| file ext               = <code>.rkt</code>, <code>.rktl</code>, <code>.rktd</code>, <code>.scrbl</code>, <code>.plt</code>, <code>.ss</code>, <code>.scm</code>
}}
{{lang|en|'''Racket'''}}（原名 {{lang|en|'''PLT Scheme'''}}<ref>{{Cite web |url=http://plt-scheme.org/ |title=PLT Scheme |accessdate=2014-03-05 |archive-date=2014-03-05 |archive-url=https://web.archive.org/web/20140305180110/http://plt-scheme.org/ |dead-url=no }}</ref><ref>{{Cite web |url=http://stackoverflow.com/questions/13724714/what-does-the-plt-in-plt-scheme-now-called-racket-stand-for/ |title=What does "PLT" stand for? |accessdate=2014-03-05 |archive-date=2014-08-21 |archive-url=https://web.archive.org/web/20140821044751/http://stackoverflow.com/questions/13724714/what-does-the-plt-in-plt-scheme-now-called-racket-stand-for |dead-url=no }}</ref>）是個通用、多範型，屬於[[Lisp|Lisp]]家族的[[函数式编程|函數式]][[程序设计語言|程序设计語言]]，它的設計目之一是為了提供一種用於創造設計與實作其它編程語言的平台，Racket被用於腳本程式設計、通用程式設計、電腦科學教育和學術研究等不同領域。

Racket有一個實作平台，包含了執行環境、函数庫、[[即時編譯|即時編譯]]器（{{lang|en|JIT compiler}}）等等，還有提供一個以Racket本身寫成的開發環境 DrRacket<ref>{{Cite web |url=http://docs.racket-lang.org/drracket/ |title=DrRacket |accessdate=2014-03-05 |archive-date=2014-03-05 |archive-url=https://web.archive.org/web/20140305163925/http://docs.racket-lang.org/drracket/ |dead-url=no }}</ref> (原名 {{lang|en|DrScheme}})。

Racket平台的發行版本是免費且開放原始碼的，以[[GNU宽通用公共许可证|GNU宽通用公共许可证]]授權發行，所有由社群所編寫的擴充功能和套件都會被上傳到 PLaneT(一個網頁套件發佈系統)。

基於 Racket 實現的 Scribble 可以用來構建[[HTML|HTML]]或[[PDF|PDF]]（依賴 [[LaTeX|LaTeX]]），Racket 官方文檔就是基於這個語言來編寫的。

== 开发原则 ==

Racket的开发基于以下原则：<ref>{{cite web|title=The Racket Manifesto|url=http://www.ccs.neu.edu/home/matthias/Tmp/manifesto/index.html|author=Matthias Felleisen et al.|accessdate=March 25, 2015|deadurl=yes|archiveurl=https://web.archive.org/web/20150402130721/http://www.ccs.neu.edu/home/matthias/Tmp/manifesto/index.html|archivedate=2015年4月2日|df=}}</ref>

* 程式语言的目的是表述和解决问题，这一过程通常在特定的情境中发生，该情境有一定的描述语言，因此Racket应该是能够创制新程式语言的程式语言；
* 基于上述的表述问题的方式，问题系统可视为多语言的相互联系的组件的集合，Racket应当能够提供足够的保护机制，允许实现各种语言的完整特性；
* 与问题解决相关的在语言之外的机制，如项目和资源的管理，也可被Racket转换为语言构造。

== 歷史 ==
=== 開發 ===
Matthias Felleisen在1990年代中期建立了PLT，一開始為一個研究團隊，不久後逐漸投入程式設計師入門教材的專案開發。

在1995年1月，這個團隊決定開發一個建立在 Scheme函數式程式語言上的教學用程式語言環境，Mattew Flatt 簡單的從 libscheme 中將 MrEd (Racket 的原始虛擬機器)、[[wxWidgets|wxWidgets]] 與一些其他的免費系統結合，接下來的幾年內，由 Flatt、Robby Findler、Shriram Krishnamurthi、Cormac Flanagan 和其他許多人組成的團隊推出了 DrScheme，一個給 Scheme 程式設計新手的程式設計環境，也作為[[:類型系統#.E5.BC.B7.E5.9E.8B.E5.88.A5.E5.92.8C.E5.BC.B1.E5.9E.8B.E5.88.A5|弱型別]]程式語言的研究環境，當時 DrScheme 主要支援的程式語言叫做 PLT Scheme。

在此同時，該團隊也開始為中學教師開設研習課程，教授他們學習程式設計與函數式程式設計，這些老師和他們的學生所做的現場測試提供了團對專案開發方向重要的依據，在接下來的幾年中，PLT 團隊為 DrScheme 加入了教學用語言，例如 代數步進器<ref>{{Cite web |url=http://www.ccs.neu.edu/racket/pubs/esop2001-cff.pdf |title=存档副本 |accessdate=2014-03-12 |archive-date=2013-04-30 |archive-url=https://web.archive.org/web/20130430220259/http://www.ccs.neu.edu/racket/pubs/esop2001-cff.pdf |dead-url=no }}</ref>、[[:读取﹣求值﹣输出循环|讀取-求值-輸出循環]]、constructor-based printer 和其他許多發明，推出了一套有應用價值的程式教學環境。

2001年，核心團隊(Felleisen, Findler, Flatt, Krishnamurthi)也編纂和發行了他們的第一本教科書《[https://htdp.org/2003-09-26/Book/ How to Design Programs 1ed] {{Wayback|url=https://htdp.org/2003-09-26/Book/ |date=20220408064440 }}》，融入了許多他們的教學理念。
== 代碼範例 ==
[[杨辉三角形|杨辉三角形]]（代碼來自：rosettacode）：
<syntaxhighlight lang="racket">
#lang racket
(define (next-row row)
  (map + (cons 0 row) (append row '(0))))
 
(define (triangle row rows)
  (if (= rows 0)
      '()
      (cons row (triangle (next-row row) (- rows 1)))))
 
(triangle (list 1) 5)
</syntaxhighlight>
運行後顯示
:{{samp|'((1) (1 1) (1 2 1) (1 3 3 1) (1 4 6 4 1))}}

繪製迭代8次的 [[謝爾賓斯基三角形|謝爾賓斯基三角形]] （代碼來自：Racket 官網）：
[[File:Sierpinski_Racket_example.png|thumb]]
<syntaxhighlight lang="Racket">
#lang racket
(require 2htdp/image)

(let sierpinski ([n 8])
  (if (zero? n)
    (triangle 2 'solid 'red)
    (let ([t (sierpinski (- n 1))])
      (freeze (above t (beside t t))))))
</syntaxhighlight>

在代碼的第一行使用 <code>#lang</code>來使用不同的方言.  下面的範例使用 Racket 的一種靜態類型的方言 Typed Racket 計算階層。
<syntaxhighlight lang="Racket">
#lang typed/racket

(: fact (Integer -> Integer))
(define (fact n)
  (if (zero? n) 1 (* n (fact (- n 1)))))
</syntaxhighlight>

== 註釋 ==
{{Reflist|30em}}

== 外部連結 ==
* {{Official website|racket-lang.org}}

{{Lisp programming language}}
{{程序设计语言}}

[[Category:函数式编程语言|Category:函数式编程语言]]
[[Category:面向对象的编程语言|Category:面向对象的编程语言]]
[[Category:模式匹配编程语言|Category:模式匹配编程语言]]
[[Category:LISP程式語言家族|Category:LISP程式語言家族]]
[[Category:学术的编程语言|Category:学术的编程语言]]
[[Category:1995年建立的程式語言|Category:1995年建立的程式語言]]