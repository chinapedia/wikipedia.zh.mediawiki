{{NoteTA
|G1=IT
|1=zh-cn:可重新表达的状态迁移;zh-tw:表示狀態傳送;
}}

'''表现层状态转换'''（[[英语|英语]]：'''{{lang|en|Representational State Transfer}}'''，[[縮寫|縮寫]]：'''REST'''）是{{link-en|Roy Thomas Fielding|Roy Thomas Fielding}}博士于2000年在他的博士论文<ref name="Fielding-Ch5">{{cite thesis |type= Ph.D. |first= Roy Thomas |last= Fielding |title= Architectural Styles and the Design of Network-based Software Architectures |chapter= Chapter 5: Representational State Transfer (REST) |publisher= University of California, Irvine |year= 2000 |chapterurl= http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm |quote= This chapter introduced the Representational State Transfer (REST) architectural style for distributed hypermedia systems. REST provides a set of architectural constraints that, when applied as a whole, emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems. |access-date= 2016-12-29 |archive-date= 2021-05-13 |archive-url= https://web.archive.org/web/20210513160155/https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm |dead-url= no }}</ref>中提出来的一种[[万维网|万维网]][[软件架构|软件架构]]风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。表現層狀態轉換是根基於[[超文本传输协议|超文本傳輸協定（HTTP）]]之上而確定的一組約束和屬性，是一種設計提供全球資訊網絡服務的[[軟體架構|軟體構建風格]]。符合或相容於這種架構風格（簡稱為 REST 或 RESTful）的網絡服務，允許用戶端發出以[[统一资源标志符|統一資源標識符]]存取和操作網絡資源的請求，而與預先定義好的無狀態操作集一致化。因此表現層狀態轉換提供了在互聯網絡的計算系統之間，彼此資源可交互使用的協作性質（interoperability）。相對於其它種類的網絡服務，例如SOAP服務，則是以本身所定義的操作集，來存取網絡上的資源。

目前在三种主流的[[Web服务|Web服务]]实现方案中，因为REST模式与复杂的[[SOAP|SOAP]]和[[XML-RPC|XML-RPC]]相比更加简洁，越来越多的Web服务开始采用REST风格设计和实现。例如，[[Amazon.com|Amazon.com]]提供接近REST风格的Web服务執行图书查詢；[[雅虎|雅虎]]提供的Web服务也是REST风格的。

== 要点及标准 ==
需要注意的是，REST是设计风格而'''不是'''标准。REST通常基于[[HTTP|HTTP]]、[[URI|URI]]、[[XML|XML]]以及[[HTML|HTML]]这些现有的广泛流行的协议和标准。
* 资源是由URI来指定。
* 对资源的操作包括获取、创建、修改和删除，这些操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法。
* 通过操作资源的表现形式来操作资源。
* 资源的表现形式则是XML或者HTML，取决于读者是机器还是人、是消费Web服务的客户软件还是Web浏览器。当然也可以是任何其他的格式，例如JSON。

=== 可重新表达的状态迁移的特征 ===
* Uniform Interface：统一接口。
*# '''以资源为基础'''<p>每个资源都可以通过URI访问到。</p><p>也就是一个个可以认知的资源，比如文档，音乐，视频等信息，都可以通过唯一的URI确定。</p>
*# '''通过重表达的客户端可以管理原资源'''<p>就是我们通过客户端可以修改原资源的状态。</p>
*# '''返回信息足够描述自己'''<p>这样重表达的客户端可以知道如何处理。</p>
*# '''超媒体是应用状态的引擎'''<p>处理以超媒体为基础的状态变化。</p>
* Stateless：无状态。
* Cacheable：可缓存。
* Client-Server：客户服务器分离模式，任何一个客户端与服务器都是可替换的。
* Layered System：分层的系统，客户端不知道他联系的是不是最终服务器。
* Code on Demand（可选）：服务器可以将能力扩展到客户端，如果客户端可以执行的话。这个功能是可选择的。

===REST架构的限制条件===
REST架构风格最重要的架构限制有6个<ref>{{cite web|url=http://www.infoq.com/cn/articles/understanding-restful-style/|title=理解RESTful|access-date=2016-03-18|archive-date=2018-11-02|archive-url=https://web.archive.org/web/20181102232950/http://www.infoq.com/cn/articles/understanding-restful-style|dead-url=no}}</ref>：
# '''客户端-服务器（Client-Server）'''
#* 客户端-服务器结构限制的目的是将客户端和服务器端的关注点分离。将用户界面所关注的逻辑和数据存储所关注的逻辑分离开来有助于提高用户界面的跨平台的可移植性。通过简化服务器模块也有助于服务器模块的可扩展性。
# '''无状态（Stateless）'''
#* 服务器不能保存客户端的信息；每一次从客户端发送的请求中，要包含所有的必须的状态信息，会话信息由客户端保存，服务器端根据这些状态信息来处理请求。
#* 服务器可以将会话状态信息传递给其他服务，比如数据库服务，这样可以保持一段时间的状态信息，从而实现认证功能。
#* 当客户端可以切换到一个新状态的时候发送请求信息。
#* 当一个或者多个请求被发送之后，客户端就处于一个状态变迁过程中。每一个应用的状态描述可以被客户端用来初始化下一次的状态变迁。
# '''缓存（Cacheability）'''
#* 如同万维网一样，客户端和中间的通讯传递者可以将回覆缓存起来。回覆必须明确的或者间接的表明本身是否可以进行缓存，这可以预防客户端在将来进行请求的时候得到陈旧的或者不恰当的数据。管理良好的缓存机制可以减少客户端-服务器之间的交互，甚至完全避免客户端-服务器交互，这进一步提了高性能和可扩展性。
# '''统一接口（Uniform Interface）'''
#* 這是 RESTful 系统设计的基本出发点。它简化了系统架构，减少了耦合性，可以让所有模块各自独立的进行改进。包括下列四个限制：
#*# '''请求中包含资源的 ID（Resource identification in requests）'''<p>请求中包含了各种独立资源的标识，例如，在Web服务中的URI。资源本身和发送给客户端的标识是独立。例如，服务器可以将自身的数据库信息以HTML、XML或者JSON的方式发送给客户端，但是这些可能都不是服务器的内部记录方式。</p>
#*# '''资源通过标识来操作（Resource manipulation through representations）'''<p>当客户端拥有一个资源的标识，包括附带的元数据，则它就有足够的信息来删除这个资源。</p>
#*# '''消息的自我描述性（Self-descriptive messages）'''<p>每一个消息都包含足够的信息来描述如何来处理这个信息. 例如，媒体类型 (media-type) 就可以确定需要什么样的分析器来分析媒体数据. </p>
#*# '''用超媒体驱动应用状态（Hypermedia as the engine of application state (HATEOAS)）'''<p>同用户访问Web服务器的Home页面相似，当一个 REST 客户端访问了最初的REST应用的URI之后，REST 客户端应该可以使用服务器端提供的链接，动态的发现所有的可用的资源和可执行的操作。随着访问的进行，服务器在响应中提供文字超链接，以便客户端可以得到当前可用的操作。客户端无需用确定的编码的方式记录下服务器端所提供的动态应用的结构信息。</p>
# '''分层系统（Layered System）'''
#* 客户端一般不知道是否直接连接到了最终的服务器，或者是路径上的中间服务器。中间服务器可以通过负载均衡和共享缓存的机制提高系统的可扩展性，这样可也便于安全策略的部署。
# '''按需代码（Code-On-Demand，可选）'''
#* 服务器可以通过发送可执行代码给客户端的方式临时性的扩展功能或者定制功能，例如Java Applet、Flash或JavaScript。

=== 关于状态 ===
应该注意区别应用的状态和连接协议的状态。HTTP连接是无状态的（也就是不记录每个连接的-{zh-cn:信息; zh-tw:資訊;}-），而REST传输会包含应用的所有状态-{zh-cn:信息; zh-tw:資訊;}-，因此可以大幅降低对HTTP连接的重复请求资源消耗。

=== 應用於Web服務 ===
符合REST設計風格的Web API称为'''RESTful API'''。它从以下三个方面资源进行定义：
* 直观简短的资源地址：URI，比如：<code><nowiki>http://example.com/resources</nowiki></code>。
* 传输的资源：Web服务接受与返回的[[互联网媒体类型|互联网媒体类型]]，比如：[[JSON|JSON]]，[[XML|XML]]，[[YAML|YAML]]等。
* 对资源的操作：Web服务在该资源上所支持的一系列[[超文本传输协议#请求方法|请求方法]]（比如：POST，GET，PUT或DELETE）。

下表列出了在实现RESTful API时HTTP请求方法的典型用途。

{| class="wikitable" border="1"
|+ HTTP请求方法在RESTful API中的典型应用<ref>{{Citation
 | last = Richardson
 | first = Leonard
 | last2 = Ruby
 | first2 = Sam
 | author2-link = :en:Sam Ruby
 | publication-date =（May 8, 2007）
 | year = 2007
 | title = RESTful Web Services
 | publisher = O'Reilly
 | isbn = 0596529260
}}</ref>
! 资源 !! GET  !! PUT !! POST !! DELETE
|-
! 一组资源的URI，比如<code><nowiki>https://example.com/resources</nowiki></code>
| '''列出'''URI，以及该资源组中每个资源的详细-{zh-cn:信息; zh-tw:資訊;}-（后者可选）。
| 使用给定的一组资源'''替换'''当前整组资源。
| 在本组资源中'''创建/追加'''一个新的资源。该操作往往返回新资源的URL。
| '''删除'''整组资源。
|-
! 单个资源的URI，比如<code><nowiki>https://example.com/resources/142</nowiki></code>
| '''获取'''指定的资源的详细-{zh-cn:信息; zh-tw:資訊;}-，格式可以自选一个合适的网络媒体类型（比如：XML、JSON等）
| '''替换/创建'''指定的资源。并将其追加到相应的资源组中。
| 把指定的资源当做一个资源组，并在其下'''创建/追加'''一个新的元素，使其隶属于当前资源。
| '''删除'''指定的元素。
|}

PUT和DELETE方法是[[超文本传输协议#幂等方法|幂等方法]]。GET方法是[[超文本传输协议#安全方法|安全方法]]（不会对服务器端有修改，因此當然也是幂等的）。

不像基于[[SOAP|SOAP]]的Web服务，RESTful Web服务并没有“正式”的标准<ref>Elkstein, M. [http://rest.elkstein.org/2008/02/what-is-rest.html ''What is REST?''] {{Wayback|url=http://rest.elkstein.org/2008/02/what-is-rest.html |date=20210413060746 }}. Retrieved on 2009-07-04.</ref>。这是因为REST是一种架构，而SOAP只是一个协议。虽然REST不是一个标准，但大部分RESTful Web服务实现会使用[[HTTP|HTTP]]、[[URI|URI]]、[[JSON|JSON]]和[[XML|XML]]等各种标准。

== 实现举例 ==
例如，一个简单的网络商店应用：
# 列举所有商品：<pre>GET http://www.store.com/products</pre>
# 呈現某一件商品：<pre>GET http://www.store.com/products/12345</pre>
# 下单购买：{{#tag:pre|{{#tag:nowiki|POST http://www.store.com/orders
<purchase-order>
  <item> ... </item>
</purchase-order>}}}}

== REST的优点 ==
*可更高效利用-{zh-cn:缓存; zh-tw:快取;}-来提高响应速度
*通讯本身的无状态性可以让不同的服务器的处理一系列请求中的不同请求，提高服务器的扩展性
*浏览器即可作为客户端，简化-{zh-cn:软件; zh-tw:軟體;}-需求
*相对于其他叠加在[[超文本传输协议|HTTP协议]]之上的机制，REST的-{zh-cn:软件; zh-tw:軟體;}--{zh-cn:依赖性; zh-tw:相依性;}-更小
*不需要额外的资源发现机制
*在-{zh-cn:软件; zh-tw:軟體;}-技术演进中的长期的-{zh-cn:兼容性; zh-tw:相容性;}-更好

== 实现 ==
* [[Ruby_on_Rails|Ruby on Rails]]1.2以后的版本支持[http://weblog.rubyonrails.org/2007/1/19/rails-1-2-rest-admiration-http-lovefest-and-utf-8-celebrations REST model] {{Wayback|url=http://weblog.rubyonrails.org/2007/1/19/rails-1-2-rest-admiration-http-lovefest-and-utf-8-celebrations |date=20110612012212 }}。
* [https://web.archive.org/web/20110511234422/http://www.jboss.org/resteasy JBoss RESTEasy]JBoss的REST实现
* [https://web.archive.org/web/20160307012049/https://nodejust.com/node-js-restful-api-tutorial/ Node.js RESTful API]Node.js實現RESTful API
* [https://www.restapitutorial.com/ Learn REST: A RESTful Tutorial] {{Wayback|url=https://www.restapitutorial.com/ |date=20210425114815 }}

== 参考文献 ==
=== 引用 ===
{{reflist}}

=== 来源 ===
{{refbegin}}
* Roy Thomas Fielding的博士论文“[http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm Architectural Styles and the Design of Network-based Software Architectures] {{WebCite|url=https://www.webcitation.org/67gOwyTek?url=http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm |date=20120515164644 |dateformat=iso }}”
* Paul Prescod. [https://web.archive.org/web/20080808122838/http://www.xml.com/pub/a/2002/02/06/rest.html 第二代web服务]
{{refend}}

{{-}}

{{網頁設計}}

{{Authority control}}

[[Category:软件工程|Category:软件工程]]
[[Category:Web服务|Category:Web服务]]
[[Category:Web_2.0新詞|Category:Web 2.0新詞]]