'''表达式'''（expression）此处是'''数学表达式'''（mathematical expression）的简称，在[[数学领域|数学领域]]中是一些[[符号|符号]]依据上下文的[[规则|规则]]，[[有限|有限]]而[[定义|定义]]良好的[[组合|组合]]。[[数学符号|数学符号]]可用于标定[[常量|常量]]、[[变量|变量]]、操作、函数、括号、标点符号和分组，帮助确定操作顺序以及有其它考量的[[逻辑|逻辑]][[语法|语法]]。

表达式随语境或不同领域学科也称：表示式、数学式、运算式（operation expression）、表式、陳式、算式；数学术语若是复合词，表达式也常简作“式”；例如：代数式（algebraic expression）、渐近式（asymptotic expression）。

==范例==
表达式有简单的，例如：
::<math>0+0</math>
::<math>8x-5</math>   （线性多项式）
::<math>7{{x}^{2}}+4x-10</math>   （二次多项式）
::<math>\frac{x-1}{{{x}^{2}}+12}</math>   （有理分数）
也有复杂的：
::<math>f(a)+\sum_{k=1}^n\left.\frac{1}{k!}\frac{d^k}{dt^k}\right|_{t=0}f(u(t)) + \int_0^1 \frac{(1-t)^n}{n!} \frac{d^{n+1}}{dt^{n+1}} f(u(t))\, dt.</math>

==各種表達式的分類列表==
<noinclude>數學表達式的各種形式包括了算術、多項式、代數、閉合形式和解析的表達式。下表列出了這些種類中所可能包含的元素。
</noinclude>
{| class="navbox" style="text-align:center;"
|-
  ! style="text-align:left; padding-left:0.5em;" | {{navbar|Mathematical expressions|mini=1}}
  ! [[算术|算式]]
  ! [[多項式|多項式]]
  ! [[代數式|代數式]]
  ! [[閉包|閉合形式]]
  ! [[解析函数|解析式]]
  ! 數學表達式
|-
! [[数学常数|常量]]
| {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}}
|-
! [[變數|變數]]
| {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}}
|-
! [[四则运算|四则运算]]
| {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}}
|-
! [[階乘|階乘]]
| {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}}
|-
! [[冪#.E6.95.B4.E6.95.B0.E6.8C.87.E6.95.B0.E5.B9.82|整數指數冪]]
| {{no}}  || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}}
|-
! [[冪#N.E6.AC.A1.E6.96.B9.E6.A0.B9|N次方根]]
| {{no}}  || {{no}}  || {{yes}} || {{yes}} || {{yes}} || {{yes}}
|-
! [[冪#.E6.9C.89.E7.90.86.E6.95.B0.E5.B9.82|有理數冪]]
| {{no}}  || {{no}}  || {{yes}} || {{yes}} || {{yes}} || {{yes}}
|-
! [[冪#.E5.AE.9E.E6.95.B0.E6.8C.87.E6.95.B0.E5.B9.82|實數指數冪]]
| {{no}}  || {{no}}  || {{no}}  || {{yes}} || {{yes}} || {{yes}}
|-
! [[對數|對數]]
| {{no}}  || {{no}}  || {{no}}  || {{yes}} || {{yes}} || {{yes}}
|-
! [[三角函數|三角函數]]
| {{no}}  || {{no}}  || {{no}}  || {{yes}} || {{yes}} || {{yes}}
|-
! [[反三角函数|反三角函数]]
| {{no}}  || {{no}}  || {{no}}  || {{yes}} || {{yes}} || {{yes}}
|-
! [[双曲函数|双曲函数]]
| {{no}}  || {{no}}  || {{no}}  || {{yes}} || {{yes}} || {{yes}}
|-
! [[反双曲函数|反双曲函数]]
| {{no}}  || {{no}}  || {{no}}  || {{yes}} || {{yes}} || {{yes}}
|-
! [[Γ函数|Γ函数]]
| {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{yes}} || {{yes}}
|-
! [[贝塞尔函数|Bessel函数]]
| {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{yes}} || {{yes}}
|-
! 特殊函數
| {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{yes}} || {{yes}}
|-
! [[连分数|连分数]]
| {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{yes}} || {{yes}}
|-
! [[級數|級數]]
| {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{yes}} || {{yes}}
|-
! [[形式幂级数|形式幂级数]]
| {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{yes}}
|-
! [[微分|微分]]
| {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{yes}}
|-
! [[極限|極限]]
| {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{yes}}
|-
! [[積分|積分]]
| {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{no}}  || {{yes}}
|-
|}
<noinclude>
[[Category:Mathematics_templates|表达式]]
</noinclude>

==語法與語義==
===語法===
表達式是一個句法結構，它必須具有[[合式公式|良好定義]]的形式。表達式中的運算符必須在正確位置有正確的輸入數，組成這些輸入的字符必須是有效的，具有明確的[[運算次序|運算次序]]等。違反語法規則的字符，不會構成有效的數學表達式。例如，在一般算術符號中，表達式 1 + 2 × 3 是形式良好的，而下面的表達式则不是：
:<math>\times4)x+,/y</math>.

===語義===
表達式的[[語義學|語義]]是對語句意義的研究，[[邏輯語義學|邏輯語義學]]是關於所傳達的意義。在代數中，可用表達式指定一個值；而這個結果值取決於對式中變量所賦予的值，經由附加語義的運算符操作後以確定該值。語義的選擇則根據表達式的上下文。同一個表達式 1 + 2 × 3 可能會有不同結果（依算數慣例的結果為7，也可能是9），這取決於上下文中隱含的運算次序。

語義規則可以聲明某些表達式並無指定值（例如，當它們除以0時）；對這表達式稱為未定義，但它們仍然以良好的形式表現出來。廣義來說，表達式的意義並不侷限於指定值；例如，表達式可用於指定條件，表示要被求解的方程，或將其視為可根據某些規則而操作的對象。有指定值的表達式同時也代表了有假設前提，例如與运算符<math>\oplus</math>有關的假設前提，會指定一個內部的直接和（direct sum）。

===形式語言和lambda演算===
'''表達式'''和其賦值曾在1930年代由[[阿隆佐·邱奇|阿隆佐·邱奇]]和{{lang|en|[[Stephen_Kleene|Stephen Kleene]]}}在其[[λ演算|<math>\lambda</math>演算]]中被公式化。<math>\lambda</math>演算對現代數學和電腦[[程式語言|程式語言]]的發展都曾有過重大的影響。

<math>\lambda</math>演算有著一個更有趣的推論，在某些情況之下，兩個表達式的等值與否是無法決定的。而且這個推論在任一和<math>\lambda</math>演算有同樣功用的系統內也都是成立的。

==變量==
許多數學表達式中包括變量，變量又區分為[[自由变量和约束变量|自由變量或約束變量]]兩種。對於自由變量賦值的一給定組合，進行對表達式的評估，然而這些賦值的某些組合在評估整句表達式後的結果，可能沒有定義。因此一個表達式表示一個[[函數|函數]]，其輸入是賦予自由變量的值，其輸出是表達式的結果值。

舉例來說，表達式 <math>\frac{x}{y}</math>，分別使自由變數 <math>x</math> 和 <math>y</math> 定值為 <math>10</math> 和 <math>5</math>，其輸出為數字 <math>2</math>；<br />
但注意在 <math>y</math> 值為 <math>0</math> 時，則這表達式''沒有定義''。

數學表達式的評估取決於上下文背景對式中運算符的定義，賦值的[[定义域|定义域]]和評估結果的域。如果兩個表達式之中的變量，對於它們賦值的每一種組合都產生相同的輸出，則這兩個表達式被認定為相等，即它們實為相同的函數。

例如，表達式 <math>\sum_{n=1}^{3}2nx</math> 有自由變數 <math>x</math>、約束變數 <math>n</math>、常數 <math>1,2,3</math>、兩個內含的乘法算符和一個總和算符。<br />
此一表達式和另一較簡單的表達式 <math>12x</math> 相等。<math>x=3</math> 時的值為 <math>36</math>。

== 參見 ==
* [[表达式_(程式)|表达式 (程式)]]
* [[代数闭包|代数闭包]]
* [[組合子邏輯|組合子邏輯]]
* [[函數式編程|函數式編程]]
* [[方程|方程]]
* [[不等|不等]]

== 外部連結 ==
* [https://web.archive.org/web/20060928041733/http://www.mathematics21.org/theory-of-formulas-index.html Axiomatic Theory of Formulas] - theory of expressions on high abstraction level.
* [http://www.algebra.com/services/rendering/ Plot mathematical expressions] {{Wayback|url=http://www.algebra.com/services/rendering/ |date=20191104201315 }} this system plots math equations, graphs, diagrams, and even animated cartoons of transformation of math expressions and arithmetic operations. Knowledge of TeX not required.

[[Category:抽象代数|B]]
[[Category:代数|B]]