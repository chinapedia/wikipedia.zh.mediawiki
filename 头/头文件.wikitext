{{NoteTA
|G1=IT
|T=zh-hans:头文件;zh-hant:標頭檔;
}}
在[[程序设计|程序设计]]中，特别是在[[C语言|C语言]]和[[C++|C++]]中，'''头文件'''或'''包含文件'''是一个[[文件|文件]]，通常是[[源代码|源代码]]的形式，由[[编译器|编译器]]在处理另一个源文件的时候自动包含进来。一般来说，程序员通过[[编译程式定向|编译器指令]]将头文件包含进其他源文件的开始（或''头部''）。

一个头文件一般包含[[类|类]]、[[子程序|子程序]]、[[变量|变量]]和其他[[标识符|标识符]]的[[前置声明|前置声明]]。需要在一个以上源文件中被声明的标识符可以被放在一个头文件中，并在需要的地方包含这个头文件。

在[[C语言|C语言]]和[[C++|C++]]中，[[标准库|标准库]]函数习惯上在头文件中声明，参见[[C标准函式库|C标准函式库]]和[[C++标准函式库|C++标准函式库]]。

== 作用 ==
在大多数现代计算机编程语言中，[[程序|程序]]可以被分成如[[子程序|子程序]]的更小的组件，这些组件可以通过许多物理源[[文件|文件]]分发，这些源文件被单独[[编译|编译]]。当一个子程序在定义的位置以外的地方被使用时，就需要引入[[前置声明|前置声明]]和[[函数原型|函数原型]]的概念。例如，一个函数在一个源文件中有如下定义：
<syntaxhighlight lang="c">
 int add(int a, int b)
 {
     return a + b;
 }
</syntaxhighlight>
在另一个源文件中引用的时候就可以声明成这样（包含[[函数原型|函数原型]]）：
<syntaxhighlight lang="c">
 int add(int, int);
 
 int triple(int x)
 {
     return add(x, add(x, x));
 }
</syntaxhighlight>

但是，这个简单的方法需要程序员为<code>add</code>在两个地方维护函数声明，一个是包含函数实现的文件，以及使用该函数的文件。如果函数的定义改变了，程序员必须要更改散布在程序中的所有的原型。

头文件提供了解决办法。模块的头文件声明作为模块''公共接口''一部分的每一个函数、对象以及数据类型。例如，在下面的情况下，头文件仅包含<code>add</code>的声明。每一个引用了<code>add</code>的源文件使用<code>#include</code>来包含头文件：

<syntaxhighlight lang="c">
 /* File add.h */
 #ifndef ADD_H
 #define ADD_H
 
 int add(int, int);
 
 #endif /* ADD_H */
</syntaxhighlight>

<syntaxhighlight lang="c">
 /* File triple.c */
 #include "add.h"
 
 int triple(int x)
 {
     return add(x, add(x, x));
 }
</syntaxhighlight>

这样就减少了维护的负担：当定义改变的时候，只须更新声明的一个独立副本（在头文件中的那个）。在包含对应的定义的源文件中也可以包含头文件，这给了编译器一个检查声明和定义一致性的机会。

<syntaxhighlight lang="c">
 /* File add.c */
 #include "add.h"
 
 int add(int a, int b)
 {
     return a + b;
 }
</syntaxhighlight>

通常，头文件被用来唯一指定[[接口|接口]]，且多少提供一些文档来说明如何使用在该文件中声明的组件。在这个例子中，子程序的实现放在一个单独的源文件中，这个源文件被单独编译。（在C和C++中有个例外，即[[内联函数|内联函数]]。内联函数通常放在头文件中，因为大多数实现如果不知道其定义，在编译时便无法适当的展开内联函数。）

== 替代 ==
在访问声明在不同文件中的标识符问题上，头文件不是唯一的解决方法。他们也有缺点，当定义改变的时候可能仍然需要在两个地方来修改（头文件和源文件）。一些更新的语言（如[[Java|Java]]）省略掉了头文件，而使用{{le|命名方案|naming scheme}}（naming scheme），这就允许编译器来定位与接口和类实现相关的源文件。

== #include语句的两种语法 ==
<code>#include</code>语句有两种方式包含头文件，分别是使用双引号<code>" "</code>与左右尖括号<code>< ></code>。其区别是（对于不是使用完全文件路径名的）头文件的搜索顺序不同：

使用双引号<code>" "</code>的头文件的搜索顺序：
# 包含该<code>#include</code>语句的源文件所在目录；
# 包含该<code>#include</code>语句的已经打开的头文件的逆序（因为头文件可以<code>#include</code>另一个头文件构成一个序列）；
# 编译选项-I所指定的目录
# 环境变量INCLUDE所定义的目录

使用左右尖括号<code>< ></code>的头文件的搜索顺序：
# 编译选项-I所指定的目录
# 环境变量INCLUDE所定义的目录

== 参见 ==
*[[应用程序接口|应用程序接口]]
*[[IDL|接口定义语言]]
*[[Pragma_once|#pragma once]]

== 外部链接 ==
*[https://web.archive.org/web/20080319091752/http://www.gamedev.net/reference/programming/features/orgfiles/page2.asp 组织代码文件（以及使用头文件的陷阱）]
*[http://www.eventhelix.com/RealtimeMantra/HeaderFileIncludePatterns.htm C++头文件包含规则]{{Wayback|url=http://www.eventhelix.com/RealtimeMantra/HeaderFileIncludePatterns.htm |date=20080607021151 }}

[[Category:源代码|H]]
[[Category:C语言|H]]
[[Category:C++|H]]

[[fr:Bibliothèque_standard_de_C#Les_en-têtes_de_la_bibliothèque_C_ISO|fr:Bibliothèque standard de C#Les en-têtes de la bibliothèque C ISO]]