{{NoteTA
|G1 = IT
}}
在[[计算理论|计算理论]]中，'''确定有限状态自动机'''或'''确定有限自动机'''（{{lang-en|deterministic finite automaton, DFA}}）是一个能实现状态转移的[[自动机|自动机]]。对于一个给定的属于该自动机的状态和一个属于该自动机字母表<math>\Sigma</math>的字符，它都能根据事先给定的转移函数转移到下一个状态（这个状态可以是先前那个状态）。

==基础概念==
===定义===
确定有限状态自动机<math>\mathcal{A}</math>是由
*一个非空有限的[[状态|状态]]集合<math>Q</math>
*一个输入[[字母表_(计算机科学)|字母表]]<math>\Sigma</math>（非空有限的字符集合）
*一个转移[[函数|函数]]<math>\delta: Q \times \Sigma \rarr Q</math>（例如：<math>\delta \left( q,\sigma \right) = p, \left( p,q \in Q, \sigma \in \Sigma \right)</math>）
*一个开始状态<math>s \in Q</math>
*一个接受状态的集合<math>F \sube Q</math>
所组成的5-[[多元组|元组]]。因此一个DFA可以写成这样的形式：<math>\mathcal{A} = \left( Q,\Sigma,\delta,s,F \right)</math>。

===工作方式（非正式的语义）===
确定有限状态自动机从起始状态开始，一个字符接一个字符地读入一个字符串<math>w \in \Sigma^*</math>（这里的<math>{}^*</math>指示[[Kleene星号|Kleene星号]]算子。），并根据给定的转移函数一步一步地转移至下一个状态。在读完该字符串后，如果该自动机停在一个属于F的接受状态，那么它就接受该字符串，反之则拒绝该字符串。

===扩展转移函数===
为了在保证严谨的前提下，方便地叙述关于DFA的内容，我们定义如下扩展的转移函数：
:<math>\delta^*: Q \times \Sigma^* \rarr Q</math>。
*<math>\delta^* \left( q,w \right)</math>是自动机从状态q顺序读入字符串w后达到的状态
*扩展转移函数递归的定义为：
**<math>\delta^* \left( q,\epsilon \right) = q</math>
**<math>\delta^* \left( q,u\sigma \right) = \delta(\delta^*(q,u),\sigma), \forall u \in \Sigma^*, \sigma \in \Sigma</math>

===工作方式（正式的语义）===
对于一个确定有限状态自动机<math>\mathcal{A} = \left( Q,\Sigma,\delta,s,F \right)</math>，如果<math>\delta^* \left( s,w \right) \in F</math>，我们就说该自动机接受字符串w，反之则表明该自动机拒绝字符串w。

被一个确定有限自动机接受的语言（或者叫“被识别的语言”）定义为：<math>\mathcal{L} ( \mathcal{A} ) = \{ w \in \Sigma^* | \mathcal{A}~</math>接受字符串<math>~w \}</math>，也就是由所有被接受的字符串组成的集合。

===DFA与有向图===
{{Main|状态图}}

除了数学上的严谨表述，通常为了讨论方便，也使用状态图直观地表示DFA。不难发现，对于一个给定的DFA，存在唯一一个对应的有向图（但是严格意义上一个有向图不能确定出唯一一个DFA）。有向图的每个结点对应一个状态，每条[[有向边|有向边]]对应一种转移。习惯上将结点画成两个圈表示接受状态，一个圈表示拒绝状态。用一条没有起点的边指向起始状态。

除了在表述上方便以外，在研究某些问题（如“给定的DFA的语言是否为无穷集合”）时，状态图也提供了有效的解法。

===利弊===
DFA是一種实际的计算模型，因为有平凡的线性时间、恒定空间的[[在线算法|在线算法]]模拟在输入流上的DFA。给定两个DFA有有效算法找到识别它们所识别语言的并集、交集和补集的DFA。还有有效算法确定一个DFA是否接受任何给定字符串，一个DFA是否接受所有字符串，两个DFA是否识别同样的语言，和对特定[[正则语言|正则语言]]找到状态数目最小的DFA（最小DFA）。<!-- 有极小数目个状态的DFA -->

在另一方面，DFA在可识别的语言上有严格的限制—很多简单的语言，包括需要多于恒定空间来解决的任何问题，不能被DFA识别。经典的DFA不能识别的简单语言的例子是括号语言，就是由正确配对的括号组成的语言，比如 (()())。由形如<em>a<sup>n</sup>b<sup>n</sup></em>的字符串组成的语言，就是有限数目个a，随后是相等数目个b。可以证明没有DFA有足够状态来识别这种语言（通俗地说，因为需要至少2n个状态，而n是不恒定的）。

===其它===
#能被确定有限状态自动机识别的语言是[[正则语言|正则语言]]。
#确定有限状态自动机是[[非确定有限状态自动机|非确定有限状态自动机]]的一种极限形式。
#确定有限状态自动机在计算能力上等价于非确定有限状态自动机。
#没有接受状态列表并没有指定开始状态的确定有限状态机叫做[[转移系统|转移系统]]或[[半自动机|半自动机]]。

==例子==
下面是一个确定有限状态自动机的例子。

[[File:DFAexample.svg|thumb]]]]
确定有限状态自动机<math>\mathcal{A} = \left( Q,\Sigma,\delta,s,F \right)</math>
*<math>Q = \{ S_1 , S_2 \}</math>
*<math>\Sigma = \{0,1\}</math>
*<math>s=S_1</math>
*<math>F=\{S_1\}</math>
*<math>\delta</math>由下面的[[状态转移表|状态转移表]]定义：
:{| border="1" cellpadding="1" cellspacing="0"
| || <center>'''0'''</center> || <center>'''1'''</center>
|-
|'''''S''<sub>1</sub>''' || ''S''<sub>2</sub> || ''S''<sub>1</sub>
|-
|'''''S''<sub>2</sub>''' || ''S''<sub>1</sub> || ''S''<sub>2</sub>
|}
*对应的转移函数为：
**<math>\delta(S_1,0)=S_2</math>
**<math>\delta(S_1,1)=S_1</math>
**<math>\delta(S_2,0)=S_1</math>
**<math>\delta(S_2,1)=S_2</math>
状态<math>S_1</math>表示在输入的字符串中有偶数个0，而<math>S_2</math>表示有奇数个0。在输入中1不改变自动机的状态。当读完输入的字符串的时候，状态将显示输入的字符串是否包含偶数个0。

<math>\mathcal{A}</math>能识别的语言是<math>\mathcal{L} ( \mathcal{A} ) = \{ w | \#_0(w) \equiv 0~(mod~2) \}</math>。用[[正则表达式|正则表达式]]表示为：<math>(1^*(01^*0)^*)^*</math>。

==封闭性及一些运算==
===封闭性===
确定有限状态自动机的交，并，差，补，连接，替换，[[同态|同态]]，逆同态等运算是封闭的，也就是说确定有限状态自动机通过这些运算产生的新的自动机也是确定有限状态自动机。

===补运算===
<math>\mathcal{A}=(Q,\Sigma,\delta,s,F)</math>是一个DFA，那么由补运算产生的新DFA定义为：<math>\bar{\mathcal{A}}=(Q,\Sigma,\delta,s,Q-F)</math>。显然只要将<math>\mathcal{A}</math>中接受的状态设为不接受的状态，同时把不接受的状态设为接受的状态就得到<math>\bar{\mathcal{A}}</math>。补运算的[[计算复杂性理论|复杂度]]是：<math>O(\left| Q \right|)</math>。

===交运算和并运算===
有两个DFA，<math>\mathcal{A}_1=(Q_1,\Sigma,\delta_1,s_1,F_1)</math>和<math>\mathcal{A}_2=(Q_2,\Sigma,\delta_2,s_2,F_2)</math>，那么由这两个DFA创造出来的新的自动机定义为：<math>\mathcal{B}= (Q_1 \times Q_2,\Sigma,\delta_\mathcal{B},(s_1,s_2),M)</math>。其中<math>M \sube Q_1 \times Q_2</math>，<math>\left( s_1 , s_2 \right)</math>为<math>\mathcal{B}</math>的开始状态，<math>\delta_\mathcal{B}</math>为<math>\mathcal{B}</math>的转移函数，且作如下定义：<math>\forall q_1 \in Q_1,~q_2 \in Q_2,~\sigma \in \Sigma : \delta_\mathcal{B}((q_1,q_2),\sigma) = (\delta_1 (q_1,\sigma),\delta_2 (q_2,\sigma) )</math>。

#当<math>M = F_1 \times F_2</math>时，由上述方法得到的<math>\mathcal{B}</math>就是DFA <math>\mathcal{A}_1</math>和<math>\mathcal{A}_2</math>的交运算，记作：<math>\mathcal{B} = \mathcal{A}_1 \cap \mathcal{A}_2</math>。也就是说对于读入的字符串w，当且仅当<math>\mathcal{A}_1</math>和<math>\mathcal{A}_2</math>同时接受w的时候<math>\mathcal{B}</math>接受w。
#当<math>M = Q_1 \times F_2 \bigcup F_1 \times Q_2</math>时，由上述方法得到的<math>\mathcal{B}</math>就是DFA <math>\mathcal{A}_1</math>和<math>\mathcal{A}_2</math>的并运算，记作：<math>\mathcal{B} = \mathcal{A}_1 \cup \mathcal{A}_2</math>。也就是说对于读入的字符串w，只要<math>\mathcal{A}_1</math>或<math>\mathcal{A}_2</math>中至少有一个接受w，<math>\mathcal{B}</math>就接受w。

交运算和并运算的复杂度都是<math>O(\left| Q_1 \right| \left| Q_2 \right| \left| \Sigma \right|)</math>。

===同态和逆同态运算===
一个同态函数<math>h: \Sigma^* \rarr \Gamma^*</math>可以递归的定义为：
*<math>~h(\epsilon)=\epsilon</math>
*<math>~h(u\sigma)=h(u)h(\sigma)</math>
于是则有<math>~h(uv)=h(u)h(v)</math>。（以上所述中<math>~\epsilon</math>为空字符，<math>~u,v \in \Sigma^* , \sigma \in \Sigma</math>）

#<math>\mathcal{L} \sube \Sigma^* : h(\mathcal{L}) := \{ h(w) ~| ~w \in \mathcal{L} \}</math>：对于接受语言L的DFA，只要将其中代表<math>~\delta(q,\sigma)</math>的边替换成一个序列<math>~h(\sigma)</math>并在其中加入不属于原DFA状态的新状态，就产生了接受语言h(L)的DFA。
#<math>\mathcal{L} \sube \Gamma^* : h^{-1}(\mathcal{L}) := \{ w ~| ~h(w) \in \mathcal{L} \}</math>：定义一个<math>~Q,\Sigma,s,F</math>都不变的新DFA，并定义新的转移函数为<math>~\delta'(q,\sigma) := \delta^*(q,h(\sigma))</math>，则<math>~(Q,\Sigma,\delta',s,F)</math>就是逆同态运算产生的新DFA。

此外替换运算和逆同态运算的方法近似。

==最小自动机==
{{Main|确定有限状态自动机最小化}}
===等价类自动机===
对于一个正则语言，接受该语言的[[等价类|等价类]]自动机是一个<math>~(Q,\Sigma,\delta,s,F)</math>的5-元组。其定义如下：
*Q是[[等价关系|等价关系]]~<sub>L</sub>的等价类的集合：<math>[x], x \in \Sigma^*</math>的集合
*<math>~s=[\epsilon]</math>
*<math>F = \{ [x] ~| ~x \in L \}</math>
*<math>~\delta([x],\sigma) = [x\sigma]</math>
~<sub>L</sub>被称为Nerode关系，是[[Myhill-Nerode定理|Myhill-Nerode定理]]的基础。简单的来说就是对于任意<math>~x,y,z \in \Sigma^*</math>，如果<math> xz \in L \Leftrightarrow yz \in L</math>，那么x~<sub>L</sub>y。

===唯一性===
对于任意给定的确定有限状态自动机都能找到一个与之计算能力等价的最小确定有限状态自动机，简称最小自动机。该最小自动机中状态的数量等于能识别相同语言的等价类自动机中等价关系的数量，我们可以称最小自动机和等价类自动机“实际上”是相等的，也就是[[同构|同构]]。非正式的说法是：对于最小自动机上的任意状态都可以通过一个同构函数变换成等价类自动机上的一个状态。

能识别一个正则语言的等价类自动机是唯一的，因此能识别该语言的最小自动机也是唯一的。

===算法===
定义一个非等价关系：<math>N := \{(p,q) ~| ~p,q \in Q, \exists w \in \Sigma^* : \delta^*(p,w) \in F \leftrightarrow \delta^*(q,w) \notin F \}</math>，如下步骤可以得到这个集合N：
#如果<math>p \in F, ~q \notin F</math>，就给所有的状态对(p,q)和(q,p)打上标记
#重复步骤3，直到所标记的状态对没有变化为止
#对于未标记的状态对(p,q)和σ，如果<math>~(\delta(p,\sigma),\delta(q,\sigma))</math>被标记过了就把(p,q)也标记上
#以上所有标记了的状态对的集合就是非等价关系N

以下是由一个任意DFA转换到一个最小DFA的步骤：
#把所有不能从开始状态达到的状态删除
#通过上述标记算法计算非等价关系N
#一步一步将不属于N的状态对中的两个状态合成一个状态
这样就得到了接受相同语言的最小自动机。复杂度为<math>O(\left| Q \right| ^2 \left| \Sigma \right|)</math>。

==引用==
* Michael Sipser, ''Introduction to the Theory of Computation''. PWS, Boston. 1997. ISBN 0-534-94728-X. Section 1.1: Finite Automata, pp.31–47. Subsection "Decidable Problems Concerning Regular Languages" of section 4.1: Decidable Languages, pp.152–155.4.4 DFA can accept only regular language

==参见==
*[[无环确定有限状态自动机|无环确定有限状态自动机]]
*[[非确定有限状态自动机|非确定有限状态自动机]]
*[[图灵机|图灵机]]
*[[读只右移图灵机|读只右移图灵机]]

{{-}}
{{形式语言与形式文法}}

[[Category:自动机|Category:自动机]]
[[Category:形式语言|Q]]
[[Category:编译原理|Category:编译原理]]