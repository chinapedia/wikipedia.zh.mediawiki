{{NoteTA
|G1 = IT
|1 = zh-cn:声明式; zh-sg:宣告式; zh-tw:宣告式;
|2 = zh-cn:命令式; zh-tw:指令式;
|3 = 编程=>zh-tw:程式設計; 编程=>zh-hk:程式設計; 编程=>zh-mo:程式設計;
|4 = 編程=>zh-tw:程式設計; 編程=>zh-hk:程式設計; 編程=>zh-mo:程式設計;
}}
{{编程范式}}
'''宣告式編程'''（{{lang-en|Declarative programming}}）或译为声明式编程，是對與[[指令式編程|指令式編程]]不同的[[編程範型|編程範型]]的一種合稱。它们建造计算机程序的结构和元素，表达[[计算|计算]]的逻辑而不用描述它的[[控制流程|控制流程]]<ref>{{citation|last=Lloyd|first=J.W.|title=Practical Advantages of Declarative Programming}}</ref>。

==概述==
常見的宣告式語言包括：[[資料庫|資料庫]][[查詢語言|查詢語言]]如[[SQL|SQL]]的查询子集和{{en-link|XQuery}}，[[正则表达式|正则表达式]]，[[配置管理|配置管理]]系统如[[Puppet|Puppet]]管理配置语言。歸入這種範型的很多語言，描述{{en-link|领域知识|Domain knowledge|问题领域}}内目標的性質，讓電腦明白目標，而非流程，从而尝试极小化有关的副作用<ref name="FOLDOC 2004">{{cite web | title=declarative language | website=FOLDOC | date=17 May 2004 | url=https://foldoc.org/declarative%20language | access-date=26 January 2020 | archive-date=2015-08-10 | archive-url=https://web.archive.org/web/20150810173249/https://foldoc.org/declarative%20language }}</ref>。而指令式编程则需要用{{en-link|语言原语|Language primitive}}来明确的指出每一步该怎么做<ref name="Sebesta 2016">{{cite book | last=Sebesta | first=Robert | title=Concepts of programming languages | url=https://archive.org/details/conceptsofprogra0000sebe_x9h7 | publisher=Pearson | publication-place=Boston | year=2016 | isbn=978-0-13-394302-3 | oclc=896687896}}</ref>。

可归入声明式编程范型的[[领域专属语言|领域专属语言]]（DSL）还包括：[[yacc|yacc]]语法解析器，编译说明语言[[Make|Make]]等。DSL不需要是[[图灵完全|图灵完全]]的，往往容易以一种纯声明式的方式来表达。很多文本[[标记语言|标记语言]]例如[[HTML|HTML]]、[[MXML|MXML]]、[[XAML|XAML]]和[[XSLT|XSLT]]往往是声明式的。

==定义==
[[声明_(编程)|声明]]式编程，通常被定义为除[[指令式编程|指令式]]以外的任何编程范型。同时存在一些其他的定义，简单的将宣告式编程和命令式编程做对比，例如：
* 告诉计算机需要计算“什么”而不是“如何”去计算的高级程序。
* 明确的对应[[数理逻辑|数理逻辑]]的编程语言<ref>{{cite thesis |first=Manuel M. T. |last=Chakravarty |date=14 February 1997 |url=http://www.cse.unsw.edu.au/~chak/papers/diss.ps.gz |title=On the Massively Parallel Execution of Declarative Programs |type=Doctoral dissertation |publisher=[[Technische_Universität_Berlin|Technische Universität Berlin]] |accessdate=26 February 2015 |quote=In this context, the criterion for calling a programming language declarative is the existence of a clear, mathematically established correspondence between the language and mathematical logic such that a declarative semantics for the language can be based on the model or the proof theory (or both) of the logic. |archive-date=2015-09-23 |archive-url=https://web.archive.org/web/20150923211531/http://www.cse.unsw.edu.au/~chak/papers/diss.ps.gz |dead-url=no }}</ref><!-- this citation is just for this bullet point -->。
* 任何没有[[副作用_(计算机科学)|副作用]]的编程语言，或者更确切一点，任何{{en-link|参照透明性 (计算机科学)|referential transparency|参照透明}}的编程语言。

这些定义存在着一些重合。

==子编程范型==
声明式编程是一个笼统的概念，除了一些特定的领域专属语言之外，一些更加知名的编程范型也被归类为其子范型。

===逻辑式编程===
[[逻辑编程|逻辑编程]]通常被看做是[[形式逻辑|形式逻辑]]的理论，把计算看做推导，透過[[函數_(計算機科學)|函數]]、[[推理规则|推理规则]]或[[重写逻辑|重写]]規則，來描述變數之間的關係。它的語言執行器（[[编译器|編譯器]]或[[解释器|解释器]]）採用了一個固定的[[算法|算法]]，以從這些關係產生結果。作为典型代表的[[Prolog|Prolog]]语言，声明关系并且对关系进行提问；它和许多逻辑编程语言，都允许[[副作用_(计算机科学)|副作用]]的存在。

===函数式编程===
[[函数式编程|函数式编程]]，尝试最小化{{en-link|状态 (计算机科学)|State (computer science)|状态}}带来的[[副作用_(计算机科学)|副作用]]，因此可以被归类入宣告式编程，它現在因大幅简化了[[并行计算|并行计算]]的编写难度而备受关注<ref>{{cite book|last1=Marlow|first1=Simon|title=Parallel and Concurrent Programming in Haskell: Techniques for Multicore and Multithreaded Programming|date=18 June 2013|publisher=O'Reilly Media|isbn=978-1449335946}}</ref>。除了[[纯函数式编程|纯函数式编程]]语言如[[Haskell|Haskell]]，多数[[函数式编程|函数式编程]]语言如[[Scheme|Scheme]]、[[Clojure|Clojure]]、[[OCaml|OCaml]]、[[Standard_ML|Standard ML]]等，允许副作用的存在。

===约束式编程===
在[[约束编程|约束式编程]]中，变量之间的关系是在约束中说明的，定义了问题的解的范围。这些约束然后被应用程序来求解，以使得每个变量获得一个值，并让最多的约束得到满足。约束式编程经常被用作函数式編程、逻辑编程甚至指令式编程的补充，用来解決[[人工智能|人工智能]]中的[[約束滿足問題|約束滿足問題]]。

==參見==
*（對立的）[[指令式編程|指令式編程]]
*[[函數式編程|函數式編程]]和[[邏輯編程|邏輯編程]]

==參考==
{{reflist|2}}

==外部連結==
* Frans Coenen. [https://web.archive.org/web/20060424045449/http://www.csc.liv.ac.uk/~frans/OldLectures/2CS24/declarative.html#detail Characteristics of declarative programming languages]. 1999.
*{{en-link|Robert Harper|Robert Harper (computer scientist)|Robert Harper}}.
**[https://existentialtype.wordpress.com/2013/07/18/what-if-anything-is-a-declarative-language/ What, If Anything, Is A Declarative Language?] {{Wayback|url=https://existentialtype.wordpress.com/2013/07/18/what-if-anything-is-a-declarative-language/ |date=20220423101721 }}. 2013.
**[https://existentialtype.wordpress.com/2013/07/22/there-is-such-a-thing-as-a-declarative-language/ There Is Such A Thing As A Declarative Language, and It’s The World’s Best DSL] {{Wayback|url=https://existentialtype.wordpress.com/2013/07/22/there-is-such-a-thing-as-a-declarative-language/ |date=20220125170251 }}. 2013.
* Olof Torgersson. [https://web.archive.org/web/20060330033506/http://www.cs.chalmers.se/~oloft/Papers/wm96/wm96.html A Note on Declarative Programming Paradigms and the Future of Definitional Programming]. 1996.

{{编程语言类别}}
[[Category:編程典範|Category:編程典範]]
[[Category:宣告式編程|Category:宣告式編程]]