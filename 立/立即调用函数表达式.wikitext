{{TA
|G1=IT
}}
'''立即调用函数表达式'''（英文：{{lang|en|'''immediately-invoked function expression'''}}，缩写：'''{{lang|en|IIFE}}'''）<ref name=Alman>{{cite web|last=Alman|first=Ben|title=Immediately Invoked Function Expressions|url=http://benalman.com/news/2010/11/immediately-invoked-function-expression|year=2010|accessdate=4 February 2013}}</ref>，是一种利用[[JavaScript|JavaScript]]函数生成新[[作用域|作用域]]的编程方法。

立即调用函数表达式可以令其函数中声明的变量绕过JavaScript的变量置顶声明规则，还可以避免新的变量被解释成全域变量或函数名占用全域变量名的情况。与此同时它能在禁止访问函数内声明变量的情况下允许外部对函数的调用。有时，这种编程方法也被叫做“自执行（匿名）函数”，但“立即调用函数表达式”是语义上最准确的术语。 <ref>{{cite book|last=Resig|first=John|title=Pro JavaScript Techniques|year=2006|publisher=Apress|isbn=9781430202837|pages=29}}</ref><ref name=Alman /><ref name=Osmani>{{cite book|last=Osmani|first=Addy|title=Learning JavaScript Design Patterns|year=2012|publisher=O'Reilly|isbn=9781449334871|pages=206}}</ref><ref>{{cite news|last1=Baagoe|first1=Johannes|title=Closing parenthesis in function's definition followed by its call|url=https://groups.google.com/forum/#!topic/comp.lang.javascript/tjVn1NjGDN8%5B1-25%5D|accessdate=19 April 2010}}</ref>

== 用法 ==

立即调用函数表达式拥有数种不同的写法<ref name=Enlighten>{{cite book|last=Lindley|first=Cody|title=JavaScript Enlightenment|url=https://archive.org/details/javascriptenligh00lind_496|year=2013|publisher=O'Reilly|isbn=9781449342883|pages=[https://archive.org/details/javascriptenligh00lind_496/page/n78 61]}}</ref>。最常见的一种是将函数表达式字面量至于圆括号（分组运算符）之内，然后使用圆括号调用函数。<ref>{{cite book|last=Zakas|first=Nicholas|title=Maintainable JavaScript|url=https://archive.org/details/maintainablejava00zaka_117|year=2012|publisher=O'Reilly|isbn=9781449327682|pages=[https://archive.org/details/maintainablejava00zaka_117/page/n61 44]}}</ref><ref>{{cite web|last=Crockford|first=Douglas|authorlink=Douglas Crockford|title=Code Conventions for the JavaScript Programming Language|url=http://javascript.crockford.com/code.html|accessdate=3 February 2013}}</ref>

<syntaxhighlight lang="JavaScript">
(function() {
  // 这里的语句将获得新的作用域
})();
</syntaxhighlight>

若要将作用域外变量传递进函数，则按下述方式书写：

<syntaxhighlight lang="JavaScript">
(function(a, b) {
  // a == 'hello'
  // b == 'world'
})('hello', 'world');
</syntaxhighlight>

开头的括号可能会因为解释器的分号自动插入特性造成一些问题。括号本用于明确字面量为表达式以与函数声明语句区分，但解释器可能将括号解释为对以上一行中结尾的变量名为名的函数的调用。在一些省略分号的程序中，可见将分号至于行首的做法。这样的分号被称为“防御性分号”<ref name=inimino>"[http://inimino.org/~inimino/blog/javascript_semicolons JavaScript Semicolon Insertion: Everything you need to know]", Friday, May 28, 2010</ref><ref>"[http://mislav.uniqpath.com/2010/05/semicolons/ Semicolons in JavaScript are optional] {{Wayback|url=http://mislav.uniqpath.com/2010/05/semicolons/ |date=20151006203519 }}", by Mislav Marohnić, 07 May 2010</ref>，举例：

<syntaxhighlight lang="JavaScript">
a = b + c
;(function() {  // 故意将分号放在这里
  // 代码
})();
</syntaxhighlight>

如此书写，以防止语句被理解为对函数c的调用（<code>c(...)</code>）。

== 例子 ==

理解立即调用函数表达式的关键在于认清JavaScript拥有函数作用域，但没有块作用域（ES6之前），且通过指针（而非复制）将变量传入一个函数[[闭包_(计算机科学)|闭包]]。<ref>{{cite book|last=Haverbeke|first=Marijn|title=Eloquent JavaScript|url=https://archive.org/details/eloquentjavascri0000have|year=2011|publisher=No Starch Press|isbn=9781593272821|pages=[https://archive.org/details/eloquentjavascri0000have/page/29 29]–30}}</ref> ES6 引入了新关键字 let和 const，用它们定义的常量和变量具有块级作用域。

=== 求值上下文（Evaluation context） ===

缺少块作用域意味着一个在类似于for循环的块中声明的变量会被置顶到其所包含的函数中。如果一个内部函数依赖于一个外部变量，而该外部变量被外部函数更改，那么执行内函数就有些困难。举例，我们在声明函数之后，但在定义函数之前，改变一个变量的值。<ref>{{cite web|last=Alman|first=Ben|title=simple-iife-example.js|url=https://gist.github.com/cowboy/4710214|work=Github|accessdate=5 February 2013}}</ref> 

<syntaxhighlight lang="JavaScript">
var v, getValue;
v = 1;
getValue = function() { return v; };
v = 2;
 
getValue(); // 2
</syntaxhighlight>
 
当我们手动给<code>v</code>赋值时这结果似乎没什么问题。不过，如果<code>getValue()</code>是在一个循环中被定义的，那么就可能出现预想外的结果。

<syntaxhighlight lang="JavaScript">
var v, getValue;
v = 1;
getValue = (function(x) {
  return function() { return x; };
})(v);
v = 2;

getValue(); // 1
</syntaxhighlight>

此例中，function将 <code>v</code> 作为参数传入并立即调用，保护了内部函数的执行上下文。<ref name="JQ">{{cite book|title=Professional jQuery|last=Otero|first=Cesar|last2=Larsen|first2=Rob|publisher=John Wiley & Sons|year=2012|isbn=9781118222119|pages=31}}</ref> 

David Herman's作品 ''Effective JavaScript'' 包含了一个用来在循环中求值导致问题的例子。<ref>{{cite book|last=Herman|first=David|title=Effective Javascript|year=2012|publisher=Addison-Wesley|isbn=9780321812186|pages=44–45}}</ref> 虽然他的例子刻意编写得非常复杂，但是原因都是缺乏块作用域导致的.<ref>{{cite book|last=Zakas|first=Nicholas C.|title=Professional JavaScript for Web Developers|chapter=Mimicking Block Scope|year=2011|publisher=John Wiley & Sons|isbn=9781118233092}}</ref>

=== 利用IIFE建立真正的私有函数和变量，并用闭包访问 ===

立即调用函数表达式也可以用来创建私有方法来访问函数，不仅起到保护作用，同时也暴露了一些可以后续使用的属性。<ref>{{cite book|last=Rettig|first=Pascal|title=Professional HTML5 Mobile Game Development|url=https://archive.org/details/professionalhtml00rett_405|year=2012|publisher=John Wiley & Sons|isbn=9781118301333|pages=[https://archive.org/details/professionalhtml00rett_405/page/n174 145]}}</ref> 下面的例子来自于 Alman's 关于IIFE的网帖。<ref name=Alman /> 

<syntaxhighlight lang="JavaScript">
// 'counter' 函数返回一个具有属性的对象, 这里的属性就是
// get set等函数
var counter = (function(){
  var i = 0;

  return {
    get: function(){
      return i;
    },
    set: function( val ){
      i = val;
    },
    increment: function() {
      return ++i;
    }
  };
})();
// 这些调用使用了刚才counter得到的属性
counter.get(); // 0
counter.set( 3 );
counter.increment(); // 4
counter.increment(); // 5
</syntaxhighlight>

如果我们试图从全局作用域直接访问 <code>counter.i</code> ，会得到 undefined，因为 <code>i</code> 这个数据由IIFE封装，它并不是 <code>counter</code>的属性。同样的，如果我们试图访问 <code>i</code> 也会收到错误，因为 <code>i</code> 并没有在全局作用域中定义。

== 术语 ==

"立即调用函数表达式" 最早称为“自执行（匿名）函数”<ref name=Alman /><ref name=Enlighten /> 但是立即执行的函数不一定是匿名的。 [[ECMAScript|ECMAScript]] 5的 strict mode 禁止<code>arguments.callee</code>,<ref>{{cite web|title=Strict mode|url=https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode#Making_eval_and_arguments_simpler|work=Mozilla JavaScript Reference|publisher=Mozilla Developer Network|accessdate=4 February 2013}}</ref> 因此，这个术语不够准确.<ref name=Osmani /><ref name=JQ />

在lambda-calculus（λ演算）中，这个构造称为 "redex", 用来化简表达式, 参阅：[[Reduction_strategy_(code_optimization)|Reduction strategy (code optimization)]].

== 参考 ==
{{Reflist|30em}}

== 外部链接 ==

* ''{{cite web|title=Functions and function scope|url=https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope|work=Mozilla JavaScript Reference|publisher=Mozilla Developer Network|accessdate=4 February 2013}}'' 
* ''{{cite web|last=Soshnikov|first=Dmitry|title=ECMA-262-3 in detail. Chapter 5. Functions.|url=http://dmitrysoshnikov.com/ecmascript/chapter-5-functions/#question-about-surrounding-parentheses|accessdate=4 February 2013}}''

[[Category:JavaScript|Category:JavaScript]]
[[Category:编程语言概念|Category:编程语言概念]]