[[File:Noun_project_3067.svg|150px]]

'''演绎推理'''（{{lang-en|Deductive Reasoning}}）、'''正向推理'''在传统的[[亚里士多德逻辑|亚里士多德逻辑]]中是「结论，可从叫做‘前提’的已知事实，‘必然地’得出的推理」。如果前提为真，则结论必然为真。这区别于[[溯因推理|溯因推理]]和[[归纳推理|归纳推理]]：它们的前提可以预测出高概率的结论，但是不确保结论为真。

“演绎推理”还可以定义为结论在普遍性上不大于前提的[[推理|推理]]，或「结论在确定性上，同前提一样」的推理。

== 例子 ==
任何三角形只可能是锐角三角形、直角三角形和钝角三角形。——大前提

这个三角形既不是锐角三角形，也不是钝角三角形。——小前提

'''所以，它是一个直角三角形。'''——结论

== 常用的基本论证形式 ==
{| class="wikitable" style="font-family:Arial;"
|align="center" bgcolor="#FFEBAD" colspan="3"|演算的基本论证形式
|-
!名字
![[相继式|相继式]]
!描述
|-
|bgcolor="#bbffbb"|[[肯定前件|肯定前件]]论式
|bgcolor="#bbffbb"|(p → q) ; p ├ q
|bgcolor="#bbffbb"|如果 p 则 q; p ,所以 q
|-
|bgcolor="#BBBBFF"|[[否定后件|否定后件]]论式
|bgcolor="#BBBBFF"|(p → q) ; ¬q ├ ¬p
|bgcolor="#BBBBFF"|如果 p 则 q; 非 q; 所以，非 p
|-
|bgcolor="#bbffbb"|[[假言三段论|假言三段论]]式
|bgcolor="#bbffbb"|(p → q) ; (q → r) ├ (p → r)
|bgcolor="#bbffbb"|如果 p 则 q; 如果 q 则 r; 所以，如果 p 则 r
|-
|bgcolor="#BBBBFF"|[[选言三段论|选言三段论]]式
|bgcolor="#BBBBFF"|(p ∨ q) ; ¬p ├ q
|bgcolor="#BBBBFF"|要么 p 要么 q; 非 p; 所以, q
|-
|bgcolor="#bbffbb"|创造性二难论式
|bgcolor="#bbffbb"|(p → q)∧(r → s) ; (p ∨ r) ├ (q ∨ s)
|bgcolor="#bbffbb"|如果 p 则 q; 并且如果 r 则 s; 但是要么 p 要么 r; 所以，要么 q 要么 s
|-
|bgcolor="#BBBBFF"|破坏性二难论式
|bgcolor="#BBBBFF"|(p → q)∧(r → s) ; (¬q ∨ ¬s) ├ (¬p ∨ ¬r)
|bgcolor="#BBBBFF"|如果 p 则 q; 并且如果 r 则 s; 但是要么非 q 要么非 s; 所以，要么非 p 要么非 r
|-
|bgcolor="#bbffbb"|简化论式
|bgcolor="#bbffbb"|(p ∧ q) ├ p
|bgcolor="#bbffbb"|p 与 q 为真; 所以，p 为真
|-
|bgcolor="#BBBBFF"|合取式
|bgcolor="#BBBBFF"|p, q ├ (p ∧ q) 
|bgcolor="#BBBBFF"|p 与 q 分别为真; 所以，它们结合起来是真
|-
|bgcolor="#bbffbb"|增加论式
|bgcolor="#bbffbb"|p ├ (p ∨ q)
|bgcolor="#bbffbb"|p 是真; 所以析取式(p 或 q)为真
|-
|bgcolor="#BBBBFF"|合成论式
|bgcolor="#BBBBFF"|(p → q) ∧ (p → r) ├ p → (q ∧ r)
|bgcolor="#BBBBFF"|如果 p 则 q; 并且如果 p 则 r; 所以，如果 p 是真则 q 与 r 为真
|-
|bgcolor="#bbffbb"|德·摩根定律(1)
|bgcolor="#bbffbb"| ¬(p ∧ q) ├ (¬p ∨ ¬ q)
|bgcolor="#bbffbb"| (p 与 q)的否定等价于(非 p 或非 q)
|-
|bgcolor="#bbffbb"|德·摩根定律(2)
|bgcolor="#bbffbb"|¬(p ∨ q) ├ (¬p ∧ ¬ q)
|bgcolor="#bbffbb"|(p 或 q)的否定等价于(非 p 与非 q)
|-
|bgcolor="#BBBBFF"|交换律(1)
|bgcolor="#BBBBFF"|(p ∨ q) ├ (q ∨ p)
|bgcolor="#BBBBFF"|(p 或 q)等价于(q 或 p)
|-
|bgcolor="#BBBBFF"|交换律(2)
|bgcolor="#BBBBFF"|(p ∧ q) ├ (q ∧ p)
|bgcolor="#BBBBFF"|(p 与 q)等价于(q 与 p)
|-
|bgcolor="#bbffbb"|结合律(1)
|bgcolor="#bbffbb"|p ∨ (q ∨ r) ├ (p ∨ q) ∨ r
|bgcolor="#bbffbb"|p 或(q 或 r)等价于(p 或 q)或 r
|-
|bgcolor="#bbffbb"|结合律(2)
|bgcolor="#bbffbb"|p ∧ (q ∧ r) ├ (p ∧ q) ∧ r
|bgcolor="#bbffbb"|p 与(q 与 r)等价于(p 与 q)与 r 
|-
|bgcolor="#BBBBFF"|分配律(1)
|bgcolor="#BBBBFF"|p ∧ (q ∨ r) ├ (p ∧ q) ∨ (p ∧ r)
|bgcolor="#BBBBFF"|p 与(q 或 r)等价于(p 与 q)或(p 与 r)
|-
|bgcolor="#BBBBFF"|分配律(2)
|bgcolor="#BBBBFF"|p ∨ (q ∧ r) ├ (p ∨ q) ∧ (p ∨ r)
|bgcolor="#BBBBFF"|p 或(q 与 r)等价于(p 或 q)与(p 或 r)
|-
|bgcolor="#bbffbb"|双重否定律
|bgcolor="#bbffbb"|p ├ ¬¬p
|bgcolor="#bbffbb"|p 等价于非 p 的否定
|-
|bgcolor="#BBBBFF"|换位律
|bgcolor="#BBBBFF"|(p → q) ├ (¬q → ¬p)
|bgcolor="#BBBBFF"|如果 p 则 q 等价于如果非 q 则非 p
|-
|bgcolor="#bbffbb"|实质蕴涵律（蕴析律）
|bgcolor="#bbffbb"| (p → q) ├ (¬p ∨ q)
|bgcolor="#bbffbb"|如果 p 则 q 等价于要么非 p 要么 q
|-
|bgcolor="#BBBBFF"|实质等价律(1)
|bgcolor="#BBBBFF"|(p ↔ q) ├ (p → q) ∧ (q → p)
|bgcolor="#BBBBFF"|(p 当且仅当q) 意味着，(如果 p 是真则 q 是真)与(如果 q 是真则 p 是真)
|-
|bgcolor="#BBBBFF"|实质等价律(2)
|bgcolor="#BBBBFF"|(p ↔ q) ├ (p ∧ q) ∨ (¬q ∧ ¬p)
|bgcolor="#BBBBFF"|(p 当且仅当q) 意味着，要么(p 与 q 都是真)要么(p 和 q 都是假)
|-
|bgcolor="#bbffbb"|输出律
|bgcolor="#bbffbb"|(p ∧ q) → r ├ p → (q → r)
|bgcolor="#bbffbb"|从(如 p 与 q 是真则 r 是真)可推出(如果 q 是真则 r 为真的条件是 p 为真)
|-
|bgcolor="#BBBBFF"|输入律
|bgcolor="#BBBBFF"|p → (q → r) ├ (p ∧ q) → r
|bgcolor="#BBBBFF"|如果p，则(q为真时，r为真)可推出如果（p与q）为真，则r为真
|-
|bgcolor="#bbffbb"|[[重言式|重言式]]
|bgcolor="#bbffbb"|p ├ (p ∨ p)
|bgcolor="#bbffbb"|p 是真等价于 p 是真或 p 是真
|-
|bgcolor="#BBBBFF"| [[排中律|排中律]]
|bgcolor="#BBBBFF"| ├ (p ∨ ¬p)
|bgcolor="#BBBBFF"| p 或非 p 是真
|-
|bgcolor="#bbffbb"| indiscernibility of identicals
|bgcolor="#bbffbb"|p = q ; p → r ├ q → r
|bgcolor="#bbffbb"|p = q 且 (如果p 则 r )等价 (如果q 则 r)
|-
|bgcolor="#bbffbb"|[[吸收律_(逻辑学)|吸收律]]
|bgcolor="#bbffbb"|p → q ├  p → (p ∧ q)
|bgcolor="#bbffbb"|如果p则q，可以推出如果p则p且q
|}

== 公理化 ==
更加形式化的说，演绎是陈述的序列，每个陈述都可以从它前面的陈述推导出来。本质上，这导致-{了}-如何证明第一个句子的公开问题(因为它不能从任何事物得到)。公理化命题逻辑通过要求证明满足下列条件来解决这个问题:

来自 [[合式公式|wff]] 的全体 Σ 的证明 α 是一个 wff 的有限序列:
:β1,...,βi,...,βn

这里的
:βn = α一

并且对于每个 βi (1 ≤ i ≤ n)，
:要么 βi ∈ Σ
:要么 βi 是一个公理。
:要么 βi 是两个前面的 wff βi-g 和 βi-h 的[[肯定前件|肯定前件]]的输出。

不同版本的公理化命题逻辑都包含一些[[公理|公理]]，通常是三个或多于三个，除了一个或更多的推理规则之外。例如[[弗雷格|弗雷格]]公理化的命题逻辑，它也是这种尝试的第一个实例，有六个命题公理和两个规则。[[伯特兰·罗素|伯特兰·罗素]]和[[阿尔弗雷德·诺思·怀特黑德|阿尔弗雷德·诺思·怀特黑德]]也提议了有五个公理的一个系统。

例如[[扬·武卡谢维奇|扬·武卡谢维奇]]({{lang|pl|Jan Łukasiewicz}}，1878年-1956年)版本的公理化命题逻辑有接受如下公理的公理集合 A:
:* [PL1] p → (q → p)
:* [PL2] (p → (q → r)) → ((p → q) → (p → r))
:* [PL3] (¬p → ¬q) → (q → p)
并且它有有一个规则的推理规则的集合 R，这个规则就是下面的肯定前件:
:* [MP] 从 α 和 α → β, 推出 β。

推理规则允许我们从公理或给定的全体 Σ 的 wff 推导出陈述。

== 自然演绎逻辑 ==
在 E.J. Lemmon 提出的我们称为系统 L 的一个版本的自然演绎逻辑中，我们首先没有任何公理。我们只有支配证明的语法的九个基本规则。

系统 L 的九个基本规则是:
# [[假定|假定]]规则 (A)
# [[肯定前件|肯定前件]]规则 (MPP)
# 双重否定规则 (DN)
# [[条件证明|条件证明]]规则 (CP)
# ∧-介入规则 (∧I)
# ∧-除去规则 (∧E)
# ∨-介入规则 (∨I)
# ∨-除去规则 (∨E)
# [[反证法|反证法]]规则 (RAA)

在系统 L 中，证明的定义有下列条件:

# 有一个 wff([[合式公式|合式公式]])的有限序列
# 它的每行都被系统 L 的一个规则所证明
# 证明的最后一行是想要的([[Q.E.D.|Q.E.D.]], quod erat demonstrandum, 是拉丁语: 这就是要证明的)，并且证明的最后一行只使用给出的前提；或者没有前提（如果什么都没有给出的话）。

如果没有前提给出，则相继式叫做定理。所以在系统 L 中定理的定义是:
* 定理是在系统 L 中使用空的假定集合能证明的相继式。
或者换句话说:
* 定理是在系统 L 中从假定的空集可以证明的相继式。

相继式的证明的一个例子(这里是否定后件):

{| class="wikitable"  style="font-family:Arial;"
|align="center" bgcolor="#FFEBAD" colspan="4"|p → q, ¬q ├ ¬p  [否定后件(MTT)]
|-
!假定号
!行号
!公式(wff)
!使用的行和理由
|-
|bgcolor="#bbffbb"|1
|bgcolor="#bbffbb"|(1)
|bgcolor="#bbffbb"|(p → q)
|bgcolor="#bbffbb"| A
|-
|bgcolor="#bbffbb"|2
|bgcolor="#bbffbb"|(2)
|bgcolor="#bbffbb"|¬q
|bgcolor="#bbffbb"| A
|-
|bgcolor="#bbffbb"|3
|bgcolor="#bbffbb"|(3)
|bgcolor="#bbffbb"|p
|bgcolor="#bbffbb"| A (for RAA)
|-
|bgcolor="#bbffbb"|1,3
|bgcolor="#bbffbb"|(4)
|bgcolor="#bbffbb"|q
|bgcolor="#bbffbb"| 1,3,MPP
|-
|bgcolor="#bbffbb"|1,2,3
|bgcolor="#bbffbb"|(5)
|bgcolor="#bbffbb"|q ∧ ¬q
|bgcolor="#bbffbb"| 2,4,∧I
|-
|bgcolor="#bbffbb"|1,2
|bgcolor="#bbffbb"|(6)
|bgcolor="#bbffbb"|¬p
|bgcolor="#bbffbb"| 3,5,RAA
|-
|align="center" bgcolor="#BBBBFF" colspan="4"|Q.E.D.
|-
|}

相继式证明的一个例子(这里是一个定理):

{| class="wikitable"
|align="center" bgcolor="#FFEBAD" colspan="4"|├p ∨  ¬p
|-
!假定号
!行号
!公式(wff)
!使用的行和理由
|-
|bgcolor="#bbffbb"|1
|bgcolor="#bbffbb"|(1)
|bgcolor="#bbffbb"|¬(p ∨  ¬p)
|bgcolor="#bbffbb"|A (for RAA)
|-
|bgcolor="#bbffbb"|2
|bgcolor="#bbffbb"|(2)
|bgcolor="#bbffbb"|¬p
|bgcolor="#bbffbb"|A (for RAA)
|-
|bgcolor="#bbffbb"|2
|bgcolor="#bbffbb"|(3)
|bgcolor="#bbffbb"|(p ∨  ¬p)
|bgcolor="#bbffbb"|2, ∨I
|-
|bgcolor="#bbffbb"|1, 2
|bgcolor="#bbffbb"|(4)
|bgcolor="#bbffbb"|(p ∨  ¬p) ∧ ¬(p ∨  ¬p)
|bgcolor="#bbffbb"|1, 2, ∧I
|-
|bgcolor="#bbffbb"|1
|bgcolor="#bbffbb"|(5)
|bgcolor="#bbffbb"|¬¬p
|bgcolor="#bbffbb"|2, 4, RAA
|-
|bgcolor="#bbffbb"|1
|bgcolor="#bbffbb"|(6)
|bgcolor="#bbffbb"|p
|bgcolor="#bbffbb"|5, DN
|-
|bgcolor="#bbffbb"|1
|bgcolor="#bbffbb"|(7)
|bgcolor="#bbffbb"|(p ∨  ¬p)
|bgcolor="#bbffbb"|6, ∨I
|-
|bgcolor="#bbffbb"|1
|bgcolor="#bbffbb"|(8)
|bgcolor="#bbffbb"|(p ∨  ¬p) ∧ ¬(p ∨  ¬p)
|bgcolor="#bbffbb"|1, 7, ∧I
|-
|bgcolor="#bbffbb"|
|bgcolor="#bbffbb"|(9)
|bgcolor="#bbffbb"|¬¬(p ∨  ¬p)
|bgcolor="#bbffbb"|1, 8, RAA
|-
|bgcolor="#bbffbb"|
|bgcolor="#bbffbb"|(10)
|bgcolor="#bbffbb"|(p ∨  ¬p)
|bgcolor="#bbffbb"|9, DN
|-
|align="center" bgcolor="#BBBBFF" colspan="4"|Q.E.D.
|-
|}

系统 L 的每行都有自己对输入或进入的类型的要求，它可以接受并且拥有它自己的处理和计算于是它的输入使用的假定的方式。

== 引用 ==
* Jennings, R. E., Continuing Logic, the course book of '''Axiomatic Logic''' in Simon Fraser University, Vancouver, Canada
* Zarefsky, David, Argumentation: The Study of Effective Reasoning Parts I and II, The Teaching Company 2002

== 参见 ==
* [[真理的符合理论|真理的符合理论]]
* [[可废止推理|可废止推理]]
* [[归纳推理|归纳推理]]
* [[假设演绎方法|假设演绎方法]]
* [[命题演算|命题演算]]
* [[可靠性定理|可靠性]]
* [[逆推推理|逆推推理]]
* [[有效性|有效性]]

{{Authority control}}
[[Category:邏輯|Category:邏輯]]
[[Category:數理邏輯|Y]]