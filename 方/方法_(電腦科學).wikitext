{{NoteTA
|G1 = IT
|1 = 實體=>zh-cn:实例; 實體=>zh-my:实例; 實體=>zh-sg:实例;
}}
在[[物件導向程式設計|物件導向程式設計]]中，'''方法'''（{{lang-en|Method}}；{{lang-de|Methode}}； {{lang-fr|Méthode}}）指的是[[类_(计算机科学)|類別]]（所謂的'''類別方法'''、'''靜態方法'''或'''工廠方法'''）、或者是[[物件_(電腦科學)|物件]]（所謂的'''實體方法'''）兩者其中之一的一種[[子程式|子程式]]。如同[[程序化程式語言|程序化程式語言]]的程序，一個方法通常以一系列的[[語句_(程式設計)|語句]]所組成，並以之完成一個動作。其可以藉由輸入一組[[參數_(電腦科學)|參數]]以制訂所需的動作，且一部分的方法可能會有輸出值（所謂的返回值）。方法的目的是提供一個機制，以存取（對於讀和寫）物件或類別的[[私有資料|私有資料]]儲存區。

== 方法的種類 ==
如前所述，實體方法附屬於特定物件，而類別或者靜態方法（又稱作共享方法）則附屬於某個類別。在典型的實踐中，實體方法傳送一個隱藏的[[參考|參考]]（舉例來說，<code>[[this_(電腦科學)|this]]</code>或者<code>[[self_(電腦科學)|self]]或者Me</code>）給所屬的物件（不論類別或類別實例），所以它們可以存取與之相關的資料。一個類別方法的典型例子即：在給定的類別中，其內部記錄着已建立物件的計數。

[[建構子_(電腦科學)|建構子]]類似於方法，不過它們是在語句區塊中[[物件生命期|建立]]一個類別的實體時，所自動呼叫的。在[[Java|Java]]、[[C++|C++]]、[[C_Sharp|C#]]以及[[PHP|PHP]]裡，它們和所屬物件的類別，皆有相同的名稱。在[[Visual_Basic|Visual Basic]]裡，建構子稱為<code>New</code>，而且在[[Object_Pascal|Object Pascal]]裡，建構子可以有使用者所定義的名字（不過大多稱作Create）。建構子有一部分很像方法，不過也存在著許多差異，所以通常不把其視為方法。

[[解構子_(電腦科學)|解構子]]是一個特殊的實體方法，它是在[[物件生命期|解構]]一個類別的實體時，所自動呼叫的。在C++裡，它們和所屬物件的類別，皆有相同的名稱，只不過在前面多了一個[[波浪號|波浪號]]（~）。在[[Object_Pascal|Object Pascal]]裡，解構子可以有使用者所定義的名字（不過大多稱作Destroy）。

抽象方法是一個[[虛設代碼|虛設代碼]]的方法，它沒有[[實作|實作]]。它通常用來佔住一個位置，讓子類別或者以此為原型的物件[[重載_(程式設計)|重載]]，並實作出相應的抽象方法。如此一來，抽象方法有助於明確表明一部分[[架構|架構]]。

存取方法通常是一個小型、簡單的，並提供一個用來從程式的其它部分存取物件[[狀態|狀態]]的方法。雖然它引入了一個新的[[偶合_(電腦科學)|附屬]]，但這是直接存取狀態資料的首選方法，因其提供了一個[[抽象層|抽象層]]。例如，如果銀行帳戶類別提供了<code>getBalance()</code>的存取方法，其用以查詢餘額（而不是直接存取餘額資料區域），之後該部分代碼的[[修改版|修改版]]可以實作更複雜的查詢餘額機制（例如，取得[[資料庫|資料庫]]），而無須改變相關的代碼。一個用來改變物件狀態的存取方法，通常稱作更新方法，有時又稱作[[更動方法|更動方法]]。提供這些方法的物件就被認為是[[可變物件|可變物件]]。

== 靜態（共享/類別）方法 ==
如前所述，方法可能宣告為靜態的（在Visual Basic裡是<code>shared</code>，在Object Pascal裡是<code>class</code>），即靜態方法活動於類別層次，而非實體層次。靜態方法不能觸及一個特定的類別實例（也就是不能觸及<code>this</code><code>self</code>,<code>Me</code>等等）以下是以C‘ 撰寫的靜態成員以及其客戶端的例子：

<syntaxhighlight lang>
 public class Example
   public static void StaticExample
      // 靜態方法的程式碼
   public void InstanceExample
    M// 此處為實體方法的程式碼
   M// 可以使用THIS
 /// 上述類別的客戶端：
 // 呼叫靜態方法（不包含實體）
 ExampleClass.StaticExample
 // 呼叫實體方法
 ExampleClass objMyExample = ExampleClass
 objMyExample.InstanceExample
</syntaxhighlight>

== 参考条目 ==

* [[面向对象的建模|面向对象的建模]]
* [[面向对象的系统分析|面向对象的系统分析]]
* [[面向对象设计|面向对象设计]]
* [[面向对象的程序设计|面向对象的程序设计]]
* [[面向对象的程序设计语言|面向对象的程序设计语言]]
* [[面向对象方法学|面向对象方法学]]
* [[UML|统一建模语言]]
* [[软件设计模式|软件设计模式]]
* [[分析模式|分析模式]]
* [[软件重构|软件重构]]
* [[调试|调试]]

== 參閱 ==
* [[實作繼承|實作繼承]]
* [[繼承語義|繼承語義]]
* [[子程式|子程式]]
* [[虛擬繼承|虛擬繼承]]
* [[方法名|方法名]]

[[Category:计算机编程|Category:计算机编程]]

[[sv:Funktion_(programmering)#Metod|sv:Funktion (programmering)#Metod]]