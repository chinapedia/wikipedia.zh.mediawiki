在[[軟體工程|軟體工程]]中'''結構型模式'''是[[設計模式_(計算機)|設計模式]]，藉由一以貫之的方式來了解元件間的關係，以簡化設計。

== 舉例 ==

* [[適配器模式|適配器模式]]：將一個物件的介面'轉接'成當事人預期的樣子。
** 翻新介面模式<ref>{{Cite web |url=http://c2.com/cgi/wiki?RetrofitInterfacePattern |title=存档副本 |access-date=2010-04-25 |archive-date=2016-07-09 |archive-url=https://web.archive.org/web/20160709234428/http://c2.com/cgi/wiki?RetrofitInterfacePattern |dead-url=no }}</ref><ref>{{Cite web |url=http://c2.com/cgi/wiki?ExternalPolymorphism |title=存档副本 |access-date=2010-04-25 |archive-date=2016-07-09 |archive-url=https://web.archive.org/web/20160709145724/http://c2.com/cgi/wiki?ExternalPolymorphism |dead-url=no }}</ref>: 同時使用多個類別的介面的適配器。
** 適配器導管：因除錯目的而使用多個適配器。<ref>{{Cite web |url=http://c2.com/cgi/wiki?AdapterPipeline |title=存档副本 |access-date=2010-04-25 |archive-date=2016-07-10 |archive-url=https://web.archive.org/web/20160710162806/http://c2.com/cgi/wiki?AdapterPipeline |dead-url=no }}</ref>
* [[聚集模式|聚集模式]]：一種[[組合模式|組合模式]]的版本，包含用於聚集子成員的成員函式。
* [[橋接模式|橋接模式]]：將一個抽象與實現解耦，以便兩者可以獨立的變化。
** 墓碑模式：一種中介的查詢物件，包含物件的實際位址。<ref>{{Cite web |url=http://c2.com/cgi/wiki?TombStone |title=存档副本 |access-date=2010-04-25 |archive-date=2016-07-18 |archive-url=https://web.archive.org/web/20160718235458/https://c2.com/cgi/wiki?TombStone |dead-url=no }}</ref>
* [[組合模式|組合模式]]：樹狀結構的物件，每個物件有相同的介面
* [[修飾模式|修飾模式]]：對一個執行的類別，若使用繼承方式加上新功能可能會新類別的數量呈指數型地增加，可使用此模式來解決。
* 擴充模式：亦即框架，將複雜的程式碼隱藏在簡單的介面後
* [[外觀模式|外觀模式]]：對於已有的介面建立一個簡化的介面以簡化使用共通任務。
* [[享元模式|享元模式]]：通過共享以便有效的支持大量小顆粒對象。
* [[代理模式|代理模式]]：為其他對象提供一個代理以控制對這個對象的訪問。
* 導線及過濾器模式：一串的處理者，其中每個處理者的輸出是下一個的輸入
* 私有類別資料模式：限制存取者／修改者的存取。

==另見==

* [[行為型模式|行為型模式]]
* [[創建型模式|創建型模式]]
* [[併發型模式|併發型模式]]

==參考==
<references/>


{{软件设计模式}}
[[Category:軟體設計模式|Category:軟體設計模式]]