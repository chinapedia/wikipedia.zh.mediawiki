{{noteTA
|G1=IT
}}
[[File:Structured_program_theorem_zh.svg|alt=3個調整控制流程的方式]]的方式]]
'''結構化程式理論'''也稱為'''伯姆-贾可皮尼理論'''或'''Böhm-Jacopini理論'''<ref name="kozen">{{cite journal|url=http://www.cs.cornell.edu/~kozen/papers/bohmjacopini.pdf|title=The Böhm–Jacopini Theorem Is False, Propositionally|author=Dexter Kozen and Wei-Lung Dustin Tseng|doi=10.1007/978-3-540-70594-9_11|journal=MPC 2008|access-date=2015-05-21|archive-date=2021-04-27|archive-url=https://web.archive.org/web/20210427233919/http://www.cs.cornell.edu/~kozen/Papers/BohmJacopini.pdf|dead-url=no}}</ref><ref>{{cite web |url=http://www.cse.buffalo.edu/~rapaport/111F04/greatidea3.html |title=CSE 111, Fall 2004, BOEHM-JACOPINI THEOREM |publisher=Cse.buffalo.edu |date=2004-11-22 |accessdate=2013-08-24 |archive-date=2020-02-07 |archive-url=https://web.archive.org/web/20200207143706/https://cse.buffalo.edu/~rapaport/111F04/greatidea3.html |dead-url=no }}</ref>，是一項[[程式語言|程式語言]]研究的結果，說明只要一種程式語言可以依三個方式組合其子程式及調整[[控制流程|控制流程]]，每個[[可计算函数|可计算函数]]都可以用此種程式語言來表示。三個調整[[控制流程|控制流程]]的方式為
#執行一個子程式，然後執行下一個（顺序）
#依照[[布尔型|布尔]]變數的結果，決定執行二段子程式中的一段（選擇）
#重覆執行某子程式，直到特定布尔變數為真為止（循环）

符合上述條件的結構圖需要額外的[[位元|位元]]變數（在原始證明中放在額外的整數變數中），以紀錄原來程式執行到的位置，此種建構法是以伯姆的程式語言{{link-en|P′′|P′′}}為基礎。

== 起源及變體 ==
一般认为<ref name="Harel"/>{{rp|381}}此理論最早是在1966年{{link-en|科拉多·伯姆|Corrado Böhm}}及[[朱塞佩·贾可皮尼|朱塞佩·贾可皮尼]]（Giuseppe Jacopini）的論文中提出<ref>{{cite journal|last=Bohm|first=Corrado|author2=Giuseppe Jacopini |date=May 1966|title=Flow Diagrams, Turing Machines and Languages with Only Two Formation Rules|journal=Communications of the ACM|volume=9|issue=5|pages=366–371|doi=10.1145/355592.365646}}</ref>。{{link-en|大卫·哈雷尔|David Harel}}在1980年曾提到这篇论文广受认可，<ref name="Harel"/>{{rp|381}}尤其在結構化程式理論的支持者中。哈雷尔也提到「由於其論文比較技術的風格，因此較常被引用，較少人真正詳讀過內容。」<ref name="Harel"/>{{rp|381}}，在看了1980年以前的大量論文後，哈雷尔認為結構化程式理論被錯誤詮釋為一個結果較簡單的大眾定理（folk theorem），而此結果可以追溯到[[冯·诺依曼|冯·诺依曼]]及[[斯蒂芬·科尔·克莱尼|斯蒂芬·科尔·克莱尼]]現代計算理論的論文<ref name="Harel"/>{{rp|383}}。

哈雷尔也提到較通用的「結構化程式理論」名稱是在1970年代初由{{link-en|哈伦·米尔斯|Harlan Mills}}提出<ref name="Harel">{{cite journal|last=Harel|first=David|year=1980|title=On Folk Theorems|journal=Communications of the ACM|volume=23|issue=7|pages=379–389|doi=10.1145/358886.358892|url=http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/OnFolkTheorems.pdf|access-date=2015-05-21|archive-date=2020-11-27|archive-url=https://web.archive.org/web/20201127205849/http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/OnFolkTheorems.pdf|dead-url=no}}</ref>{{rp|381}}。

===單一while迴圈的大眾定理版本===
此版本的定理將原來定理中的程式控制流程改為一個<code>while</code>迴圈，模擬在原來非結構化的程式中，[[程式計數器|程式計數器]]走過所有可能[[標記_(程式語言)|標記]]（流程圖方塊）的情形。哈雷尔将此版大眾定理的源头追溯到两篇論文，一篇是1946年描述[[冯·诺伊曼结构|冯·诺伊曼结构]]，用單一while迴圈說明[[程式計數器|程式計數器]]的運作原理，哈雷尔也注意到大眾定理中用到的單一迴圈基本上可以提供冯·诺伊曼式電腦執行流程的[[操作語義學|操作語義]]。<ref name="Harel"/>{{rp|383}}。另一篇更早期的論文則是[[斯蒂芬·科尔·克莱尼|斯蒂芬·科尔·克莱尼]]1936年的正规形式定理（Kleene's T predicate）論文<ref name="Harel"/>{{rp|383}}。

[[高德纳|高德纳]]批評這種轉換後的結果類似以下的[[伪代码|伪代码]]，重點是在此轉換中完全破壞了原程式的結構<ref>{{cite journal
 |  author = Donald Knuth
 |   title = Structured Programming with go to Statements
 | journal = Computing Surveys
 |  volume = 6
 |   issue = 4
 |    year = 1974
 |     url = https://archive.org/details/sim_acm-computing-surveys_1974-12_6_4/page/261
 |   pages = 261–301
 |   doi = 10.1145/356635.356640
}}</ref>{{rp|274}}。Bruce Ian Mills也有類似的看法：「塊狀結構的精神是其風格，不是使用的語言。利用模擬冯·诺伊曼结构的方式，可以將任何一個[[面条式代码|面条式代码]]轉換為塊狀結構的語言，但它面条式代码的本質沒有改變。」<ref name="Mills2005">{{cite book|author=Bruce Ian Mills|title=Theoretical Introduction to Programming|year=2005|publisher=Springer|isbn=978-1-84628-263-8|page=279}}</ref>

<syntaxhighlight lang="Pascal">
p := 1;
while p > 0 do begin
  if p = 1 then begin
    進行流程圖的步驟1;
    p := 流程圖的步驟1之後的步驟編號（若沒有後續步驟，數值為0）;
  end;
  if p = 2 then begin
    進行流程圖的步驟2;
    p := 流程圖的步驟2之後的步驟編號（若沒有後續步驟，數值為0）;
  end;
  ...
  if p = n then begin
    進行流程圖的步驟n;
    p := 流程圖的步驟n之後的步驟編號（若沒有後續步驟，數值為0）;
  end;
end.
</syntaxhighlight>

===伯姆及賈可皮尼的證明===
{{Expand section|time=2015-05-27T15:46:20+00:00}}
伯姆及賈可皮尼的證明是以流桯圖的[[結構歸納法|結構歸納法]]為基礎<ref name="Harel"/>{{rp|381}}，由於用到图模式匹配，其證明在實務上不能當作是{{link-en|程式轉換|program transformation}}演算法，因此開创了此一領域的研究<ref name="amma92">{{cite journal|journal=IEEE Transactions on Software Engineering|title=A control-flow normalization algorithm and its complexity|date=March 1992|volume=18|issue=3|pages=237–251|doi=10.1109/32.126773|issn=0098-5589|url=http://ieeexplore.ieee.org/document/126773/|accessdate=2018-04-02|author=Z. Ammarguellat|archive-date=2019-04-06|archive-url=https://web.archive.org/web/20190406035339/https://ieeexplore.ieee.org/document/126773/|dead-url=no}}</ref>。

== 相關的討論及研究 ==
因為伯姆及贾可皮尼建構的方式過於複雜，因此此證明沒有回答[[結構化編程|結構化編程]]是否適用於軟體開發的問題，而是引發了後續相關的討論及爭議。在两年之後的1968年，[[艾茲赫爾·戴克斯特拉|艾茲赫爾·戴克斯特拉]]就提出著名的「[[GOTO有害論|GOTO有害論]]」<ref>{{cite journal|last=Dijkstra|first=Edsger|authorlink=Edsger W. Dijkstra|year=1968|title=Go To Statement Considered Harmful|journal=Communications of the ACM|volume=11|issue=3|pages=147–148|doi=10.1145/362929.362947|url=http://www.acm.org/classics/oct95/|deadurl=yes|archiveurl=https://web.archive.org/web/20070703050443/http://www.acm.org/classics/oct95/|archivedate=2007-07-03}}</ref>。

有些學者試圖使伯姆及贾可皮尼的研究結果更加純粹，因為其論文中沒有用到從迴圈中間跳出迴圈的<code>break</code>及<code>return</code>指令，因此學者認為這是不好的實作方式，學者們鼓勵每一個迴圈都只能有唯一的結束點，這種設計觀點整合到1968至1969年開發的[[Pascal|Pascal]]中。从1969年到1990年代中期，學校常用Pascal來讲授[[程式語言|程式語言]]入门课程<ref name="roberts">Roberts, E. [1995] “[http://cs.stanford.edu/people/eroberts/papers/SIGCSE-1995/LoopExits.pdf Loop Exits and Structured Programming: Reopening the Debate] {{Wayback|url=http://cs.stanford.edu/people/eroberts/papers/SIGCSE-1995/LoopExits.pdf |date=20140725130816 }},” ACM SIGCSE Bulletin, (27)1: 268–272.</ref>。

[[愛德華·尤登|愛德華·尤登]]注意到1970年代時在有關是否用自動化方式改寫非結構化程式一事，有二元對立的觀點，反對者認為需要以結構化程式的方式去思考，而非一味改寫，而贊成者的論點是這類的修改实际上可以改善大部份已有的程式<ref name="Yourdon1979">{{cite book|author=E. N. Yourdon|title=Classics in Software Engineering|url=https://archive.org/details/classicssoftware00your|year=1979|publisher=Yourdon Press|isbn=978-0-917072-14-7|pages=[https://archive.org/details/classicssoftware00your/page/n57 49]–50}}</ref>。最早提出自動化改寫程式概念的有1971年Edward Ashcroft及Zohar Manna的論文<ref>{{cite journal|last=Ashcroft|first=Edward|author2=Zohar Manna |year=1971|title=The translation of go to programs to 'while' programs|journal=Proceedings of IFIP Congress}} The paper, which is difficult to obtain in the original conference proceedings due to their limited distribution, was republished in Yourdon's 1979 book pp. 51-65</ref>。

直接應用伯姆及贾可皮尼定理可能要引入額外的局部变量，也可能产生[[代码重覆|代码重覆]]的問題<ref name="WattFindlay2004">{{cite book|author1=David Anthony Watt|author2=William Findlay|title=Programming language design concepts|url=https://archive.org/details/programminglangu00watt_497|year=2004|publisher=John Wiley & Sons|isbn=978-0-470-85320-7|page=[https://archive.org/details/programminglangu00watt_497/page/n246 228]}}</ref>，後者也稱為loop and a half problem<ref name="LoudenLambert2011">{{cite book|author1=Kenneth C. Louden|author2=Kenneth A. Lambert|title=Programming Languages: Principles and Practices|year=2011|publisher=Cengage Learning|isbn=1-111-52941-8|pages=422–423|edition=3}}</ref>。Pascal受到這些問題的影響，依照{{link-en|埃里克·S·罗伯茨|Eric S. Roberts}}的實驗研究，學習程式設計的學生难以用Pascal設計正确程式碼来解决简单的問題，其中甚至包括從陣列中找尋一個元素的問題。一篇1980年由Henry Shapiro进行，而后被被罗伯茨引用的研究指出，若只用Pascal提出的流程控制指令，只有20%的人的解答是正確的，但若允許在迴圈中直接加入<code>return</code>的話，所有人都写出了正確的答案<ref name="roberts"/>。

{{link-en|S. Rao Kosaraju||S. Rao Kosaraju}}在1973年證明只要允許可以從任意深度迴圈中多層次跳出，就可以將程式轉換成結構化編程，而不用引入額外的变量<ref name="kozen"/><ref>KOSARAJU, S. RAO. "Analysis of structured programs," Proc. Fifth Annual ACM Syrup.
Theory of Computing, (May 1973), 240-252; also in J. Computer and System Sciences, 9,
3 (December 1974), {{doi| 10.1016/S0022-0000(74)80043-7}} cited by {{cite journal
 |  author = [[Donald_Knuth|Donald Knuth]]
 |   title = Structured Programming with go to Statements
 | journal = Computing Surveys
 |  volume = 6
 |   issue = 4
 |    year = 1974
 |     url = https://archive.org/details/sim_acm-computing-surveys_1974-12_6_4/page/261
 |   pages = 261–301
 |   doi = 10.1145/356635.356640
}}</ref>。而且Kosaraju證明了存在一個嚴格的程式階層（現在稱為Kosaraju階層），針對任一整數''n''，存在一個程式，其中包括深度n的多層次跳出，而且在不引入額外变量的條件下，無法用深度小於n的跳出來實現<ref name="kozen"/>。Kosaraju称這種多層次跳出結構源于{{link-en|BLISS|BLISS}}語言。BLISS語言中的多層次跳出形式為<code>leave ''label''</code>，实际上在BLISS-11版本中才引入到BLISS中，原始的BLISS只有單一層次的跳出。BLISS語言家族不提供無限制的跳转指令，[[Java|Java]]語言後來也引入類似BLISS語言中的多層次跳出指令<ref>{{cite journal|url=http://doi.wiley.com/10.1002/spe.470|pages=955–981|title=The BLISS programming language: a history|journal=Software: Practice and Experience|volume=32|issue=10|date=2002-08-01|issn=1097-024X|language=en|accessdate=2018-04-02|doi=10.1002/spe.470|author=Ronald F. Brender}}</ref>{{rp|960-965}}。

Kosaraju的論文中有另一個較簡單的結論：若程式可以在不用額外变量（及多層次的跳出）下化約為結構化程式，其充份必要條件是程式中沒有一個迴圈有二個或二個以上的結束點。簡單來說，此處Kosaraju定義的化約是指用相同的「基本動作」及判斷，計算相同的函数，但是可能用不同的控制流程（此處的化約比伯姆及贾可皮尼定理中提及的範圍要窄）。受到這個結論的启发，{{link-en|老托馬斯·J·麥凱布|Thomas J. McCabe|Thomas J. McCabe}}在他引入[[循環複雜度|循環複雜度]]的論文中的第四部份，描述了對應非結構化程式[[控制流圖|控制流圖]]（CFG）的{{link-en|Kuratowski定理|Kuratowski's theorem}}。使控制流圖變得无法結構化的最小子圖是：
# 从循環測試以外的地方跳出迴圈
# 直接跳躍到迴圈中
# 直接跳躍到一個判斷分支之中
# 直接跳出一個判斷分支
McCabe發現上述這些子圖不是彼此獨立的，程式無法結構化的充份必要條件是控制流圖中有子圖有上述四種條件中的三種（或三種以上）。McCabe也發現若非結構化的程式中包括其中四個條件中的一個，它一定還會包含另一个。這也是非結構化的程式流程會糾結到類似[[面条式代码|義大利麵]]的原因。McCabe也提供一個量化方式，說明一個程式和理想結構化程式之間的距離，并稱其為[[本質複雜度|本質複雜度]]<ref name="McCabe">The original paper is {{cite journal |author=Thomas J. McCabe |date=December 1976 |journal=IEEE Transactions on Software Engineering |pages=315–318 |title=A Complexity Measure |url=http://books.google.com/books?id=vtNWAAAAMAAJ&pg=PA3 }} For a secondary exposition see {{cite book|author=Paul C. Jorgensen|title=Software Testing: A Craftsman's Approach, Second Edition|url=http://books.google.com/books?id=Yph_AwAAQBAJ&pg=PA150|year=2002|publisher=CRC Press|isbn=978-0-8493-0809-3|pages=150–153|edition=2nd|access-date=2015-06-01|archive-date=2015-04-28|archive-url=https://web.archive.org/web/20150428205634/http://books.google.com/books?id=Yph_AwAAQBAJ&pg=PA150|dead-url=no}}</ref>。
<!--
McCabe's characterization of the [[forbidden_graph|forbidden graph]]s for structured programming can be considered incomplete, at least if the Dijkstra's D structures are considered the building blocks.<ref>{{cite journal|title=Flowchart Schemata and the Problem of Nomenclature|journal=The Computer Journal|url=https://academic.oup.com/comjnl/article/26/3/270/464433|date=1983-01-01|volume=26|issue=3|doi=10.1093/comjnl/26.3.270|pages=270–276|issn=0010-4620|language=en|accessdate=2018-04-02|author=M. H. Williams}}</ref>{{rp|274-275}}{{clarify|date=July 2014}}-->

到1990年為止，學者們提出許多消除既有程式中跳转指令，但又維持大部份控制架構的方式，也提出許多標示程式等價的方式，這些方式比简单的圖靈等價要嚴格，以免造成類似上述大眾定理般的转换結果。這些等價標示的嚴格程度指定了所需控制流結構的最小集合。1998年Lyle Ramshaw在[[ACM期刊|ACM期刊]]的論文進行了相關的調查，也提出了自己的方法<ref>{{cite journal|title=Eliminating go to's while preserving program structure|date=1988-10-01|journal=Journal of the ACM (JACM)|volume=35|issue=4|doi=10.1145/48014.48021|pages=893–920|issn=0004-5411|url=http://dl.acm.org/citation.cfm?id=48014.48021|accessdate=2018-04-02|author=Lyle Ramshaw}}</ref>。Ramshaw的演算法也用在Java[[反編譯器|反編譯器]]中，因為[[Java虚拟机|Java虚拟机]]有分支指令，以位移來表示分支跳转的目標，但高级的Java語言只有多層次的<code>break</code>及<code>continue</code>指令<ref name="Nolan2004">{{cite book|author=Godfrey Nolan|title=Decompiling Java|year=2004|publisher=Apress|isbn=978-1-4302-0739-9|page=142}}</ref><ref>{{Cite web |url=https://www.usenix.org/legacy/publications/library/proceedings/coots97/full_papers/proebsting2/proebsting2.pdf |title=存档副本 |access-date=2015-06-02 |archive-date=2016-03-04 |archive-url=https://web.archive.org/web/20160304115648/https://www.usenix.org/legacy/publications/library/proceedings/coots97/full_papers/proebsting2/proebsting2.pdf |dead-url=no }}</ref><ref>{{Cite web |url=http://www.openjit.org/publications/pro1999-06/decompiler-pro-199906.pdf |title=存档副本 |access-date=2015-06-02 |archive-date=2016-03-03 |archive-url=https://web.archive.org/web/20160303222240/http://www.openjit.org/publications/pro1999-06/decompiler-pro-199906.pdf |dead-url=no }}</ref>。Ammarguellat在1992年提出一種轉換方式，回到強制單一結束點的作法<ref name="amma92">{{cite journal|journal=IEEE Transactions on Software Engineering|title=A control-flow normalization algorithm and its complexity|date=March 1992|volume=18|issue=3|pages=237–251|doi=10.1109/32.126773|issn=0098-5589|url=http://ieeexplore.ieee.org:80/document/126773/?reload=true|accessdate=2018-04-02|author=Z. Ammarguellat}}</ref>。

==在Cobol上的應用==
{{Refimprove section}}
1980年代[[IBM|IBM]]研究員{{link-en|哈倫·米爾斯|Harlan Mills}}管理COBOL構建設備（COBOL Structuring Facility）的開發时，将程式的結構化演算法应用到[[COBOL|COBOL]]语言中。<ref>{{Cite web |url=http://trace.tennessee.edu/cgi/viewcontent.cgi?article=1033&context=utk_harlan |title=存档副本 |access-date=2015-06-04 |archive-date=2020-07-10 |archive-url=https://web.archive.org/web/20200710035513/https://trace.tennessee.edu/cgi/viewcontent.cgi?article=1033&context=utk_harlan |dead-url=no }}</ref>。米爾斯的轉換方式包括以下的步驟。

#找出程序中的[[基礎方塊|基礎方塊]]。
#將每一個方塊的起始點指定不重覆的編號，將每個方塊的結束點用所連接方塊起始點的編號來標示，程式結束點編號指定為0，程式起始點編號指定為1。
#將程序分割為基礎方塊。
#若某方塊的起始點只對應一個方塊的結束點，將二個方塊合併。
#定義程序中的一個新的变量，假設為L。
#針對其他沒有合併的結束點，增加一行指令，將L設定為該結束點的編號。
#將所有基礎方塊合并成一個选择执行指令，依L的數值執行對應的程式。
#建立一個迴圈，若L不為0，繼續執行迴圈。
#建立程序，一開始將L設為1，並開始迴圈。

注：將一些選擇分支轉變為子程序可以改进所得結果。

==相關條目==
*[[結構化程式設計|結構化程式設計]]
*[[图灵完全|图灵完全]]

==參考資料==
{{reflist}}
 

[[Category:編程典範|Category:編程典範]]
[[Category:数学定理|Category:数学定理]]