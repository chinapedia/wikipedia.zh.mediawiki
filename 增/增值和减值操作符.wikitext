在多数[[指令式编程|指令式编程]]语言中，'''增值和减值操作符'''指的是一类[[单目操作符|单目操作符]]，这些操作符相应地增加或减少其[[操作数|操作数]]的值。以[[C语言|C语言]]为例，“++”“--”操作符分别为增值操作符和减值操作符。

==对操作数的限制(C语言)==

增值和减值操作符的操作数可以为[[整型|整型]]、[[字符|字符]]或者[[指针|指针]]等，准确地说，这些操作符只要求其操作数必须为一个[[左值|左值]]，也就是要求操作数必须为一个可以用在赋值符号“=”左边的表达式。

==用法(C语言)==

*前缀形式的++和--操作符。前缀形式的++和--操作符出现在操作数的前面，应用了这种形式后，操作数本身会相应的增加或减少。同时，[[表达式|表达式]]的值为操作数增加或减少后的值。用法如下所示：

  <syntaxhighlight lang="c">
  int i = 1;      //运行完这条语句，i被赋值为1
  int j = ++i;    //运行完这条语句，i的值增了1变为2，而j的值为“++i”这个表达式的值为2
  --j;            //运行完这条语句，j的值减了1变为1，表达式“--j”的值为1但被抛弃
  </syntaxhighlight>

*后缀形式的++和--操作符。后缀形式的++和--操作符出现在操作数的后面，应用了这种形式后，操作数本身会相应的增加或减少。同时，表达式的值为操作数增加或减少前的值。用法如下所示：

  <syntaxhighlight lang="c">
  int i = 5;      //运行完这条语句，i被赋值为5
  int j = i++;    //运行完这条语句，i的值增了1变为6，而j的值为“i++”这个表达式的值为5
  j--;            //运行完这条语句，j的值减了1变为4，表达式“j--”的值为5但被抛弃
  </syntaxhighlight>

==原理(C语言)==

对一个操作数应用增值或减值操作符，抽象来说将会创建一份操作数的拷贝，而创建拷贝的时间则根据操作符是前缀形式还是后缀形式来决定。所以使用这种操作符的表达式，实际用到的正是这份拷贝而不是操作数本身。所以编译器并不允许如i++ = 2;这样的语句出现。

==一些实际应用(C语言)==

*在计数功能上，使用增值和减值操作符可以让表达式比普通的赋值语句看起来更加简洁。

  <syntaxhighlight lang="c">
  for( int i=0; i<5; i++ ){ 一些代码; }    //应用于循环的计数
  </syntaxhighlight>

*增值和减值操作符可以用在指针的移动上以提高程序效率。
  <syntaxhighlight lang="c">
  //dst和src为大小相同的整型数组，以下程序实现了把src数组内容复制到dst数组的功能
  //用增值减值操作符读取数据比用数组下标读取数据效率要高得多
  register int *p1, *p2;
  for( p1=src,p2=dst; p1<&src[SIZE]; )
  {
      *p2++ = *p1++;
  }
  </syntaxhighlight>

==作为C++运算符==
[[C++语言|C++语言]]支持[[运算符重载|运算符重载]]。因此需要区分重载的是前增/减运算符还是后增/减运算符。

重载前置的++、-- 运算符时，函数无形参：
<syntaxhighlight lang="cpp">
TestClass& operator++();
TestClass& operator--();
</syntaxhighlight> 

重载后置的++、--运算符时，函数中需要一个int形参（即哑元，an additional dummy int argument）：
<syntaxhighlight lang="cpp">
TestClass& operator++(int);
TestClass& operator--(int); 
</syntaxhighlight> 
==参考书目==
* {{Cite book | author = [美]Brian W.Kernighan,Dennis M.Ritchie | title = C程序设计语言（第2版·新版）  | location = 机械工业出版社 | language= 中文 }}


[[Category:计算机科学|Category:计算机科学]]
[[Category:运算符_(编程)|Category:运算符_(编程)]]