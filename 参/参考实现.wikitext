{{校对翻译|en}}
{{TARequired}}
{{NoteTA
|T=zh-cn:参考实现;zh-hant:參考實作;zh-tw:參考實作
|G1=IT
|1=zh-cn:参考实现;zh-hant:參考實作
|2=zh-cn:示例实现;zh-hant:範例實作
|3=zh-cn:模型实现;zh-hant:模型實作
}}
在[[软件开发过程|软件开发过程]]中，{{地區用詞|cn=参考实现|tw=參考實作|start=英語：Reference implenmentation}}是实现对应规范中所有要求的一种[[计算机程序|计算机程序]]，也偶尔被称作'''參照實裝'''、'''示例实现'''（sample implementation）或'''模型实现'''（model implementation）。参考实现通常伴随[[标准|技术标准]]，-{zh-cn:演示;zh-tw:示範}-了其他任何-{zh-cn:实现;zh-tw:實作}-应做到的被视为“正确”的行为。

== 特征和例子 ==
[[算法|算法]]的参考实现（例如[[加密|密码算法]]）通常来自[[标准化|标准化]]流程。在[[密码学|密码学]]领域，通常会将[[源代码|源代码]]作为[[公有领域软件|公有领域软件]]发布。例如[[CERN_httpd|CERN httpd]]<ref>[https://web.archive.org/web/20140817185526/http://home.web.cern.ch/topics/birth-web/licensing-web The birth of the web Licensing the web] on cern.ch (2014)</ref>、[[Serpent|Serpent]]密码、[[base64|base64]]变种<ref>[http://libb64.sourceforge.net/ libb64] {{Wayback|url=http://libb64.sourceforge.net/ |date=20210112043156 }} on sourceforge</ref>、以及[[SHA-3|SHA-3]]<ref>[https://web.archive.org/web/20170630041850/http://keccak.noekeon.org/KeccakReferenceAndOptimized-3.2.zip KeccakReferenceAndOptimized-3.2.zip] mainReference.c ''"The Keccak sponge function, designed by Guido Bertoni, Joan Daemen, Michaël Peeters and Gilles Van Assche. For more information, feedback or questions, please refer to our website: http://keccak.noekeon.org/Implementation{{dead link|date=April 2018 |bot=InternetArchiveBot |fix-attempted=yes }} by the designers, hereby denoted as "the implementer". To the extent possible under law, the implementer has waived all copyright and related or neighboring rights to the source code in this file. https://creativecommons.org/publicdomain/zero/1.0/"'' {{Wayback|url=https://creativecommons.org/publicdomain/zero/1.0/ |date=20130626000514 }}</ref>。{{tsl|en|Openwall Project|Openwall项目}}维护了一个包含多种算法的在公有领域下发布的参考实现[[源代码|源代码]]名单。<ref>[http://openwall.info/wiki/people/solar/software/public-domain-source-code Source code snippets and frameworks placed in the public domain] {{Wayback|url=http://openwall.info/wiki/people/solar/software/public-domain-source-code |date=20200925075438 }} on [[Openwall_Project|openwall.info]]</ref>

参考实现可能达到或者未达到生产级质量。例如，[[夫琅和费协会|夫琅和费协会]]对[[MP3|MP3]]标准的参考实现通常无法与其他常见的实现（如[[LAME|LAME]]）在音质测试中相媲美{{cn}}。而[[Python|Python]]编程语言的参考实现[[CPython|CPython]]则在生产中使用最为广泛<ref>{{cite web |last1=Snow |first1=Eric |title=PEP 421 -- Adding sys.implementation |url=https://www.python.org/dev/peps/pep-0421/#motivation |website=Python.org |publisher=Python Software Foundation |access-date=2017-01-06 |date=2012-01-26 |quote=For a number of years now, the distinction between Python-the-language and CPython (the reference implementation) has been growing. |archive-url=https://web.archive.org/web/20170107095832/https://www.python.org/dev/peps/pep-0421/#motivation |archive-date=2017-01-07 |url-status=yes }}</ref>。

== 测试 ==
对参考实现进行[[软件测试|软件测试]]可以提高规范的生产效率：

{{quote|参考实现通常作为最终解释一个规范的实现（此定义有些大胆，但一般如此）。在一致性测试套件的开发中，每个接口需要至少一个相对受信任的实现，以做到：(1) 发现规范中的错误和歧义，以及(2) 验证测试套件的功能正确。<ref>Dalci, Eric; Fong, Elizabeth; Goldfine, Alan (2003). ''Requirements for GSC-IS Reference Implementations''.  National Institute of Standards and Technology, Information Technology Laboratory.  [https://web.archive.org/web/20060928231404/http://xw2k.sdct.itl.nist.gov/smartcard/document/ref-imp51.pdf 
Requirements for GSC-IS Reference Implementations]</ref>}}

{{quote|参考实现的特征有：
# 与规范和测试套件一同开发；
# 验证规范是可实现的；
# 确认测试套件正常工作；
# 作为衡量其他实现的金标准；
# 当{{tsl|en|Conformance testing|一致性测试}}不充分时，有助于阐明规范的意图<ref>Curran, Patrick (2003). ''Conformance Testing: An Industry Perspective''.  Sun Microsystems.  [https://web.archive.org/web/20120303000051/http://vote.nist.gov/speeches/1%20-%20Specification%20Panel/6%20-%20Curran.pdf]</ref>}}

== 参考文献 ==
{{Reflist}}

[[Category:電腦術語|Category:電腦術語]]
[[Category:软件工程|Category:软件工程]]
[[Category:标准|Category:标准]]