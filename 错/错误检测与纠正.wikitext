{{NoteTA
|G1=Communication
|G2=IT
}}
{{not|异常处理}}
{{校对翻译}}
在[[计算机科学|计算机科学]]和[[电信|通信]]的[[信息论|信息论]]和[[编码理论|编码理论]]应用中，'''错误检测和纠正'''（{{lang-en|'''error detection and correction'''}}）或'''错误控制'''（'''error control'''）是在不可靠的通信[[信道|信道]]上可靠地传送[[數碼|数字数据]]的技术。许多通信信道会经受[[雜訊|信道噪声]]，因此可能在源至接收器的传输期间引入错误。错误检测技术能够检测这样的错误，而错误纠正能在不少情况下重建原始数据。

== 定义 ==
该术语的一般定义如下：
* '''错误检测'''是检测发射机到接收机的传输期间由噪声或其他原因所致的错误。
* '''错误纠正'''是检测错误并重建无错误的原样数据。

== 历史 ==
错误纠正编码的现代发展在1947年由[[理查德·衛斯里·漢明|理查德·衛斯里·漢明]]带来。<ref name="Thompson">{{citation|last=Thompson|first=Thomas M.|title=From Error-Correcting Codes through Sphere Packings to Simple Groups|year=1983|series=The Carus Mathematical Monographs (#21)|page=vii|publisher=The Mathematical Association of America|isbn=0-88385-023-0}}</ref>[[汉明码|汉明码]]的描述出现于[[克劳德·香农|克劳德·香农]]的《通信的数学理论》一书中<ref>{{citation|last=Shannon|first=C.E.|title=A Mathematical Theory of Communication|year=1948|journal=Bell System Tech. Journal|volume=27|location=p. 418}}</ref>，并由{{tsl|en|Marcel J. E. Golay}}迅速推广。<ref>{{citation|last=Golay|first=Marcel J. E.|title=Notes on Digital Coding|year=1949|journal=Proc.I.R.E. (I.E.E.E.)|volume=37|location=p. 657}}</ref>

== 引入 ==
实现错误检测和纠正的一般思路是添加一些[[信息冗余|信息冗余]]（例如一些额外数据）到消息，从而使接收器可以用它来检查消息的一致性，并恢复被确定为损坏的数据。错误检测和纠正的方案可以是{{tsl|en|Systematic code|系统性}}或非系统性：在系统性方案中，发射机发送原始数据，并且附加其通过一些[[确定性算法|确定性算法]]从数据位元导出的固定数量的校验位（或奇偶校验数据）。如果仅需要错误检测，则接收器可以简单对接收到的数据位应用相同的算法，并将其输出与接收到的校验位进行比较。如果值不匹配，则传输期间的某个点位发生错误。在非系统性的编码系统中，原始消息被变换与原始消息相等或更长位元的被编码消息。

良好的错误控制性能需要基于通信信道的特性来选择方案。常见的[[信道|信道模型]]包括无记忆模型，其中错误以一定概率随机发生，以及错误主要{{tsl|en|Burst error|突发错误|突发}}出现的动态模型。因此，错误检测与纠正编码通常可分为：随机错误检测/纠正与突发错误检测/纠正。一些编码是同时适用随机错误与突发错误的混合体。

如果[[信道容量|信道容量]]不能被确定，或者高度可变，错误检测方案可以与重传出错数据的系统组合。这也称之为[[ARQ|自动重传请求]]（ARQ），它在互联网中极为常用。用于替代错误控制的一种方案是[[混合式自動重送請求|混合式自動重送請求]]（HARQ），它是ARQ与错误纠正编码的组合。

== 实现 ==
错误纠正通常可以用两种方式实现：
* [[ARQ|自动重传请求]]（ARQ），有时也称后向纠错：这是一种错误控制技术，其中将错误检测方案与重传错误数据的请求组合。其中使用错误检测代码检查接收的每个数据块，如果检查失败则请求重传数据——这可以被重复进行，直至数据可通过验证。
* [[前向錯誤更正|前向錯誤更正]]（FEC）：发送者在传输前使用[[纠错码|纠错码]]（ECC）对数据进行编码。额外信息（[[信息冗余|信息冗余]]）由代码添加以供接收者用来恢复原始数据。一般来说，重建的数据被认为是“最有可能”的原始数据。
ARQ与FEC可以组合，使得不需重传就纠正微小错误，并经由重传请求校正大的错误，这被称为[[混合式自動重送請求|混合式自動重送請求]]（HARQ）。

== 错误检测方案 ==
错误检测通常使用适合的[[散列函數|散列函數]]（或[[校验和|校验和]] 算法）实现。散列算法添加定长的''标签''到消息，从而使接收者能通过计算标签并与所提供的标签比较来验证传递的消息。

散列函数存在多种多样的设计。其中一部分因其简单性或适合检测某些类型的错误（例如[[循環冗餘校驗|循環冗餘校驗]]的性能优势  为检测{{tsl|en|Burst error|突发错误}}而使用）而被广泛使用。

一个随机[[前向錯誤更正|前向錯誤更正]]  基于[[译码方法|最小距离]]编码的可以对可检测误差的数量提供严格保证，但它可能不能防御[[原像攻击|原像攻击]]。下面章节中描述的重复编码就是纠错码的一种特殊案例。虽然相当低效，但由于其简单性，重复编码适合部分纠错与检测的应用。

=== 重复编码 ===
重复编码是在信道上重复比特信息以实现无差错通信的编码方案。首先将要发送的数据流划分为比特块，然后将每个传输预定的次数。例如，要发送位元“1011”，四位元块<nowiki>{{what}}</nowiki>则再重复三次而产生“1011 1011 1011”。但是，如果此例中收到12位元信息为“1010 1011 1011”，其中第一个块不同于其他两个，则可以确定已经发生错误。

重复编码非常低效，并且如果错误在每个组的完全相同的地方发生，则很容易出现问题（例如上例中正巧错误为“1010 1010 1010”，将被检测为传输无误）。重复编码的优点是它非常简单，并实际上用于某些[[数字电台|数字电台]]的传输。<ref>{{Cite web|url=http://www.cisquet.nl/numbers.htm|title=Numbers (and other mysterious) stations|accessdate={{date|2012-03-12}}|author=Frank van Gerwen|archive-date=2017-07-12|archive-url=https://web.archive.org/web/20170712053335/http://www.cisquet.nl/numbers.htm|dead-url=no}}</ref><ref>{{Cite web|url=http://www.gizmodo.com.au/2010/08/mysterious-russian-numbers-station-changes-broadcast-after-20-years/|script-title=en:Mysterious Russian ‘Numbers Station’ Changes Broadcast After 20 Years|accessdate={{date|2012-03-12}}|author=Gary Cutlack|date=2010-08-25|publisher=''Gizmodo''|archive-date=2017-07-05|archive-url=https://web.archive.org/web/20170705131816/https://www.gizmodo.com.au/2010/08/mysterious-russian-numbers-station-changes-broadcast-after-20-years/|dead-url=no}}</ref>

=== 奇偶校验位 ===
[[奇偶校验位|奇偶校验位]]（parity bit）是一种非常简单的方案，可以用于检测任何奇数个错误的发生。但如果发生的错误数量为偶数，则奇偶效验位看上去是正确的。

对奇偶效验位的扩展和改变有[[纵向冗余校验|纵向冗余校验]]、{{tsl|en|Vertical redundancy check|垂直冗余检查}}，以及双或对角奇偶（在[[RAID-DP|RAID-DP]]中使用）。

=== 校验和 ===
消息的[[校验和|校验和]]是固定字长（例如字节值）的字节码的[[模算數|模算數]]和。和可能在传输前用[[一補數|一補數]]以检测全零消息出现的错误。

校验和方案包括[[奇偶校验位|奇偶校验位]]、[[校验码|校验码]]和[[纵向冗余校验|纵向冗余校验]]。部分校验和方案如{{tsl|en|Damm algorithm|Damm算法}}、[[Luhn算法|Luhn算法]]和{{tsl|en|Verhoeff algorithm|Verhoeff算法}}在设计上是专门用于检测人类书写或记录数字时常出现的错误。

=== 循环冗余校验（CRC） ===
[[循环冗余校验|循环冗余校验]]（CRC）是一个非安全的[[散列函數|散列函數]]，旨在检测计算机网络中数字数据的意外变化。因此，它不适合检测恶意引入的错误。

循环码有着非常适合检测{{tsl|en|Burst error|突发错误}}的有利特性。CRC尤其容易在硬件中实现，并且因此常用在数字[[计算机网络|网络]]和诸如[[硬盘|硬盘]]等存储设备中。

奇偶校验是循环冗余校验的特殊案例，其中单比特CRC由除数x + 1生成。

=== 加密散列函数 ===
[[加密散列函数|加密散列函数]]的输出也称消息摘要，它可以提供强力的[[数据完整性|数据完整性]]保证，无论数据改变是偶然（例如由于传输错误）还是被恶意引入。对数据的任何修改都可用检测散列值是否匹配判断。此外，指出某些散列值并找到产生相同散列值的另一组输入数据（原输入数据除外）一般是不可行的。如果攻击者不仅能改变消息，还可以改变散列值，那么含密钥散列或或[[訊息鑑別碼|訊息鑑別碼]]（MAC）可用于提供额外的安全性（即[[金鑰雜湊訊息鑑別碼|金鑰雜湊訊息鑑別碼]]）。在不了解密钥的情况下，攻击者不可能计算出结果正确的含密钥散列值。

=== 错误纠正码 ===
任何[[错误纠正码|错误纠正码]]都可用于错误检测。最小[[汉明距离|汉明距离]]为d的编码在码字中最多可以检测出d − 1个错误。如果对要检测的最小错误数量有严格限制，使用基于最小距离的纠错码进行错误检测则很合适。

最小汉明距离d = 2的编码是纠错码的退化情况，并可用于检测单个错误。[[奇偶校验位|奇偶校验位]]是单错误检测的一个例子。

== 错误纠正 ==

=== 自动重传请求（ARQ） ===
[[ARQ|自动重传请求]]（ARQ）是通过错误检测码、确认或否决消息，以及可靠消息数据传输的消息{{tsl|en|Timeout (computing)||超时}}来完成数据传输的一种错误控制方法。确认消息是由接收方发送，以表明其已正确接收[[帧|数据帧]]。

通常来说，当发送方没有在超时发生前（即发送数据帧之后的合理时间内）接收到确认，则它将重传该帧，直到该帧被正确接收，或者该错误反复存在而超过预定的重传次数。

ARQ协议的三种类型是{{tsl|en|Stop-and-wait ARQ|停止并等待ARQ}}、{{tsl|en|Go-Back-N ARQ|后退N帧ARQ}}和[[选择重传ARQ|选择重传ARQ]]。

如果通信信道具有变化或未知的容量，例如在互联网，则ARQ适宜使用。但是，ARQ需要一个{{tsl|en|Backward channel|反向信道}}可用，这使重传可能增加[[延迟_(工程学)|延迟]]，并且需要维护用于重传的缓冲器和计时器，这在[[拥塞控制|拥塞控制]]的情况下可对服务器和整体网络容量造成压力。<ref name="reliable-erasure-code">A. J. McAuley, ''Reliable Broadband Communication Using a Burst Erasure Correcting Code'', ACM SIGCOMM, 1990.</ref>

举例来说，ARQ在短波无线电数据链路中的应用为{{tsl|en|ARQ-E}}，结合复用为{{tsl|en|ARQ-M}}。

=== 纠错码（ECC） ===
[[前向錯誤更正|前向錯誤更正]]（ECC）或前向纠错（FEC）码是一种添加[[信息冗余|信息冗余]]数据或奇偶校验数据到消息的过程，使得即使在传输或存储中发生多个错误，接收方也可以用它恢复（不能超过编码本身的能力限制）。因为接收方不必要求发送方重传数据，在前向纠错中不需要{{tsl|en|Backchannel|反向信道}}，并因此适合诸如[[广播|广播]]等{{tsl|en|Simplex communication|单边通信}}。纠错码经常用于[[OSI模型|底层]]通信，以及用于诸如[[CD|CD]]、[[數碼多功能影音光碟|DVD]]、[[硬盘|硬盘]]和[[随机存取存储器|RAM]]等介质中的可靠存储。

纠错码经常区分为[[卷积码|卷积码]]与[[分組碼|分組碼]]：
*  卷积码是逐位元处理。它特别适合于硬件，并且{{tsl|en|Viterbi decoder|Viterbi解码器}}允许[[译码方法|译码方法]]。
* 分组码''是''以{{tsl|en|Block (telecommunications)||逐块}}为基础。分组码的早期例子有{{tsl|en|Repetition code|重复码}}、[[汉明码|汉明码]]和{{tsl|en|Multidimensional parity-check code|多维奇偶校验码}}。在它们之后是一些更有效的代码，[[里德-所罗门码|里德-所罗门码]]因为其最显着所以目前被广泛使用。[[Turbo码|Turbo码]]和[[低密度奇偶檢查碼|低密度奇偶檢查碼]]（LDPC）相对较新的方法，可以提供几乎{{tsl|en|Category:Capacity-approaching codes|最佳的效率}}。
[[有噪信道编码定理|香农定理]]是前向纠错的一个重要定理，并且描述了在具有特定错误概率或[[信噪比|信噪比]]（SNR）的信道上可进行可靠通信的[[比特率|最大信息速率]]。这个严格的上限以[[信道容量|信道容量]]表示。

所允许的实际最大码率取决于所使用的纠错码，并可能更低。这是因为香农的证明只是存在性的，并没有显示如何构建代码是为最优并具有[[时间复杂度|高效]]的编码和解码算法。

=== 混合方案 ===
[[混合式自動重送請求|混合式自動重送請求]]是ARQ与前向纠错的组合。有两种基本方法：<ref name="reliable-erasure-code" />
* 消息始终与FEC奇偶校验数据（和错误检测冗余）一起发送。接收机使用奇偶校验信息解码消息，并仅在奇偶校验数据不足以成功解码（通过失败的完整性校验来识别）时才使用ARQ请求重传。
* 消息在没有奇偶校验数据的情况下传输（仅具有错误检测信息）。如果接收方检测到错误，则其使用ARQ向发送方请求FEC信息，然后用它来重建原始消息。
后一种方法在{{tsl|en|Binary erasure channel|擦除信道}}上使用[[喷泉码|喷泉码]]时尤为有吸引力。

== 应用程序 ==
需要低延迟的应用程序（如电话通话）不能使用[[ARQ|ARQ]]；它们必须使用[[前向錯誤更正|前向錯誤更正]]（FEC）。在此类应用中，当[[ARQ|ARQ]]系统发现错误及重新请求和完成发送，重新发送的数据到达之时对于此类应用已然太迟以至没有任何作用。

发送方在发送后立即忘记信息的应用（例如大多数摄像头）不能使用[[ARQ|ARQ]]；它们必须使用[[前向錯誤更正|FEC]]，因为当发现错误时，原始数据已不再可用。（这也是为什么[[前向錯誤更正|FEC]]被用于[[RAID|RAID]]、[[分散式檔案系統|分散式檔案系統]]等数据存储系统）。

使用ARQ的应用程序必须有一个{{tsl|en|Return channel|返回信道}}；没有返回信道的应用程序不能使用ARQ。需要极低错误率的应用程序（如数字货币转移）必须使用[[ARQ|ARQ]]。可靠性和检验工程也利用了纠错码的理论。<ref>{{Cite journal|title=Self-correcting inspection procedure under inspection errors|url=http://www.eng.tau.ac.il/~bengal/SCI_paper.pdf|last=Ben-Gal I.|last2=Herer Y.|publisher=IIE Transactions on Quality and Reliability, 34(6), pp. 529-540.|year=2003|format=PDF|last3=Raz T.|journal=|author=|access-date=2017-03-16|archive-url=https://web.archive.org/web/20131013171945/http://www.eng.tau.ac.il/~bengal/SCI_paper.pdf|archive-date=2013-10-13|dead-url=yes}}</ref>

=== 互联网 ===
在典型的[[TCP/IP协议族|TCP/IP]]栈中，错误控制在多个层级施行：
* 每个[[以太网|以太网]][[帧|帧]]携带一个[[循環冗餘校驗|CRC-32]][[校验和|校验和]]。接收到校验和不正确的帧将由接收器硬件丢弃。
* [[IPv4|IPv4]]报头包含保护头内容的校验和。不正确校验和的[[網路封包|網路封包]]将在网络或接收处丢弃。
* [[IPv6|IPv6]]报头中省略了校验和，以最小化网络[[路由|路由]]的处理成本，并也假设当前的[[链路层|链路层]]技术足以提供足够的错误检测（另见RFC 3819）。
* [[用户数据报协议|UDP]]具有覆盖有效载荷和来自UDP和IP报头寻址信息的可选校验和。有不正确校验和的数据包将被[[操作系统|操作系统]][[协议栈|协议栈]]丢弃。校验和仅在IPv4下可选，因为数据链路层的校验和可能已提供了所期望的错误保护。
* [[传输控制协议|TCP]]提供用于保护有效载荷和来自TCP和IP报头寻址信息的校验和。有不正确校验和的数据包将在网络堆栈中被丢弃，并最终使用ARQ进行重传，可能显式（例如通过{{tsl|en|Triple-ack|三重ack}}）或因{{tsl|en|Timeout (computing)||超时}}而隐含。

=== 深空通信 ===
由于信号功率在星际距离上的极度稀释，以及空间探测器上有限的可用功率，纠错码的开发与深空任务的历史紧密相关。在早期任务中，发送数据未被编码，而从1968年开始，则以（子最优解码）[[卷积码|卷积码]]和{{tsl|en|Reed–Muller code|里德-穆勒码}}的形式实现数字纠错。<ref name="deep-space-codes">K. Andrews et al., ''The Development of Turbo and LDPC Codes for Deep-Space Applications'', Proceedings of the IEEE, Vol. 95, No. 11, Nov. 2007.</ref>里德-穆勒码非常适合于航天器所受噪声（大致匹配[[钟形曲线|钟形曲线]]），并在1969年至1977年期间在水手航天器上执行任务。

在自1977年开始的[[旅行者1号|旅行者1号]]和[[旅行者2号|旅行者2号]]任务中，设计包括在[[木星|木星]]和[[土星|土星]]的科学信息中提供彩色成像。<ref name="voyager">{{Cite book|title=Fundamentals of Error-Correcting Codes|last=Huffman|first=William Cary|last2=Pless|first2=Vera S.|authorlink2=Vera Pless|publisher=[[Cambridge_University_Press|Cambridge University Press]]|year=2003|isbn=978-0-521-78280-7}}</ref>这使得编码的要求增加，因此航天器得到了可以级联外部{{tsl|en|Binary Golay code|Golay (24,12,8)码}}的卷积码（最优{{tsl|en|Viterbi decoder|Viterbi解码器}}）的支持。

旅行者2号探测器也添加了一种[[里德-所罗门码|里德-所罗门码]]的支持：串联的里德-所罗门-维特比（RSV）码允许非常强效的错误纠正，并使航天器的旅程延长到[[天王星|天王星]]和[[海王星|海王星]]。两个探测器在1989年ECC系统升级后使用V2 RSV编码。

{{tsl|en|CCSDS}}目前建议至少使用性能类似于Voyager 2 RSV代码的纠错码。串联码日已失去了空间任务的青睐，并正被更强大的编码所取代，例如[[Turbo码|Turbo码]]或[[低密度奇偶檢查碼|低密度奇偶檢查碼]]。

不同种类的深空和轨道任务表明，试图找到一个“万能”的纠错系统将是一段时间以来一个持续的问题。对于接近地球的任务，[[信道|信道]][[雜訊|雜訊]]的性质与星际任务中的宇宙飞船经历并不相同。此外，随着航天器与地球距离的增加，校正噪声的问题也日益严重。

=== 卫星广播（DVB） ===
受到提供电视节目（包括提供新频道和[[高清晰度电视|高清晰度电视]]）和IP数据需求的推动，卫星{{tsl|en|Transponder|转发器}}带宽需求持续增长。转发器的可用性和带宽限制限制了这种增长，因为转发器的容量是由所选择的[[調變|調變]]模式和[[前向錯誤更正|前向錯誤更正]]（FEC）速率决定。

概述
* [[相位偏移調變|QPSK]]加上传统的里德·所罗门和维特比码已经为提供数字卫星电视使用了近20年。
* 高阶调制方案如[[8PSK|8PSK]]、[[正交幅度调制|16QAM]]和[[正交幅度调制|32QAM]]已使卫星工业将转发器效率提高了几个数量级。
* 这种应答器中信息速率的增加以牺牲载波功率的代码以满足现有天线的阈值要求。{{what}}
* 使用最新芯片组进行的测试表明，使用Turbo码实现的性能可能甚至低于早期设计中假定的0.8 [[分貝|dB]]。

=== 数据存储 ===
错误检测和纠正码经常被用于提供数据存储介质的可靠性。{{Fact|date=January 2012}}第一例是1951年在{{tsl|en|magnetic tape data storage|磁带数据存储}}上的“奇数轨道”。用于{{tsl|en|group code recording|分组代码记录}}磁带的“最佳矩形代码”不仅能检测，还能校正单位元错误。部分[[檔案格式|檔案格式]]，尤其是{{tsl|en|archive formats|归档格式}}，包含一个校验和（通常以[[循環冗餘校驗|CRC32]]提供）以检测损坏与截断，并可以采用冗余和/或{{tsl|en|Parity file|奇偶效验文件}}来恢复损坏部分的数据。{{tsl|en|Cross-interleaved Reed–Solomon coding||里德-所罗门码}}就被用于[[CD|光盘]]中，以纠正由划痕引起的错误。

现代的硬盘驱动器使用CRC代码来检测和里德-所罗门码校正扇区读取中的较小错误，以及从“损坏”的扇区恢复数据并将该数据存储在备用扇区中。<ref>[https://web.archive.org/web/20080202143103/http://www.myharddrivedied.com/presentations_whitepaper.html My Hard Drive Died]. </ref>[[RAID|RAID]]系统使用各种纠错技术来纠正硬盘驱动器出现完全故障时导致的错误。诸如[[ZFS|ZFS]]或[[Btrfs|Btrfs]]等文件系统以及部分[[RAID|RAID]]实现支持{{tsl|en|data scrubbing|数据擦洗}}和弹性，这允许在使用之前检测并希望恢复坏块。恢复的数据可能被重写到完全相同的物理位置，以备在同一硬件上的另一处坏块，或者替换硬件。

=== 错误纠正内存 ===
[[动态随机存取存储器|动态随机存取存储器]]（DRAM）内存可以采用纠错码提供对[[軟性錯誤|軟性錯誤]]的增强保护。诸如[[纠错内存|纠错内存]]（也称'''ECC'''或''''EDAC保护'''内存）就是一种面向高容错应用提供的内存，它适合服务器以及要经受[[宇宙線|宇宙線]]增加考验的深空应用。

错误纠正存储器的控制器通常使用[[汉明码|汉明码]]，也有些使用[[三重冗余模块|三重冗余模块]]。

[[前向錯誤更正|交织]]允许通过将相邻位与不同的字相关联来分散单个宇宙射线对多个物理相邻位的潜在破坏。只要一次[[单粒子翻转|单粒子翻转]]在特定期间内不超过错误阈值（例如：单比特错误），它就可以被纠正（例如通过单比特纠错码），并使存储系统维持在无错误的状态。<ref>{{Cite web|url=http://www.apmcsta.org/File/doc/Conferences/6th%20meeting/Chen%20Zhenyu.doc|title=Using StrongArm SA-1110 in the On-Board Computer of Nanosatellite|accessdate=2009-02-16|publisher=北京清华大学清华空间中心|deadurl=yes|archiveurl=https://web.archive.org/web/20111002152735/http://www.apmcsta.org/File/doc/Conferences/6th%20meeting/Chen%20Zhenyu.doc|archivedate=2011-10-02}}</ref>

除了通过ECC内存硬件提供此项特性外，[[操作系统|操作系统]]通常也包含相关的报告措施，用以在软错误被透明恢复时提供通知。软错误的增加率可能预示着[[DIMM|DIMM]]模块需要被更换，但在没有相关手段的情况下，此类报告信息不容易取得。例如，[[Linux内核|Linux内核]]的EDAC子系统（以前称为bluesmoke）会在启用错误检查的计算机系统内部收集数据；除了收集和报告与ECC内存相关的事件外，它还支持其他校验和错误，包括在[[外设组件互连标准|PCI总线]]上检测到的错误。<ref>{{Cite web|url=http://www.admin-magazine.com/Articles/Monitoring-Memory-Errors|title=Error Detection and Correction|accessdate=2014-08-12|author=Jeff Layton|publisher=''{{tsl|en|Linux Magazine}}''}}</ref><ref>{{Cite web|url=http://bluesmoke.sourceforge.net/|title=EDAC Project|accessdate=2014-08-12|archive-date=2014-09-25|archive-url=https://web.archive.org/web/20140925053311/http://bluesmoke.sourceforge.net/|dead-url=no}}</ref><ref>{{Cite web|url=https://www.kernel.org/doc/Documentation/edac.txt|title=Documentation/edac.txt|accessdate=2014-08-12|date=2014-06-16|work=Linux kernel documentation|publisher=[[kernel.org|kernel.org]]|deadurl=yes|archiveurl=https://web.archive.org/web/20090905174616/http://www.kernel.org/doc/Documentation/edac.txt|archivedate=2009-09-05}}</ref>

有几个系统也支持[[内存刷洗|内存刷洗]]。

== 参见 ==
* {{tsl|en|Berger code|伯格码}}
* {{tsl|en|Burst error-correcting code|突发错误纠正码}}
* [[前向錯誤更正|前向錯誤更正]]
* [[自適應調變和編碼|自適應調變和編碼]]
* {{tsl|en|List of algorithms#Error detection and correction|错误检测与纠正算法列表}}
* [[前向錯誤更正|前向錯誤更正]]
* {{tsl|en|List of hash functions|散列函数列表}}
* [[可靠性_(计算机网络)|可靠性 (计算机网络)]]

== 参考资料 ==
{{Reflist|30em}}

== 拓展阅读 ==
* {{Cite book|title=Error Control Coding: Fundamentals and Applications|last=Shu Lin|last2=Daniel J. Costello, Jr.|publisher=[[Prentice_Hall|Prentice Hall]]|year=1983|isbn=0-13-283796-X}}

== 外部链接 ==
* [http://www.inference.phy.cam.ac.uk/mackay/itila/ The on-line textbook: Information Theory, Inference, and Learning Algorithms] {{Wayback|url=http://www.inference.phy.cam.ac.uk/mackay/itila/ |date=20150206001819 }}，作者[[戴维·J·C·麦凯|戴维·J·C·麦凯]]。章节包括有关基本纠错码，关于误差校正的理论极限，以及最新、最前沿的错误纠正码，例如[[低密度奇偶檢查碼|低密度奇偶檢查碼]]、{{tsl|en|Turbo code|turbo codes}}和[[喷泉码|喷泉码]]。
* [http://ipsit.bu.edu/comp.html Compute parameters of linear codes] {{Wayback|url=http://ipsit.bu.edu/comp.html |date=20150211084953 }} – 用于生成和计算参数的在线接口（例如{{tsl|en|Linear code|线性误差校正码}}的[[译码方法|最小距离]]、{{tsl|en|covering radius|覆盖半径}}）。
* [http://www.eccpage.com/ ECC Page] {{WebCite|url=https://www.webcitation.org/65iNlmFK2?url=http://www.eccpage.com/ |date=20120225113453 |dateformat=iso }}
* [http://pdos.csail.mit.edu/papers/softecc:ddopson-meng/softecc_ddopson-meng.pdf SoftECC: A System for Software Memory Integrity Checking] {{Wayback|url=http://pdos.csail.mit.edu/papers/softecc:ddopson-meng/softecc_ddopson-meng.pdf |date=20160513025827 }}
* [http://www.fiala.me/pubs/papers/libsdc11.pdf A Tunable, Software-based DRAM Error Detection and Correction Library for HPC] {{Wayback|url=http://www.fiala.me/pubs/papers/libsdc11.pdf |date=20141107074502 }}
* [http://www.fiala.me/pubs/papers/sc12-redmpi.pdf Detection and Correction of Silent Data Corruption for Large-Scale High-Performance Computing] {{Wayback|url=http://www.fiala.me/pubs/papers/sc12-redmpi.pdf |date=20141107074511 }}

[[Category:计算机错误|Category:计算机错误]]
[[Category:错误检测与校正|Category:错误检测与校正]]