'''黃鼠狼程式'''(Weasel program)，或說'''道金斯的黃鼠狼'''(Dawkins<nowiki>'</nowiki> weasel，或者the Dawkins weasel)，是一個思想實驗，並且有許多[[計算機模擬|計算機模擬]]可以解釋。 這個實驗的重點是澄清一個演化系統 — 隨機的[[突變|突變]]混合上一些非隨機的[[天擇|天擇]] — 與純粹的隨機[[機率|機率]]是不同的。

這個思想實驗是由[[理查德·道金斯|理查德·道金斯]]提出，並且也是由他寫出第一個模擬。各種其他的程式模擬則是由其他人寫出。

== 概觀 ==
在道金斯的著作''[[The_Blind_Watchmaker|The Blind Watchmaker]]''裡面第三章，他介紹了以下程式, 並且提到了著名的[[無限猴子定理|無限猴子定理]]：

{{quote|I don't know who it was first pointed out that, given enough time, a [[monkey|monkey]] bashing away at [[Randomness|random]] on a [[typewriter|typewriter]] could produce all the works of [[Shakespeare|Shakespeare]]. The operative phrase is, of course, given enough time. Let us limit the task facing our monkey somewhat. Suppose that he has to produce, not the complete works of Shakespeare but just the short sentence 'Methinks it is like a [[weasel|weasel]]', and we shall make it relatively easy by giving him a typewriter with a restricted keyboard, one with just the 26 (capital) letters, and a space bar. How long will he take to write this one little sentence?}}

這個情境是說，對於任何一個無意義的字串，假設裡面有隨機的28個字母，那麼所有可能的組合就有27<sup>28</sup>, 或者說大約是10<sup>40</sup>，所以一隻猴子產生出正確答案的[[機率|機率]]是非常非常小的。這裡無論哪種特定順序，且是28個字母的字串作為答案時，其正確的機率都跟道金斯選擇的目標"METHINKS IT IS LIKE A WEASEL"一樣的小。

我們可以使用藉由一個高速產生字母和空白組合的[[電腦程式|電腦程式]]，來模擬道金斯[[假說|假說]]中的猴子。但是即使我們以每秒鐘幾百萬個組合的速率，並且給予[[宇宙的年齡|宇宙的年齡]]這麼長的時間去嘗試，我們還是幾乎不可能正確的產生"METHINKS IT IS LIKE A WEASEL"這個目標字串。<ref>對有28個字母的字串，每個字母分別有27種可能性(A-Z和空白)，要產生正確的特定字串其機率是1/27^28；這個數字大約是1/10^40。宇宙的年紀大約是140億年，也就是4.415 x 10^17秒，假設一個程式從宇宙創生開始運作，每秒產生一千萬個字串，那麼到現在也只不過嘗試了4.415 x 10^24個字串，正確的機率僅為4.415 x 10^-16</ref>

道金斯想藉由這個範例來解釋對[[演化|演化]]一個常見的誤解，這個誤解是，演化認為像是[[DNA|DNA]]或者像[[蛋白質|蛋白質]]這類[[有機物|有機物]]，這些東西是大自然中由原子隨機組成這麼複雜的形式。根據這些計算顯示，要隨機排列出任何蛋白質的[[胺基酸|胺基酸]]序列都是極度不可能的。

道爾金之後證明了有''累積''效應的天擇會大量減少到給定目標所需的步驟。根據道爾金的說法：

{{quote|We again use our computer monkey, but with a crucial difference in its program. It again begins by choosing a random sequence of 28 letters, just as before ... it duplicates it repeatedly, but with a certain chance of random [[error|error]] – 'mutation' – in the copying. The computer examines the [[mutant|mutant]] nonsense phrases, the 'progeny' of the original phrase, and chooses the one which,'' however slightly, ''most resembles the target phrase, METHINKS IT IS LIKE A WEASEL.}}

<!--
By repeating the procedure, a randomly generated sequence of 28 letters and spaces will be gradually changed each [[generation|generation]]. The sequences progress through each generation:

:Generation 01:<tt>   WDLTMNLT DTJBKWIRZREZLMQCO P</tt> <ref>Note: the 4th character of line 1 is missing in Dawkins' text; however line 2 suggests it was probably a T</ref>
:Generation 02:<tt>   WDLTMNLT DTJBSWIRZREZLMQCO P</tt>
:Generation 10:<tt>   MDLDMNLS ITJISWHRZREZ MECS P</tt>
:Generation 20:<tt>   MELDINLS IT ISWPRKE Z WECSEL</tt>
:Generation 30:<tt>   METHINGS IT ISWLIKE B WECSEL</tt>
:Generation 40:<tt>   METHINKS IT IS LIKE I WEASEL</tt>
:Generation 43:<tt>   METHINKS IT IS LIKE A WEASEL</tt>

Dawkins continues:

{{quote|The exact time taken by the computer to reach the target doesn't matter. If you want to know, it completed the whole exercise for me, the first time, while I was out to lunch. It took about half an hour. (Computer enthusiasts may think this unduly slow. The reason is that the program was written in [[BASIC_programming_language|BASIC]], a sort of computer baby-talk. When I rewrote it in [[Pascal_programming_language|Pascal]], it took 11 seconds.) Computers are a bit faster at this kind of thing than monkeys, but the difference really isn't significant. What matters is the difference between the time taken by'' cumulative ''selection, and the time which the same computer, working flat out at the same rate, would take to reach the target phrase if it were forced to use the other procedure of'' single-step selection: ''about a million million million million million years. This is more than a million million million times as long as the universe has so far existed.}}-->

==批評==
一個常見的批評是這類程式必須要倚賴"鎖住"已知正確的字母才能運作。 創造論者宣稱"一旦字母落入屬於它的位置，道爾金的程式就確認這字母不會因突變而被改掉。",<ref name="cm">http://creation.com/weasel-words-creation-magazine-critique-of-dawkins</ref>但是，如下面的範例所表示的，這個限制其實並不存在。
== 演算法範例 ==

雖然道金斯本人沒有提供他的程式碼，但是一個"黃鼠狼"式的演算法可以操作如下：

# 從一條具有28個字母的隨機字串開始
# 複製100個相同的字串，然後每個字母有5%的機率會換成另一個隨機的字母
# 將每個字串與目標 "METHINKS IT IS LIKE A WEASEL"作比較，給每個字串進行評分(正確的字母出現在正確的位置上此字串得一分)。
# 如果任何字串達到28分，也就是滿足條件時，程式停止
# 否則，取用分數最高的字串，然後回到步驟2

在這裡，一個"字母"指的是大寫的字母或空白。 在道金斯的書裡面沒有明確指出字串的複製數目跟突變機率，這裡的100個複製跟5%的突變機率只是個範例。另外值得注意的是，正確的字母並沒有被"鎖住"：也就是說，即使一個字母已經出現在正確的位置，還是有可能在下一代突變的時候被改掉。
== 相關條目 ==
* [[遺傳演算法|遺傳演算法]]
* [[垃圾場龍捲風|垃圾場龍捲風]]
* [[無限猴子定理|無限猴子定理]]

== 參考資料 ==
*Dawkins, R. (1986) ''[[The_Blind_Watchmaker|The Blind Watchmaker]]'' Oxford University Press.
{{Reflist}}

== 外部連結 ==
* [http://rosettacode.org/wiki/Evolutionary_algorithm Many examples of Weasel programs in various computer languages]
* [http://www.panspermia.org/computrs.htm Computer Models of Evolution]
* [https://web.archive.org/web/20080514161817/http://home.pacbell.net/s-max/scott/weasel.html The Weasel Applet (the "weasel program" written in Java)]
* [https://web.archive.org/web/20080719075206/http://vlab.infotech.monash.edu.au/simulations/evolution/richard-dawkin-weasel/ Dawkin's Weasel demo applet] (in Monash University's Virtual Lab)
* [https://web.archive.org/web/20110410035619/http://health.adelaide.edu.au/Pharm/Musgrave/essays/whale.htm ''Almost Like a Whale,'' by Ian Musgrave]
* [http://www.talkorigins.org/indexcc/CF/CF011_1.html Talk.origins claim CF011_1 Dawkins' WEASEL simulation]
* [https://web.archive.org/web/20100920115828/http://damian.peterson.net.nz/2009/05/03/methinks-it-is-like-a-weasel/ A simpler, open source, web-based version]

[[Category:理查德·道金斯|Category:理查德·道金斯]]
[[category:人工生命|category:人工生命]]
[[category:遺傳演算法|category:遺傳演算法]]
[[category:模擬軟體|category:模擬軟體]]