{{Unreferenced |time=2010-04-07T04:06:03+00:00 }}
{{Expand |time=2010-05-08T06:39:09+00:00 }}
'''服务器开发'''，特指[[软件开发|软件开发]]领域中的后台服务器开发，也指[[C/S|C/S]]模式中server端的开发。<br>

==分层结构==
* 业务层： 业务层指与上层应用相关的业务，也就是常说的任务task.
* 网络层: 负责数据包接收发送的问题

===网络层的设计层面===
网络层设计主要考虑三个方面，一是连接方式，是使用[[传输控制协议|TCP]]还是[[用户数据报协议|UDP]]；二是多路利用，选择合适的网络IO机制，如[[select|select]],[[epoll|epoll]]等。
三是协议解析，协议的消息传递其实与网络层无关，只是数据打包，解包的过程，但通常也归纳在这。这是为了突出业务的重要性。

==质量属性==
*[[服务器|服务器]]开发：[[可扩展性|可扩展性]]等。
*[[服务器|服务器]]运行：要满足更严格的质量属性要求，如[[可用性|可用性]]，[[容错性|鲁棒性]]，[[高性能|高性能]]，[[可配置性|可配置性]]等。

==常用技术==
* [[线程|线程]]：线程封装，使用[[线程池|线程池]]
* [[网络IO策略|网络IO策略]]： 如select, epoll, pull, [[BSD|BSD]]下的[[kqueue|kqueue]], [[solaris|solaris]]下的[[服务器开发/dev/null|服务器开发//dev/null]], [[windows|windows]]下的[[完成端口|完成端口]]等，合适的IO策略对性能有较大的影响。
* [[消息队列|消息队列]]：常使用消息队列来延迟数据处理，如数据包接收的存储，请求任务的存储。
*[[状态机|状态机]]：服务器的状态要经常监控。
* [[内存池|内存池]]: 内存池的设计是为了循环使用[[内存|内存]]资源，可根据不同[[场景|场景]]设计不同的内存池模型。
* 其它： 如[[日志|日志]]， [[XML|XML]]处理，[[数据库|数据库]]操作等。

[[Category:伺服器|Category:伺服器]]
[[Category:软件开发|Category:软件开发]]