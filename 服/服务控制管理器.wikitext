{{NoteTA|G1=IT|G2=Windows}}
{{校对翻译}}
'''服务控制管理器'''（Service Control Manager，简称SCM）是[[Windows_NT|Windows NT]][[操作系统|操作系统]]中的特殊系统[[进程|进程]]，其控制[[Windows服务|Windows服务]]进程的启动、停止和交互。<ref>{{Harvcoltxt|Russinovich|Solomon|Ionescu|2009|p=79}}{{Citation broken|date=April 2011}}</ref>它的可执行文件位于 <code>%SystemRoot%\System32\services.exe</code>。服务进程与SCM的交互通过已定义的[[API|API]]完成，同一API也被交互式Windows服务管理工具使用，例如[[Microsoft_Management_Console|MMC]]扩展<code>Services.msc</code>和[[命令行|命令行]]的服务控制实用工具<code>sc.exe</code>。

==实现==
<!-- 
SCM的程序文件<code>Services.exe</code>运行为Windows控制台程序，被[[Wininit|Wininit]]进程在系统启动的早期阶段启动。<ref>{{Harvcoltxt|Russinovich|Solomon|Ionescu|2009|p=291}}</ref>它的主要函数 <code>SvcCtrlMain()</code> 会启动所有配置为自动启动的服务。First an internal database of installed services is initialized by reading the following two registry keys:
* <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ServiceGroupOrder\List</code>，包含名称和服务组顺序。每个服务的注册表键值有可选的 <code>Group</code> 值，value which governs the order of initialization of a respective service or a [[设备驱动程序|设备驱动程序]], with respect to other service groups.
* <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services</code>, which contains the actual database of services and device drivers and is read into SCM的内部数据库。<ref>{{cite web |url=http://msdn.microsoft.com/en-us/library/ms682544.aspx |title=Database of Installed Services |accessdate=2011-03-06 |work=Microsoft Developer Network}}</ref> SCM读取每个服务的<code>Group</code>值，以及加载其 <code>DependOnGroup</code> 和 <code>DependOnService</code> 注册表键的依赖项加载顺序。<ref>{{Harvcoltxt|Russinovich|Solomon|Ionescu|2009|p=292}}</ref>

接下来，SCM的主函数 <code>SvcCtrlMain()</code> calls the function <code>ScGetBootAndSystemDriverState()</code> function which checks whether the device drivers that should be started during the boot or system startup were successfully loaded, and those that have failed to do so are stored in a list called <code>ScFailedDrivers</code>. Then a [[named_pipe|named pipe]] <code>\Pipe\Ntsvcs</code> is created as a [[remote_procedure_call|remote procedure call]] interface between the SCM and the SCPs (Service Control Processes) that interact with specific services.

接下来， it calls the <code>ScAutoStartServices()</code> function which [[Control_flow#Loops|loops]] through all the services marked as auto-start, paying attention to the calculated load-order dependencies. In case of a circular dependency an error is noted and the service depending on a service that belongs to a group coming later in the load order is skipped. For delayed auto-start services, grouping has no effect, and those are loaded at a later stage of system startup.<ref>{{Harvcoltxt|Russinovich|Solomon|Ionescu|2009|p=294}}</ref>

For each service it wants to start, the SCM calls the <code>ScStartService()</code> function which checks the name of the file that runs the service's process, ensuring that the account specified for the service is same as the account that the service process runs in. Every service that does not run in the <code>System</code> account is logged in by calling the [[Local_Security_Authority_Subsystem_Service|LSASS]] function <code>[http://msdn.microsoft.com/en-us/library/aa378189(v=vs.85).aspx LogonUserEx()]</code>, for which LSASS process looks up "secret" passwords stored in the <code>HKLM\SECURITY\Policy\Secrets\</code> registry key, which were stored by the SCP using the <code>[http://msdn.microsoft.com/en-us/library/ms721818(v=vs.85).aspx LsaStorePrivateData()]</code> API, when the service was originally configured.<ref>{{Harvcoltxt|Russinovich|Solomon|Ionescu|2009|p=295}}</ref> 

接下来， the <code>ScLogonAndStartImage()</code> function is called for every service whose service process has not been already launched. Service processes are created in a [[Process_state|suspended state]] via the <code>[http://msdn.microsoft.com/en-us/library/ms682429(v=vs.85).aspx CreateProcessAsUser()]</code> API. Before the service process' execution is resumed, a named pipe <code>\Pipe\Net\NtControlPipeX</code> (where X is a number incremented for each service iteration) is created which serves as a communication channel between the SCM and the service process. Service process connects to the pipe by calling the <code>[http://msdn.microsoft.com/en-us/library/ms686324(VS.85).aspx StartServiceCtrlDispatcher()]</code> function, after which the SCM sends the service a "start" command.<ref>{{Harvcoltxt|Russinovich|Solomon|Ionescu|2009|p=296}}</ref>
 -->
===延迟的自动启动服务===
延迟的自动启动服务在[[Windows_Vista|Windows Vista]]中被添加，目的是解决系统启动耗时过长的问题，以及提高关键服务的启动速度。<ref>{{Harvcoltxt|Russinovich|Solomon|Ionescu|2009|p=297}}</ref>在设计之初，自动启动的服务初始化方法是为其他应用程序和服务依赖的基本系统服务所涉及。SCM仅在处理所有非延迟的自动启动服务后初始化延迟服务（调用 <code>ScInitDelayStart()</code> 函数）。此函数用工作线程延迟并排队工作项（默认120秒）。除在延迟之后初始化，延迟与非延迟的自动启动服务没有其他区别。

===设备驱动程序===
注册表值<code>Type</code>（类型）为<code>SERVICE_KERNEL_DRIVER</code>或<code>SERVICE_FILE_SYSTEM_DRIVER</code>的服务会被特殊处理：这代表其为设备驱动程序，<code>ScStartService()</code> 会调用 <code>ScLoadDeviceDriver()</code> 函数来加载相应的驱动程序（通常是扩展名为 <code>.sys</code> 的文件，大多位于 <code>%SystemRoot%\System32\Drivers\</code> 目录）。为了此目的，<code>[http://msdn.microsoft.com/en-us/library/ff556539(VS.85).aspx NtLoadDriver]</code>[[系统调用|系统调用]]已被引用，<code>SeLoadDriverPrivilege</code>也已添加到SCM进程。

===网络驱动器===
SCM还提供了一个与Windows服务无关的额外功能：它会在一个网络驱动器连接被创建或删除时通知[[图形用户界面|图形用户界面]]应用程序（例如[[Windows_Explorer|Windows Explorer]]），通过广播[[窗口消息|窗口消息]] <code>WM_DEVICECHANGE</code>。

==参见==
* [[Windows服务|Windows服务]]
* [[svchost.exe|svchost.exe]]

==注释==
{{reflist}}

==参考资料==
* {{citation |title=Windows® Internals| edition=5th |first1=Mark |last1=Russinovich |author1-link=Mark Russinovich |first2=David |last2=Solomon |first3=Alex |last3=Ionescu |year=2009 |publisher=[[Microsoft_Press|Microsoft Press]] |isbn=0-7356-2530-1}}

{{Windows Components}}

[[Category:Windows服务|Category:Windows服务]]
[[Category:Windows组件|Category:Windows组件]]