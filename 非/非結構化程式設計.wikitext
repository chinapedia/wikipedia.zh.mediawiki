{{编程范式}}
'''非结构化程序设计'''是历史上最早的能够创造图灵完备算法的程序设计模式。在它之后，历史上又出现了结构化（过程化）程序设计、[[面向对象程序设计|面向对象程序设计]]。

非结构化程序设计被批评最严重的方面就是会产生很难读懂的代码（戏称[[面条式代码|面条式代码]]），在创建大型工程方面有时会被认为是很差的，不过，因为赋予程序设计者很大的自由，被人称赞为如同[[莫扎特|莫扎特]]在谱曲。<ref>[http://eric.ed.gov/ERICWebPortal/custom/portlets/recordDetails/detailmini.jsp?_nfpb=true&_&ERICExtSearch_SearchValue_0=ED280737&ERICExtSearch_SearchType_0=no&accno=ED280737 William W. Cobern. A positive albeit ambiguous case for BASIC programming in secondary science teaching.]</ref>.

非结构化程序设计语言既有高階语言，也有低階语言。一些语言通常被印证为非结构化语言，包括[[JOSS|JOSS]]、[[FOCAL_(编程语言)|FOCAL]]、[[TELCOMP|TELCOMP]]、[[汇编语言|汇编语言]]、[[MS-DOS|MS-DOS]][[批处理|批处理]]和早期版本的[[BASIC|BASIC]]、[[Fortran|Fortran]]、[[COBOL|COBOL]]和[[MUMPS|MUMPS]]。

== 特点和典型概念 ==
=== 基本概念 ===
一个使用非结构化语言的程序经常包含按顺序排列的命令或声明，通常每个都占用一行。每一行都有[[行號_(程式語言)|编号]]或者[[標記_(程式語言)|标签]]，这样程序中的任意行都可以被执行。

非结构化程序设计引入了基本[[控制流|控制流]]的概念，比如循环、分支和跳转。尽管在非结构化模式中不存在过程，不过子程序还是可以使用的。和过程不同，子程序可能有多个入口和出口。子程序中是允许直接跳转入或跳转出的。这种灵活性可以实现[[协同程序|协同程序]]，而这在过程化程序设计中是相当困难以至于不可能的。

非结构化程序设计中是没有本地变量的概念的，不过标签和变量可以在有限的区域中起作用，比如，线组。这意味着在调用子程序时不需要上下文刷新，而所有的变量保持它们之前被调用后的值。这样，实现[[递归_(计算机科学)|递归]]就很困难了。而嵌套的深度被限制在1或2级。

=== 数据类型 ===
非结构化语言只允许基本的数据类型，比如数字、字符串和数组（编号的同类型的变量集合）。尽管非结构化数据类型是被允许使用的，但是在将流数据处理前要注意先对数组定义进行声明。

== 参考 ==
<references />

== 其他来源 ==

* [http://portal.acm.org/citation.cfm?id=800283.811114 非结构化程序设计语言的结构测量]

[[分類:編程典範|分類:編程典範]]