{{refimprove|time=2017-02-10T20:34:28+00:00}}
{{noteTA
|T=zh-cn:编程语言; zh-tw:程式語言;
|1=zh-cn:编程语言; zh-hk:編程語言;zh-tw:程式設計語言;
|2=zh-cn:程序设计语言; zh-tw:程式設計語言;
|3=zh-cn:编程语言; zh-tw:程式語言;
|4=zh-cn:解释器; zh-tw:直譯器;
|5=zh-cn:解释; zh-tw:直譯;
|6=zh-cn:编程; zh-tw:程式設計;

|skin=黑白分明
|G1=IT
}}
{{各地中文名
|cn=程序设计语言、编程语言
|tw=程式設計語言、程式語言
|hk=程式設計語言、程式語言
}}
[[File:HelloWorld.svg|thumb]]。]]

'''编程语言'''（{{lang-en|programming language}}），是用来定义[[计算机程序|计算机程序]]的[[形式語言|形式語言]]。它是一种被[[标准化|标准化]]的交流技巧，用来向[[计算机|计算机]]发出指令，一种能够让[[程序员|程序员]]准确地定义计算机所需要使用数据的计算机语言，并精确地定义在不同情况下所应当采取的行动。

最早的编程语言是在[[計算機硬體歷史|電腦發明]]之前產生的，當時是用來控制{{link-en|提花織布機|Jacquard loom}}及[[自動演奏鋼琴|自動演奏鋼琴]]的動作<ref>Ettinger, James (2004) ''Jacquard's Web'', Oxford University Press</ref>。在電腦領域已發明了上千不同的编程語言，而且每年仍有新的编程語言誕生。很多编程語言需要用[[指令式編程|指令]]方式說明計算的程序，而有些编程語言則屬於{{link-en|宣告式程式設計|Declarative programming}}，說明需要的結果，而不說明如何計算。

编程语言的描述一般可以分為{{link-en|語法 (程式語言)|Syntax (programming languages)|語法}}及[[語義|語義]]。語法是說明編程語言中，哪些符號或文字的組合方式是正確的，語義則是對於編程的解釋<ref>{{cite web|url=http://www2.nuu.edu.tw/~elearning/nuuopencourse/93open/93004/html/ch7/7-1.htm|title=語言系統簡介|publisher=.nuu.edu.tw|date=|accessdate=2014-06-05|deadurl=yes|archiveurl=https://web.archive.org/web/20140528050500/http://www2.nuu.edu.tw/~elearning/nuuopencourse/93open/93004/html/ch7/7-1.htm|archivedate=2014-05-28}}</ref>。有些語言是用規格文件定義，例如[[C語言|C語言]]的規格文件也是[[ISO|ISO]]標準中一部份，2011年後的版本為ISO/IEC 9899:2017，而其他語言（例如[[Ada|Ada或者]][[Perl|Perl]]）有一份{{link-en|编程语言实现|Programming language implementation}}文件，视为{{link-en|參考實現|reference implementation}}。

== 概論 ==
编程语言原本设计是专用于计算机，也用来定义[[算法|算法]]或者[[数据结构|数据结构]]。故而程序员试图使程序代码[[程式可讀性|容易阅读]]。
[[File:BBC_micro_assembly_listing.jpg|缩略图]]
编程语言往往使程序员能够比使用机器语言更准确地表达他们所想表达的目的。对那些从事[[计算机科学|计算机科学]]的人来说，懂得程序设计语言是十分重要的，因为在当今所有的计算都需要程序设计语言才能完成。

之所以有那么多种不同的编程语言存在的原因是，编写程序的初衷其实也各不相同；新手与老手之间技术的差距非常小，而且有许多语言对新手来说太容易学；还有，不同程序之间的运行成本（{{lang|en|runtime cost}}）各不相同。

有许多用于特殊用途的语言，只在特殊情况下使用。例如，[[PHP|PHP]]专门用来显示[[网页|网页]]；[[Perl|Perl]]适合文本处理；[[C编程语言|C语言]]被广泛用于[[操作系统|操作系统]]和[[编译器|编译器]]的开发（所谓的系统编程）。<ref>MXL</ref>

[[高级语言|高级语言]]的出现使得计算机程序设计语言不再过度地依赖某种特定的机器或环境。这是因为高级语言在不同的平台上会被编译成不同的机器语言，而不是直接被机器执行。最早出现的编程语言[[FORTRAN|FORTRAN]]的一个主要目标，就是实现平台独立。

虽然大多数的语言既可被[[编译|编译]]又可被[[解译|解译]]，但大多数仅在一种情况下能够良好运行。在一些编程系统中，程序要经过几个阶段的编译，一般而言，后阶段的编译往往更接近机器语言。这种常用的使用技巧最早在1960年代末用于[[BCPL|BCPL]]，编译程序先编译一个叫做“0代码”的转换程序（{{lang|en|representation}}），然后再使用虚拟器转换到可以运行于机器上的真实代码。这种成功的技巧之后又用于[[Pascal_(编程语言)|Pascal]]和P-code，以及[[Smalltalk|Smalltalk]]和二进制码，在很多时候，中间过渡的代码往往是解译，而不是编译的。

如果所使用的翻译的机制是将所要翻译的程序代码作为一个整体翻译，并之后运行内部格式，那么这个翻译过程就被称为编译。因此，一个[[编译器|编译器]]是一个将人可阅读的程序文本（叫做[[源代码|源代码]]）作为输入的数据，然后输出可执行文件（{{lang|en|object code}}）。所输出的可执行文件可以是机器语言，由计算机的[[中央处理器|中央处理器]]直接运行，或者是某种模拟器的二进制代码。

如果程序代码是在运行时才[[解譯|即时翻译]]，那么这种翻译机制就被称作直译。经直译的程序运行速度往往比编译的程序慢，但往往更具灵活性，因为它们能够与执行环境互相作用。

== 特点 ==
每一种'''程序设计语言'''可以被看作是一套包含[[语法|语法]]、[[词汇|词汇]]和[[语义|含义]]的正式规范。

这些规范通常包括：
* [[数据|数据]]和[[数据结构|数据结构]]
* [[指令|指令]]及[[流程控制|流程控制]]
* 引用机制和重用
* 设计哲学

'''程式語言'''不成文規定：
*[[标识符|标识符]]（{{lang|en|Identifier}}）命名常規

大多数被广泛使用或经久不衰的'''程式語言'''，拥有负责[[标准化|标准化]]的组织，经常会晤来创造及发布该'''程式語言'''的正式定义，并讨论扩展或贯彻现有的定义。

=== 数据和数据结构 ===
现代计算机内部的[[数据|数据]]都只以[[二元|二元]]方式储存，即开-关模式（{{lang|en|on-off}}）。现实世界中代表信息的各种数据，例如名字、银行账号、度量以及同样低端的二元数据，都经由'''程序设计语言'''整理，成为高阶的概念。

一个[[程序|程序]]中专门处理[[数据|数据]]的那个系统被称为'''程序语言'''的[[型态系统|型态系统]]（{{lang|en|type system}}）；对型态系统的研究和设计被称为型态理论（{{lang|en|type theory}}）。语言可以被分为静态型态系统（{{lang|en|statically typed systems}}），例如[[C++|C++]]和[[Java|Java]]，和动态型态系统（{{lang|en|dynamically typed systems}}），例如[[Lisp|Lisp]]，[[JavaScript|JavaScript]]，[[Tcl|Tcl]]和[[Prolog|Prolog]]。前者可被进一步分为包含宣告型态（{{lang|en|manifest type}}）的语言，即每一个变量和函数的型态都清楚地宣告，或type-inferred语言（例如MUMPS，ML）。

大多数语言还能够在内置的型态基础上组合出复杂的数据结构型态（使用数组，列表，堆栈，文件等等）。[[面向对象程序设计|面向对象语言]]（{{lang|en|Object Oriented Language}}，又译作“物件导向语言”）允许程序员定义新的数据型态，即[[對象_(計算機科學)|对象]]（{{lang|en|objects}}），以及运行于该对象的[[子程序|函数]]（{{lang|en|functions}}）和[[方法_(電腦科學)|方法]]（{{lang|en|methods}}）。

除了何时以及如何确定表达式和型态的联系，另外一个重要的问题就是语言到底定义了哪些型态，以及允许哪些型态作为表达式的值。诸如C编程语言之类的低端语言允许程序命名内存位置、内存区域以及编译时的常量；[[ANSI_C|ANSI C]]甚至允许[[表达式|表达式]]返回结构值（{{lang|en|struct values}}）。功能性的语言一般允许变量直接使用运行时计算出的值，而不是指出该值可能储存的[[内存地址|内存地址]]。

常见的[[数据结构|数据结构]]：
*[[数组|数组]]
*[[记录|记录]]
*[[链表|链表]]
*[[堆栈|堆栈]]
*[[队列|队列]]
*[[树_(数据结构)|树]]
*[[图|图]]
*[[堆|堆]]
*[[散列|散列]]

=== 指令及-{流程控制}- ===
一旦[[数据|数据]]被确定，[[机器学习|机器]]必须被告知如何对这些数据进行处理。较简单的指令可以使用[[关键字|关键字]]或定义好的语法结构来完成。不同的'''程序语言'''利用序列系统来取得或组合这些语句。除此之外，一个'''程序语言'''中的其他指令也可以用来控制处理的过程（例如分支、循环等）。

=== 參照机制和重用 ===
[[參照|參照]]的中心思想是必须有一种间接设计储存空间的方法。最常见的方法是通过命名变量。根据不同的语言，进一步的引用可以包括指向其他储存空间的[[指針_(信息學)|指针]]。还有一种类似的方法就是命名一组指令。大多数程序设计语言使用[[宏|宏]]调用、过程调用或函数调用。使用这些代替的名字能让程序更灵活，并更具重用性。

== 功能 ==
编程语言可借助机械、电机、电子、电脑、手机完成人类需求的计算、功能与目的。

=== 實體的傳輸連結 ===
透過低階程式語言或高階程式語言，將實體間接達成傳輸連結或控制實體。

=== 应用程式的发展 ===
高阶编程語言可发展多功能的应用程序软件，例如工程计算、操作系统、文件处理、播放软件、网页设计、手机应用程式(App)等。

==使用==
编程语言已超过上千种，大部份用在计算領域<ref>{{cite web|accessdate=2009-06-01|url=http://hopl.murdoch.edu.au/|title=HOPL: an interactive Roster of Programming Languages|publisher=[[Murdoch_University|Murdoch University]]|location=Australia|quote=This site lists 8512 languages.|deadurl=yes|archiveurl=https://web.archive.org/web/20110220044217/http://hopl.murdoch.edu.au/|archivedate=2011年2月20日}}</ref>。程式語言和人類使用的自然语言在精确度和完整性上有很大的差异。

人們在用自然語言溝通時，內容可以不明確，甚至小的錯誤，而聽的人仍然可能理解說的人想要說的內容。但電腦不同，電腦「只做被告知要做的事」，無法理解程式設計者想要寫的程式。語言的定義、編程以及編程輸入的組合需完整定義程式執行時的外部特性。另一方面，演算法的概念可以表示為[[虛擬碼|虛擬碼]]抑或者為編成碼，是交織有自然語言和程式碼的程式語言，和其他人溝通時使用，此時就不一定要那麼精確。

程式語言提供定義片段資料的結構化機制，以及在資料中需自動進行的運算或是轉換。程式設計者利用程式語言提供的[[抽象化_(計算機科學)|抽象化]]來表示計算的相關概念，這些概念則是由許多最簡單元素（稱為{{link-en|語言基元|language primitive}}）的集合所組成<ref>{{cite web|url=http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html|title=Structure and Interpretation of Computer Programs|author=Abelson, Sussman, and Sussman|accessdate=2009-03-03|deadurl=yes|archiveurl=https://web.archive.org/web/20090226050622/http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html|archivedate=2009年2月26日}}</ref>。[[程序设计|程序设计]]就是指利用語言基元來撰寫新的程式，或是將舊程式改寫，配合新的應用或是新的環境。

電腦程式語言可能是以批处理任务的方式執行，中間不需和使用者互動，也有可能是由用戶在[[直譯器|直譯器]]中指定執行特定的的程式。若某一程式語言的是目的是在某一應用軟體（如[[Unix_shell|Unix shell]]）或其他[[命令列介面|命令列介面]]執行其他程式，此程式語言會稱為[[脚本语言|脚本语言]]。

===衡量各编程語言的使用量===
很難去比較哪一種程式語言的使用量最大，而且「使用量」一詞也很難定義。某一種程式語言可能需要較多的時間進行開發，另一種程式語言可能產生的程式碼較長，第三種程式語言可能在CPU中執行的時間較長。有些語言在特定的領域十分受歡迎，例如[[COBOL|COBOL]]在公司的資料中心仍相當常用，多半是在[[大型計算機|大型計算機]]上執行<ref>{{cite web
 | url = http://www.computerworld.com.au/article/319269/cobol_turns_50/
 | title = COBOL turns 50
 | date = 2009-09-21
 | accessdate = 2013-10-19
 | author = Georgina Swan
 | publisher = computerworld.com.au
 | archive-date = 2013-10-19
 | archive-url = https://web.archive.org/web/20131019181128/http://www.computerworld.com.au/article/319269/cobol_turns_50/
 | dead-url = no
 }}</ref><ref>{{cite web
 | url = http://www.developer.com/lang/other/7-myths-of-cobol-debunked.html
 | title = 7 Myths of COBOL Debunked
 | date = 2012-05-03
 | accessdate = 2013-10-19
 | author = Ed Airey
 | publisher = developer.com
 | archive-date = 2013-10-19
 | archive-url = https://web.archive.org/web/20131019171802/http://www.developer.com/lang/other/7-myths-of-cobol-debunked.html
 | dead-url = no
 }}</ref>，[[Fortran|Fortran]]常用在科學及工程應用，[[C語言|C語言]]常用在嵌入式设备应用及[[操作系統|操作系統]]，[[Perl|Perl]]常用于系统管理和文本处理，[[JavaScript|JavaScript]]用于网页等。

有许多不同的测量程式語言使用的程度的方法，不同的测量方式各有誤差：
* 計算徵才廣告中提到各程式語言的次數<ref>{{cite web |author=Nicholas Enticknap |url=http://www.computerweekly.com/Articles/2007/09/11/226631/sslcomputer-weekly-it-salary-survey-finance-boom-drives-it-job.htm |title=SSL/Computer Weekly IT salary survey: finance boom drives IT job growth |publisher=Computerweekly.com |accessdate=2013-06-14 |archive-date=2011-10-26 |archive-url=https://web.archive.org/web/20111026035734/http://www.computerweekly.com/Articles/2007/09/11/226631/SSLComputer-Weekly-IT-salary-survey-finance-boom-drives-IT-job.htm |dead-url=no }}</ref>。
* 計算教授或描述各程式語言書籍賣出的數量<ref>{{cite web|url=http://radar.oreilly.com/archives/2006/08/programming_language_trends_1.html|title=Counting programming languages by book sales|publisher=Radar.oreilly.com|date=2006-08-02|accessdate=2010-12-03|deadurl=yes|archiveurl=https://web.archive.org/web/20080517023127/http://radar.oreilly.com/archives/2006/08/programming_language_trends_1.html|archivedate=2008年5月17日}}</ref>。
* 佔計各程式語言目前仍在使用程式碼的長度，不過可能會低估一些公開搜尋不容易找到的程式語言<ref>Bieman, J.M.; Murdock, V., Finding code on the World Wide Web: a preliminary investigation, Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation, 2001</ref>。
* 利用搜尋引擎計算找到不同程式語言的次數。

根據[[TIOBE指數|TIOBE指數]]在2022年3月，十大最受歡迎的語言如下：[[Python|Python]]、[[Visual_Basic_.NET|Visual Basic .NET]]、[[C語言|C]]、[[C++|C++]]、[[C#|C#]]、[[Java|Java]]、[[JavaScript|JavaScript]]、[[PHP|PHP]]、[[Assembly_language|Assembly language]]及[[SQL|SQL]].<ref>{{cite web|title=TIOBE Index for April 2020|url=https://www.tiobe.com/tiobe-index/|accessdate=2022-04-07|author=|date=2022-03|format=|publisher=TIOBE|language=|archive-date=2018-02-25|archive-url=https://web.archive.org/web/20180225101948/https://www.tiobe.com/tiobe-index/|dead-url=yes}}</ref>。

== 历史 ==
{{Main|编程语言历史}}

1940年代当计算机刚刚问世的时候，程序员必须手动控制计算机。当时的计算机十分昂贵，唯一想到利用程序设计语言来解决问题的人是德国工程师[[康拉德·楚澤|康拉德·楚澤]]。

几十年后，计算机的价格大幅度下跌，而计算机程序也越来越复杂。也就是说，开发时间已经远比运行时间宝贵。

于是，新的集成、可视的开发环境越来越流行。它们减少了所付出的时间、金钱（以及脑细胞）。只要轻敲几个键，一整段代码就可以使用了。这也得益于可以重用的程序代码库<ref name="Fischer">{{cite book
|author = Steven R. Fischer,
|title = ''A history of language'',
|publisher = Reaktion Books,
|year = 2003,
|ISBN = 186189080X}}</ref>。

== 参见 ==
{{Portal|電腦程式設計}}
{{Main category|程序设计语言}}
{{Div col}}
* [[程式語言列表|程式語言列表]]
* [[编译器|编译器]]、[[直譯器|直譯器]]
* [[Hello_World程序|Hello World程序]]
* [[脚本语言|脚本语言]]
* [[程序设计|程序设计]]
* [[计算机科学|计算机科学]]、[[基本的電腦科學主題列表|基本的電腦科學主題列表]]
* [[教育程式語言|教育程式語言]]
* [[文学编程|文学编程]]
* [[程式語言理論|程式語言理論]]
* [[伪代码|伪代码]]
* [[软件工程|软件工程]]、[[軟體工程主題列表|軟體工程主題列表]]
{{Div col end}}

== 参考文献 ==
{{Reflist|30em}}

== 延伸閱讀 ==
{{refbegin}}
* {{cite book |last1=Abelson|first1=Harold|authorlink1=Harold Abelson|last2=Sussman|first2=Gerald Jay|authorlink2=Gerald Jay Sussman |title=Structure and Interpretation of Computer Programs |url = http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html |edition=2nd |year=1996 |publisher=MIT Press |deadurl=yes |archiveurl=https://web.archive.org/web/20180309173822/https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html |archivedate=2018年3月9日 }}
* Raphael Finkel: ''[https://web.archive.org/web/20141022141742/http://www.nondot.org/sabre/Mirrored/AdvProgLangDesign/ Advanced Programming Language Design]'', Addison Wesley 1995.
* Daniel P. Friedman, Mitchell Wand, Christopher T. Haynes: ''Essentials of Programming Languages'', The MIT Press 2001.
* Maurizio Gabbrielli and Simone Martini: "Programming Languages: Principles and Paradigms", Springer, 2010.
* David Gelernter, Suresh Jagannathan: ''Programming Linguistics'', The MIT Press 1990.
* Ellis Horowitz (ed.): ''Programming Languages, a Grand Tour'' (3rd ed.), 1987.
* Ellis Horowitz: ''Fundamentals of Programming Languages'', 1989.
* Shriram Krishnamurthi: ''Programming Languages: Application and Interpretation'', [http://www.cs.brown.edu/~sk/Publications/Books/ProgLangs/ online publication] {{Wayback|url=http://www.cs.brown.edu/~sk/Publications/Books/ProgLangs/ |date=20210430210417 }}.
* Bruce J. MacLennan: ''Principles of Programming Languages: Design, Evaluation, and Implementation'', Oxford University Press 1999.
* John C. Mitchell: ''Concepts in Programming Languages'', Cambridge University Press 2002.
* Benjamin C. Pierce: ''Types and Programming Languages'', The MIT Press 2002.
* Terrence W. Pratt and Marvin V. Zelkowitz: ''Programming Languages: Design and Implementation'' (4th ed.), Prentice Hall 2000.
* Peter H. Salus. ''Handbook of Programming Languages'' (4 vols.). Macmillan 1998.
* Ravi Sethi: ''Programming Languages: Concepts and Constructs'', 2nd ed., Addison-Wesley 1996.
* Michael L. Scott: ''Programming Language Pragmatics'', Morgan Kaufmann Publishers 2005.
* Robert W. Sebesta: ''Concepts of Programming Languages'', 9th ed., Addison Wesley 2009.
* Franklyn Turbak and David Gifford with Mark Sheldon: ''Design Concepts in Programming Languages'', The MIT Press 2009.
* Peter Van Roy and Seif Haridi. ''Concepts, Techniques, and Models of Computer Programming'', The MIT Press 2004.
* David A. Watt. ''Programming Language Concepts and Paradigms''. Prentice Hall 1990.
* David A. Watt and Muffy Thomas. ''Programming Language Syntax and Semantics''. Prentice Hall 1991.
* David A. Watt. ''Programming Language Processors''. Prentice Hall 1993.
* David A. Watt. ''Programming Language Design Concepts''. John Wiley & Sons 2004.
{{refend}}

== 外部链接 ==
* {{dmoz|Computers/Programming/Languages|Computer Programming Languages}}
* {{dmoz|World/Chinese_Traditional/電腦/程式設計/語言|程式語言}}
* [http://merd.sourceforge.net/pixel/language-study/syntax-across-languages/ Syntax Patterns for Various Languages] {{Wayback|url=http://merd.sourceforge.net/pixel/language-study/syntax-across-languages/ |date=20080510185903 }}

{{-}}
{{程序设计语言}}
{{计算机语言}}
{{编程语言类别}}
{{Computer Science}}

{{Authority control}}

[[Category:程序设计语言|]]
[[Category:人工語言|Category:人工語言]]
[[Category:计算机技术|Category:计算机技术]]