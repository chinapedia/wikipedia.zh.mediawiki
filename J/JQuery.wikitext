{{NoteTA
|G1 = IT
|G2 = FL
}}
{{lowercase}}
{{Infobox Software
| name = jQuery
| logo = JQuery logo text.svg
| logo size = 200px
| screenshot = 
| caption = 
| author = [[約翰·雷西格|約翰·雷西格]]
| developer = jQuery Team
| released = 
| latest release version = {{LSR/wikidata}}
| latest release date =
| platform = 
| programming language = [[JavaScript|JavaScript]]
| genre = [[Web應用框架|網頁應用程序框架]]
| license = [[MIT许可证|MIT许可证]]
| website = [http://jquery.com/ jquery.com]
| size = {{aligned table|cols=4|class=wikitable|style=margin:0
| {{abbr|ver|version}} | {{abbr|gzip|compressed and gzipped}}
| {{abbr|prod|compressed, production mode}} | {{abbr|dev|uncompressed, development mode}}
| 1.x | 31kb | 90.9kb | 266kb
| 2.x | 27.7kb | 81.6kb | 236kb
| 3.x |      |          | 262kb
}}
([[Kilobyte#Base_2_definition|KB]])
}}

'''jQuery'''是一套跨[[瀏覽器|瀏覽器]]的[[JavaScript|JavaScript]][[函式庫|函式庫]]，用于简化[[HTML|HTML]]與JavaScript之間的操作。<ref name="jquery.com">{{cite web|url=http://jquery.com /|title=jQuery: The write less, do more, JavaScript library|publisher=The jQuery Project|accessdate=29 April 2010|archive-date=2012-02-29|archive-url=https://www.webcitation.org/65nw4uFvK?url=http://jquery.com/|dead-url=no}}</ref>[[約翰·雷西格|約翰·雷西格]]（{{lang|en|John Resig}}）在2006年1月的BarCamp NYC上釋出了第一個版本。目前由Dave Methvin领导的团队进行开发。全球前10,000个访问最高的网站中，有65%使用了jQuery，是曾經最受歡迎的JavaScript函式庫<ref>{{cite web |url = http://trends.builtwith.com/javascript/JQuery |title = jQuery Usage Statistics |accessdate = 2013-05-17 |archive-date = 2018-12-25 |archive-url = https://web.archive.org/web/20181225092702/https://trends.builtwith.com/javascript/JQuery |dead-url = no }}</ref><ref>{{cite web|url=http://w3techs.com/technologies/overview/javascript_library/all|title=Usage of JavaScript libraries for websites|publisher=W3Techs|accessdate=2010-07-08|archive-date=2013-06-27|archive-url=https://www.webcitation.org/6HgvDtAvL?url=http://w3techs.com/technologies/overview/javascript_library/all|dead-url=no}}</ref>。

== 簡介 ==
jQuery是[[开源软件|开源软件]]，使用[[MIT许可证|MIT许可证]]授权。<ref>{{cite web |url=http://docs.jquery.com/License |title=License – JQuery JavaScript Library |accessdate=2009-11-26 |archive-date=2020-12-13 |archive-url=https://web.archive.org/web/20201213191910/https://docs.jquery.com/License |dead-url=no }}</ref> jQuery的语法设计使得许多操作变得容易，如操作-{zh-hans:文档对象;zh-hant:文件;}-（document）、选择[[文档对象模型|文档对象模型]]（{{lang|en|DOM}}）元素、创建[[动画|动画]]效果、处理[[事件_(计算机)|事件]]、以及开发[[AJAX|Ajax]]程序。jQuery也提供了给开发人员在其上创建[[插件|插件]]的能力。这使开发人员可以对底层交互与动画、高级效果和高级主题化的组件进行抽象化。模块化的方式使jQuery函数库能够创建功能强大的[[动态HTML|动态网页]]以及[[网络应用程序|网络应用程序]]。

[[微软|微软]]和[[诺基亚|诺基亚]]已宣布在他们的平台上绑定jQuery。<ref name="2008-09-28">{{cite web |url=http://blog.jquery.com/2008/09/28/jquery-microsoft-nokia/ |title=jQuery, Microsoft, and Nokia |date=2008-09-28 |last=Resig |first=John |publisher=jQuery |work=jQuery Blog |accessdate=2009-01-29 |archive-date=2012-08-06 |archive-url=https://www.webcitation.org/69itE7IiR?url=http://blog.jquery.com/2008/09/28/jquery-microsoft-nokia/ |dead-url=no }}</ref>微软最初在[[Visual_Studio|Visual Studio]]中集成了jQuery<ref>{{cite web |url=http://weblogs.asp.net/scottgu/archive/2008/09/28/jquery-and-microsoft.aspx |title=jQuery and Microsoft |last=Guthrie |first=Scott |work=ScottGu's Blog |date=2008-09-28 |accessdate=2009-01-29 |archive-url=https://web.archive.org/web/20090201214232/http://weblogs.asp.net/scottgu/archive/2008/09/28/jquery-and-microsoft.aspx |archive-date=2009-02-01 |dead-url=yes }}</ref>以便在微软自己的[[ASP.NET_AJAX|ASP.NET AJAX]]框架和[[ASP.NET_MVC_Framework|ASP.NET MVC Framework]]中使用，而诺基亚则在他的Web运行时组件开发平台中集成了jQuery<ref>{{cite web |url=http://wiki.forum.nokia.com/index.php/Guarana_UI:_a_jQuery-Based_UI_Library_for_Nokia_WRT |title=Guarana UI: A jQuery Based UI Library for Nokia WRT |accessdate=2010-03-30 |work=Forum Nokia |deadurl=yes |archiveurl=https://web.archive.org/web/20091123130408/http://wiki.forum.nokia.com/index.php/Guarana_UI%3A_a_jQuery-Based_UI_Library_for_Nokia_WRT |archivedate=2009-11-23 }}</ref>。[[MediaWiki|MediaWiki]]自从1.16版本后也开始使用jQuery<ref>{{cite web |url = http://www.mediawiki.org/wiki/JQuery |title = jQuery |publisher = MediaWiki |date = January 19, 2012 |accessdate = March 11, 2012 |archive-date = 2018-12-25 |archive-url = https://web.archive.org/web/20181225092704/https://www.mediawiki.org/wiki/JQuery |dead-url = no }}</ref>。

jQuery 1.3版以後，引入全新的[[層疊樣式表|層疊樣式表]]（{{lang|en|CSS}}）选择器引擎Sizzle。<ref>{{cite web
|language = en
|publisher = 
|title = Release:jQuery 1.3
|url = http://docs.jquery.com/Release:jQuery_1.3
|author = 
|date = 
|accessdate = 
|archive-date = 2012-12-21
|archive-url = https://web.archive.org/web/20121221061234/http://docs.jquery.com/Release:jQuery_1.3
|dead-url = no
}}</ref>同時不再提供Packed版本，因為解壓縮所消耗的時間，遠大於所節省的下載時間，且不利於[[除錯|除錯]]，且已有Google AJAX Libraries API等公開站台提供jQuery的js的引用服务，故Packed版本原本的優點已蕩然無存。

==特色==
jQuery有下列特色：
* 使用多浏览器开源选择器引擎''Sizzle''（jQuery项目的衍生产品）进行[[文档对象模型|DOM]]元素选择<ref>{{cite web |title=jQuery 1.3 and the jQuery Foundation |url=https://blog.jquery.com/2009/01/14/jquery-13-and-the-jquery-foundation/ |last=Resig |first=John |date=2009-01-14 |work=jQuery Blog |accessdate=2009-05-04 |archive-date=2020-12-01 |archive-url=https://web.archive.org/web/20201201123018/https://blog.jquery.com/2009/01/14/jquery-13-and-the-jquery-foundation/ |dead-url=no }}</ref>
* 基于CSS选择器的DOM操作，使用元素的名称和属性（如id和class）作为选择DOM中节点的条件
* 事件
* 特效和動畫
* [[AJAX|Ajax]]
* Deferred和Promise对象来控制异步处理
* [[JSON|JSON]]解析
* 通过插件扩展
* 工具函数，如特征检测
* 现代浏览器中原生的兼容性方法，但对于旧版浏览器需要后备（fallback）方法，比如<code>inArray()</code>和<code>each()</code>
* 多浏览器（不要与[[浏览器兼容性|跨浏览器]]混淆）支持

===浏览器支持===
jQuery 3.0及以后版本支持“当前−1版本” 的[[Firefox|Firefox]]、[[Google_Chrome|Chrome]]、[[Safari|Safari]]、[[Microsoft_Edge|Edge]]（就是说当前稳定版本以及当前稳定版本之前的一个版本），另外还支持[[Internet_Explorer|Internet Explorer]] [[Internet_Explorer_9|9]]以后的IE版本。在移动端支持[[iOS|iOS]] 7+和[[Android|Android]] 4.0+。<ref>[//jquery.com/browser-support/ Browser Support | jQuery]</ref>

== 用法 ==

===加載jQuery===
jQuery库是包含所有公共DOM、事件、效果和Ajax函数的一个JavaScript文件。可以通过链接到本地副本或公共服务器提供的许多副本之一把jQuery包含在网页中。jQuery有一个由MaxCDN托管的[[內容傳遞網路|內容傳遞網路]]（CDN）。<ref>{{cite web|url=https://code.jquery.com/|title=jQuery CDN|first=jQuery Foundation -|last=jquery.org|publisher=|accessdate=2018-05-19|archive-date=2021-02-05|archive-url=https://web.archive.org/web/20210205195420/https://code.jquery.com/|dead-url=no}}</ref> Google和微软也托管了jQuery。<ref>{{cite web |url=https://code.google.com/apis/ajaxlibs/documentation/#jquery |title=Google Libraries API - Developer's Guide |publisher=code.google.com |date= |accessdate=March 11, 2012 |archive-date=2018-12-25 |archive-url=https://web.archive.org/web/20181225092706/https://developers.google.com/speed/libraries/?csw=1#jquery |dead-url=no }}</ref><ref>{{cite web | url=http://www.asp.net/ajaxlibrary/cdn.ashx | title=Microsoft Ajax Content Delivery Network | publisher=Microsoft Corporation | work=ASP.net | accessdate=June 19, 2012 | archive-date=2020-12-17 | archive-url=https://web.archive.org/web/20201217075258/https://www.asp.net/ajaxlibrary/CDN.ashx | dead-url=no }}</ref>

<syntaxhighlight lang=html5>
<script src="jquery.js"></script>
</syntaxhighlight>

也可以直接从CDN中加载jQuery：

<syntaxhighlight lang=html5>
<script
  src="https://code.jquery.com/jquery-3.3.1.min.js"
  integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
  crossorigin="anonymous"></script>
</syntaxhighlight>

===使用风格===

jQuery有两种使用风格：
* 通过jQuery对象的[[工厂方法|工厂方法]]<code lang="jQuery">$</code>函数。这些函数通常称作''命令''，使用{{tsl|en|method chaining|方法链}}进行调用，因为它们都返回jQuery对象。
* 通过<code lang="jQuery">$.</code>开头的函数。这些是''工具函数''，它们不直接作用于jQuery对象。
在jQuery中访问和操作多个DOM节点通常从用CSS选择器字符串调用<code lang="jQuery">$</code>函数开始。这会返回一个引用[[HTML|HTML]]页面中所有匹配元素的jQuery对象。比如<code lang="jQuery">$("div.test")</code>，会返回一个拥有class <code lang="html5">test</code>的所有<code lang="html5">div</code>元素的jQuery对象。可以通过调用返回的jQuery对象或节点本身的方法来操作这个节点集。

===无冲突模式===
jQuery还有<code>.noConflict()</code>模式，这会释放对<code>$</code>的控制。如果其他的库也使用<code>$</code>作为标识符的话，这个模式会比较有用。在无冲突模式下，开发人员可以使用<code>jQuery</code>替代<code>$</code>而不会缺失任何功能。<ref>{{cite web|url=//api.jquery.com/jquery.noconflict/|title=jQuery.noConflict() jQuery API Documentation|accessdate=2020-09-26|archive-date=2014-09-14|archive-url=https://web.archive.org/web/20140914212252/http://api.jquery.com/jQuery.noConflict/|dead-url=no}}</ref>

===典型的代码开头===

通常，jQuery是通过将初始化代码和事件处理函数放入<code lang="jQuery">$(''handler'')</code>中来使用的。当浏览器构建DOM并发送加载事件时触发。

<syntaxhighlight lang="javascript">
$(function() {
    // 这个匿名函数是页面加载完成时要调用的函数。
    // jQuery代码，事件处理回调写在这里。
});
</syntaxhighlight>

或者

<syntaxhighlight lang="javascript">
$(fn); // 在其他地方定义的名为fn的函数，是页面加载完成时要调用的函数。
</syntaxhighlight>

或者我们也可以使用

<syntaxhighlight lang="javascript">
$(document).ready(function() {
    // 这是页面完成加载时要调用的函数。
    // jQuery代码，事件处理回调写在这里。
});
</syntaxhighlight>

由于历史原因，<code lang="javascript">$(document).ready(callback)</code>已经成为DOM就绪时运行代码的实质性标志。但jQuery 3.0以后，鼓励开发人员使用更简短的<code lang="javascript">$(handler)</code>标志。<ref name="howToUseReady">{{cite web|url=https://jquery.com/upgrade-guide/3.0/#deprecated-document-ready-handlers-other-than-jquery-function|title=jQuery Core 3.0 Upgrade Guide - jQuery|first=jQuery Foundation -|last=jquery.org|publisher=|accessdate=2018-05-19|archive-date=2021-01-21|archive-url=https://web.archive.org/web/20210121060158/https://jquery.com/upgrade-guide/3.0/#deprecated-document-ready-handlers-other-than-jquery-function|dead-url=no}}</ref>

对尚未加载的元素进行事件处理的回调函数可以作为[[匿名函数|匿名函数]]在<code lang="jQuery">.ready()</code>内部注册。这些事件处理函数只会在触发事件时被调用。例如，下面的代码添加了一个，用于在<code lang="html">img</code>图像元素上单击鼠标事件的处理函数。

<syntaxhighlight lang="javascript">
$(function() {
    $('img').on('click', function() {
        // 处理页面中任何img元素上的click事件。
    });
});
</syntaxhighlight>

===链接（Chaining）===

jQuery命令通常返回一个jQuery对象，因此命令可以链接：

<syntaxhighlight lang="javascript">
$('div.test').add('p.quote').addClass('blue').slideDown('slow');
</syntaxhighlight>
这行代码找到了所有class属性为<code lang="HTML">test</code>的<code lang="HTML">div</code>标签，以及所有class属性为<code lang="HTML">quote</code>的<code lang="HTML">p</code>标签的并集，对于所有匹配的元素都增加一个<code lang="HTML">blue</code>的class属性，并用一个动画增加了它们的高度。函数<code lang="jQuery">$</code>与<code lang="jQuery">add</code>影响匹配的元素有哪些，而<code lang="jQuery">addClass</code>和<code lang="jQuery">slideDown</code>影响了引用的节点。

一些jQuery函数返回特定的值（例如<code lange="jQuery">$('#input-user-email').val()</code>）。在这些情况下，由于该值没有引用jQuery对象，链接将不起作用。

===创建新的DOM元素===
除了通过jQuery对象层次结构访问DOM节点外，如果作为参数传递给$()的字符串看起来像HTML，也可以创建新的DOM元素。例如，这行代码找到ID为<code lang="jQuery">carmakes</code>的HTML <code lang="jQuery">select</code>元素，并会增加一个value属性为"VAG"、文字为"Volkswagen"的<code lang="jQuery">option</code>元素：
<syntaxhighlight lang="javascript">
$('select#carmakes')
    .append($('<option>')
    .attr({
        value:"VAG"
    })
    .append("Volkswagen"));
</syntaxhighlight>

===工具函数===

带有<code lang="jQuery">$.</code>前缀的jQuery函数是工具函数，或者说是影响全局属性和行为的函数。下面的例子使用了函数<code lang="jQuery">each()</code>来遍历数组：
<syntaxhighlight lang="javascript">
$.each([1,2,3], function() {
    console.log(this + 1);
});
</syntaxhighlight>
这会将“2”，“3”，“4”写入控制台。

===Ajax===

使用<code lang="jQuery">$.ajax()</code>可以执行[[浏览器兼容性|跨浏览器]]的[[AJAX|Ajax]]请求。其相关方法可用于加载和处理远程数据。
<syntaxhighlight lang="javascript">
$.ajax({
    type: 'POST',
    url: '/process/submit.php',
    data: {
        name : 'John',
        location : 'Boston'
    },
}).done(function(msg) {
    alert('Data Saved: ' + msg);
}).fail(function(xmlHttpRequest, statusText, errorThrown) {
    alert('Your form submission failed.\n\n'
      + 'XML Http Request: ' + JSON.stringify(xmlHttpRequest)
      + ',\nStatus Text: ' + statusText
      + ',\nError Thrown: ' + errorThrown);
});
</syntaxhighlight>

本示例将数据<code>name=John</code>和<code>location=Boston</code>发布到服务器上的<code>/process/submit.php</code>。当这个请求结束时，会调用success函数来提醒用户。如果请求失败，它会提醒用户，告知该请求的状态以及特定的错误。

====异步====
请注意，上面的例子使用<code>$.ajax()</code> 的延期性来处理它的异步特性：<code>.done()</code>和<code>.fail()</code>创建仅在异步过程完成时才运行的回调。

== 發佈版本 ==
JQuery目前分成1.x版、2.x版、3.x版，這三種發佈版本，後两种不再支援IE 6/7/8，前者透過jQuery Migrate plugin與先前版本保持相容。
{| class="wikitable sortable"
|-
! 版本号
! 发布日期
! 最新更新
! 大小（KB）
! 备注
|-
| 1.0
| {{start date|2006|08|26}}
|
|
| 第一个稳定版本
|-
| 1.1
| {{start date|2007|01|14}}
|
|
|
|-
| 1.2
| {{start date|2007|09|10}}
| 1.2.6
| 54
|
|-
| 1.3
| {{start date|2009|01|14}}
| 1.3.2
| 55.9
| 将Sizzle选择器引擎引入核心
|-
| 1.4
| {{start date|2010|01|14}}
| 1.4.4
| 76
|
|-
| 1.5
| {{start date|2011|01|31}}
| 1.5.2
| 83
| 延迟回调管理，ajax模块重写
|-
| 1.6
| {{start date|2011|05|03}}
| 1.6.4
| 89
| 显著改善attr()与val()的性能
|-
| 1.7
| {{start date|2011|11|03}}
| 1.7.2 ({{start date|2012|03|21}})
| 92
| 新的事件API：.on()和.off()，而旧的API仍然支持。
|-
| 1.8
| {{start date|2012|08|09}}
| 1.8.3 ({{start date|2012|11|13}})
| 91.4
| 重写Sizzle选择器引擎，改善动画和$(html, props)的灵活性。
|-
| 1.9
| {{start date|2013|01|15}}
| 1.9.1 ({{release date|2013|02|04}})
| 90
| 移除弃用接口，清理代码
|-
| 1.10
| {{start date|2013|05|24}}
| 1.10.2 ({{start date|2013|07|03}})
| 91
| 修复了1.9和2.0 beta版本周期的bug和差异
|-
| 1.11
| {{start date|2014|01|24}}
| 1.11.3 ({{start date|2015|04|28}})
| 95.9
|
|-
| 1.12
| {{start date|2016|01|08}}
| 1.12.4 ({{start date|2016|05|20}})
| 95
|
|-
| 2.0
| {{start date|2013|04|18}}
| 2.0.3 ({{start date|2013|07|03}})
| 81.1
| 除去对IE 6-8的支持以提高性能，并降低文件大小
|-
| 2.1
| {{start date|2014|01|24}}
| 2.1.4 ({{start date|2015|04|28}})
| 82.4
|
|-
| 2.2
| {{start date|2016|01|08}}
| 2.2.4 ({{start date|2016|05|20}})
| 85.6
|
|-
| 3.0
| {{start date|2016|6|9}}<ref>{{cite web|url=https://www.infoq.com/news/2016/06/jQuery-3|title=Long-awaited jQuery 3.0 Brings Slim Build|last=Chesters|first=James|date=2016-06-15|publisher=infoq.com|accessdate=2017-01-28|archive-date=2020-11-08|archive-url=https://web.archive.org/web/20201108115022/http://www.infoq.com/news/2016/06/jQuery-3/|dead-url=no}}</ref>
| 3.0.0 ({{start date|2016|6|9}})
| 86.3
| Deferred、$.ajax、$.when支持Promises/A+，令.data()兼容HTML5
|-
| 3.1
| {{start date|2016|7|7}}
| 3.1.1 ({{start date|2016|9|23}})
| 86.3
| 加入jQuery.readyException，ready handler错误现在不会不显示了
|-
| 3.2
| {{start date|2017|3|16}}<ref>{{cite web|title=jQuery 3.2.0 Is Out!|work=jQuery Blog|url=https://blog.jquery.com/2017/03/16/jquery-3-2-0-is-out/|accessdate=12 March 2018|date=16 March 2017|archive-date=2020-11-24|archive-url=https://web.archive.org/web/20201124230336/http://blog.jquery.com/2017/03/16/jquery-3-2-0-is-out/|dead-url=no}}</ref>
| 3.2.1 ({{start date|2017|3|20}})
| 84.6
| 增加了对检索<code><nowiki><template></nowiki></code>元素内容的支持，弃用了多种旧方法。
|-
| 3.3
| {{start date|2018|1|19}}
| 3.3.1 ({{start date|2018|1|20}})
| 84.8
| 弃用旧函数，函数现在可以接受类，并支持其写成数组格式。
|-
| 3.4
| {{start date|2019|4|10}}<ref>{{cite web|title=jQuery 3.4.0 Released|work=jQuery Blog|url=https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/|accessdate=2019-04-15|date=2018-04-10|archive-date=2021-01-15|archive-url=https://web.archive.org/web/20210115201539/https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/|dead-url=no}}</ref>
| 3.4.1 ({{start date|2019|5|1}})<ref>{{cite web|url=https://blog.jquery.com/2019/05/01/jquery-3-4-1-triggering-focus-events-in-ie-and-finding-root-elements-in-ios-10/|title=jQuery 3.4.1: triggering focus events in IE and finding root elements in iOS 10|publisher=jQuery Foundation|work=jQuery Blog|accessdate=2020-10-21|archive-date=2020-12-01|archive-url=https://web.archive.org/web/20201201123709/https://blog.jquery.com/2019/05/01/jquery-3-4-1-triggering-focus-events-in-ie-and-finding-root-elements-in-ios-10/|dead-url=no}}</ref>
| 86.1
| 改進性能，增加<code>nonce</code>及<code>nomodule</code>，修復<code>radio elements</code>。
|-
| 3.5
| {{start date|2020|4|10}}<ref name="blog-350-release">{{cite web|title=jQuery 3.5.0 Released!|work=jQuery Blog|url=https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/|accessdate=2020-04-11|date=2020-04-10|archive-date=2020-12-21|archive-url=https://web.archive.org/web/20201221185332/https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/|dead-url=no}}</ref>
| 3.5.1 ({{start date|2019|5|4}})<ref>{{cite web|url=https://blog.jquery.com/2020/05/04/jquery-3-5-1-released-fixing-a-regression/|title=jQuery 3.5.1 Released: Fixing a Regression|publisher=jQuery Foundation|work=jQuery Blog|accessdate=2020-10-21|archive-date=2020-11-25|archive-url=https://web.archive.org/web/20201125002417/http://blog.jquery.com/2020/05/04/jquery-3-5-1-released-fixing-a-regression/|dead-url=no}}</ref>
| 87.4
| 安全性更新，以<code>.even()</code>及<code>.odd()</code>代替<syntaxhighlight lang="css" inline>:even</syntaxhighlight>及<syntaxhighlight lang="css" inline>:odd</syntaxhighlight>，棄用<code>jQuery.trim</code>。
|}

== 子项目 ==
以下项目均是源自于Interface插件
=== jQuery UI ===
{{see|jQuery UI}}
基于jQuery的[[用户界面|用户界面]]库，包括[[拖放|拖放]]、[[缩放|缩放]]、[[对话框|对话框]]、[[分頁_(GUI)|标签]]页等多个组件。

=== jQuery Tools ===
jQuery Tools是一個第三方的套件，基於jQuery。包括了[[分頁_(GUI)|标签]]页、表單驗證、滑鼠滾輪事件等多个组件。<ref>{{Cite web |url=http://jquerytools.org/ |title=存档副本 |accessdate=2017-11-11 |archive-date=2014-07-21 |archive-url=https://web.archive.org/web/20140721103618/http://jquerytools.org/ |dead-url=no }}</ref>

=== jQuery Mobile ===
基於jQuery的手機網頁製作工具，jQuery Mobile的網站上包含了網頁的設計工具、主題設計工具。另外jQuery Mobile的js插件包含了換頁、事件等的多項功能。<ref>{{Cite web |url=http://jquerymobile.org/ |title=存档副本 |accessdate=2020-09-26 |archive-date=2019-10-17 |archive-url=https://web.archive.org/web/20191017181648/https://jquerymobile.com/ |dead-url=no }}</ref>

== 参阅 ==
{{portal|自由軟體}}
* [[jQuery_UI|jQuery UI]]

== 参考文献 ==
{{Reflist|30em}}

== 相關書籍 ==
;英文
{{refbegin}}
* Learning jQuery, ISBN 1-84719-250-5
* jQuery in Action, ISBN 1-933988-35-5
* Pro JavaScript Techniques, ISBN 1-59059-727-3
{{refend}}

;中文
{{refbegin}}
* 锋利的jQuery , ISBN 978-7-115-20701-2
* 網頁設計？愛上jQuery, ISBN 978-986-6850-84-4
* Learning jQuery中文版，ISBN 978-986-6761-60-7
* jQuery UI & Plugins, ISBN 978-986-6551-11-6
*你不能錯過的 jQuery 指南 ISBN 9789572244173
{{refend}}

== 外部連結 ==
* [http://jquery.com/ jQuery官方网站]{{WebCite|url=https://www.webcitation.org/65nw4uFvK?url=http://jquery.com/ |date=20120229031206 |dateformat=iso }}
* [http://jqueryui.com/ jQuery UI官方网站]{{WebCite|url=https://www.webcitation.org/65nrThEVJ?url=http://jqueryui.com/ |date=20120229020151 |dateformat=iso }}
* [http://code.google.com/p/jqueryjs/ jQuery - Google Code] {{Wayback|url=http://code.google.com/p/jqueryjs/ |date=20160120110221 }}（各版本JQuery的下載處）
* {{Youtube|8mwKq7_JlS8|jQuery}}（2008年4月3日，Google Tech Talks）
* [[GitHub|Github]]上的[[jQuery|jQuery]] [http://github.com/jquery 原始碼] {{Wayback|url=http://github.com/jquery |date=20210202195019 }}

{{-}}
{{ECMAScript}}
{{Application frameworks}}
{{Widget toolkits}}

{{-}}
{{Authority control}}

[[Category:JavaScript函式庫|Category:JavaScript函式庫]]
[[Category:AJAX|Category:AJAX]]
[[Category:用JavaScript編程的自由軟體|Category:用JavaScript編程的自由軟體]]