{{distinguish|Java|JScript}}
{{noteTA
|G1=IT
|1=zh-hans:在线;zh-hant:在線;zh-hk:線上;zh-tw:線上;zh-mo:線上;
|2=zh-hans:太阳微系统;zh-hk:太陽電腦;zh-tw:昇陽電腦;
|3=zh-hans:地址栏; zh-hant:網址列;
|4=zh-hans:脚本语言;zh-hant:程式語言;
|5=zh-hans:芒廷维尤;zh-hant:山景城;
|6=zh-hans:尚佩恩;zh-hant:香檳;
|7=zh-hans:实现;zh-hant:實作;
|8=zh-hans:通过;zh-hant:通過;zh-tw:透過;
}}
{{Infobox programming language
| name                        = {{lang|en|JavaScript}}
| paradigm                    = [[事件驅動程式設計|事件驱动]]、[[函数式编程|函数式]]、[[指令式编程|指令式]]
| year                        = {{start date and age|1995|12|04}}<ref name="press_release">[https://web.archive.org/web/20070916144913/http://wp.netscape.com/newsref/pr/newsrelease67.html Press release announcing JavaScript], "Netscape and Sun announce JavaScript", PR Newswire, December 4, 1995</ref>
| logo                        = 
| logo caption                = 
| designer                    = 创造者[[布蘭登·艾克|布蘭登·艾克]]及[[ECMAScript|ECMAScript]]规范的其他关键贡献者
| developer                   =
| latest_release_version      = ECMAScript 2019<ref name="auto">{{cite web|url=https://www.ecma-international.org/publications/standards/Ecma-262.htm|title=Standard ECMA-262|publisher=Ecma International|date=2017-07-03|accessdate=2020-02-16|archive-date=2008-09-18|archive-url=https://web.archive.org/web/20080918223821/http://www.ecma-international.org/publications/standards/Ecma-262.htm|dead-url=no}}</ref>
| latest_release_date         = {{start date and age|2019|6}}
| latest_preview_version      = ECMAScript 2020
| latest_preview_date         =
| typing                      = [[动态类型|动态类型]]、[[鸭子类型|鸭子类型]]
| File extensions = {{flatlist|
* <code>.js</code>
* <code>.mjs</code><ref name="node.js ECMAScript Modules Specification">{{cite web|url=https://github.com/nodejs/node-eps/blob/master/002-es-modules.md|title=nodejs/node-eps|website=GitHub|accessdate=2020-02-16|archive-date=2020-08-29|archive-url=https://web.archive.org/web/20200829024713/https://github.com/nodejs/node-eps/blob/master/002-es-modules.md|dead-url=no}}</ref>
}}
| implementations             = [[V8_(JavaScript引擎)|V8]]、[[JavaScriptCore|JavaScriptCore]]、[[SpiderMonkey|SpiderMonkey]]、[[Chakra_(JScript引擎)|Chakra]]
| influenced_by               = [[AWK|AWK]]<ref>{{cite web|title=Brendan Eich: An Introduction to JavaScript, JSConf 2010|url=https://www.youtube.com/watch?v=1EyRscXrehw|accessdate=November 25, 2019|p=22m|archive-date=2020-08-29|archive-url=https://web.archive.org/web/20200829024704/https://www.youtube.com/watch?v=1EyRscXrehw|dead-url=no}}</ref>、[[C语言|C]]、{{tsl|en|HyperTalk|HyperTalk}}、[[Java|Java]]<ref>{{cite web|title="Coders at Work: Reflections on the Craft of Programming"|url=https://books.google.com/books?id=nneBa6-mWfgC&pg=PA141&lpg=PA141&dq=The+immediate+concern+at+Netscape+was+it+must+look+like+Java.&source=bl&ots=gGvuIcRU5u&sig=OGPam0PUoNHEn9DA3OYrbWpQXX8&hl=en&sa=X&ved=2ahUKEwi53LL6nbvfAhUK7YMKHUX3CgIQ6AEwAHoECAUQAQ#v=onepage&q=The%20immediate%20concern%20at%20Netscape%20was%20it%20must%20look%20like%20Java.&f=false|accessdate=December 25, 2018|archive-date=2020-09-23|archive-url=https://web.archive.org/web/20200923172014/https://books.google.com/books?id=nneBa6-mWfgC&pg=PA141&lpg=PA141&dq=The%20immediate%20concern%20at%20Netscape%20was%20it%20must%20look%20like%20Java.&source=bl&ots=gGvuIcRU5u&sig=OGPam0PUoNHEn9DA3OYrbWpQXX8&hl=en&sa=X&ved=2ahUKEwi53LL6nbvfAhUK7YMKHUX3CgIQ6AEwAHoECAUQAQ#v=onepage&q=The%20immediate%20concern%20at%20Netscape%20was%20it%20must%20look%20like%20Java.&f=false|dead-url=no}}</ref>、[[Lua|Lua]]、[[Perl|Perl]]、[[Python|Python]]、[[Scheme|Scheme]]、[[Self|Self]]
| influenced                  = [[ActionScript|ActionScript]]、{{tsl|en|AtScript|AtScript}}、[[CoffeeScript|CoffeeScript]]、[[Dart|Dart]]、[[JScript_.NET|JScript .NET]]、{{tsl|en|LiveScript|LiveScript}}、{{tsl|en|Objective-J|Objective-J}}、{{tsl|en|Opa_(programming_language)|Opa}}、[[QML|QML]]、[[Raku|Raku]]、[[TypeScript|TypeScript]]
| license                     = 
| website                     = 
| wikibooks                   = JavaScript
}}
{{Infobox file format
| name = {{lang|en|JavaScript}}
| icon = [[File:Javascript_icon.svg|150px]]
| logo = 
| screenshot = 
| caption = 
| extension = .js
| mime = application/javascript<br />text/javascript (obsolete)<ref>{{Cite web |url=http://www.apps.ietf.org/rfc/rfc4329.html#sec-7.1 |title=RFC 4329 |accessdate=2012-03-02 |archive-date=2014-03-16 |archive-url=https://web.archive.org/web/20140316122853/http://www.apps.ietf.org/rfc/rfc4329.html#sec-7.1 |dead-url=no }}</ref>
| type code = 
| uniform type = com.netscape.javascript-source<ref>{{cite web
| publisher = Apple Inc.
| url = http://developer.apple.com/mac/library/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html
| title = System-Declared Uniform Type Identifiers
| work = Mac OS X Reference Library
| accessdate = 2010-03-05
| archive-date = 2018-12-25
| archive-url = https://web.archive.org/web/20181225073417/https://developer.apple.com/library/archive/
| dead-url = no
}}</ref>
| magic = 
| owner = 
| released = 
| latest release version =
| latest release date = 
| genre = [[脚本语言|脚本语言]]
| container for = 
| contained by = 
| extended from = 
| extended to = 
| standard = 
| url = 
}}

{{lang|en|'''JavaScript'''}}（通常缩写为'''JS'''）是一种[[高级语言|高级]]的、[[直譯語言|-{zh-hans:解释型;zh-hant:直譯}-]]的[[编程语言|编程语言]]<ref name=":0">{{Cite book |title=JavaScript: The Definitive Guide |edition = 6th |last=David |first=Flanagan |publisher=O'Reilly & Associates |year= |ISBN = 978-0-596-80552-4 |location=|pages=}}</ref>。JavaScript是一门[[基于原型编程|基于原型]]、[[头等函数|头等函数]]的语言<ref name=":1">{{cite web |url = http://www.ecmascript.org/es4/spec/overview.pdf |title = ECMAScript Language Overview |accessdate = 2009-05-03 |date = 2007-10-23 |format = PDF |page = 4 |deadurl = yes |archiveurl = https://web.archive.org/web/20090326234420/http://www.ecmascript.org/es4/spec/overview.pdf |archivedate = 2009-03-26 }}</ref>，是一门多范式的语言，它支持[[面向对象程序设计|面向对象]]程式設計，[[指令式编程语言|指令式编程]]，以及[[函数式编程语言|函数式编程]]。它提供语法来操控文本、[[数组|数组]]、日期以及[[正则表达式|正则表达式]]等，不支持[[I/O|I/O]]，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。它已经由[[Ecma国际|ECMA（欧洲电脑制造商协会）]]通过[[ECMAScript|ECMAScript]]实现语言的标准化<ref name=":0" />。它被世界上的绝大多数网站所使用，也被世界主流[[浏览器|浏览器]]（[[Google_Chrome|Chrome]]、[[Internet_Explorer|IE]]、[[Firefox|Firefox]]、[[Safari|Safari]]、[[Opera電腦瀏覽器|Opera]]）支持。

JavaScript与[[Java|Java]]在名字或语法上都有很多相似性，但这两门编程语言从设计之初就有很大的不同，JavaScript的语言设计主要受到了[[Self|Self]]（一种基于原型的编程语言）和[[Scheme|Scheme]]（一门函数式编程语言）的影响<ref name=":1" />。在语法结构上它又与[[C语言|C语言]]有很多相似（例如if条件语句、switch语句、while循环、do-while循环等）<ref>{{Cite web|url=http://www.crockford.com/javascript/javascript.html|title=JavaScript: The World's Most Misunderstood Programming Language|accessdate=2016-08-17|work=www.crockford.com|archive-date=2020-12-07|archive-url=https://web.archive.org/web/20201207223150/http://www.crockford.com/javascript/javascript.html|dead-url=no}}</ref>。

在客户端，JavaScript在传统意义上被实现为一种解释语言，但在{{when|最近}}，它已经可以被[[即時編譯|即时编译]]（JIT）执行。随着最新的[[HTML5|HTML5]]和[[CSS3|CSS3]]语言标准的推行它还可用于游戏、桌面和移动应用程序的开发和在服务器端网络环境运行
如[[Node.js|Node.js]]。

== 历史 ==
=== 肇始於網景 ===
1993年，[[國家超級電腦應用中心|國家超級電腦應用中心]]（NCSA）發表了[[NCSA_Mosaic|NCSA Mosaic]]，這是最早流行的圖形介面網頁瀏覽器，它在[[全球資訊網|全球資訊網]]的普及上發揮了重要作用<ref>{{cite news |url=https://www.bloomberg.com/video/67758394 |title=Bloomberg Game Changers: Marc Andreessen |publisher=Bloomberg |date=March 17, 2011 |access-date=December 7, 2011 |archive-date=2012-05-16 |archive-url=https://web.archive.org/web/20120516093712/http://www.bloomberg.com/video/67758394/ |dead-url=no }}</ref>。1994年，Mosaic的主要開發人員隨即創立了[[Netscape|Netscape]]公司，並雇用了許多原來的NCSA Mosaic開發者用來開發[[Netscape_Navigator|Netscape Navigator]]，該公司的目標是取代NCSA Mosaic成為世界第一的網頁瀏覽器。在四個月內，已經佔據了四分之三的瀏覽器市場，並成為1990年代網際網路的主要瀏覽器<ref>{{Cite web|url=https://www.mwdwebsites.com/nj-web-design-web-browsers.html|title=The Evolution of the Web Browsers|last=Enzer|first=Larry|date=August 31, 2018|website=Monmouth Web Developers|access-date=August 31, 2018|archive-date=2018-08-31|archive-url=https://web.archive.org/web/20180831174847/https://www.mwdwebsites.com/nj-web-design-web-browsers.html|dead-url=no}}</ref>。網景預見到網路需要變得更動態。公司的創始人[[馬克·安德森|馬克·安德森]]認為[[HTML|HTML]]需要一種[[膠水語言|膠水語言]]，讓網頁設計師和兼職程式設計師可以很容易地使用它來組裝圖片和外掛程式之類的元件，且程式碼可以直接編寫在網頁標記中。

1995年，網景招募了[[布兰登·艾克|布兰登·艾克]]，目標是把[[Scheme|Scheme]]語言嵌入到Netscape Navigator瀏覽器當中<ref>{{cite web|url=http://speakingjs.com/es5/ch04.html|title=Chapter 4. How JavaScript Was Created|accessdate=2018-07-14|archive-date=2020-02-27|archive-url=https://web.archive.org/web/20200227184037/http://speakingjs.com/es5/ch04.html|dead-url=yes}}</ref>。但更早之前，網景已經跟[[昇陽電腦|昇阳]]合作在Netscape Navigator中支援[[Java|Java]]，這時網景內部產生激烈的爭論<ref>{{cite journal | last=Severance | first=Charles | date=February 2012 | title=JavaScript: Designing a Language in 10 Days | journal=Computer | volume=45 | issue=2 | pages=7–8 | publisher=IEEE Computer Society | url=http://www.computer.org/csdl/mags/co/2012/02/mco2012020007-abs.html | accessdate=23 March 2013 | doi=10.1109/MC.2012.57 | archive-date=2015-04-17 | archive-url=https://web.archive.org/web/20150417132950/http://www.computer.org/csdl/mags/co/2012/02/mco2012020007-abs.html | dead-url=no }}</ref>。後來網景決定發明一種與Java搭配使用的輔助腳本語言並且語法上有些類似<ref>{{cite web |title=TechVision: Innovators of the Net: Brendan Eich and JavaScript |url=http://wp.netscape.com/comprod/columns/techvision/innovators_be.html |format=HTML |date=2009-03-19 |deadurl=yes |archiveurl=https://web.archive.org/web/20080208124612/http://wp.netscape.com/comprod/columns/techvision/innovators_be.html |archivedate=2008-02-08 |accessdate=2009-03-19 }}</ref>，這個決策導致排除了採用現有的語言，例如[[Perl|Perl]]、[[Python|Python]]、[[Tcl|Tcl]]或Scheme。為了在其他競爭提案中捍衛JavaScript這個想法，公司需要有一個可以運作的原型。艾克在1995年5月僅花了十天時間就把原型設計出來了。

最初命名為'''Mocha'''，1995年9月在Netscape Navigator 2.0的Beta版中改名為'''LiveScript'''，同年12月，Netscape Navigator 2.0 Beta 3中部署時被重新命名為'''JavaScript'''<ref name="press_release" /><ref name="techvision">{{cite web | archiveurl=https://web.archive.org/web/20080208124612/http://wp.netscape.com/comprod/columns/techvision/innovators_be.html | archivedate=2008-02-08 | title=TechVision: Innovators of the Net: Brendan Eich and JavaScript | publisher=web.archive.org | url=http://wp.netscape.com/comprod/columns/techvision/innovators_be.html | accessdate=2009-03-19 | dead-url=no }}</ref>，當時网景公司与昇阳电脑公司组成的开发联盟为了让这门语言搭上Java这个编程语言“热词”，因此将其临时改名为JavaScript，日后这成为大众对这门语言有诸多误解的原因之一<ref>{{Citation|last=Fin JS|title=Brendan Eich - CEO of Brave|date=2016-06-17|url=https://www.youtube.com/watch?v=XOmhtfTrRxc&feature=youtu.be&t=2m5s|accessdate=2018-02-07|archive-date=2020-08-29|archive-url=https://web.archive.org/web/20200829024755/https://www.youtube.com/watch?v=XOmhtfTrRxc&feature=youtu.be&t=2m5s|dead-url=no}}</ref>。

=== 微軟採納 ===
[[微軟公司|微軟公司]]於1995年首次推出[[Internet_Explorer|Internet Explorer]]，從而引發了與Netscape的[[瀏覽器大戰|瀏覽器大戰]]。微软對Netscape Navigator[[直譯器|直譯器]]進行了[[逆向工程|逆向工程]]，創建了[[JScript|JScript]]，以與處於市場領導地位的網景產品同台競爭。JScript也是一種JavaScript實作，這兩個JavaScript語言版本在瀏覽器端共存意味著語言標準化的缺失，发展初期，JavaScript的标准并未确定，同期有网景的JavaScript，微软的JScript雙峰並峙。除此之外，微軟也在網頁技術上加入了不少專屬物件，使不少網頁使用非微軟平台及瀏覽器無法正常顯示<ref name="O'Reilly-2001">{{cite web |url=http://archive.oreilly.com/pub/a/javascript/2001/04/06/js_history.html |title=JavaScript, How Did We Get Here? |last=Champeon |first=Steve |date=6 April 2001 |website=oreilly.com |access-date=16 July 2016 |archive-url=https://web.archive.org/web/20160719020828/http://archive.oreilly.com/pub/a/javascript/2001/04/06/js_history.html |archive-date=2016-07-19 |dead-url=yes }}</ref><ref>{{cite web |url=http://news.microsoft.com/1996/05/29/microsoft-internet-explorer-3-0-beta-now-available/ |title=Microsoft Internet Explorer 3.0 Beta Now Available |publisher=Microsoft |date=29 May 1996 |website=microsoft.com |access-date=16 July 2016 |archive-date=2020-11-24 |archive-url=https://web.archive.org/web/20201124154053/https://news.microsoft.com/1996/05/29/microsoft-internet-explorer-3-0-beta-now-available/ |dead-url=no }}</ref>，導致在瀏覽器大戰期間網頁設計者通常會把「用Netscape可達到最佳效果」或「用IE可達到最佳效果」的標誌放在首頁<ref name="O'Reilly-2001" /><ref>{{cite web |url=http://www.technologizer.com/2010/09/16/the-unwelcome-return-of-best-viewed-with-internet-explorer/ |title=The Unwelcome Return of "Best Viewed with Internet Explorer" |last=McCracken |first=Harry |date=September 16, 2010 |website=technologizer.com |access-date=July 16, 2016 |archive-date=2018-06-23 |archive-url=https://web.archive.org/web/20180623192402/https://www.technologizer.com/2010/09/16/the-unwelcome-return-of-best-viewed-with-internet-explorer/ |dead-url=no }}</ref>。

=== 标准化 ===
1996年11月，網景正式向[[Ecma国际|ECMA]]（欧洲计算机制造商协会）提交語言標準。1997年6月，ECMA以JavaScript语言为基础制定了[[ECMAScript|ECMAScript]]标准规范ECMA-262。JavaScript成為了ECMAScript最著名的實現之一<ref name=":2">{{Cite book |title=Professional JavaScript for Web Developers |edition = 3rd |last=Nicholas |first=Zakas |publisher=Wrox |year=2012 |ISBN = 978-1-118-02669-4 |location= |pages= }}</ref>。除此之外，[[ActionScript|ActionScript]]和[[JScript|JScript]]也都是[[ECMAScript|ECMAScript]]规范的实现语言。儘管JavaScript作為給非程式人員的腳本語言，而非作為給程式人員的程式語言來推廣和宣傳，但是JavaScript具有非常豐富的特性。

== 概論 ==
一般来说，完整的JavaScript包括以下几个部分：
*ECMAScript，描述了该语言的语法和基本对象
*文档对象模型（[[DOM|DOM]]），描述处理'''网页内容'''的方法和接口
*浏览器对象模型（[[浏览器对象模型|BOM]]），描述与'''浏览器'''进行交互的方法和接口

JavaScript的基本特点如下：
*是一种解释性脚本语言（代码不进行预编译）。
*主要用来向HTML页面添加'''交互行为'''。
*可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。

JavaScript常用来完成以下任务：
*嵌入动态文本于HTML页面
*对浏览器事件作出响应
*读写HTML元素
*在数据被提交到服务器之前验证数据
*检测访客的浏览器信息
*控制[[cookie|cookie]]，包括创建和修改等

== 特性 ==
不同於[[伺服器|伺服器]]端腳本語言，例如[[PHP|PHP]]与[[Active_Server_Pages|ASP]]，JavaScript主要被作为[[客户端|客户端]]腳本語言在用戶的瀏覽器上運行，不需要伺服器的支持。所以在早期程式設計師比較青睞於JavaScript以減少對伺服器的負擔，而與此同時也帶來另一個問題：安全性。而隨著伺服器變得強大，現在的程序員更喜歡運行於伺服器端的腳本以保證安全，但JavaScript仍然以其跨平台、容易上手等優勢大行其道。同时，有些特殊功能（如AJAX）必须依赖JavaScript在客户端进行支持。隨著引擎如V8和框架如[[Node.js|Node.js]]的發展，及其[[事件驅動|事件驅動]]及[[異步IO|異步IO]]等特性，JavaScript逐漸被用來編寫[[伺服器|伺服器]]端程式。且在{{when|近几年}}中，[[Node.js|Node.js]]的出世，让JavaScript也具有了一定的服务器功能。

以下是[[ECMAScript|ECMAScript]]通常实现所共有的特性。

=== 指令式与结构化 ===
JavaScript从支持许多C语言的结构化编程语法（例如if条件语句、while循环、switch语句、do-while循环等）。但[[作用域|作用域]]是一个例外：JavaScript在过去只支持使用var关键字来定义变量的函数作用域。ECMAScript 2015加入了let关键字来支持块级作用域<ref>{{Cite web |url=https://www.ecma-international.org/ecma-262/6.0/#sec-let-and-const-declarations |title=存档副本 |accessdate=2020-07-09 |archive-date=2021-01-12 |archive-url=https://web.archive.org/web/20210112172132/http://www.ecma-international.org/ecma-262/6.0/#sec-let-and-const-declarations |dead-url=no }}</ref>。意味着JavaScript现在既支持函数作用域又支持块级作用域。和C语言一样，JavaScript中的[[表达式|表达式]]和语句是不同的。有一点格式上的不同，JavaScript支持自动在语句末添加分号，因此允许忽略语句末尾的分号。<ref>{{Cite web |url=https://flaviocopes.com/javascript-automatic-semicolon-insertion/ |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-12-03 |archive-url=https://web.archive.org/web/20201203043225/https://flaviocopes.com/javascript-automatic-semicolon-insertion/ |dead-url=no }}</ref>
=== 弱类型 ===
Javascript是[[強弱型別|弱类型]]的，这意味着变量可以被隐式地转换为另一个类型。<ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-12-14 |archive-url=https://web.archive.org/web/20201214012843/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures |dead-url=no }}</ref>
* 二元运算符<code>+</code>会把两个操作数转换为字符串，除非两个操作数都为数字类型。<ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/%E7%9B%B8%E5%8A%A0 |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-11-19 |archive-url=https://web.archive.org/web/20201119012504/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/%E7%9B%B8%E5%8A%A0 |dead-url=no }}</ref>这是因为<code>+</code>也表示字符串连接操作。
* 二元操作符<code>-</code>会把两个操作数转换为数字类型。<ref>{{Cite web |url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction |title=存档副本 |accessdate=2020-07-09 |archive-date=2021-01-27 |archive-url=https://web.archive.org/web/20210127220938/https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction |dead-url=no }}</ref>
* 一元操作符，包括<code>+</code>和<code>-</code>，都会把操作数转换为数字。
下列为变量转换为字符串的例子：
* 字符串类型不变。
* 数字会转换为其字符串表示。
* 数组的元素会转换为字符串，然后连接成通过逗号<code>,</code>分隔的长字符串。
* 其它对象会转换为<code>[object Object]</code>，其中<code>Object</code>中该对象的[[构造函数|构造函数]]名。<ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-10-31 |archive-url=https://web.archive.org/web/20201031113915/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString |dead-url=no }}</ref>
类型的隐藏转换，是JavaScript受到批评的原因之一，因为其增加了规则的复杂度与发生错误的可能性。<ref>{{Cite web |url=https://zhuanlan.zhihu.com/p/38976424 |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-08-29 |archive-url=https://web.archive.org/web/20200829024855/https://zhuanlan.zhihu.com/p/38976424 |dead-url=no }}</ref>

{| class="wikitable"
|+JavaScript中诡异的隐式转换<ref>{{Cite web |url=https://github.com/jawil/blog/issues/5 |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-12-15 |archive-url=https://web.archive.org/web/20201215180942/https://github.com/jawil/blog/issues/5 |dead-url=no }}</ref><ref>{{Cite web |url=https://chinese.freecodecamp.org/news/javascript-implicit-type-conversion/ |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-08-29 |archive-url=https://web.archive.org/web/20200829024901/https://chinese.freecodecamp.org/news/javascript-implicit-type-conversion/ |dead-url=no }}</ref>:
!左操作数
!操作符
!右操作数
!结果
|-
|<code>[]</code>（空数组）
|<code>+</code>
|<code>[]</code>（空数组）
|<code>""</code>（空字符串）
|-
|<code>[]</code>（空数组）
|<code>+</code>
|<code>{}</code>（空对象）
|<code>"[object Object]"</code>（字符串）
|-
|<code>false</code>（布尔值）
|<code>+</code>
|<code>[]</code>（空字符串）
|<code>"false"</code>（字符串）
|-
|<code>"123"</code>（字符串）
|<code>+</code>
|<code>1</code>（数字）
|<code>"1231"</code>（字符串）
|-
|<code>"123"</code>（字符串）
|<code>-</code>
|<code>1</code>（数字）
|<code>122</code> （数字）
|}

=== 动态化 ===
==== 类型 ====
JavaScript是[[动态类型|动态类型]]的，正如大部分脚本语言，其类型与值而不是与变量关联。例如变量可以为数值，随后又可被赋值为字符串。JavaScript提供了包括[[鸭子类型|鸭子类型]]在内的方法来检测变量类型。
==== 运行时估值 ====
Javascript提供<code>[[eval|eval]]()</code>函数，可以在运行时直接执行Javascript语句。<ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval |title=存档副本 |accessdate=2020-07-09 |archive-date=2021-02-04 |archive-url=https://web.archive.org/web/20210204153718/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval |dead-url=no }}</ref>

=== 基于原型的面向对象 ===
在JavaScript中，对象是[[关联数组|关联数组]]，通过原型（prototype，见下）进行扩充。每一个字符串键值提供对象的一个属性的名称。可以通过两种效果相同的方式进行访问：使用点号（<code>obj.x</code>）或使用方括号（<code>obj['x']</code>）。属性可以在运行时添加、重定义或删除。一个对象大多数属性（包括来自原型继承链的属性）都可以通过 <code>for...in</code>循环访问。<ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-12-14 |archive-url=https://web.archive.org/web/20201214012926/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects |dead-url=no }}</ref>
==== 原型 ====
JavaScript使用[[基于原型编程|原型]]，而许多其它面向对象语言使用类用于实现继承。有了原型，使得在JavaScript中模拟基于类的面向对象特征变成可能。<ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-12-04 |archive-url=https://web.archive.org/web/20201204092129/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain |dead-url=no }}</ref>
==== 函数作为对象构造器 ====
函数在JavaScript中兼作为对象构造函数。在函数调用前加上<code>new</code>会创建一个原型的实例，并继承来自构造函数的属性和方法（包括来自<code>Object</code>原型）。<ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects |title=存档副本 |access-date=2020-07-09 |archive-date=2020-12-14 |archive-url=https://web.archive.org/web/20201214012926/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects }}</ref>ECMAScript 5提供<code>Object.create</code>方法，可以显式地创建实例还不是自动从<code>Object</code>继承。<ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-12-04 |archive-url=https://web.archive.org/web/20201204201229/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create |dead-url=no }}</ref>构造函数的<code>prototype</code>属性决定了用于新对象的内部原型。可以通过修改构造函数的原型的方法来为对象添加新的方法。也可以修改JavaScript的内部对象的原型，如<code>Array</code>或<code>Object</code>。尽管可以这么做，但对<code>Object</code>原型进行修改并不是一个好的做法。因为大多数JavaScript对象都会从<code>Object</code>继承，且不会希望其原型做了修改。<ref>{{Cite web |url=https://juejin.im/post/5e2ff7dce51d4558021a1a4d |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-07-16 |archive-url=https://web.archive.org/web/20200716184842/https://juejin.im/post/5e2ff7dce51d4558021a1a4d |dead-url=no }}</ref>
==== 函数作为方法 ====
与大多数而向对象的语言不同，在JavaScript中函数定义与[[方法_(计算机科学)|方法]]定义没有明显的区别。唯一的区别在于调用时：当函数被作为方法调用时，函数的<code>this</code>会指向调用此函数的对象。<ref>{{Cite web |url=https://www.cnblogs.com/moltboy/archive/2013/04/24/3040450.html |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-07-16 |archive-url=https://web.archive.org/web/20200716184845/https://www.cnblogs.com/moltboy/archive/2013/04/24/3040450.html |dead-url=no }}</ref>
==== 传统的类定义与使用格式 ====
ECMAScript ES6加入了对<code>class</code>、<code>extends</code>关键字的支持，使得类的定义与继承行为更加类似于其它面向对象语言，同时也更加容易使用。<ref>{{Cite web |url=https://googlechrome.github.io/samples/classes-es6/ |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-11-12 |archive-url=https://web.archive.org/web/20201112010715/https://googlechrome.github.io/samples/classes-es6/ |dead-url=no }}</ref><ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/extends |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-11-19 |archive-url=https://web.archive.org/web/20201119005638/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/extends |dead-url=no }}</ref>

=== 函数式 ===
在JavaScript中，函数是[[头等函数|一等]]的，函数也被认为是对象。因此，函数也可以有属性与方法，例如<code>call()</code>和<code>bind</code>等。<ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-11-27 |archive-url=https://web.archive.org/web/20201127085532/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function |dead-url=no }}</ref>嵌套函数指定义于其它函数内部的函数，在外部函数被调用时，嵌套函数会被创建。另外，嵌套函数是一个[[闭包_(计算机科学)|闭包]]，在外部函数的作用域（包括常量，局部变量和参数）都成为内部函数状态的一部分，甚至在外部函数执行完毕后，内部函数的状态依然保留。<ref>{{Cite web |url=https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-12-03 |archive-url=https://web.archive.org/web/20201203144030/https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ |dead-url=no }}</ref>JavaScript同时也支持[[匿名函数|匿名函数]]。<ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/web/JavaScript/Reference/Operators/function |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-11-24 |archive-url=https://web.archive.org/web/20201124131448/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/function |dead-url=no }}</ref>

=== 其它 ===
==== 运行时环境 ====
JavaScript通常依赖于运行时环境（例如[[网页浏览器|浏览器]]）来提供对象和方法，脚本可以通过这些对象和方法与环境（例如网页[[文档对象模型|DOM]]）进行交互。它还依赖于运行时环境来提供包含/导入脚本（例如[[HTML|HTML]]的<code><nowiki><script></nowiki></code>元素）的功能。这本身不是语言功能，但是在大多数JavaScript实现中很常见。
==== 异步 ====
JavaScript一般来说是单线程的。<ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/learn/JavaScript/%E5%BC%82%E6%AD%A5/%E6%A6%82%E5%BF%B5 |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-11-02 |archive-url=https://web.archive.org/web/20201102194512/https://developer.mozilla.org/zh-CN/docs/learn/JavaScript/%E5%BC%82%E6%AD%A5/%E6%A6%82%E5%BF%B5 |dead-url=no }}</ref>为了[[并发|并发]]地处理事件，JavaScript程序输入/输出是使用[[事件|事件]]和[[回调函数|回调函数]]执行的。例如，这意味着JavaScript可以在等待数据库查询返回信息时处理鼠标单击。ECMAScript ES6引入了<code>Promise</code>用于优雅地处理异步事件，其可以使得传统的基于回调的异步代码更加清晰与简单。<ref name="js_async">{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/learn/JavaScript/%E5%BC%82%E6%AD%A5/%E7%AE%80%E4%BB%8B |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-10-27 |archive-url=https://web.archive.org/web/20201027163410/https://developer.mozilla.org/zh-CN/docs/learn/JavaScript/%E5%BC%82%E6%AD%A5/%E7%AE%80%E4%BB%8B |dead-url=no }}</ref><ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise |title=存档副本 |accessdate=2020-07-09 |archive-date=2020-12-01 |archive-url=https://web.archive.org/web/20201201075317/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise |dead-url=no }}</ref>
==== 变长参数 ====
JavaScript中函数的参数长度是可变的，在函数内部可以通过<code>arguments</code>对象访问这些参数。<ref>{{Cite web |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments |title=存档副本 |accessdate=2020-07-09 |archive-date=2021-01-29 |archive-url=https://web.archive.org/web/20210129180444/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments |dead-url=no }}</ref>

== 编程 ==
JavaScript是一種[[腳本語言|腳本語言]]，其[[原始碼|原始碼]]在發往客户端執行之前不需經過編譯，而是將文本格式的字符代碼發送給瀏覽器由瀏覽器解釋執行。[[直譯語言|直譯語言]]的弱點是安全性較差，而且在JavaScript中，如果一條執行不了，那麼下面的語言也無法執行。而其解決辦法就是於使用[[异常处理|异常处理]]<code>try {} catch () {}</code>︰
-{zh-hans:<syntaxhighlight lang="javascript">
console.log("a");  //这是正确的
console.log("b");  //这是正确的
console.logg("c"); //这是错误的，并且到这里会停下来
console.log("d");  //这是正确的
console.log("e");  //这是正确的

/* 解決辦法 */
try { console.log("a"); } catch (e) {}  //这是正确的
try { console.log("b"); } catch (e) {}  //这是正确的
try { console.logg("c"); } catch (e) {} //这是错误的，但是到这里不会停下来，而是跳过
try { console.log("d"); } catch (e) {}  //这是正确的
try { console.log("e"); } catch (e) {}  //这是正确的
</syntaxhighlight>;zh-hant:<syntaxhighlight lang="javascript">
console.log("a");  //這是正確的
console.log("b");  //這是正確的
console.logg("c"); //這是錯誤的，並且到這裡會停下來
console.log("d");  //這是正確的
console.log("e");  //這是正確的

/* 解決辦法 */
try { console.log("a"); } catch (e) {}  //這是正確的
try { console.log("b"); } catch (e) {}  //這是正確的
try { console.logg("c"); } catch (e) {} //這是錯誤的，但是到這裡不會停下來，而是跳過
try { console.log("d"); } catch (e) {}  //這是正確的
try { console.log("e"); } catch (e) {}  //這是正確的
</syntaxhighlight>}-

JavaScript被歸類為直譯語言，因為{{when|目前}}主流的引擎都是每次執行時載入程式碼並解譯。V8是將所有程式碼解譯後再開始執行，其他引擎則是逐行解譯（SpiderMonkey會將解譯過的指令暫存，以提高效能，稱為[[即時編譯|即時編譯]]），但由於V8的核心部份多數用JavaScript撰寫（而SpiderMonkey是用C++），因此在不同的測試上，兩者效能互有優劣。

與其相對應的是[[編譯語言|編譯語言]]，例如[[C语言|C语言]]，以編譯語言編寫的程式在執行之前，必須經過編譯，將程式碼編譯為機器碼，再加以執行。

== 範例 ==
以下是一個簡單的JavaScript [[Hello_World|Hello World]]︰
-{zh-hans:<syntaxhighlight lang="html5">
<!DOCTYPE HTML>
<html>
    <head>
    <title>简单的JavaScript Hello World</title>
        <script>
            document.write("Hello, world!");   // 直接插入页面中
            alert("Hello, world!");            // 弹窗显示
            console.log("Hello, world!");      // 在控制台（console）里显示，需要先开启开发工具控制台
        </script>
    </head>
    <body>
　　　　HTML内容……
    </body>
</html>
</syntaxhighlight>;zh-hant:
<syntaxhighlight lang="html5">
<!DOCTYPE HTML>
<html>
    <head>
    <title>簡單的JavaScript Hello World</title>
        <script>
            document.write("Hello, world!");   // 於瀏覽器視窗內直接顯示
            alert("Hello, world!");            // 開啟對話視窗顯示
            console.log("Hello, world!");      // 於console裡顯示，需要先開啟開發工具控制台
        </script>
    </head>
    <body>
　　　　HTML內容……
    </body>
</html>
</syntaxhighlight>}-

或是在[[瀏覽器|瀏覽器]]的[[地址栏|地址栏]]中使用<code>javascript:</code>，以互動方式表示：
<syntaxhighlight lang="javascript">
javascript:alert("Hello world!");
</syntaxhighlight>

== 版本 ==
{{See also|ECMAScript#版本}}
JavaScript最初開發於1996年，被使用於[[Netscape_Navigator|Netscape Navigator]]網頁瀏覽器。同年微軟在Internet Explorer發布了一個實作。由於商標問題，這項實作被命名為[[JScript|JScript]]。1997年，JavaScript已經被[[網景|網景]]公司提交給[[Ecma国际|ECMA]]制定為標準，稱之為[[ECMAScript|ECMAScript]]，標準編號[[ECMA-262|ECMA-262]]。使用顯式版本號聲明對語言的引用，作爲一項Mozilla的特性，已在較新版本中被移除（至少為[[Firefox|Firefox]] 59）。[[Firefox|Firefox]] 4是最後一個需要顯式地在引用時聲明明確版本號的版本（1.8.5）。

下列表格的資訊基於多個參考來源<ref>{{cite web | url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript | title=New in JavaScript | publisher=developer.mozilla.org | date=2014 | accessdate=2016-07-16 | archive-date=2019-03-22 | archive-url=https://web.archive.org/web/20190322043322/https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript | dead-url=no }}</ref><ref>{{cite web | url=http://www.webmasterworld.com/forum91/68.htm | title=JavaScript – JScript – ECMAScript version history | publisher=Webmasterworld.com | accessdate=2009-12-17 | archive-date=2012-11-10 | archive-url=https://web.archive.org/web/20121110004055/http://www.webmasterworld.com/forum91/68.htm | dead-url=no }}</ref><ref>{{cite web | author=John Resig | url=http://ejohn.org/blog/versions-of-javascript | title=Versions of JavaScript | publisher=Ejohn.org | accessdate=2009-05-19 | archive-date=2017-01-21 | archive-url=https://web.archive.org/web/20170121210137/http://ejohn.org/blog/versions-of-javascript/ | dead-url=no }}</ref><ref>{{cite web | url=http://msdn.microsoft.com/library/default.asp?url=/library/en-us/script56/html/js56jsoriversioninformation.asp | title=Version Information (JScript) | publisher=Msdn.microsoft.com | accessdate=2009-12-17 | archive-date=2001-12-07 | archive-url=https://web.archive.org/web/20011207154943/http://msdn.microsoft.com/library/default.asp?url=%2Flibrary%2Fen-us%2Fscript56%2Fhtml%2Fjs56jsoriversioninformation.asp | dead-url=no }}</ref>：

{| class="wikitable" style="text-align: center; word-break: keep-all;"
|-
! 版本 !! 發布日期 !! 基於 !! Netscape<br />Navigator !! Mozilla<br />Firefox !! Internet<br />Explorer !! Opera !! Safari !! Google<br />Chrome
|-
| {{Version |o |1.0}} || 1996年3月 || || 2.0 || || 3.0 || || ||
|-
| {{Version |o |1.1}} || 1996年8月 || || 3.0 || || || || ||
|-
| {{Version |o |1.2}} || 1997年6月 || || 4.0 - 4.05 || || || 3 || ||
|-
| {{Version |o |1.3}} || 1998年10月 || ECMA-262 1st + 2nd edition || 4.06 - 4.7x || || 4.0 || 5<ref>{{cite web| title=What Version of JavaScript| url=http://javascript.about.com/library/bljver.htm| accessdate=2016-08-27| archive-date=2017-01-09| archive-url=https://web.archive.org/web/20170109084234/http://javascript.about.com/library/bljver.htm| dead-url=no}}</ref> || ||
|-
| {{Version |o |1.4}} || || || Netscape<br />Server || || || 6 || ||
|-
| {{Version |o |1.5}} || 2000年11月 || ECMA-262 3rd edition || 6.0 || 1.0 || 5.5（JScript 5.5）<br />6（JScript 5.6）<br />7（JScript 5.7）<br />8（JScript 5.8）|| 7.0 || 3.0-5 || 1.0 - 10.0.666
|-
| {{Version |o |1.6}} || 2005年11月 || 1.5 + Array extras + Array and string generics + [[E4X|E4X]] || || 1.5 || || || ||
|-
| {{Version |o |1.7}} || 2006年10月 || 1.6 + [https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7?redirectlocale=en-US&redirectslug=New_in_JavaScript_1.7#Generators Pythonic generators] {{Wayback|url=https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7?redirectlocale=en-US&redirectslug=New_in_JavaScript_1.7#Generators |date=20130302054922 }} + Iterators + Let || || 2.0 || || || ||28.0.1500.95
|-
| {{Version |o |1.8}} || 2008年6月 || 1.7 + Generator expressions + [[闭包_(计算机科学)|Expression closures]] || || 3.0 || || 11.50 || ||
|-
| {{Version |o |1.8.1}} || || 1.8 + [[JSON#Native_encoding_and_decoding_in_browsers|native JSON]] support + Minor updates || || 3.5 || || || ||
|-
| {{Version |o |1.8.2}} || 2009年6月22日 || 1.8.1 + Minor updates || || 3.6 || || || ||
|-
| {{Version |o |1.8.5}} || 2010年7月27日 || 1.8.2 + New features for ECMA-262 5th edition compliance || || 4.0 || || || ||
|}

== 參見 ==
{{Portal|電腦程式設計}}
*[[腳本語言|腳本語言]]
*[[DMDScript|DMDScript]]
*[[ECMAScript|ECMAScript]]
*[[JavaScript引擎|JavaScript引擎]]
*[[JScript|JScript]]
*[[AJAX|AJAX]]
*[[JavaScript函式庫|JavaScript函式庫]]

== 參考文獻 ==
{{Reflist|30em}}

== 外部連結 ==
{{Wikibooks}}
*[https://developer.mozilla.org/docs/Web/JavaScript 關於JavaScript介紹]{{Wayback|url=https://developer.mozilla.org/docs/Web/JavaScript |date=20191017191009 }} [[Mozilla_Developer_Network|Mozilla Developer Network]]上的資源

{{-}}
{{JavaScript}}
{{ECMAScript}}
{{程序设计语言|JavaScript}}
{{網頁技術與標準}}
{{網頁設計}}
{{Node.js}}
{{网页浏览器}}

{{Authority control}}

[[Category:JavaScript|]]
[[Category:美国发明|Category:美国发明]]
[[Category:跨平台軟體|Category:跨平台軟體]]
[[Category:函数式编程语言|Category:函数式编程语言]]
[[Category:ISO标准化编程语言|Category:ISO标准化编程语言]]
[[Category:脚本语言|Category:脚本语言]]
[[Category:基于原型的编程语言|Category:基于原型的编程语言]]
[[Category:基于对象的编程语言|Category:基于对象的编程语言]]
[[Category:1995年建立的程式語言|Category:1995年建立的程式語言]]