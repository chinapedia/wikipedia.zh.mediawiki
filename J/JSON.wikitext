{{refimprove|time=2017-05-11T11:19:11+00:00}}
{{NoteTA|G1=IT}}
{{Infobox file format
| icon = [[File:JSON_vector_logo.svg|File:JSON vector logo.svg]]
| mime = application/json
| type code = TEXT
| extension = .json
| uniform type = public.json
| genre = 数据交换
| extended from = [[JavaScript|JavaScript]]
| standard = RFC 7159, [http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf ECMA-404]
| url = {{URL|http://json.org/}}
}}

'''JSON'''（'''J'''ava'''S'''cript '''O'''bject '''N'''otation, {{IPAc-en|ˈ|dʒ|eɪ|s|ən}}）是由[[道格拉斯·克羅克福特|道格拉斯·克羅克福特]]構想和設計的一種輕量級[[数据交换|資料交換格式]]。其內容由屬性和值所組成，因此也有易於閱讀和處理的優勢。JSON是獨立於[[程式語言|程式語言]]的[[文本文件|资料格式]]，其不僅是[[JavaScript|JavaScript]]的子集，也採用了[[C語言|C語言]]家族的習慣用法，目前也有許多程式語言都能夠將其[[语法分析器|解析和字串化]]，其廣泛使用的程度也使其成為通用的資料格式。

== 簡介 ==
JSON格式是1999年《''JavaScript Programming Language, Standard ECMA-262 3rd Edition''》的子集合，所以可以在[[JavaScript|JavaScript]]以<code>eval()</code>函式（javascript通过eval()调用解析器）读入。不过这并不代表JSON无法使用于其他语言，事实上几乎所有与网络开发相关的语言都有JSON函式库。

JSON的基本数据类型：
* 数值：十进制数，不能有前导0，可以为负数，可以有小数部分。还可以用<code><b>e</b></code>或者<code><b>E</b></code>表示指数部分。不能包含非数，如NaN。不区分整数与浮点数。JavaScript用双精度浮点数表示所有数值。 
* 字串：以双引号<code><b>""</b></code>括起来的零个或多个[[Unicode|Unicode]][[码位|码位]]。支持[[反斜杠|反斜杠]]开始的[[转义字符序列|转义字符序列]]。 
* 布尔值：表示为<code>true</code>或者<code>false</code>。
* 陣列：有序的零个或者多个值。每个值可以为任意类型。序列表使用方括号<code><b>[</b></code>，<code><b>]</b></code>括起来。元素之间用逗号<code><b>,</b></code>分割。形如：<code>[value, value]</code>
* 物件：若干无序的“键-值对”(key-value pairs)，其中键只能是字符串<ref>{{cite web |title=MDN-JSON标准 |url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON#javascript_object_notation |access-date=2021-10-30 |archive-date=2022-04-03 |archive-url=https://web.archive.org/web/20220403192202/https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON#javascript_object_notation }}</ref>。建议但不强制要求对象中的键是独一无二的。对象以花括号<code><b>{</b></code>开始，并以<code><b>}</b></code>结束。键-值对之间使用逗号分隔。键与值之间用冒号<code><b>:</b></code>分割。 
* 空值：值写为<code>null</code>

token（6种标点符号、字符串、数值、3种字面量）之间可以存在有限的空白符并被忽略。四个特定字符被认为是空白符：[[空格符|空格符]]、[[水平制表符|水平制表符]]、[[回车符|回车符]]、[[换行符|换行符]]。空白符不能出现在token内部（但空格符可以出现在字符串内部）。JSON标准不允许有[[字节序掩码|字节序掩码]]，不提供注释的句法。 一个有效的JSON文档的根节点必须是一个对象或一个数组。

JSON交换时必须编码为[[UTF-8|UTF-8]]。<ref name="rfc8259">{{cite web | url=https://tools.ietf.org/html/rfc8259 | title=The JavaScript Object Notation (JSON) Data Interchange Format | publisher=IETF | date=December 2017 | accessdate=16 February 2018 | archive-date=2021-01-20 | archive-url=https://web.archive.org/web/20210120055608/https://tools.ietf.org/html/rfc8259 }}</ref>转义序列可以为：“\\”、“\"”、“\/”、“\b”、“\f”、“\n”、“\r”、“\t”，或[[Unicode|Unicode]]16进制转义字符序列（\u后面跟随4位[[十六进制|16进制数字]]）。对于不在[[基本多文種平面|基本多文種平面]]上的[[码位|码位]]，必须用[[UTF-16|UTF-16]]代理对（surrogate pair）表示，例如对于[[Emoji|Emoji]]字符——喜極而泣的表情（{{Unichar|1F602|FACE WITH TEARS OF JOY}}）在JSON中应表示为：
<syntaxhighlight lang=javascript>
{ "face": "😂" }
// or
{ "face": "\uD83D\uDE02" }
</syntaxhighlight>
JSON的格式描述可以參考RFC 4627。

==应用领域==
=== WEB开发 ===

JSON最开始被广泛的应用于WEB应用的开发。不過目前JSON使用在[[JavaScript|JavaScript]]、[[Java|Java]]、[[Node.js|Node.js]]、[[C♯|C#]]應用的情況比較多，[[PHP|PHP]]等開發的WEB應用主要還是使用[[XML|XML]]。

===NoSQL数据库===
相对于传统的[[关系型数据库|关系型数据库]]，一些基于文档存储的[[NoSQL|NoSQL]]非关系型数据库选择JSON作为其数据存储格式，比较出名的产品有：[[MongoDB|MongoDB]]、[[CouchDB|CouchDB]]、[[RavenDB|RavenDB]]等。

== 举例 ==
<syntaxhighlight lang="json" line="1">
{
     "firstName": "John",
     "lastName": "Smith",
     "sex": "male",
     "age": 25,
     "address": 
     {
         "streetAddress": "21 2nd Street",
         "city": "New York",
         "state": "NY",
         "postalCode": "10021"
     },
     "phoneNumber": 
     [
         {
           "type": "home",
           "number": "212 555-1234"
         },
         {
           "type": "fax",
           "number": "646 555-4567"
         }
     ]
 }
</syntaxhighlight>
这种JSON格式也被不少游戏（如[[Minecraft|Minecraft]]）或應用軟體用来当作的部分数据存储的格式：
<syntaxhighlight lang="json" line="1">
[
     {
          "text": "This is the text",
          "color": "dark_red",
          "bold": "true",
          "strikethough": "true",
          "clickEvent":
               {
                    "action": "open_url",
                    "value": "zh.wikipedia.org"
               },
          "hoverEvent":
               {
                    "action": "show_text",
                    "value":
                    {
                         "extra": "something"
                    }
               }
     },
     {
          "translate": "item.dirt.name",
          "color": "blue",
          "italic": "true"
     }
]
</syntaxhighlight>

== 安全問題 ==
=== 读取JSON ===
由於JSON是[[JavaScript|JavaScript]]的子集，所以一般都會使用<code>eval()</code>作為讀取資料的方式，如果是针对可靠的数据来源，在不支持原生JSON解析的浏览器上面这是最快速的方法。然而由于eval方法同样可以执行任意的JavaScript代码，因此当数据来源不可靠时则可能产生安全问题。如下面的例子，直接用eval执行时会跳转：

<syntaxhighlight lang="javascript">
var json= eval("{message:(function (){ window.location='http://zh.wikipedia.org/wiki/JSON#.E5.AE.89.E5.85.A8.E6.80.A7.E5.95.8F.E9.A1.8C'; })()}");
</syntaxhighlight>

其中一種防止不安全程式碼出現的解決辦法，是通过浏览器原生支持的<code>JSON.parse(str)</code>方法讀取JSON資料，目前已经得到大部分主流浏览器的支持（IE8+，Firefox 3.5+，Chrome4+/Safari4+，Opera10+），在不支持原生JSON对象的浏览器上面可以使用<code>parseJSON</code>方法进行读取<ref>{{cite web|url=http://yuiblog.com/blog/2007/04/10/json-and-browser-security/|title=JSON and Browser Security|publisher=|access-date=2007-07-14|archive-date=2020-07-16|archive-url=https://web.archive.org/web/20200716190219/https://yuiblog.com/blog/2007/04/10/json-and-browser-security/}}</ref>，<code>parseJSON</code>採用解析器驗證讀入的程式碼是否真的是JSON程式碼，這樣就更安全。但由於這是用模擬的方式讀取，速度上會比<code>eval()</code>慢。

=== 跨站存取問題 ===
另外一個安全上的問題則是[[跨站请求伪造|跨站請求偽造]]（Cross-site request forgery，簡稱CSRF或XSRF）。這個問題在Javascript中的狀況是，由於Javascript採用了稱為「[[沙盒_(計算機安全)|沙盒]]」的機制，這種機制限制Javascript引擎僅能引入同一個站點的程式碼，因而某種程度上提高了安全性。

== 與其他格式的比較 ==
=== XML ===

JSON與XML最大的不同在於XML是一個完整的[[標記語言|標記語言]]，而JSON不是。這使得XML在程式判讀上需要比較多的功夫。主要的原因在於XML的設計理念與JSON不同。XML利用標記語言的特性提供了絕佳的延展性（如[[XPath|XPath]]），在数据存储，扩展及高级检索方面具备对JSON的优势，而JSON则由于比XML更加小巧，以及浏览器的内建快速解析支持，使得其更适用于网络数据传输领域。

=== MessagePack ===

[[MessagePack|MessagePack]]宣称比JSON更短小，快速。

=== 格式化工具 ===

JSON格式取代了XML给网络传输带来了很大的便利，但是却没有了XML的一目了然，尤其是JSON数据很长的时候，会让人陷入繁琐复杂的数据节点查找中。开发者可以-{zh-cn:通过; zh-tw:使用;}-在线JSON格式化工具，来更方便的对JSON数据进行节点查找和解析。

== 參考文獻 ==
{{reflist|2}}
# [https://www.icloud.com/shortcuts/eba1871305374e1fb7bb4c6fb4456224 Apple捷徑] {{Wayback|url=https://www.icloud.com/shortcuts/eba1871305374e1fb7bb4c6fb4456224 |date=20210523082240 }}

== 參閱 ==
* [[JSONP|JSONP]]
* [[AJAX|AJAX]]
* [[JavaScript|JavaScript]]
* [[YAML|YAML]]
* [[HOCON|HOCON]]

== 外部連結 ==
* {{en}} [http://www.json.org/ JSON]{{Wayback|url=http://www.json.org/ |date=20110223062632 }}，關於JSON的規格、文件，以及在其他語言實做的資訊
* [http://www.json.org/json-zh.html JSON中文说明] {{Wayback|url=http://www.json.org/json-zh.html |date=20200629181021 }}
* {{en}} RFC 4627，JSON在[[RFC|RFC]]裡的規格
* [https://quackertools.ambrosesoft.com/zh/json JSON格式化工具 (中文)] {{Wayback|url=https://quackertools.ambrosesoft.com/zh/json |date=20200716190240 }}
* [https://jsonformatter.org/json-editor JSON编辑器] {{Wayback|url=https://jsonformatter.org/json-editor |date=20201129015829 }}
* [https://codebeautify.org/jsonviewer JSON分析器]{{Wayback|url=https://codebeautify.org/jsonviewer |date=20180202164831 }}
* [https://codebeautify.org/json-to-csv JSON到CSV转换器] {{Wayback|url=https://codebeautify.org/json-to-csv |date=20210126195441 }}
* [https://minecraft-zh.gamepedia.com/%E5%91%BD%E4%BB%A4#JSON.E6.96.87.E6.9C.AC Minecraft指令─JSON文字格式] {{Wayback|url=https://minecraft-zh.gamepedia.com/%E5%91%BD%E4%BB%A4#JSON.E6.96.87.E6.9C.AC |date=20200810082421 }}
* [https://web.archive.org/web/20181216200705/https://jsonformatter.pro/cn JSON在线格式化工具]
{{-}}
{{Data Exchange|state=}}

[[Category:置標語言|Category:置標語言]]
[[Category:AJAX|Category:AJAX]]
[[Category:数据序列化格式|Category:数据序列化格式]]
[[Category:JSON|]]