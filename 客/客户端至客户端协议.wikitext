{{NoteTA
|G1=IT
}}
{{校对翻译}}
'''客户端至客户端协议'''（{{lang-en|'''Client-to-client protocol'''}} ，简称'''CTCP'''）是[[互联网中继聊天|互联网中继聊天]]（IRC）客户端之间的一种特殊类型的通信。

CTCP是现今使用的大多数IRC客户端支持的一种常见协议。CTCP扩展了原始的IRC协议，允许用户查询其他客户端或频道（使频道中所有客户端都回复CTCP特殊信息）。此外，CTCP可以用来编码信息，发送原始IRC协议的链路不允许发送的信息，例如包含[[換行|換行]]或[[字节|字节]]值为0（NULL）的信息。CTCP不在客户端之间建立直接连接，但它通常用于协商{{tsl|en|Direct Client-to-Client|直接的客户端至客户端|DCC}}连接。

CTCP允许用户查询远程客户端正在使用的客户端版本（通过<code>CTCP VERSION</code>）或时间（<code>CTCP TIME</code>）等信息。它还实现了/me命令（通过<code>CTCP ACTION</code>）。

== 历史 ==
{{tsl|en|ircII}}是第一个实现了CTCP和DCC协议的IRC客户端。<ref>{{Cite book|title=Securing IM and P2P Applications for the Enterprise|last=Piccard|first=Paul|last2=Brian Baskin|last3=George Spillman|last4=Marcus Sachs|date=May 1, 2005|publisher=Syngress|isbn=1-59749-017-2|edition=1st|page=386|chapter=IRC Networks and Security|quote=The authors of the ircII software package originally pioneered file transfers over IRC.}}</ref>Michael Sandrof在1990年将CTCP协议在ircII 2.1版中实现<ref>See the 'NOTES' and 'source/ctcp.c' files included with [http://download.ircii.org/historical/unsorted/clients/unix/ircii/ircii-2.1.4e.tar.gz ircii-2.1.4e.tar.gz]{{dead link|date=2017年12月 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>，Troy Rollo在1991年将DCC协议在2.1.2版本中实现。<ref>See the 'UPDATES' and 'source/dcc.c' files included with [http://download.ircii.org/historical/unsorted/clients/unix/ircii/ircii-2.1.4e.tar.gz ircii-2.1.4e.tar.gz]{{dead link|date=2017年12月 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>

== 结构 ==
CTCP采用一条<code>PRIVMSG</code>与<code>NOTICE</code>消息实现，消息中的第一个和最后一个字符是[[ASCII|ASCII]]值0x01。此外，IRC协议中不允许的字符将被转义。由于<code>NOTICE</code>按标准应产生一条回复，CTCP消息采用<code>PRIVMSG</code>发送，而回复采用<code>NOTICE</code>而非<code>PRIVMSG</code>实现。

CTCP查询在大多数客户端上按下列方式初始化：
 CTCP <target> <command> <arguments>
其中''<target>''是目标的昵称或频道名称，''<command>'' 是CTCP命令（例如<code>VERSION</code>），''<arguments>'' 是发送给''<target>''的额外信息。

== 常用CTCP命令 ==
请注意，下列CTCP命令和回复因客户端而不同，但大多数主要的IRC客户端支持它们。因您的IRC客户端不同，传入特定CTCP命令后，您可能会收到或不会收到自动的回复或响应，并且这些自动响应可能因客户端不同而有差异。

=== VERSION ===
<code>CTCP VERSION</code>请求将返回目标正在使用的IRC客户端的名称和版本，某些情况下还提供一些技术信息，诸如[[操作系统|操作系统]]、[[时钟频率|时钟频率]]、[[中央处理器|CPU制造商]]和[[计算机系统结构|CPU架构]]/[[指令集架構|指令集]]。

下面是将一个<code>CTCP VERSION</code>请求发送到运行有HexChat客户端（[[XChat|XChat]]的一个[[复刻_(软件工程)|复刻]]）的回复：
 VERSION HexChat 2.9.1 [x86] / Windows 8 [1.46GHz]

=== TIME ===
<code>CTCP TIME</code>请求将返回目标计算机的[[时区|本地时间]]。决于IRC客户端，回复可能是包含[[日期|日期]]、[[时区|时间]]（[[十二小時制|12小时格式]]或[[二十四小時制|24小时格式]]），[[年|年]]（例如2019）以及某种[[时区|时区]]（例如[[AEST|AEST]]）。

下面是将一个<code>CTCP TIME</code>发送到使用[[ChatZilla|ChatZilla]]客户端后的回复：
 TIME Fri 23 Nov 2019 19:26:42 AEST

=== PING ===
<code>CTCP PING</code>请求将测量现有两个客户端之间的直接[[Ping|ping速率]]（不算服务器）。<code>CTCP PING</code>命令采用的方式是，发送一个[[整数_(计算机科学)|整数]][[参数_(计算机科学)|参数]]（一个[[時間戳|時間戳]]）到目标客户端，然后目标客户端提供完全相同的数字参数来响应。之后计算原始时间戳与当前时间戳的[[減法|差异]]，将结果显示给发起''CTCP PING''的用户。在过程中通常使用[[毫秒|毫秒]]级的时间戳，因为大多数用户使用的[[寬頻|寬頻]]互联网连接通常只有1秒以下的ping延迟。

一个<code>CTCP PING</code>请求的示例，从[[XChat|XChat]]客户端发送给目标''<nickname>''：
 CTCP PING 23152511
在之后，根据所获样本差异产生的结果：
 Ping reply from <nickname>: 0.53 second(s)

=== DCC ===
* 参见{{tsl|en|Direct Client-to-Client|直接的客户端至客户端}}。

== 参见 ==
* [[IRC|IRC]]
* {{tsl|en|Comparison of Internet Relay Chat clients|IRC客户端的比较}}
* {{tsl|en|Direct Client-to-Client|直接的客户端至客户端|DCC}}（直接的客户端至客户端）

== 参考资料 ==
{{reflist}}

== 外部链接 ==
* [http://www.irchelp.org/irchelp/rfc/ctcpspec.html CTCP Details]{{Wayback|url=http://www.irchelp.org/irchelp/rfc/ctcpspec.html |date=20170109120944 }}

{{IRC footer}}

[[Category:IRC|Category:IRC]]
[[Category:網路術語|Category:網路術語]]
[[Category:IRC相关协议|Category:IRC相关协议]]