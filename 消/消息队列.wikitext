{{TA
|G1=IT
}}
在[[计算机科学|计算机科学]]中，'''消息队列'''（{{lang-en|Message queue}}）是一种[[进程间通信|进程间通信]]或同一进程的不同[[线程|线程]]间的通信方式，[[軟體|軟體]]的[[貯列|貯列]]用來處理一系列的[[輸入|輸入]]，通常是來自使用者。消息队列提供了[[异步|异步]]的[[通信协议|通信协议]]，每一個貯列中的紀錄包含詳細說明的資料，包含發生的時間，輸入裝置的種類，以及特定的輸入參數，也就是说：消息的发送者和接收者不需要同时与消息队列交互。消息会保存在[[队列|队列]]中，直到接收者取回它。<ref>{{Cite web |url=http://www.ibm.com/developerworks/cn/aix/library/au-ipc/index.html |title=使用UNIX System V IPC机制共享应用程序数据 |author=Sean A. Walberg |date=2007-03-15 |publisher=IBM |quote=消息队列非常独特，因为两个进程不必同时存在：一个进程可以发送一个消息并退出，而该消息可以在数天后才被另一个进程获得。 |access-date=2011-01-01 |archive-date=2019-12-02 |archive-url=https://web.archive.org/web/20191202212748/https://www.ibm.com/developerworks/cn/aix/library/au-ipc/index.html |dead-url=no }}</ref>

一個 [[WIMP_(電腦)|WIMP]] 環境像是 [[Microsoft_Windows|Microsoft Windows]]，藉由優先的某些形式（通常是事件的時間或是重要性的順序）來儲存使用者產生的事件到一個 '''事件貯列''' 中。系統把每個事件從事件貯列中傳遞給目標的應用程式。

==实现==
实际上，消息队列常常保存在[[链表|链表]]结构中。<ref name="ibm">{{Cite web|url=http://www.ibm.com/developerworks/cn/linux/l-ipc/part3/|title=Linux环境进程间通信（三）|author=郑彦兴|date=2003-01-17|publisher=IBM|quote=消息队列就是一个消息的链表。……它提供有格式字节流，有利于减少开发人员的工作量|access-date=2011-01-01|archive-date=2019-12-01|archive-url=https://web.archive.org/web/20191201035429/https://www.ibm.com/developerworks/cn/linux/l-ipc/part3/|dead-url=no}}</ref>拥有权限的进程可以向消息队列中写入或读取消息。

目前，有很多消息队列有很多开源的实现，包括[[JBoss_Messaging|JBoss Messaging]]、[[JORAM|JORAM]]、[[Apache_ActiveMQ|Apache ActiveMQ]]、[[Sun_Open_Message_Queue|Sun Open Message Queue]]、[[RabbitMQ|RabbitMQ]]<ref>{{Cite web |url=https://www.rabbitmq.com/ |title=RabbitMQ |accessdate=2016-04-14 |archive-date=2011-03-12 |archive-url=https://web.archive.org/web/20110312041529/http://www.rabbitmq.com/ |dead-url=no }}</ref>、[[IBM_MQ|IBM MQ]]<ref>{{Cite web |url=http://www-03.ibm.com/software/products/en/ibm-mq |title=IBM MQ |access-date=2016-04-14 |archive-date=2018-03-07 |archive-url=https://web.archive.org/web/20180307130718/http://www-03.ibm.com/software/products/en/ibm-mq |dead-url=no }}</ref>、[[Apache_Qpid|Apache Qpid]]<ref>[http://qpid.apache.org/ {{Wayback|url=http://qpid.apache.org/ |date=20210310235522 }} Apache Qpid Project, an implementation of [[Advanced_Message_Queuing_Protocol|AMQP]]].</ref>、[[Apache_RocketMQ|Apache RocketMQ]]<ref>{{Cite web |url=https://rocketmq.apache.org/ |title=RocketMQ™ |access-date=2018-12-26 |archive-date=2018-12-28 |archive-url=https://web.archive.org/web/20181228001523/https://rocketmq.apache.org/ |dead-url=no }}</ref>和HTTPSQS。<ref>{{Cite web |url=http://code.google.com/p/httpsqs/ |title=HTTPSQS, an message queue based on HTTP GET/POST protocol. |access-date=2010-12-31 |archive-date=2016-01-09 |archive-url=https://web.archive.org/web/20160109221912/https://code.google.com/p/httpsqs/ |dead-url=no }}</ref>

==优缺点==
消息队列本身是'''异步'''的，它允许接收者在消息发送很长时间后再取回消息，这和大多数通信协议是不同的。例如[[WWW|WWW]]中使用的[[HTTP|HTTP]]协议（HTTP/2之前）是[[同步|同步]]的，因为客户端在发出请求后必须等待服务器回应。然而，很多情况下我们需要异步的通信协议。比如，一个进程通知另一个进程发生了一个事件，但不需要等待回应。但消息队列的异步特点，也造成了一个缺点，就是接收者必须[[轮询|轮询]]消息队列，才能收到最近的消息。

和[[信号_(计算机科学)|信号]]相比，消息队列能够传递更多的信息。与[[管道流|管道]]相比，消息队列提供了有格式的数据，这可以减少开发人员的工作量。<ref name="ibm" />但消息队列仍然有大小限制。

消息队列除了可以當不同[[线程|线程]]或[[进程|进程]]間的緩衝外，更可以透過消息队列當前訊息數量來偵測接收[[线程|线程]]或[[进程|进程]]效能是否有問題。

==参考资料==
<references/>

[[Category:数据结构|X]]
[[Category:協同控制|X]]
[[Category:并发计算|X]]
[[Category:Unix|X]]
[[Category:进程间通信|X]]