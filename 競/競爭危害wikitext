{{多個問題|
{{expand|time=2015-03-22T23:23:40+00:00}}
{{unreferenced|time=2015-03-22T23:23:40+00:00}}
}}
{{NoteTA
|G1=IT
|G2=Electronics
}}

'''競爭危害'''（race hazard）又名'''競態條件'''、'''竞争条件'''（race condition），它旨在描述一個系統或者進程的輸出依赖于不受控制的事件出现顺序或者出现时机。此词源自於兩個訊號試著彼此競爭，來影響誰先輸出。

举例来说，如果计算机中的两个[[进程|进程]]同时试图修改一个共享内存的内容，在没有[[并发控制|并发控制]]的情况下，最后的结果依赖于两个进程的执行顺序与时机。而且如果发生了并发访问冲突，则最后的结果是不正确的。

競爭危害常見於不良設計的電子系統，尤其是邏輯電路。但它們在[[軟體|軟體]]中也比较常見，尤其是有采用[[多线程|多线程]]技术的软件。

== 實例 ==

# [[計算機|計算機]]記憶體或者[[磁碟|磁碟]]裝置裡，如果同時發出大量數據指令的時候，競爭危害可能發生。計算機嘗試覆蓋相同或者舊的數據，而此時旧的數據仍在被讀取。結果可能是下面的一個或者多個情況：機器當機、出現非法操作並結束程式、錯誤的讀取舊數據、或者錯誤的寫入新數據。
# [[網路|網路]]上，競爭危害會在：多用戶同時試圖訪問同一個可用訊息通道時，產生。在系統同意訪問前沒有計算機能得到訊息通道被佔用的提醒。統計上說這種情況通常發生在極端長延遲時間的網路裡，譬如[[地球同步衛星|地球同步衛星]]。解決之道是用戶預先產生優先級列表。然而駭客可以利用這種競爭危害取得非法訪問網路的權利。
# 数字[[电路|电路]]，由于逻辑部件输出对输入有一个响应延迟，因此可能在输出上出现一个不希望有的脉冲信号。被称为[[glitch|Electronics glitch]]。使用[[卡诺图|卡诺图]]以发现并消除这类问题。
[[Image:Race_condition.svg|frame]].当输入值（''A''）改变，电路输出有一个很短的峰持续（∆''t''<sub>1</sub>+∆''t''<sub>2</sub>） - ∆''t''<sub>2</sub> = ∆''t''<sub>1</sub>.]]

== 参见 ==
* [[死锁|死锁]]
* [[矮波|矮波]]

==外部链接==
*[http://doi.ieeecomputersociety.org/10.1109/32.57622 Starvation and Critical Race Analyzers for Ada] in IEEE Transactions on Software Engineering, August 1990 (vol. 16 no. 8) pp. 829–843 by  G.M. Karam  and  R.J.A. Buhr
*Paper "[http://citeseer.ist.psu.edu/251866.html Algorithms for the Optimal State Assignment of Asynchronous State Machines] {{Wayback|url=http://citeseer.ist.psu.edu/251866.html |date=20080421232515 }}" by  Robert M. Fuhrer ,  Bill Lin  and  Steven M. Nowick
*Paper "[http://citeseer.ist.psu.edu/11804.html A Novel Framework for Solving the State Assignment Problem for Event-Based Specifications] {{Wayback|url=http://citeseer.ist.psu.edu/11804.html |date=20050316061030 }}" by  Luciano Lavagno ,  Cho W. Moon ,  Robert K. Brayton  and  Alberto Sangiovanni-Vincentelli
*Article "[http://www-128.ibm.com/developerworks/linux/library/l-sprace.html Secure programmer: Prevent race conditions—Resource contention can be used against you] {{Wayback|url=http://www-128.ibm.com/developerworks/linux/library/l-sprace.html |date=20090201132237 }}" by David A. Wheeler
*Chapter "[http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO.html#AVOID-RACE Avoid Race Conditions] {{Wayback|url=http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO.html#AVOID-RACE |date=20201208033137 }}"（Secure Programming for Linux and Unix HOWTO）
*[https://web.archive.org/web/20070926215258/http://chiralsoftware.com/blog/Race-condition-vulnerability-in-syscall-wrappers-fa3e57c594119803.html Race conditions, security, and immutability in Java], with sample source code and comparison to C code, by Chiral Software
*[https://web.archive.org/web/20100513012805/http://software.intel.com/en-us/articles/interview-with-dmitriy-vyukov-the-author-of-relacy-race-detector-rrd/ Interview with Dmitriy Vyukov - the author of Relacy Race Detector (RRD)]

[[Category:软件设计模式|Category:软件设计模式]]
[[Category:電腦安全|Category:電腦安全]]
[[Category:協同控制|Category:協同控制]]
[[Category:保全漏洞|Category:保全漏洞]]