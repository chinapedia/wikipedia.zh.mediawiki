{{unreferenced|time=2014-02-18T11:46:28+00:00}}
{{NoteTA
|G1 = IT
|1 = zh-cn:类型; zh-tw:類別;
|2 = zh-cn:类; zh-tw:類別;
}}

'''类'''（{{lang-en|class}}）在[[物件導向程式設計|物件導向程式設計]]中是一种[[面向对象程序设计|面向对象]]计算机编程语言的构造，是创建[[对象_(计算机)|对象]]的蓝图，描述了所创建的对象共同的[[特性_(计算机科学)|特性]]和[[方法_(计算机科学)|方法]]。

类的更严格的定义是由某种特定的[[元数据|元数据]]所组成的[[內聚性_(計算機科學)|内聚]]的包。它描述了一些对象的行为规则，而这些对象就被称为该类的[[实例|实例]]。类有[[介面_(程式設計)|接口]]和结构。接口描述了如何通过方法与类及其实例互操作，而结构描述了一个实例中数据如何划分为多个属性。类是与某个层{{NoteTag|这里的层指类型层次中连接时模块依赖性相同的类的集合，即某环境下可重用性相同的组件的集合。}}的对象的最具体的类型。类还可以有运行时表示形式（[[元对象|元对象]]），它为操作与类相关的元数据提供了运行时支持。

支持类的编程语言在支持与类相关的各种特性方面都多多少少有一些微妙的差异。大多数都支持不同形式的类继承。许多语言还支持提供[[封装性|封装性]]的特性，比如访问修饰符。类的出现，为[[面向对象编程|面向对象编程]]的三个最重要的特性（[[封装性|封装性]]、[[继承性|继承性]]、[[多态_(计算机科学)|多态性]]），提供了实现的手段。

== 類別的定义 ==
在现实世界中，经常有属于同一个类的对象。例如，某辆[[自行车|自行车]]只是世界上很多自行车中的一辆。在面向对象软件中，也有很多共享相同特征的不同的对象：矩形、雇用记录、视频剪辑等。可以利用这些对象的相同特征为它们建立一个蓝图。对象的软件蓝图称为类。

類別是定义同一类所有对象的[[变量|变量]]和[[方法_(電腦科學)|方法]]的蓝图或原型。例如，可以建立一个定义包含当前档位等实例变量的自行车類別。这个類別也定义和提供了[[实例|实例]]方法（变档、刹车）的实现。

实例变量的值由類別的每个实例提供。因此，当创建自行车類別以后，必须在使用之前对它进行[[实例化|实例化]]。当创建类的实例时，就建立了这种类型的一个对象，然后系统为類別定义的实例变量分配内存。然后可以调用对象的实例方法实现一些功能。相同類別的实例共享相同的实例方法。

除了实例变量和方法，類別也可以定义类变量和类方法。可以从類別的实例中或者直接从類別中访问类变量和方法。类方法只能操作类变量 - 不必访问实例变量或实例方法。

系统在第一次在程序中遇到一个类时为这个类建立它的所有类变量的拷贝 - 这个类的所有实例共享它的类变量。

== 類別和对象 ==
对象和類別的说明其实很相似。实际上，類別和对象之间的差别经常是一些困惑的起源。在现实世界中很明显，類別不是它描述的对象 - 自行车的蓝图不是自行车。但是在软件中就有点难区分類別和对象。这部分是由于软件对象只是现实世界的电子模型或抽象概念。但是也由于很多人用“对象”指類別和它们的实例这两者。

=== 抽象类 ===
'''抽象类'''被定义为永远不会也不能被实例化为具体的对象。它往往用于定义一种抽象上的概念，在类的继承关系中它往往被定义在较上层的位置。在程序设计的实践活动中，抽象类与[[介面_(程式設計)|接口]]存在类似的地方，即它更偏重于对共通的方法和属性进行规约。但与接口存在一个非常大的差异则在于，抽象类往往可以规约一个共同的方法和属性时提供一个对他们的实现。

以现实世界为例：“水果”可以算作一个抽象类，而“苹果”、“香蕉”则可以作为它的派生类。区别在于，“水果”是个概念，它不会有实例，但是“苹果”、“香蕉”则肯定会有实例。

== 類別的好处 ==
对象提供了模型化和信息隐藏的好处。類別提供了[[可重複使用性|可重複使用性]]的好处。自行车制造商一遍一遍地重用相同的蓝图来制造大量的自行车。软件程序员用相同的類別，即相同的代码一遍一遍地建立对象。

== 注释 ==
{{NoteFoot}}

== 参见 ==
{{Portal box|计算机程序设计}}
* [[面向对象程序设计|面向对象程序设计]]

[[Category:类_(计算机科学)|]]
[[Category:程序架構|Category:程序架構]]
[[Category:面向对象的程序设计|Category:面向对象的程序设计]]