{{NoteTA
|G1=IT
|1=zh-tw:型別;zh-cn:类型
|2=zh-tw:宣告;zh-cn:声明
}}

在[[计算机科学|计算机科学]]中，'''类型签名'''（{{lang-en|type signature}}）或'''类型注解'''（{{lang|en|type annotation}}）是对程序的函数、方法、子过程、以及变量等给出其类型。特别是对函数给出其输入参数数量、类型与次序及输出结果的类型。 许多编译器产生的内部使用的函数名包含了其类型特征，这称为[[名字修饰|名字修饰]]，為[[链接器|链接器]]辨别不同的函数提供了方便。<ref>{{cite web|title=C++ Reference: Programming terms|url=http://www.cs.unm.edu/~storm/C++/ProgrammingTerms/FunctionSignatures.html|accessdate=3 December 2013|archive-date=2020-01-19|archive-url=https://web.archive.org/web/20200119005322/https://www.cs.unm.edu/~storm/C++/ProgrammingTerms/FunctionSignatures.html|dead-url=no}}</ref>

类型特征的现代应用：
* 面向对象语言使用的[[interface|interface]]，实际上是利用了函数类型特征的模板。 
* C++支持的[[函数重载|函数重载]]实际上用不同的类型特征来辨识。 
* 多继承要求考虑函数特征，以避免不可预计的结果。  
 
==C/C++==
在 [[C语言|C]] 和 [[C++|C++]] 中，类型签名通常被声明为[[函数原型|函数原型]]，函数声明也反映了其用法。例如，[[函数指针|函数指针]]使用方法如下：
<syntaxhighlight lang=C>
char c;
double d;
int retVal = (*fPtr)(c, d);
</syntaxhighlight>

它的签名为：

<syntaxhighlight lang=C>
(int) (char, double);
</syntaxhighlight>

== Java ==
在Java中，方法签名（{{Lang-en|method signature}}）由方法的名字（method's name）与参数类型（parameter types）组成。<!-- Definition: Two of the components of a method declaration comprise the method signature—the method's name and the parameter types. --><ref>{{Cite web|title=Defining Methods (The Java™ Tutorials > Learning the Java Language > Classes and Objects)|url=https://docs.oracle.com/javase/tutorial/java/javaOO/methods.html|accessdate=2020-05-19|work=docs.oracle.com|archive-date=2021-04-17|archive-url=https://web.archive.org/web/20210417040428/https://docs.oracle.com/javase/tutorial/java/javaOO/methods.html|dead-url=no}}</ref> 如下例：<syntaxhighlight lang="java">
public double calculateAnswer(double wingSpan, int numberOfEngines,
                              double length, double grossTons) {
    //do the calculation here
}
</syntaxhighlight>该例的方法签名为：<code>calculateAnswer(double, int, double, double)</code>

==参考文献==
{{reflist}}
 
[[Category:类型论|Category:类型论]]
[[Category:计算机编程|Category:计算机编程]]