{{NoteTA
|G1 = IT
}}
'''类型擦除'''是[[计算机程序设计|计算机程序设计]]时，在[[编译期|编译期]]明确去掉所编程序（某部分）的[[类型系统|类型系统]]。

[[操作语义|操作语义]]不需要程序伴随着类型，这称作“类型擦除语义”（type-erasure semantics）。
类型擦除语义的一种可能是通过{{tsl|en|Abstraction principle (computer programming)|抽象原理}}，确保程序在运行时执行不依赖类型信息。

与之相对的是类型传递语义（type-passing semantics）。如通过[[具体化|具体化]]。<ref>{{cite web|last1=Langer|first1=Angelika|title=What is reification?|url=http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ101A|access-date=2015-06-12|archive-date=2021-04-22|archive-url=https://web.archive.org/web/20210422094457/http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ101A|dead-url=no}}</ref>。类型擦除的逆操作是[[类型推断|类型推断]]。 
==Java实现==
Java通过类型擦除的方式实现[[泛型|泛型]]。
具体来说，Java[[編譯器|编译器]]会将类型参数替换为其上界(upper bound, 在Java中，即类型参数中extends子句的类型)，如果上界没有定义，则默认为Object。这样，在编译后就不会保留类型参数。同时为了保证类型安全，会插入[[类型转换|显式类型转换]]；以及为了保证[[多态_(计算机科学)|多态性]]，会生成桥接方法。因此，不同于C++的[[模板_(C++)|模板]]，Java通过类型擦除实现泛型，不会生成新的类。<ref>{{Cite web|title=Type Erasure (The Java™ Tutorials > Learning the Java Language > Generics (Updated))|url=https://docs.oracle.com/javase/tutorial/java/generics/erasure.html|accessdate=2020-05-25|work=docs.oracle.com|archive-date=2021-02-27|archive-url=https://web.archive.org/web/20210227022015/https://docs.oracle.com/javase/tutorial/java/generics/erasure.html|dead-url=no}}</ref>

==C++实现==
* 通过多态来擦除类型：把派生类型转成基类型隐藏起来，通过基类的多态调用虚函数隐藏类的实现。 
* 通过模板来擦除类型：模板的参数类型本质上是把不同类型的共同行为进行了抽象。
* 通过某种容器来擦除类型：如std::tuple
* 通过某种通用类型来擦除类型：如boost.any
* 通过闭包来擦除类型：如std::function、lambda函数等

==C#实现==
==参见==
* {{tsl|en|Generics in Java#Problems with type erasure|Java的类型擦除}}
* [[类型多态|类型多态]]

==参考文献==
{{Reflist}}
* {{cite journal
  | first1 = Karl | last1 = Crary
  | first2 = Stephanie | last2 = Weirich
  | first3 = Greg | last3 = Morrisett
  | title = Intensional Polymorphism in Type-Erasure Semantics
  | journal = Journal of Functional Programming
  | volume = 12
  | issue = 6
  | publisher =
  | booktitle = 
  | pages = 567–600
  |doi = 10.1017/S0956796801004282
  | year = 2002
  }}

[[Category:类型论|Category:类型论]]
[[Category:C++|Category:C++]]