'''汤普森构造法'''在[[计算机科学|计算机科学]]中是指一个能将[[正则表达式|正则表达式]]转化为一个与之等价的[[非确定有限状态自动机|非确定有限状态自动机]]（NFA）的[[算法|算法]]。算法得到的NFA可以在编程中用于匹配一个正则表达式，这也是正则表达式引擎实现的基本思路之一。

正则表达式和非确定有限状态自动机是[[形式语言|形式语言]]的两种不同的[[抽象|抽象]][[表达方式|表达方式]]。在诸如[[文本编辑器|文本编辑器]]的高级“查找和替换”以及许多编程语言中，人们都习惯使用正则表达式来表示[[字符串|字符串]]的匹配模式。然而，当计算机执行匹配程序时，NFA却是更加适合的一种格式。因此，汤普森构造法有着重要的应用价值，它实际上可以视作正则表达式到NFA的一个编译器。而从理论角度上来说，该算法实际上是正则表达式和NFA等价性证明的一部分——事实上，这两种表述形式本质上都对应着相同的语言，即[[正则语言|正则语言]]。

在应用中，算法得到的NFA可以再次通过[[幂集构造|幂集构造]]和最小化的过程得到一个对应的最简的[[确定有限状态自动机|确定有限状态自动机]]（DFA），进而用于匹配正则表达式。但是有些情况下也会直接使用对应的NFA。

== 算法介绍 ==

=== 构造规则 ===
算法通过[[递归|递归]]地将一个正则表达式划分成构成它的子表达式，在得到每个子表达式对应的NFA之后，根据子表达式之间的运算关系和一系列规则构造表达式自身对应的NFA。<ref>{{cite journal| author=Ken Thompson| title=Programming Techniques: Regular expression search algorithm| journal=Communications of the ACM|date=Jun 1968| volume=11| number=6| pages=419–422| doi=10.1145/363347.363387}}</ref>具体来说，这套构造规则如下所示<ref>[[Alfred_V._Aho|Alfred V. Aho]], Ravi Sethi, [[Jeffrey_Ullman|Jeffrey Ullman]]: ''Compilers: Principles, Techniques and Tools.'' Addison Wesley, 1986</ref> ：

==== 递归终点 ====
对于正则表达式为ε或者只由一个符号构成的情况，则无需继续递归，对应的NFA可以直接由下列规则给出：

'''空表达式'''ε直接转化为：

[[File:Thompson-epsilon.svg|inline]]

字母表中的单个'''符号'''''a''直接转化为：

[[File:Thompson-a-symbol.svg|inline]]

==== 子表达式运算的构造规则 ====
下面针对正则表达式的三种运算——并、连接和[[Kleene星号|Kleene*]]闭包给出NFA的构造规则。设子表达式为s和t，则它们对应的NFA分别记作N(s)和N(t)。

两个正则表达式的'''并'''{{color|#800000|''s''}}|{{color|#008000|''t''}}可以转化为：

[[File:thompson-or.svg|inline]]

通过ε转移， 状态''q'' 可以直接到达''N''({{color|#800000|''s''}})或''N''({{color|#008000|''t''}})的初态。而''N''({{color|#800000|''s''}})或''N''({{color|#008000|''t''}})原来的终态也可以通过ε转移直接到达整个NFA的新终态。

'''连接表达式'''{{color|#800000|''s''}}{{color|#008000|''t''}}可以转化为：

[[File:thompson-concat.svg|inline]]

''N''({{color|#800000|''s''}})的初态成为新的NFA的初态。 原来''N''({{color|#800000|''s''}})的终态成为''N''({{color|#008000|''t''}})的初态。而原来''N''({{color|#008000|''t''}})的终态成为新的NFA的终态。

'''Kleene*闭包'''{{color|#800000|''s''}}<sup>*</sup>可以转化为：

[[File:thompson-kleene-star.svg|inline]]

将新表达式的初态和终态以及夹在中间的子表达式的NFA ''N''({{color|#800000|''s''}})连接起来的ε转移使得可以选择经过或者不经过子表达式。而从''N''({{color|#800000|''s''}})的终态到初态的ε转移使得{{color|#800000|''s''}}可以重复任意多次。

* '''加括号的表达式''' ({{color|#800000|''s''}}) 直接转化为 ''N''({{color|#800000|''s''}}) 自身即可。

== 参考资料 ==
{{reflist}}

[[Category:自动机|Category:自动机]]
[[Category:形式语言|Category:形式语言]]
[[Category:算法|Category:算法]]