'''双重检查锁定模式'''（也被称为"双重检查加锁优化"，"锁暗示"（Lock hint）<ref>Schmidt, D et al. Pattern-Oriented Software Architecture Vol 2, 2000 pp353-363</ref>) 是一种[[软件设计模式|软件设计模式]]用来减少并发系统中竞争和同步的开销。双重检查锁定模式首先验证锁定条件(第一次检查)，只有通过锁定条件验证才真正的进行加锁逻辑并再次验证条件(第二次检查)。

该模式在某些语言在某些硬件平台的实现可能是不安全的。有的时候，这一模式被看做是[[反模式|反模式]]。

它通常用于减少加锁开销，尤其是为多线程环境中的[[单例模式|单例模式]]实现“惰性初始化”。惰性初始化的意思是直到第一次访问时才初始化它的值。

== Java中的使用 ==

考虑下面的[[Java_(编程语言)|Java]]代码[http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html]{{WebCite|url=https://www.webcitation.org/65pMPrEYN?url=http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html |date=20120301014055 |dateformat=iso }}
<syntaxhighlight lang="java">
// Single threaded version
class Foo {
    private Helper helper = null;
    public Helper getHelper() {
        if (helper == null) {
            helper = new Helper();
        }
        return helper;
    }

    // other functions and members...
}
</syntaxhighlight>

这段在使用多线程的情况下无法正常工作。在多个线程同时调用<code>getHelper()</code>时，必须要获取[[锁_(计算机科学)|锁]]，否则，这些线程可能同时去创建对象，或者某个线程会得到一个未完全初始化的对象。

锁可以通过代价很高的同步来获得，就像下面的例子一样。

<syntaxhighlight lang="java">
// Correct but possibly expensive multithreaded version
class Foo {
    private Helper helper = null;
    public synchronized Helper getHelper() {
        if (helper == null) {
            helper = new Helper();
        }
        return helper;
    }

    // other functions and members...
}
</syntaxhighlight>

只有<code>getHelper()</code>的第一次调用需要同步创建对象，创建之后<code>getHelper()</code>只是简单的返回成员变量，而这里是无需同步的。
由于同步一个方法会降低100倍或更高的性能<ref>Boehm, Hans-J. "Threads Cannot Be Implemented As a Library", ACM 2005, p265</ref>， 每次调用获取和释放锁的开销似乎是可以避免的：一旦初始化完成，获取和释放锁就显得很不必要。许多程序员以下面这种方式进行优化：

# 检查变量是否被初始化(不去获得锁)，如果已被初始化立即返回这个变量。
# 获取锁
# 第二次检查变量是否已经被初始化：如果其他线程曾获取过锁，那么变量已被初始化，返回初始化的变量。
# 否则，初始化并返回变量。

<syntaxhighlight lang="java">
// Broken multithreaded version
// "Double-Checked Locking" idiom
class Foo {
    private Helper helper = null;
    public Helper getHelper() {
        if (helper == null) {
            synchronized(this) {
                if (helper == null) {
                    helper = new Helper();
                }
            }
        }
        return helper;
    }

    // other functions and members...
}
</syntaxhighlight>

直觉上，这个算法看起来像是该问题的有效解决方案。然而，这一技术还有许多需要避免的细微问题。例如，考虑下面的事件序列：

# 线程''A''发现变量没有被初始化, 然后它获取锁并开始变量的初始化。
# 由于某些编程语言的语义，编译器生成的代码允许在线程''A''执行完变量的初始化之前，更新变量并将其指向部分初始化的对象。
# 线程''B''发现共享变量已经被初始化，并返回变量。由于线程''B''确信变量已被初始化，它没有获取锁。如果在''A''完成初始化之前共享变量对''B''可见（这是由于''A''没有完成初始化或者因为一些初始化的值还没有覆盖''B''使用的内存([[缓存一致性|缓存一致性]])），程序很可能会崩溃。


在[[Java_SE|J2SE 1.4]]或更早的版本中使用双重检查锁有潜在的危险，有时会正常工作：区分正确[[实现|实现]]和有小问题的实现是很困难的。取决于[[编译器|编译器]]，线程的[[调度|调度]]和其他[[并行|并发系统活动]]，不正确的实现双重检查锁导致的异常结果可能会间歇性出现。重现异常是十分困难的。

在[[Java_SE|J2SE 5.0]]中，这一问题被修正了。[[Volatile变量|volatile]]关键字保证多个线程可以正确处理单件实例。[http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html]{{WebCite|url=https://www.webcitation.org/65pMPrEYN?url=http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html |date=20120301014055 |dateformat=iso }}描述了这一新的语言特性:

<syntaxhighlight lang="java">
// Works with acquire/release semantics for volatile
// Broken under Java 1.4 and earlier semantics for volatile
class Foo {
    private volatile Helper helper = null;
    public Helper getHelper() {
        Helper result = helper;
        if (result == null) {
            synchronized(this) {
                result = helper;
                if (result == null) {
                    helper = result = new Helper();
                }
            }
        }
        return result;
    }

    // other functions and members...
}
</syntaxhighlight>

注意局部变量<tt>result</tt>的使用看起来是不必要的。对于某些版本的[[Java虚拟机|Java虚拟机]]，这会使代码提速25%，而对其他的版本则无关痛痒。<ref>Joshua Bloch "Effective Java, Second Edition", p. 283</ref>

如果helper对象是静态的(每个类只有一个), 可以使用双重检查锁的替代模式[[惰性初始化|惰性初始化]]模式<ref>Brian Goetz et al. Java Concurrency in Practice, 2006 pp348</ref>。查看<ref>{{Cite web |url=http://www.javaconcurrencyinpractice.com/listings.html |title=存档副本 |accessdate=2012-02-12 |archive-date=2012-03-03 |archive-url=https://web.archive.org/web/20120303094554/http://www.javaconcurrencyinpractice.com/listings.html |dead-url=no }}</ref> 上的列表16.6。
<syntaxhighlight lang="java">
// Correct lazy initialization in Java
@ThreadSafe
class Foo {
    private static class HelperHolder {
       public static Helper helper = new Helper();
    }

    public static Helper getHelper() {
        return HelperHolder.helper;
    }
}
</syntaxhighlight>

这是因为内部类直到他们被引用时才会加载。

Java 5中的<tt>final</tt>语义可以不使用<tt>volatile</tt>关键字实现安全的创建对象：<ref>[https://mailman.cs.umd.edu/mailman/private/javamemorymodel-discussion/2010-July/000422.html] {{Wayback|url=https://mailman.cs.umd.edu/mailman/private/javamemorymodel-discussion/2010-July/000422.html |date=20120309184641 }} Javamemorymodel-discussion mailing list</ref>

<syntaxhighlight lang="java">
public class FinalWrapper<T> {
    public final T value;
    public FinalWrapper(T value) {
        this.value = value;
    }
}

public class Foo {
   private FinalWrapper<Helper> helperWrapper = null;

   public Helper getHelper() {
      FinalWrapper<Helper> wrapper = helperWrapper;

      if (wrapper == null) {
          synchronized(this) {
              if (helperWrapper == null) {
                  helperWrapper = new FinalWrapper<Helper>(new Helper());
              }
              wrapper = helperWrapper;
          }
      }
      return wrapper.value;
   }
}
</syntaxhighlight>

为了正确性，局部变量<tt>wrapper</tt>是必须的。这一实现的性能不一定比使用<tt>volatile</tt>的性能更高。

== Microsoft Visual C++ 中的使用 ==

如果指针是由[[C++|C++]]关键字'''volatile'''定义的，那么双重检查锁可以在[[Visual_C++|Visual C++]] 2005 或更高版本中实现。Visual C++ 2005 保证volatile变量是一种[[内存屏障|内存屏障]]，阻止编译器和CPU重新安排读入和写出语义。<ref>{{Cite web |url=http://msdn.microsoft.com/en-us/library/12a04hfd(VS.100).aspx |title=存档副本 |accessdate=2012-02-12 |archive-date=2012-10-20 |archive-url=https://web.archive.org/web/20121020054251/http://msdn.microsoft.com/en-us/library/12a04hfd(VS.100).aspx |dead-url=no }}</ref> 在先前版本的Visual C++则没有此类保证。在其他方面将指针定义为volatile可能会影响程序的性能。例如，如果指针定义对代码的其他地方可见，强制编译器将指针视为屏障，就会降低程序的性能，这是完全不必要的。

== 参见 ==
*[[测试和测试并设置|测试和测试并设置]][[idiom|idiom]]作为底层加锁机制。
*[[按需初始化持有者|按需初始化持有者]]作为Java中线程安全的替代者。

== 参考资料 ==

<references/>

== 外部链接 ==
* Issues with the double checked locking mechanism captured in [https://web.archive.org/web/20060620041255/http://purevirtuals.com/blog/2006/06/16/son-of-a-bug/ Jeu George's Blogs] [https://web.archive.org/web/20060620041255/http://purevirtuals.com/blog/2006/06/16/son-of-a-bug/ Pure Virtuals]
* Implementation of Various Singleton Patterns including the [http://www.tekpool.com/node/2693 Double Checked Locking Mechanism]{{Wayback|url=http://www.tekpool.com/node/2693 |date=20120204211315 }} at [http://www.tekpool.com/?p=35 TEKPOOL]{{Wayback|url=http://www.tekpool.com/?p=35 |date=20120204210751 }}
* [[c2:DoubleCheckedLocking|"Double Checked Locking" Description from the Portland Pattern Repository]]
* [[c2:DoubleCheckedLockingIsBroken|"Double Checked Locking is Broken" Description from the Portland Pattern Repository]]
* Paper "[http://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf C++ and the Perils of Double-Checked Locking]{{Wayback|url=http://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf |date=20120207111747 }}" (475 KB) by [[Scott_Meyers|Scott Meyers]] and [[Andrei_Alexandrescu|Andrei Alexandrescu]]
* Article "[https://web.archive.org/web/20120204045027/http://www.javaworld.com/jw-02-2001/jw-0209-double.html Double-checked locking: Clever, but broken]" by [[Brian_Goetz|Brian Goetz]]
* [http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html The "Double-Checked Locking is Broken" Declaration]{{WebCite|url=https://www.webcitation.org/65pMPrEYN?url=http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html |date=20120301014055 |dateformat=iso }}; David Bacon et al.
* [http://www-106.ibm.com/developerworks/java/library/j-dcl.html Double-checked locking and the Singleton pattern]{{Wayback|url=http://www-106.ibm.com/developerworks/java/library/j-dcl.html |date=20050626074921 }}
* [https://web.archive.org/web/20060412081055/http://www.oaklib.org/docs/oak/singleton.html Singleton Pattern and Thread Safety]
* [http://msdn2.microsoft.com/en-us/library/12a04hfd.aspx volatile keyword in VC++ 2005]{{Wayback|url=http://msdn2.microsoft.com/en-us/library/12a04hfd.aspx |date=20080417193529 }}
* [https://web.archive.org/web/20090209005124/http://blogs.sun.com/cwebster/entry/double_check_locking Java Examples and timing of double check locking solutions]


{{软件设计模式}}
[[Category:软件设计模式|Category:软件设计模式]]
[[Category:并发控制|Category:并发控制]]