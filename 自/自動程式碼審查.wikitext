{{Refimprove|date=2020年7月}}

'''自動程式碼審查'''（Automated code review）是可以檢查[[原始碼|原始碼]]是否符合規定的軟體，規定可能是事先定義的規則，或是目前的最佳實務。 
自動程式碼審查在[[開源軟體|開源軟體]]以及商業軟體的開發中都有用到<ref>McIntosh, Shane, et al. "The impact of code review coverage and code review participation on software quality: A case study of the qt, vtk, and itk projects." Proceedings of the 11th Working Conference on Mining Software Repositories. 2014. {{doi|10.1145/2597073.2597076}}</ref>。
利用分析的方式來檢測及審查程式碼，偵測其中是否有軟體錯誤或是安全問題，已經是標準的開發實務。進行的方式可以用人工確認，也可以用自動化的方式確認<ref name="SA_ref">{{cite web | title=An overview of the Static Code Analysis approach in Software Development | first1=Ivo | last1=Gomes | first2=Pedro | last2=Morgado | first3=Tiago | last3=Gomes | first4=Rodrigo | last4=Moreira | publisher=Universidade do Porto | year=2009 | url=http://paginas.fe.up.pt/~ei05021/TQSO%20-%20An%20overview%20on%20the%20Static%20Code%20Analysis%20approach%20in%20Software%20Development.pdf | accessdate=2010-10-03 | archive-date=2011-09-27 | archive-url=https://web.archive.org/web/20110927153913/http://paginas.fe.up.pt/~ei05021/TQSO%20-%20An%20overview%20on%20the%20Static%20Code%20Analysis%20approach%20in%20Software%20Development.pdf | dead-url=no }}</ref><ref>{{cite web|title= Tricorder: Building a Program Analysis Ecosystem  | url=https://research.google/pubs/pub43322/}}</ref>。隨著自動化，軟體工具可以協助[[代码审查|代码审查]]及檢查的過程。审查工具一般會列出許多的警告（程式碼違反程式標準）。审查工具也可以修正發現的問題，可以用自動化的修正方式，或是由程式設計師輔助的修正方式。這是容易掌握的軟體中的一部份。有助於[[軟體智慧|軟體智慧]]的實踐。這個程序常稱為linting，因為[[Lint|Lint]]是最早期用在[[靜態程式分析|靜態程式分析]]的軟體。

有些[[靜態程序分析|靜態程序分析]]工具可以用來協助自動程式碼審查，這些工具受歡迎的程度不如人工審查，但可以作的更快，更有效率{{Citation needed|date=2020年7月|reason=需要有自動程式碼審查比人工審查更快的證據}}。這些工具也可以封裝一些對底層規則的深入瞭解，以及要進行形態分析需要的語意，因此操作軟體的人工審查者不需要和完全人工審查者一樣，有對程式及業務深入的瞭解<ref name="SA_ref"/>。許多[[集成开发环境|集成开发环境]]（IDE）也有提供基本的自動程式碼審查機能，例如[[Eclipse|Eclipse]]<ref>{{cite web|title=Collaborative Code Review Tool Development |publisher=www.eclipse.org |url=http://marketplace.eclipse.org/content/collaborative-code-review-tool |accessdate=2010-10-13 |url-status=dead |archiveurl=https://web.archive.org/web/20100401051935/http://marketplace.eclipse.org/content/collaborative-code-review-tool |archivedate=2010-04-01 }}</ref>及[[Microsoft_Visual_Studio|Microsoft Visual Studio]]<ref>{{cite web|title=Code Review Plug-in for Visual Studio 2008, ReviewPal | publisher=www.codeproject.com | url=http://www.codeproject.com/KB/work/ReviewPal.aspx | accessdate=2010-10-13}}</ref>。集成开发环境也有許多的plugin可以進行程式碼審查。

除了[[靜態程序分析|靜態程序分析]]工具外，也有工具可以分析軟體，並且進行{{le|軟體視覺化|軟體架構視覺化}}，幫助人理解程式碼。這種系統更著重在分析，因為一般而言其中沒有事先設定要檢查的規則。這類工具（像是{{le|Imagix 4D|Imagix 4D}}、Resharper、SonarJ、{{le|Sotoarc|Sotoarc}}、Structure101、ACTool<ref>[http://sourceforge.net/projects/actool/ Architecture Consistency plugin for Eclipse]</ref>）可以讓分析者定義目標架構，確保實際軟體的實現不會違反目標架構的限制條件。
<!---
==Automated code review tools==
{{main|List of tools for static code analysis}}
-->

==相關條目==
* [[程序分析|程序分析]]

==參考資料==
{{Reflist}}
* [http://www.omg.org/CISQ_compliant_IT_Systemsv.4-3.pdf Automated code analysis levels and requirements] {{Wayback|url=http://www.omg.org/CISQ_compliant_IT_Systemsv.4-3.pdf |date=20131228132152 }}

{{DEFAULTSORT:Automated Code Review}}
[[Category:静态代码分析工具|Category:静态代码分析工具]]
[[Category:軟體審查|Category:軟體審查]]