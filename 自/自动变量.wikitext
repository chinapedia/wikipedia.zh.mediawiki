{{noteTA
|G1=IT
}}

在[[计算机编程|计算机编程]]领域，'''自动变量'''（''Automatic Variable''）指的是局部[[作用域|作用域]][[变量_(程序设计)|变量]]，具体来说即是在[[控制流|控制流]]进入变量作用域时系统自动为其[[内存管理|分配存储空间]]，并在离开作用域时释放空间的一类变量。在许多[[程序语言|程序语言]]中，自动变量与术语“[[局部变量|局部变量]]”（''Local Variable''）所指的变量实际上是同一种变量，所以通常情况下“自动变量”与“局部变量”是同义的。

== 不同程序语言中的实现 ==

===[[C语言|C]]、[[C++|C++]]===

自动变量在C与C++中的实现即为“自动变量”（''Automatic Variable''）。默认情况下，在[[代码块|代码块]]内声明的变量都是自动变量，但亦可用自动变量的关键字auto明确标识[[C语言语法|存储类]]<ref>在C++当前的[[C++11|C++11]]标准中，关键字auto亦可用于对未标明类型的变量进行[[类型推断|类型推断]]。</ref>；而如若使用register（而非auto）存储类标识代码块内的变量，[[编译器|编译器]]就会将变量[[缓存|缓存]]于[[处理器|处理器]]内的[[寄存器|寄存器]]中，此种情况下不能对该变量或其[[成员变量|成员变量]]使用引用[[操作符|操作符]]&以取得其地址，因为&只能取得内存空间中的地址；除此以外，由于寄存器的数量及其所能存储的[[数据类型|数据类型]]受[[硬件|硬件]]限制而可能无法存储指定变量，编译器可以忽略[[声明_(计算机编程)|声明]]内的register关键字。对于一个未[[初始化|初始化]]的自动变量来说，在为其[[赋值|赋值]]之前其值都为undefined（未定义）<ref>{{As of|2008|alt=当前}} {{PDFlink|[http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf C语言标准文档]|3.61[[Mebibyte|MiB]]<!-- application/pdf, 3788603 bytes -->}}: section 6.2.4, Storage durations of objects{{en}}</ref>。

在C++中，如谚语“[[资源获取即初始化|资源获取即初始化]]”（''Resource Acquisition Is Initialization''，常缩写为RAII）所述，自动变量的[[构造函数|构造函数]]在程序运行至声明部分的时候才会被调用，而当程序运行至所给的程序块末端的时候则调用[[析构函数|析构函数]]，这一特性常应用于资源的分配与释放管理，如自动关闭已开启的[[文件|文件]]或自动释放空闲内存。

===[[Java|Java]]===

自动变量在Java中的实现为“局部变量”（''Local Variable''）。Java中的自动变量与C、C++中的相似，但Java中并无auto、register这些标识存储类用的关键字。但相对应的，Java编译器亦不允许使用没有明确初始化的局部变量（会提示错误），这一点与C、C++不同，在C与C++中编译器只会对这类用法做出警告。根据Java标准的要求，每个局部变量在使用之前都必须明确地初始化<ref>{{cite web | url=http://java.sun.com/docs/books/jls/third_edition/html/typesValues.html#4.12.5 | title=4.12.5 Initial Values of Variables | publisher=Sun Microsystems | accessdate=2008-10-17 | archive-date=2012-09-03 | archive-url=https://www.webcitation.org/6APL2PKgM?url=http://docs.oracle.com/javase/specs/#4.12.5 | dead-url=no }}{{en}}</ref>，从这点来说Java中的局部变量与可以默认值（数值变量对应0，对象对应null<ref>{{cite web | url=http://perldoc.perl.org/perlsub.html#Private-Variables-via-my() | title=Private variables via my() - perlsub - perldoc.perl.org | publisher= | accessdate=2008-10-17 | archive-date=2020-09-21 | archive-url=https://web.archive.org/web/20200921043211/https://perldoc.perl.org/perlsub.html#Private-Variables-via-my() | dead-url=no }}{{en}}</ref>）进行隐式初始化的实例变量是有所差异的。

===[[Perl|Perl]]===
自动变量在C与C++中的实现则为词法变量（''Lexical''）、my/私有变量（''Private Variable''）。在Perl中，局部变量是以操作符my声明的。未初始化的数据项的默认初值是undef，而未初始化的[[数组|数组]]与[[散列|散列]]的默认初值则为()。Perl中亦可用local操作符将[[全局变量|全局变量]]临时用作自动变量，也即在不创建自动变量的情况下给一个全局变量（亦称包变量）临时赋值（原值则先保存于别处）并将其作用域限定在代码块内，当执行到变量的作用域之外时再恢复原值<ref>{{cite web | url=http://perldoc.perl.org/perlsub.html#Temporary-Values-via-local%28%29 | title=Temporary values via local() - perlsub - perldoc.perl.org | publisher= | accessdate=2011-02-25 | archive-date=2020-09-21 | archive-url=https://web.archive.org/web/20200921043211/https://perldoc.perl.org/perlsub.html#Temporary-Values-via-local%28%29 | dead-url=no }}{{en}}</ref>。

== 参考 ==
{{reflist}}

[[Category:記憶體管理|Category:記憶體管理]]
[[Category:变量|Category:变量]]