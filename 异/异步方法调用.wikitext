{{NoteTA
|G1 = IT
|1 = zh-cn:类; zh-tw:類別;
}}
'''异步方法调用'''或'''异步方法模式'''是（[[线程|多线程]]）[[面向对象程序设计|面向对象程序设计]]中用于[[异步IO|异步]]调用对象的潜在的长期运行[[方法|方法]]的一种[[软件设计模式|设计模式]]<ref name="Async.34.2#71139">{{cite web|url=http://www.zeroc.com/doc/Ice-3.2.1/manual/Async.34.2.html#71139|title=Asynchronous Method Invocation|accessdate=22 November 2008|work=Distributed Programming with Ice|publisher=ZeroC, Inc.|deadurl=yes|archiveurl=https://web.archive.org/web/20080105093534/http://www.zeroc.com/doc/Ice-3.2.1/manual/Async.34.2.html#71139|archivedate=2008年1月5日}}</ref>。它等价于{{lang|en|Allan Vermeulen}}提出的'''{{lang|en|IOU}}模式'''<ref>{{cite journal|last=Vermeulen|first=Allan|title=An Asynchronous Design Pattern|journal=[[Dr._Dobb's_Journal|Dr. Dobb's Journal]]|url=http://www.ddj.com/184409898|accessdate=22 November 2008|date=June 1996|archive-date=2009-08-08|archive-url=https://web.archive.org/web/20090808061154/http://www.ddj.com/184409898}}</ref><ref>{{cite book|last=Nash|first=Trey|title=Accelerated C# 2008|year=2007|publisher=Apress|isbn=9781590598733|chapter=Threading in C#}}</ref>。

'''基于事件的异步模式'''是'''异步方法调用'''的一个变种，开销更大但能更好的表现[[基于组件的软件工程|软件组件]]对象。[[.NET框架|.NET框架]]和{{lang|en|Java}}中的<code>java.util.concurrent.FutureTask</code>[[类_(计算机科学)|类]]中使用的'''基于事件的异步模式'''使用[[事件_(同步原语)|事件]]来解决同样的问题。

大部分编程语言中对方法的调用是同步执行的。例如在[[线程|线程]]执行体内，即线程的调用函数中，方法的调用就是同步执行的。如果方法需要很长的时间来完成，比方说从{{lang|en|Internet}}加载数据的方法，调用者线程将被阻塞直到方法调用完成。如果不希望调用被阻塞，则可以通过创建新的{{lang|en|worker}}线程并在{{lang|en|worker}}线程中调用方法，在大多数编程环中上这样做可能需要很长的一段代码，尤其是需要小心处理线程过多的额外开销。'''异步方法调用'''它通过使用一种立即返回的异步的变体并提供额外的方法来支持接受完成通知以及完成等待改进长期运行的（同步）方法。

活动对象（{{lang|en|active object}}）设计模式通常使用异步方法调用。异步方法调用的一个替代方案是同步的方法调用和未来对象（{{lang|en|future object}}）模式。<ref name="active object">{{cite journal|last=Lavender|first=R. Greg|coauthors=[[Douglas_C._Schmidt|Douglas C. Schmidt]]|title=Active Object|url=http://www.cs.wustl.edu/~schmidt/PDF/Act-Obj.pdf|format=PDF|accessdate=22 November 2008|journal=|author=|archive-url=https://www.webcitation.org/6Av3crC4V?url=http://www.cs.wustl.edu/~schmidt/PDF/Act-Obj.pdf|archive-date=2012-09-24|dead-url=yes}}</ref>
在{{lang|en|Web}}浏览器的实现上可以采用异步方法调用，例如浏览器需要在{{lang|en|Web}}页面中的图像加载完成之前将页面显示出来。

== 参考来源 ==
{{Reflist}}

== 参考文献 ==
* {{cite book|title=Programming WPF|url=https://archive.org/details/programmingwpf00sell_882|author=Chris Sells and Ian Griffiths|chapter=Appendix C.3: The Event-Based Asynchronous Pattern|pages=[https://archive.org/details/programmingwpf00sell_882/page/n768 747]–749|publisher=O'Reilly|year=2007|isbn13=9780596510374|edition=2nd}}
* [https://archive.is/20130102143201/http://articles.techrepublic.com.com/5100-10878_11-1044325.html Using asynchronous method calls in C#]

{{软件设计模式}}
[[Category:线程|Category:线程]]
[[Category:软件设计模式|Category:软件设计模式]]