{{NoteTA
|G1 = IT
|1 = zh-cn:宏; zh-tw:巨集;
}}
{{求值策略}}
在[[计算机科学|计算机科学]]中，'''求值策略'''（{{lang-en|Evaluation strategy}}）是确定[[编程语言|编程语言]]中[[表达式|表达式]]的求值的一组（通常确定性的）规则。重点典型的位于[[子程序|函数]]或算子上——求值策略定义何时和以何种次序求值给函数的实际参数，什么时候把它们代换入函数，和代换以何种形式发生。经常使用用来研究函数的形式系统[[λ演算|λ演算]]来建模求值策略，这里它们通常叫做'''归约策略'''。求值策略分为两大基本类，严格的和非严格的，基于如何处理给函数的实际参数。一个语言可以组合多种求值策略；例如[[C++|C++]]组合了传值调用和传引用调用。多数语言对布尔表达式和<code>if</code>语句使用某种形式的非严格求值。

== 严格求值 ==
在“严格求值”（{{lang|en|Strict evaluation}}）中，给[[子例程|函数]]的实际参数总是在应用这个函数之前求值。

在[[邱奇数|邱奇编码]]下，[[算子|算子]]的[[热情求值|热情求值]]映射到了函数的严格求值；为此严格求值有时叫做“热情求值”。多数现存编程语言对函数使用严格求值。

=== 应用次序 ===
“应用次序”（{{lang|en|Applicative order}}）（或“最左最内”）求值称呼函数的实际参数按可归约表达式的[[后序遍历|后序遍历]]从左至右的求值的策略。不像传值调用，应用次序求值尽可能的在应用函数之前归约函数体内的项。

=== 传值调用 ===
“传值调用”（{{lang|en|Call by value}}）求值是最常见的求值策略，[[C语言|C]]和[[Scheme|Scheme]]这样差异巨大的语言都在使用。在传值调用中实际参数被求值，其值被绑定到函数中对应的变量上（通常是把值复制到新内存区域）。如果函数或过程能把值赋给它的形式参数，则被赋值的只是局部拷贝——就是说，在函数返回后调用者作用域里的曾传给函数的任何东西都不会变。

传值调用不是一个单一的求值策略，而是指一类函数的实参在被传给函数之前就被求值的求值策略。尽管很多使用传值调用的编程语言（如{{lang|en|Common Lisp}}、{{lang|en|Eiffel}}、{{lang|en|Java}}）从左至右的求值函数的实际参数，某些语言（比如[[OCaml|OCaml]]）从右至左的求值函数和它们的实际参数，而另一些语言（比如{{lang|en|Scheme}}和C）未指定这种次序（尽管它们保证{{link-en|顺序一致性|Sequential consistency}}）。

=== 传引用调用 ===
在“传引用调用”（{{lang|en|Call by reference}}）求值中，传递给函数的是它的实际参数的隐式[[引用|引用]]而不是实参的拷贝。通常函数能够修改这些参数（比如赋值），而且改变对于调用者是可见的。因此传引用调用提供了一种调用者和函数交换数据的方法。传引用调用的语言中追踪函数调用的副作用比较难，易产生不易察觉的{{lang|en|bug}}。

很多语言支持某种形式的传引用调用，但是很少有语言默认使用它。[[Fortran|FORTRAN II]] 是一种早期的传引用调用语言。一些语言如[[C++|C++]]、[[PHP|PHP]]、[[Visual_Basic_.NET|Visual Basic .NET]]、[[C_Sharp_(programming_language)|C#]]和[[REALbasic|REALbasic]]默认使用传值调用，但是提供一种传引用的特别语法。

在那些使用传值调用又不支持传引用调用的语言里，可以用[[參照|引用]]（引用其他对象的对象），比如[[指标_(电脑科学)|指针]]（表示其他对象的内存地址的对象）来模拟。[[C语言|C]]和[[ML語言|ML]]就用了这种方法。这不是一种不同的求值策略（语言本身还是传值调用）。它有时被叫做“传地址调用”（{{lang|en|call by address}}）。这可能让人不易理解。在C之类不安全的语言里会引发解引用[[空指针|空指针]]之类的错误。但{{lang|en|ML}}的引用是类型安全和内存安全的。

类似的效果可由[[#传共享对象调用（Call_by_sharing）|传共享对象调用]]（传递一个可变对象）实现。比如{{lang|en|Python}}、{{lang|en|Ruby}}。

例：[[C语言|C]]用指针模拟的传引用调用
<syntaxhighlight lang="c">
void modify(int p, int* q, int* r) {
    p = 27; // passed by value: only the local parameter is modified
    *q = 27; // passed by value or reference, check call site to determine which
    *r = 27; // passed by value or reference, check call site to determine which
}

int main() {
    int a = 1;
    int b = 1;
    int x = 1;
    int* c = &x;
    modify(a, &b, c); // a is passed by value, b is passed by reference by creating a pointer,
                    // c is a pointer passed by value
                    // b and x are changed
    return 0;
}
</syntaxhighlight>

=== 传共享对象调用 ===
传共享对象调用（{{lang|en|Call by sharing}}）的方式由{{lang|en|Barbara Liskov}}命名<ref name="CLU Reference Manual">{{cite web | last1 = Liskov | first1 = Barbara | last2 = Atkinson | first2 = Russ | last3 = Bloom | first3 = Toby | last4 = Moss | first4 = Eliot | last5 = Schaffert | first5 = Craig | last6 = Scheifler | first6 = Craig | last7 = Snyder | first7 = Alan | title = CLU Reference Manual | work = Laboratory for Computer Science | publisher = Massachusetts Institute of Technology | date = October 1979 | url = http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-225.pdf | format = PDF | accessdate = 2011-05-19 | archive-url = https://web.archive.org/web/20060922165201/http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-225.pdf | archive-date = 2006-09-22 | dead-url = yes }}</ref>，并被{{lang|en|Python}}、{{lang|en|Java}}（对象类型）、{{lang|en|JavaScript}}、{{lang|en|Scheme}}、{{lang|en|OCaml}}等语言使用。

与传引用调用不同，对于调用者而言在被调用函数里修改参数是没有影响的。如果要达成传引用调用的效果就需要传一个共享对象，一旦被调用者修改了对象，调用者就可以看到变化（因为对象是共享的，没有拷贝）。比如这段{{lang|en|Python}}代码：<syntaxhighlight lang="python">
def f(l):
    l.append(1)
    l = [2]
m = []
f(m)
print(m)
</syntaxhighlight>会输出[1]而不是[2]。因为列表是可变的，{{lang|en|append}}方法改变了m。而赋值局部变量l的行为对外面作用域没有影响（在这类语言中赋值是给变量绑定一个新对象，而不是改变对象）。
使用C/C++语言的程序员可能因不能用指针等使函数返回多个值而感到不便，但是像{{lang|en|Python}}这样的语言提供了替代方案：函数能方便的返回多个值，比C++11的std::tie更加简单。

=== 传复件-恢复调用 ===

“传复件-恢复调用”（{{lang|en|Call by copy-restore}}）、“传值-结果调用”或“传值-返回调用”（在[[Fortran|Fortran]]社区中的术语）是传引用调用的特殊情况，即在传引用调用时，向被叫进程所传递的引用并非呼叫进程原有的引用，而是一个原有引用的复制，即被传递的引用与呼叫进程没有关系。传复件-恢复调用在这种情况下很重要：如果函数调用的一个形式参数，是可能被其他执行线程同时访问的引用。那么就把这个引用的内容复制到一个新建立的引用中，再将这个新建立的、与呼叫进程无关的引用传递给被叫进程。当被叫进程执行结束、调用返回的时候，再把这个新引用中更新过的内容复制回呼叫进程原来的引用中（“恢复”）。

传值-返回调用的语义在两个或更多实际参数相互是[[别名|别名]]的时候也不同于传引用调用，就是说它们都指向了在调用者环境中的同一个变量。在传引用调用下，写其中一个会影响另一个；传值-返回调用通过给函数以独自的复件来避免了这种情况，但没有规定在调用者环境中的结果(依赖于哪个别名实际参数首先被复制回去)。

当引用未初始化就传递给被调用者的时候，这种求值策略可以叫“传结果调用”。

=== 部分求值 ===
{{Anchor|Partial evaluation}}
{{see|柯里化}}
在“部分求值”（{{lang|en|Partial evaluation}}）中，求值可以延续到仍未被应用的函数体之内。求值不包含未绑定变量的任何子表达式，并且归约其实际参数值是已知的函数应用。在有副作用存在的时候，完全部分求值可能产生未预期的结果，支持部分求值的系统趋向只把它用于函数内“纯”表达式(没有副作用的表达式)。

== 非严格求值==

在“非严格求值”（{{lang|en|Non-strict evaluation}}）中，不求值给函数的实际参数，除非它们在函数体内实际上被用到了。

在邱奇编码下，算子的[[惰性求值|惰性求值]]映射到了函数的非严格求值；为此，非严格求值有时也叫做“惰性求值”。布尔表达式在很多语言中使用惰性求值；在这种上下文中它通常叫做[[短路求值|短路求值]]。条件表达式也通常使用惰性求值，但出于不同的原因。

=== 正常次序 ===

“正常次序”（{{lang|en|Normal order}}）（或“最左最外”）求值是总是归约的最外可归约式，在求值函数的实际参数之前应用函数的求值策略。它不同于传名调用，传名调用不进入未应用的函数体内求值。

=== 传名调用 ===
在“传名调用”（{{lang|en|Call by name}}）求值中，根本就不求值给函数的实际参数——而是使用[[避免捕获代换|避免捕获代换]]把函数的实际参数直接代换入函数体内。如果实际参数在函数的求值中未被用到，则它永不被求值；如果这个实际参数使用多次，则它每次都被重新求值。（参见[[Jensen设备|Jensen设备]]。）

传名调用求值超过传值调用求值的优点是传名调用求值在一个值存在的时候总是生成这个值，而传名调用可能不终止如果这个函数的实际参数是求值这个函数所不需要的不终止计算。反过来说，在函数的实际参数会用到的时候传名调用就非常慢了，这是因为实践中几乎总是要使用如[[thunk|thunk]]这样的机制。

传名调用求值很少直接实现，但是经常用于程序和编程语言的理论性质的思考中。带有传名调用语义的现实世界中的语言趋向使用传需求调用求值。传名调用是[[ALGOL|ALGOL 60]]中的缺省求值。

=== 传需求调用 ===
“传需求调用”（{{lang|en|Call by need}}）是传名调用的[[记忆化|记忆化]]版本，如果“函数的实际参数被求值了”，这个值被存储起来已备后续使用。在“纯”(无副作用)设置下，这产生同传名调用一样的结果；当函数实际参数被使用两次或更多次的时候，传需求调用总是更快。

因为表达式的求值可能出现在计算内任意远的地方，使用传需求调用的语言一般不支持计算效果（比如[[mutation|mutation]]）除非通过使用[[单子_(函数式编程)|单子]]。这消除了其值变更先于它们的延迟求值的变量的任何未预期行为。

[[Haskell|Haskell]]是最周知的使用传需求调用求值的语言。

=== 传宏展开调用 ===
“传宏展开调用”（{{lang|en|Call by macro expansion}}）类似于传名调用，但是使用了文本代换而不是避免捕获代换。如果不小心的使用，宏代换可能导致[[变量捕获|变量捕获]]并导致不希望的行为。[[卫生宏|卫生宏]]通过检查并替换不是形式参数的阴影变量避免了这个问题。

== 非确定性策略==
非确定性策略（{{lang|en|Nondeterministic strategies}}）包括：
=== 完全β归约 ===
在“完全β归约”（{{lang|en|Full β-reduction}}）下，任何函数应用都可以在任何时候归约（是避免捕获代换把函数的实际参数代换如函数内）。这甚至可以在未应用的函数体内进行。

=== 传预期调用 ===
“传预期调用”（{{lang|en|Call by future}}）（或“并行传名调用”）类似于传名调用，除了这个函数的实际参数的求值可能并行于函数体的求值（而非只在用到的时候）。两个执行线程在函数体的求值中需要这个实际参数的时候同步；如果这个实际参数永不用到，实际参数的线程可以杀死。

=== 最优求值 ===
“最优求值”（{{lang|en|Optimistic evaluation}}）是传需求调用的另一个变体，在其中函数的实际参数部分的求值一段时间（这可在运行时间调整），此后求值退出使用传需求调用应用函数。这种方式避免了传需求调用的某些运行时间代价，而仍保持了想要的终止特征。

== 参见 ==
* [[Beta范式|Beta范式]]
* [[Lambda_演算|Lambda 演算]]
* [[參數_(程式設計)|參數 (程式設計)]]

== 引用 ==
*Harold Abelson and Gerald Jay Sussman. ''[http://mitpress.mit.edu/sicp/full-text/book/book.html Structure and Interpretation of Computer Programs] {{Wayback|url=http://mitpress.mit.edu/sicp/full-text/book/book.html |date=20050302014035 }}'', Second Edition. MIT Press, 1996. ISBN 0-262-01153-0.
*[[Henry_Baker_(computer_scientist)|Henry G. Baker, Jr]]. "[http://home.pipeline.com/~hbaker1/Futures.html The Incremental Garbage Collection of Processes] {{Wayback|url=http://home.pipeline.com/~hbaker1/Futures.html |date=20080704132429 }}", with Carl Hewitt, ACM Sigplan Notices 12. August 8, 1977. Pages 55-59.
*Clem Baker-Finch, Clem, David King, Jon Hall, and Phil Trinder. "[http://cs.anu.edu.au/people/Clem.Baker-Finch/Research/par-cbn-tr/ An Operational Semantics for Parallel Call-by-Need] {{Wayback|url=http://cs.anu.edu.au/people/Clem.Baker-Finch/Research/par-cbn-tr/ |date=20140529124436 }}", Research report 99/1. Faculty of Mathematics & Computing, The Open University, 1999.
*Robert Ennals and Simon Peyton Jones.  "[http://research.microsoft.com/Users/simonpj/Papers/optimistic/ Optimistic Evaluation: a fast evaluation strategy for non-strict programs] {{Wayback|url=http://research.microsoft.com/Users/simonpj/Papers/optimistic/ |date=20080503131130 }}", in ''ICFP'03''. ACM Press, 2003.
*Jocelyn Frechot. "[https://web.archive.org/web/20070208072830/http://compose.labri.fr/documentation/pe/ Partial Evaluation]", documentation for the Compose project. Online, Sept. 25, 2003.
*Bertram Ludäscher. [http://users.sdsc.edu/~ludaesch/CSE130/ln5.html CSE 130 lecture notes] {{Wayback|url=http://users.sdsc.edu/~ludaesch/CSE130/ln5.html |date=20210310115949 }}. January 24, 2001.
*Benjamin C. Pierce. ''[http://www.cis.upenn.edu/~bcpierce/tapl/index.html Types and Programming Languages] {{Wayback|url=http://www.cis.upenn.edu/~bcpierce/tapl/index.html |date=20210219014224 }}''. MIT Press, 2002. ISBN 0-262-16209-1.
*P. Sestoft. "[https://web.archive.org/web/20060621044122/http://www.dina.kvl.dk/~sestoft/papers/sestoft-lamreduce.pdf Demonstrating Lambda Calculus Reduction]", in T. Mogensen, D. Schmidt, I. H. Sudburough (editors): The Essence of Computation: Complexity, Analysis, Transformation. Essays Dedicated to Neil D. Jones. Lecture Notes in Computer Science 2566. Springer-Verlag, 2002. Pages 420-435. ISBN 3-540-00326-6

[[Category:编程典范|Category:编程典范]]