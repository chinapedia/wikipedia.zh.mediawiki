{{noteTA|G1=IT}}{{Solid principles}}
'''接口隔离原则'''（{{lang-en|interface-segregation principles}}， 缩写：ISP）指明客户（client）不應被迫使用對其而言無用的方法或功能。<ref name="ASD">
Martin, Robert (2002). Agile Software Development: Principles, Patterns and Practices. Pearson Education.</ref>接口隔离原则（ISP）拆分非常庞大臃肿的接口成为更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的方法。这种缩小的接口也被称为'''角色接口'''（role interfaces）。<ref name="RoleInterface">{{Cite web |url=http://martinfowler.com/bliki/RoleInterface.html |title=Role Interface |access-date=2014-02-22 |archive-date=2021-10-09 |archive-url=https://web.archive.org/web/20211009005013/https://martinfowler.com/bliki/RoleInterface.html |dead-url=no }}</ref>接口隔离原则（ISP）的目的是系统解开[[耦合性_(計算機科學)|耦合]]，从而容易重构，更改和重新部署。接口隔离原则是在[[SOLID_(面向对象设计)|SOLID]]中五个[[面向对象设计|面向对象设计]]（OOD）的原则之一，类似于在[[GRASP_(面向对象设计)|GRASP]]中的高[[內聚性_(計算機科學)|内聚性]]。<ref name="CB">{{Cite web |url=http://codebetter.com/blogs/david.hayden/archive/2005/06/15/64635.aspx |title=David Hayden, ''Interface-Segregation Principle (ISP) - Principles of Object-Oriented Class Design'' |access-date=2014-02-22 |archive-url=https://web.archive.org/web/20100820124217/http://codebetter.com/blogs/david.hayden/archive/2005/06/15/64635.aspx |archive-date=2010-08-20 |dead-url=yes }}</ref>

== 在面向对象设计中的重要性 ==
在[[面向对象设计|面向对象设计]]中，[[介面_(資訊科技)|接口]]（interface）提供了便于代码在概念上解释的抽象层，并建立了避免[[依赖反转原则|依赖]]的一个屏障。

== 参看 ==
* [[SOLID_(面向对象设计)|SOLID (面向对象设计)]] - 在SOLID中的 I 是指“接口隔离原则”

== 参考文献 ==
{{reflist}}

== 外部链接 ==
* {{En}}[http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod 面向对象设计的原则] {{Wayback|url=http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod |date=20161025223509 }} – SOLID详细文章描述和链接。
* {{En}}[http://www.objectmentor.com/resources/articles/oodmetrc.pdf Object Oriented Design Quality Metrics: an analysis of dependencies Robert C. Martin, C++ Report, Sept/Oct 1995] {{Wayback|url=http://www.objectmentor.com/resources/articles/oodmetrc.pdf |date=20190513025903 }}

{{DEFAULTSORT:Interface Segregation Principle}}
<!--Categories-->
[[Category:軟體設計|Category:軟體設計]]
[[Category:编程原则|Category:编程原则]]
[[Category:面向对象的程序设计|Category:面向对象的程序设计]]