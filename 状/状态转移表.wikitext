在[[自动机理论|自动机理论]]和[[时序逻辑|时序逻辑]]中，'''状态转移表'''是展示有限[[半自动机|半自动机]]或[[自动机|有限状态自动机]]基于当前状态和其他输入，要移动到什么状态（或在[[非确定有限状态自动机|非确定有限状态自动机]]情况下那些状态）的表格。“状态表”本质上是其中某些输入是当前状态，而输出包含与其他输出在一起的下一个状态的[[真值表|真值表]]。

状态表是指定“状态机”的多种方式之一，其他方式包括[[状态图|状态图]]，和“特征等式”。

== 常见形式 ==

===一维状态表===

也叫做'''特征表'''，一维状态表比二维版本更像真值表。输入通常放置在左侧，分隔于在右侧的输出。输出将表示这个机器的下一个状态。下面是有两个状态和两个组合输入的状态机的简单例子：

{| class=wikitable
|-
! A !! B !! 当前状态 !! 下一个状态 !! 输出
|- align=center
| 0 || 0 || S<sub>1</sub> || S<sub>2</sub> || 1
|- align=center
| 0 || 0 || S<sub>2</sub> || S<sub>1</sub> || 0
|- align=center
| 0 || 1 || S<sub>1</sub> || S<sub>2</sub> || 0
|- align=center
| 0 || 1 || S<sub>2</sub> || S<sub>2</sub> || 1
|- align=center
| 1 || 0 || S<sub>1</sub> || S<sub>1</sub> || 1
|- align=center
| 1 || 0 || S<sub>2</sub> || S<sub>1</sub> || 1
|- align=center
| 1 || 1 || S<sub>1</sub> || S<sub>1</sub> || 1
|- align=center
| 1 || 1 || S<sub>2</sub> || S<sub>2</sub> || 0
|}

S<sub>1</sub>和S<sub>2</sub>最可能表示单一位0和1，因为单一位只有两个状态。

===二维状态表===

状态转移图典型的是二维表。有两种安排它们的常用形式。

* 垂直（或水平）维指示当前状态，水平（或垂直）维指示事件，表中的单元格包含在时间发生时的下一个状态（和可能的联系于这个状态转移的动作）。

{| class="wikitable" cellpadding="5" cellspacing="0"
|+ '''状态转移表'''
|      事件<br>状态
| align="center" valign="top" style="background:#efefef;" | E<sub>1</sub>
| align="center" valign="top" style="background:#efefef;" | E<sub>2</sub>
| align="center" valign="top" style="background:#efefef;" |   ...  
| align="center" valign="top" style="background:#efefef;" | E<sub>n</sub>
|-
| align="right" style="background:#ffdead;" | S<sub>1</sub>
| align="center" | -
| A<sub>y</sub>/S<sub>j</sub>
| align="center" | ...
| align="center" | -
|-
| align="right" style="background:#ffdead;" | S<sub>2</sub>
| align="center" | -
| align="center" | -
| align="center" | ...
| align="center" | A<sub>x</sub>/S<sub>i</sub>
|-
| align="right" style="background:#ffdead;" | ...
| align="center" | ...
| align="center" | ...
| align="center" | ...
| align="center" | ...
|-
| align="right" style="background:#ffdead;" | S<sub>m</sub>
| align="center" | A<sub>z</sub>/S<sub>k</sub>
| align="center" | -
| align="center" | ...
| align="center" | -
|}
（S:状态, E:事件, A:动作, -:违法转移）

* 垂直（或水平）维指示当前状态，水平（或垂直）维指示下一个状态，单元格包含导致特定下一个状态的事件。

{| class="wikitable" cellpadding="5" cellspacing="0"
|+ '''状态转移表'''
|    下一个<br>当前
| align="center" valign="top" style="background:#ffdead;" | S<sub>1</sub>
| align="center" valign="top" style="background:#ffdead;" | S<sub>2</sub>
| align="center" valign="top" style="background:#ffdead;" |   ...  
| align="center" valign="top" style="background:#ffdead;" | S<sub>m</sub>
|-
| align="right" style="background:#ffdead;" | S<sub>1</sub>
| align="center" style="background:#efefef;" | A<sub>y</sub>/E<sub>j</sub>
| align="center" | -
| align="center" | ...
| align="center" | -
|-
| align="right" style="background:#ffdead;" | S<sub>2</sub>
| align="center" | -
| align="center" | -
| align="center" | ...
| align="center" style="background:#efefef;" | A<sub>x</sub>/E<sub>i</sub>
|-
| align="right" style="background:#ffdead;" | ...
| align="center" | ...
| align="center" | ...
| align="center" | ...
| align="center" | ...
|-
| align="right" style="background:#ffdead;" | S<sub>m</sub>
| align="center" | -
| align="center" style="background:#efefef;" | A<sub>z</sub>/E<sub>k</sub>
| align="center" | ...
| align="center" | -
|}
（S:状态, E:事件, A:动作, -:不可能转移）

== 例子 ==

下面给出机器'''M'''的状态转移表和状态图。
{|
|
{| class="wikitable" cellpadding="5" cellspacing="0"
|+ '''状态转移表'''
|   输入<br>状态
| align="center" valign="top" style="background:#efefef;" | '''1'''
| align="center" valign="top" style="background:#efefef;" | '''0'''
|-
| align="right" style="background:#ffdead;" | S<sub>1</sub>
| align="center" | S<sub>1</sub>
| align="center" | S<sub>2</sub>
|-
| align="right" style="background:#ffdead;" | S<sub>2</sub>
| align="center" | S<sub>2</sub>
| align="center" | S<sub>1</sub>
|}
|  
| align="center" | '''状态图'''<br> [[File:DFAexample.svg|DFAexample.svg]]
|}

表格各列枚举所有可能的给机器的输入。表格各行枚举所有可能的状态。从上面给出的状态转移表，可以轻易的看出如果机器处在'''S<sub>1</sub>'''（第一行），并且下一个输入是字符'''1'''，则机器将停留在'''S<sub>1</sub>'''。如果字符'''0'''到达了，机器将转移到可在第二列见到的'''S<sub>2</sub>'''。在图中这指示为从'''S<sub>1</sub>'''到'''S<sub>2</sub>'''的标记了'''0'''的箭头。

对于[[非确定有限状态自动机|非确定有限自动机]]（NFA），一个新输入可以导致机器进入多于一个状态，因此是非确定性的。这在状态转移表中指示为一对花括号包围的所有目标状态的集合。下面给出一个例子。

{| class="wikitable" cellpadding="5" cellspacing="0"
|+ '''NFA的状态转移表'''
|   输入<br>状态
| align="center" valign="top" style="background:#efefef;" | '''1'''
| align="center" valign="top" style="background:#efefef;" | '''0'''
| align="center" valign="top" style="background:#efefef;" | '''ε'''
|-
| align="right" style="background:#ffdead;" | S<sub>1</sub>
| align="center" | S<sub>1</sub>
| align="center" | { S<sub>2</sub>, S<sub>3</sub> }
| align="center" | Φ
|-
| align="right" style="background:#ffdead;" | S<sub>2</sub>
| align="center" | S<sub>2</sub>
| align="center" | S<sub>1</sub>
| align="center" | Φ
|-
| align="right" style="background:#ffdead;" | S<sub>3</sub>
| align="center" | S<sub>2</sub>
| align="center" | S<sub>1</sub>
| align="center" | S<sub>1</sub>
|}

这里的非确定机器处在状态'''S<sub>1</sub>'''读入一个输入'''0'''将导致它同时处在两种状态，即状态'''S<sub>2</sub>'''和'''S<sub>3</sub>'''。最后的列定义特殊字符ε的合法转移。这个特殊字符允许NFA在没有输入的时候移动到不同状态。在状态'''S<sub>3</sub>'''，NFA可以移动到'''S<sub>1</sub>'''而不消耗任何输入字符。上述两种情况使描述的有限自动机是非确定性的。

== 变换成状态图 ==

有可能从表格绘制[[状态图|状态图]]。下面给出步骤：
# 绘制圆圈表示给出状态。
# 对于每个状态，检索对应的行绘制到目的状态的箭头。如果自动机是NFA则对一个输入字母可能有多个箭头。
# 指定一个状态为[[开始状态|开始状态]]。开始状态在自动机的形式定义中给出。
# 指定一个或多个状态为[[接受状态|接受状态]]。它也在自动机的形式定义中给出。

== 引用 ==
* Michael Sipser: ''Introduction to the Theory of Computation''. PWS Publishing Co., Boston 1997 ISBN 0-534-94728-X

[[Category:自动机|Category:自动机]]