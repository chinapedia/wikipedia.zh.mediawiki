{{expand|time=2018-09-15T16:07:52+00:00}}
{{unreferenced|time=2018-09-15T16:07:52+00:00}}
{{NoteTA|G1 = IT
|T = zh-hans:远程过程调用;zh-hant:遠程過程調用;zh-tw:遠端程序呼叫;
}}
{{網路協議}}
[[分布式计算|分布式计算]]中，'''遠端程序呼叫'''（{{lang-en|'''R'''emote '''P'''rocedure '''C'''all}}，'''RPC'''）是一个计算机通信[[網絡傳輸協議|协议]]。该协议允许运行于一台计算机的[[程序|程序]]调用另一个[[地址空间|地址空间]]（通常为一个开放网络的一台计算机）的[[子程序|子程序]]，而程序员就像调用本地程序一样，无需额外地为这个交互作用编程（无需关注细节）。RPC是一种服务器-客户端（Client/Server）模式，经典实现是一个通过'''发送请求-接受回应'''进行信息交互的系统。

如果涉及的软件采用[[面向对象编程|面向对象编程]]，那么远程过程调用亦可称作'''遠端呼叫'''或'''遠端方法呼叫'''，例：[[Java_RMI|Java RMI]]。

RPC是一种[[进程间通信|进程间通信]]的模式，程序分布在不同的[[地址空间|地址空间]]里。如果在同一主机里，RPC可以通过不同的虚拟地址空间（即便使用相同的物理地址）进行通讯，而在不同的主机间，则通过不同的物理地址进行交互。许多技术（通常是不兼容）都是基于这种概念而实现的。

== 历史起源 ==
有关RPC的想法至少可以追溯到1976年以“信使报”（Courier）的名义使用。RPC首次在[[UNIX|UNIX]]平台上普及的执行工具程序是SUN公司的RPC（现在叫[[ONC_RPC|ONC RPC]]）。它被用作SUN的NFC的主要部件。ONC RPC今天仍在服务器上被广泛使用。
另一个早期UNIX平台的工具是“阿波罗”计算机网络计算系统（NCS），它很快就用做OSF的分布计算环境（DCE）中的DCE/RPC的基础，并补充了[[DCOM|DCOM]]。

== 信息传递 ==
远程过程调用是一个[[分布式计算|分布式计算]]的[[客户端-服务器|客户端-服务器]]（Client/Server）的例子，它简单而又广受欢迎。远程过程调用总是由[[客户端|客户端]]对[[服务器|服务器]]发出一个执行若干过程请求，并用客户端提供的参数。执行结果将返回给客户端。由于存在各式各样的变体和细节差异，对应地衍生了各式远程过程调用协议，而且它们并不互相兼容。

=== 流程 ===

# 客户端调用客户端stub（client stub）。这个调用是在本地，并将调用参数push到[[栈|栈]]（stack）中。
# 客户端stub（client stub）将这些参数包装，并通过系统调用发送到服务端机器。打包的过程叫 [[Marshalling_(计算机科学)|marshalling]]。（常见方式：[[XML|XML]]、[[JSON|JSON]]、二进制编码）
# 客户端本地操作系统发送信息至服务器。（可通过自定义[[传输控制协议|TCP协议]]或[[HTTP|HTTP]]传输）
# 服务器系统将信息传送至服务端stub（server stub）。
# 服务端stub（server stub）解析信息。该过程叫 [[Unmarshalling_(计算机科学)|unmarshalling]]。
# 服务端stub（server stub）调用程序，并通过类似的方式返回给客户端。

== 標準化的溝通機制 ==
为了允许不同的[[客户端|客户端]]均能访问[[服务器|服务器]]，许多标准化的 RPC 系统应运而生了。其中大部分采用[[接口描述语言|接口描述语言]]（Interface Description Language，IDL），方便[[跨平台|跨平台]]的远程过程调用。

== 参见 ==
*[[本地过程调用|本地过程调用]]
* [[行程間通訊|行程間通訊]]
* [[開放網路運算遠端程序呼叫|開放網路運算遠端程序呼叫]]（ONC RPC）
* [[DCE/RPC|DCE/RPC]]
* [[JSON-RPC|JSON-RPC]]

[[Category:进程间通信|Category:进程间通信]]
[[Category:中间件|Category:中间件]]
[[Category:应用层协议|Category:应用层协议]]
[[Category:遠端程序呼叫|]]