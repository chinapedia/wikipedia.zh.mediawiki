{{noteTA
|G1=IT}}
'''匈牙利命名法'''（Hungarian notation）是電腦[[程序設計|程序設計]]中的一种變數[[命名规则_(程序设计)|命名规则]]，此命名法又可細分為：'''系统匈牙利命名法'''和'''匈牙利应用命名法'''。

匈牙利命名法具備语言独立的特性，并且首次在[[BCPL|BCPL]]语言中被大量使用。由于BCPL这种低级语言只有机器码这一种数据内容，因此这种语言本身无法帮助程式設計師来记住變數的类型。匈牙利命名法通过明确每个變數的資料型別来解决这个问题。

在匈牙利命名法中，一个變數名由一个或多个小写字母开始，这些字母有助于记忆變數的类型和用途，紧跟着的就是程序設計師选择的任何名称。这个后半部分的首字母可以大写，以区别前面的类型指示字母（参见[[驼峰式大小写|驼峰式大小写]]）。

==历史==
原始的匈牙利命名法，现在被称为匈牙利应用命名法，由1972年至1981年在[[施乐帕洛阿尔托研究中心|施乐帕洛阿尔托研究中心]]工作的-程序员[[查尔斯·西蒙尼|查尔斯·西蒙尼]]发明。此人后来成了[[微软|微软]]的总设计师。

这种命名法其实是对于西蒙尼祖籍的一种讽刺。[[匈牙利人名|匈牙利人名]]和大多数其他欧洲人名相比是反过来的，即姓氏在名字的前面。举个例子，英语化的名字「Charles Simonyi」在[[匈牙利语|匈牙利语]]中原本是「Simonyi Károly」。同样的，在匈牙利命名法中，类型名在实际变量名前，而不是像大多数欧洲的[[Smalltalk|Smalltalk]]那样，类型放在变量名后，例如aPoint和lastPoint。后者在西蒙尼任职于施乐帕洛阿尔托研究中心时期非常流行。这种命名法的靈感，可能是受[[波蘭表示法|波蘭表示法]]的启发。

匈牙利命名法的英文是{{lang|en|Hungarian notation}}，这个词能让许多人记住，因为难发音的辅音字串有点像部份[[东欧|东欧]]语言中，辅音丰富的拼写方式，尽管实际上[[匈牙利语|匈牙利语]]是属于[[芬兰-乌戈尔语族|芬兰-乌戈尔语族]]，而不像[[斯拉夫语族|斯拉夫语族]]那样元音丰富。举例来说，零结束字符串的前缀"sz"实际上就是[[匈牙利字母表|匈牙利字母表]]中的一个合体字母（参看德语中的[[ß|ß]]）。

== 系统匈牙利命名法与匈牙利应用命名法 ==
系统命名法与应用命名法的区别在于前缀的目的。

在系统匈牙利命名法中，前缀代表了变量的实际数据类型。例如：

*<code>lAccountNum</code>：变量是一个'''长整數'''（"l"）;
*<code>arru8NumberList</code>：变量是一個'''无符号8位整型数组'''（"arru8"）;
*<code>szName</code>：变量是一个'''零结束字符串'''（"sz"），这是西蒙尼最开始建议的前缀之一。

匈牙利应用命名法不表示实际数据类型，而是给出了变量'''目的'''的提示，或者说它代表了什么。
*<code>rwPosition</code>：变量代表一个'''行'''（"rw"）。
*<code>usName</code>：变量代表一个'''非安全字符串'''（"us"），需要在使用前处理。
*<code>strName</code>：变量代表一个包含名字的字符串（"str"）但是没有指明这个字符串是如何实现的。

西蒙尼建议的大多数前缀都是自然语义的，但不是所有。下面几个是来自原始论文的：
<ref name="simonyi">「匈牙利命名法」（defined）, [[查尔斯·西蒙尼|查尔斯·西蒙尼]]，
    [[Microsoft|Microsoft]] Corp.，1999年11月，MSDN Library，''MSDN.microsoft.com''
    网页:[http://msdn2.microsoft.com/en-us/library/aa260976(VS.60).aspx 匈牙利命名法，查尔斯·西蒙尼，Microsoft Corporation] {{Wayback|url=http://msdn2.microsoft.com/en-us/library/aa260976(VS.60).aspx |date=20081011232831 }}.</ref>
* <code>p'''X'''</code>是指向另一个'''X'''类型的指针，这包含非常少的语义信息。
* <code>'''d'''</code>是一个前缀表示两个值的区别，例如，'''dY'''可能代表一个图形沿Y轴的距离，而一个仅仅叫做'''y'''的变量可能是一个绝对坐标。这完全是自然语义的。
* <code>'''sz'''</code>是一个无结束或零结束的字符串。在C中，这包含一些语义信息，因为C语言的'''''char*'''''类型的变量不确定是一个指向单个字符的指针，还是一个字符数组，或是一个零结束字符串。
* <code>'''w'''</code>标记一个变量是一个字。这基本上没有包含什么语义信息，因此可以被看作一种系统匈牙利命名法。
* <code>'''b'''</code>标记了一个字节，和w对比可能有一些语义信息，因为C语言中，只有'''char'''型（以及signed/unsigned char)是一个字节长的，这些类型有时候被用来保存数值而字符。这个前缀可以明确某个变量保存的是字符还是数值。

由于这种命名法通常使用小写字母开头用来助记，但是并没有对助记符本身作规定。有几种被广泛使用的习惯（见下面的示例），但是任意字母组合都可以被使用，只要它们在代码主体中保持一致就可以了。

在使用匈牙利应用命名法的代码中有时候也可能包含系统匈牙利命名法，即在描述被单独以类型方式定义的变量时使用。

==示例==
每一项示例的代码块表示实际生产环境代码中可能出现的命名，示例后的两项解释分别为含义以及这一示例的前缀是哪一个英文单词的简写 
*<code>bBusy</code>：[[布尔型|布尔型]] bool
*<code>cApples</code>：项目计数 count
*<code>dwLightYears</code>：双[[字_(计算机)|字]]（系统） doubleword
*<code>fBusy</code>：[[布尔型|布尔型]]或[[浮点数|浮点型]] false&true或float
*<code>nSize</code>：[[整型|整型]]（系统）或计数（应用）nature
*<code>iSize</code>：[[整型|整型]]（系统）或索引（应用）int
*<code>fpPrice</code>：[[浮点数|浮点数]] floatpoint
*<code>dbPi</code>：[[雙倍精確浮點數|双精度浮点数]]（系统） double
*<code>pFoo</code>：[[指针|指针]]  point
*<code>rgStudents</code>：数组或范围 range
*<code>szLastName</code>：零结束字符串 ß
*<code>u32Identifier</code>：无符号32位[[整型|整型]]（系统） unsigned32
*<code>stTime</code>：时钟结构 struct
*<code>fnFunction</code>：函数名 function

对于指针和[[数组|数组]]来说，它们实际上并不是数据类型，因此通常在助记符后面跟着实际元素的类型。

*<code>pszOwner</code>：指向零结束字符串的指针 
*<code>rgfpBalances</code>：[[浮点数|浮点]]值的数组 

尽管匈牙利命名法可以被应用在任何程序设计语言和环境中，由于[[微软|微软]]在C语言项目中，特别是在[[Microsoft_Windows|Microsoft Windows]]里的大量应用，使得匈牙利命名法的应用大量存在于和Windows相关的领域：

*<code>hwndFoo</code>：窗口句柄 handle window
*<code>lpszBar</code>：指向零结束字符串的长指针 longpointß

这种命名法又是在[[C++|C++]]中被扩展而包含变量的[[作用域|作用域]]，由一个下划线隔开：

*<code>g_nWheels</code>：全局命名空间的成员，整型
*<code>m_nWheels</code>：结构体／类成员，整型

==匈牙利命名法的优点==
（其中一些只适用于系统匈牙利命名法）
支持者声称匈牙利命名法的好处包括：<ref name="simonyi2">{{Cite web |url=http://msdn.microsoft.com/library/default.asp?url=%2Flibrary%2Fen-us%2Fdnvs600%2Fhtml%2Fhunganotat.asp |title=匈牙利命名法，查尔斯·西蒙尼，Microsoft Corporation  |access-date=2022-02-19 |archive-date=2006-06-10 |archive-url=https://web.archive.org/web/20060610130653/http://msdn.microsoft.com/library/default.asp?url=%2Flibrary%2Fen-us%2Fdnvs600%2Fhtml%2Fhunganotat.asp |dead-url=no }}</ref>
*不需要[[集成开发环境|集成开发环境]]的支持，从名字中就可以看出变量的类型
*拥有类似语义的多个变量可以在一个代码块中使用：dwWidth，iWidth，fWidth，dWidth
*变量名在仅仅知道他们的类型时可以被轻易记住
*可以使变量名更加一致
*决定一个变量名的时候可以更机械化，更快
*不合适的类型转换和操作可以在阅读代码的时候被检测出来，而不需要编译器的检测
*在那些数字被当作字符串处理的基于字符串的语言中非常有用（例如[[Tcl|Tcl]]）
*在匈牙利应用命名法中，变量名确保不会犯以下错误：
:: heightWindow = window.getWidth()
*在使用[[动态语言|动态类型语言]]或完全无类型的语言编程时，关于类型的修饰可以更简化。这种语言一般不包含类型修饰（或者可选），因此唯一可以看出哪些类型是被允许的只有名字本身、文档以及通过阅读代码来明白它们在做什么。在这些语言中，包含对于变量类型的指示可能会有助于程序员。就像上面提到的，匈牙利命名法扩展了这样的语言（BCPL）。
*在包含许多全局对象的复杂程序中（VB/Delphi Forms），拥有一个基本的前缀命名法可以简化在编辑器中查找组件的工作。按<code>btn<Ctrl-Space></code>可以使编辑器弹出一个Button对象的列表。

==匈牙利系统命名法的缺点==
批评者认为：

*匈牙利命名法在编译器做类型检查时是多余的。一个提供类型检查的语言在确定一个变量与其类型一致时，比人眼仅仅检查变量的用法与变量名一致要强大的多。
*一些现代的[[集成开发环境|集成开发环境]]，如[[Visual_Studio|Visual Studio]]在需要时可以显示变量类型，并且自动标记不匹配的类型。使用这种命名法完全没有必要。
*向标识符添加类型标识导致标识符冗长；同时纵容相同主体名而不同类型的变量导致的歧义，开发人员无法从<code>sWidth</code>、<code>nWidth</code>、<code>fWidth</code>中了解这几个Width的用法区别，更好的写法可能是<code>string input</code>、<code>int width</code>、<code>float zoomedWidth</code>。
*匈牙利命名法在被用作代表多个属性的时候会造成困惑，如<!--[http://mindprod.com/jgloss/unmainnaming.html]/--> <tt>a_crszkvc30LastNameCol</tt>：一个[[常量|常量]][[引用|引用]][[参数|参数]]，保存了一个[[varchar|varchar]]（30）类型的[[数据库|数据库]]列<tt>LastName</tt>的内容，而这列又是这个表的[[主键|主键]]的一部分。
*在代码更改后可能造成不一致。如果一个变量的类型改变了，不是变量名的修饰与新的类型不一致，就是变量名必须被改变。
*由于变量名和类型捆绑在一起，因此不利于代码的移植。一个典型的众所周之的例子就是WPARAM类型，以及在许多Windows系统函数声明中使用的wParam参数。它原本是一个16位的类型，但是在后来的操作系统中被改成了32位或64位，但仍保留原来的名字（它实际的基础类型是UINT_PTR，即一个大小足够保存一个指针的无符号整型）。
*大多数时候，看到一个变量就意味着知道了它的类型。但是，如果你不知道一个变量是干什么的，知道了它的类型也没什么帮助。

[[.NET_Framework|.NET Framework]]，微软新的软件开发平台，除了接口类型一般不适用匈牙利命名法。在.NET中，习惯在接口类型前放一个<tt>I</tt>（例如[[Windows_Forms|Windows Forms]]中的<tt>IButtonControl</tt>接口。）.NET Framework指导方针建议程序员不要用匈牙利命名法，但是没有指明不要用系统匈牙利命名法还是匈牙利应用命名法，或者是两者都不要用。但在JETBrains公司旗下C#编辑器中，匈牙利命名法却属于建议使用的命名法（.net使用C#语言开发）<ref>{{Cite web |url=http://msdn2.microsoft.com/en-us/library/ms229045.aspx |title=.NET Framework Developer's Guide General Naming Conventions |access-date=2008-06-08 |archive-date=2008-08-21 |archive-url=https://web.archive.org/web/20080821175910/http://msdn2.microsoft.com/en-us/library/ms229045.aspx |dead-url=no }}</ref>与此对比，[[Java|Java]]的标准库中连接口类型也不加前缀。<ref>{{cite web |url=http://java.sun.com/docs/codeconv/html/CodeConventions.doc8.html |title=Code Conventions for the Java Programming Language |accessdate=2008-04-10 |publisher=Sun Microsystems |date=1999-04-20 |archive-date=2009-02-27 |archive-url=https://web.archive.org/web/20090227100726/http://java.sun.com/docs/codeconv/html/CodeConventions.doc8.html |dead-url=no }}</ref>

==注释和参考==
{{Reflist}}

==內部連結==
*[[駝峰式大小寫|駝峰式大小寫]]
*[[蛇形命名法|蛇形命名法]]

==外部链接==
*[https://web.archive.org/web/20180519042122/http://www.parc.com/publication/1940/meta-programming.html Meta-Programming: A Software Production Method] Charles Simonyi, December 1976 (PhD Thesis)
*https://blogs.msdn.microsoft.com/larryosterman/2004/06/22/hugarian-notation-its-my-turn-now/ {{Wayback|url=https://blogs.msdn.microsoft.com/larryosterman/2004/06/22/hugarian-notation-its-my-turn-now/ |date=20191001203702 }}  – Larry Osterman's WebLog
*[http://msdn.microsoft.com/en-us/library/aa260976%28VS.60%29.aspx Hungarian Notation] {{Wayback|url=http://msdn.microsoft.com/en-us/library/aa260976%28VS.60%29.aspx |date=20170822053850 }} (MSDN)
*[http://www.byteshift.de/msg/hungarian-notation-doug-klunder HTML version of Doug Klunder's paper]
*[http://www.xoc.net/standards/rvbanc.asp RVBA Naming Conventions] {{Wayback|url=http://www.xoc.net/standards/rvbanc.asp |date=20210211041259 }}
*[http://msdn.microsoft.com/en-us/library/aa378932%28VS.85%29.aspx Coding Style Conventions] {{Wayback|url=http://msdn.microsoft.com/en-us/library/aa378932%28VS.85%29.aspx |date=20170317233324 }} (MSDN)

[[Category:源代码|Category:源代码]]
[[Category:命名規則|Hungarian notation]]