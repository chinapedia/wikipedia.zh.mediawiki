{{NoteTA
|G1 = IT
}}
'''快取文件置換機制'''是[[電腦|電腦]]處理[[快取|快取]][[記憶體|記憶體]]的一種機制。

電腦記憶體空間的大小固定，無法容納[[伺服器|伺服器]]上所有的文件，所以當有新的文件要被置換入[[快取|快取]]時，必須根據一定的原則來取代掉適當的文件。此原則即所謂快取文件置換機制。

快取文件置換方法有：
*[[先進先出演算法|先進先出演算法]]（FIFO）：最先进入的内容作为替换对象
*[[最少使用算法|最少使用算法]]（LFU）：最久没有访问的内容作为替换对象
*[[最近最少使用算法|最近最少使用算法]]（LRU）：最近最少使用的内容作为替换对象
*[[非最近使用算法|非最近使用算法]]（NMRU）：在最近没有使用的内容中随机选择一个作为替换对象
*Belady's algorithm

== 概述 ==
内存的平均引用时间为：<ref name="ajsmith">{{cite journal|author1=Alan Jay Smith|title="Design of CPU Cache Memories"|journal=Proc. IEEE TENCON|date=1987|url=https://www2.eecs.berkeley.edu/Pubs/TechRpts/1987/CSD-87-357.pdf|access-date=2017-12-03|archive-date=2021-01-15|archive-url=https://web.archive.org/web/20210115183956/https://www2.eecs.berkeley.edu/Pubs/TechRpts/1987/CSD-87-357.pdf|dead-url=no}}</ref>
: <math>T = m \times T_m + T_h + E</math>
其中
: <math>T</math> = 内存平均引用时间
: <math>m</math> = 未命中率 = 1 - (命中率)
: <math>T_m</math> = 未命中时访问主内存需要的时间 (或者在多层缓存中对下级缓存的访问时间)
: <math>T_h</math>= 延迟，即命中时引用缓存的时间
: <math>E</math> = 各种次级因素, 如多处理器系统中的队列效应

衡量缓存的指标主要有两个：延迟和命中率。同时也存在其他一些次级因素影响缓存的性能。<ref name="ajsmith" />

缓存的命中率是指需要的对象在缓存中被找到的频率。
高效的置换策略会保留较多的实用信息来提升命中率（在缓存大小一定的情况下）。

缓存的延迟是指命中后，从发出请求到缓存返回指定对象所需的时间。
快速的置换策略通常会保留较少的置换信息，甚至不保留信息，来减少维护该信息所需要的时间。

每种置换策略都是在命中率和置换之间妥协。

== 参考文献 ==

{{Reflist}}

{{compu-stub}}

[[Category:演算法|Category:演算法]]

[[en:Cache_algorithms|en:Cache algorithms]]
[[tr:Önbellek_algoritmaları|tr:Önbellek algoritmaları]]