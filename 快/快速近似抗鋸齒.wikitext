'''快速近似抗锯齿'''（{{lang-en|'''F'''ast Appro'''x'''imate '''A'''nti-'''A'''liasing}}，{{lang|en|FXAA}}），由[[nVIDIA|nVIDIA]]員工Timothy Lottes開發的一種[[反鋸齒|反鋸齒]]算法。<ref name=whitepaper>{{cite web|last=Lottes|first=Timothy|date=February 2009|title=FXAA|url=http://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf|publisher=NVIDIA|accessdate=2012-09-29|archive-date=2020-11-12|archive-url=https://web.archive.org/web/20201112002828/https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf|dead-url=no}}</ref>

FXAA佔用很少的資源，便可得到良好的反鋸齒效果，因為它不是分析3D模型本身，而是分析像素。如果把右圖的FXAA圖形放大，會發現FXAA只是把影像模糊化，但以正常大小觀看，效果就跟四倍MSAA十分接近。《[[上古卷轴V：天际|上古卷轴V：天际]]》是首款使用此技術的遊戲。

此技術雖然由[[nVIDIA|nVIDIA]]員工開發，但[[AMD|AMD]]的繪圖卡也可以使用。由nVIDIA開發的[[TXAA|TXAA]]（時間混疊反鋸齒）則只能在nVIDIA繪圖卡上使用。

==好處==
{{Quote box
 |tstyle = text-align: left;
 |quote  = Basically the simplest and easiest thing to integrate and use.
 |source = Timothy Lottes<ref name="simplest">{{cite web | url=http://timothylottes.blogspot.com/2011/03/nvidia-fxaa.html | title=NVIDIA FXAA | date=2011-09-03 | accessdate=2012-09-30 | author=Lottes, Timothy | archiveurl=https://archive.is/20121201235116/http://timothylottes.blogspot.de/2011/03/nvidia-fxaa.html | archivedate=2012-12-01 | deadurl=yes }}</ref>
 |qalign = right
}}
*只需較低的運算效能，只平滑化呈鋸齒狀的邊緣。<ref>{{cite web | last=Wang | first=James | date=Mach 19, 2012 | url=http://www.geforce.com/whats-new/articles/introducing-the-geforce-gtx-680-gpu#fxaa | title=FXAA: Anti-Aliasing at Warp Speed | publisher=NVIDIA | accessdate=2013-01-03 | archive-date=2019-02-21 | archive-url=https://web.archive.org/web/20190221112120/https://www.geforce.com/whats-new/articles/introducing-the-geforce-gtx-680-gpu#fxaa | dead-url=no }}</ref>即根據顯示器的[[像素|像素]]去處理鋸齒，而非像傳統的抗鋸齒去分析3D模型本身。<ref name="whitepaper" />

*平滑化所有屏幕上的像素，包括alpha混合（alpha-blended ）紋理，這些在MSAA是不會處理的。<ref name="codinghorror">{{cite web | url=http://www.codinghorror.com/blog/2011/12/fast-approximate-anti-aliasing-fxaa.html | title=Fast Approximate Anti-Aliasing (FXAA) | publisher=Coding Horror | date=2011-12-07 | accessdate=2012-09-30 | author=Atwood, Jeff | archive-date=2014-01-31 | archive-url=https://web.archive.org/web/20140131025653/http://www.codinghorror.com/blog/2011/12/fast-approximate-anti-aliasing-fxaa.html | dead-url=no }}</ref>

==過程==

*找出圖像中的所有邊緣
*平滑化邊緣

==參考文獻==
{{Portal|資訊科技}}
{{reflist}}
<!--- After listing your sources please cite them using inline citations and place them after the information they cite. Please see http://en.wikipedia.org/wiki/Wikipedia:REFB for instructions on how to add citations. --->

[[Category:图像处理|Category:图像处理]]
[[Category:抗鋸齒|Category:抗鋸齒]]