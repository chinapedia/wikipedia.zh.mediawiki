{{noteTA|G1=IT|1=zh-cn:编程;zh-hk:編程;zh-tw:程式設計;}}
{{编程范式}}
'''邏輯編程'''（'''逻辑程-{}-序设计'''）是種[[編程典範|編程典範]]，它設定答案須符合的規則來解決問題，而非設定步驟來解決問題。過程是
:算法=邏輯+控制。
不同的方法，可以看{{lang-en|Inductive logic programming}}。

邏輯編程的要點是將正規的[[邏輯|邏輯]]風格帶入電腦程式設計之中。數學家和哲學家發現邏輯是有效的理論分析工具。很多問題可以自然地表示成一個理論。說需要解答一個問題，通常與解答一個新的假設是否跟現在的理論無衝突等價。邏輯提供了一個證明問題是真還是假的方法。建立證明的方法是人所皆知的，故邏輯是解答問題的可靠方法。邏輯編程系統則自動化了這個程序。[[人工智能|人工智能]]在邏輯編程的發展中發揮了重要的影響。

{{le|猴子和香蕉問題|Monkey and banana problem}}是邏輯編程社群的著名問題。電腦須自行找出令猴子接觸香蕉的可行方法，取代程式設計師指定猴子接觸香蕉的路徑和方法。

邏輯編程建立了描述一個問題裏的世界的邏輯模型。邏輯編程的目標是對它的模型建立新的陳述。世界上知識不斷膨脹。傳統來說，我們會將一個問題陳述成單一的假設。邏輯編程的程式透過證明這個假設在模型裏是否為真來解決問題。

一些經常用到邏輯編程工具的範疇：

* [[專家系統|專家系統]]，程式從一個巨大的模型中產生一個建議或答案。
* [[自動化定理證明|自動化定理證明]]，程式產生一些新定理來擴充現有的理論。

最常用的邏輯編程語言是[[Prolog|Prolog]]，另外有較適用於大型方案的[[Mercury_(编程语言)|Mercury]]。詳盡的清單可見於[[:Category:邏輯編程語言|:Category:邏輯編程語言]]。

==历史==
早在二十世纪七十年代，[[罗伯特·科瓦尔斯基|罗伯特·科瓦尔斯基]]等人提出了逻辑可以作为程序设计语言的基本思想，把逻辑和程序这两个截然不同的概念协调统一为一个概念，于是诞生了逻辑程序设计。这也是早期自动定理证明和人工智能发展的自然结果。随后，逻辑程序设计得到了迅速发展，特别是基于一阶谓词的逻辑程序设计语言，将逻辑推理对应于计算，具有丰富的表达能力、非确定性等特点，在定理机器证明、关系数据库系统、程序验证、模块化程序设计和[[非单调推理|非单调推理]]等都有了广泛的应用。<ref>{{cite journal | title=关于逻辑程序不动点语义的讨论 | author=刘富春 | volume=22 | issue=2|date=2005年6月}}</ref>

==参考资料==
{{reflist}}

{{编程语言类别}}
{{Computer Science}}

[[Category:編程典範|Category:編程典範]]
[[Category:人工智能|Category:人工智能]]
[[Category:计算机逻辑|Category:计算机逻辑]]