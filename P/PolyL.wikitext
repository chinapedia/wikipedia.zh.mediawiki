在[[計算複雜度理論|計算複雜度理論]]內，'''PolyL'''是一個[[決定性問題|決定性問題]]的[[複雜度類|複雜度類]]， 可以使用決定型[[圖靈機|圖靈機]]使用被某個輸入大小的[[多对数函数|多对数函数]](polylogarithmic)函数所限制的空間。換句話說，polyL = [[DSPACE|DSPACE]]((log ''n'')<sup>O(1)</sup>)，這裡的 [[大O符號|O]](1)代表一個常數。

相對於已知包含在[[P_(複雜度)|P]]內的[[L_(複雜度)|L]]，我們尚且不知道是否polyL是包含於P內，或者反過來。(PolyL已知包含於QP，或說，[[類多項式時間|類多項式時間]](Quasi-polynomial time)之內)。 話說回來，我們知道polyL ≠ P，因為(舉例來說) polyL並沒有在[[多對一歸約|多對一]][[對數空間|對數空間]][[歸約|歸約]]之下的[[完備_(複雜度)|完備]]問題。<ref>{{ComplexityZoo|polyL|P#polyl}}</ref> 但是P則有這類問題。PolyL沒有對數空間之下的完備問題是因為[[空間譜系理論|空間譜系理論]](space hierarchy theory)保證了[[DSPACE|DSPACE]]((log ''n'')<sup>1</sup>) ⊊ DSPACE((log ''n'')<sup>2</sup>) ⊊ DSPACE((log ''n'')<sup>3</sup>)…等等。如果polyL有完備問題，則這問題必然落在某個DSPACE((log ''n'')<sup>''k''</sup>)內(''k''為某個常數)。這會令PolyL，也就是包含DSPACE((log ''n'')<sup>''k+1''</sup>)以上所有空間複雜度內的問題，全部可以歸約為DSPACE((log ''n'')<sup>''k''</sup>)，而違背了空間譜系理論。

== 參考資料 ==
{{reflist}}
{{複雜度類}}

[[Category:複雜度類|Category:複雜度類]]