{{Refimprove|time=2020-07-26T13:23:23+00:00}}
{{Infobox Software
|screenshot=[[File:POV-Ray_SC.jpg|250px]]
|caption=POV-Ray屏幕截图（Windows XP）
|name = POV-Ray
|developer = The POV-Team
|latest_release_version = 3.7.0
|latest_release_date = {{release date|2013|11|09}}
|latest_preview_version = 3.7 rc3
|latest_preview_date =
|operating_system = [[Windows|Windows]]、[[Mac_OS|Mac OS]]、[[Linux|Linux]]
|genre = [[三维计算机图形|三维计算机图形]] 
|license = AGPLv3<ref>[http://www.povray.org/povlegal.html POV-Ray License]</ref>
|website =  [http://www.povray.org/ www.povray.org]
}}

'''POV-Ray'''，全名是{{lang|en|Persistence of Vision Raytracer}}，是一个使用[[光线跟踪|光线跟踪]]绘制三维图像的[[开放源代码|开放源代码]][[自由軟體|自由軟體]]。运行POV脚本语言。它是基于[[DKBTrace|DKBTrace]]来开发的，DKBTrace是由[[David_Kirk_Buck|David Kirk Buck]]和[[Aaron_A._Collins|Aaron A. Collins]]编写在Amiga上的。POV-Ray早期也受到了Polyray raytracer作者Alexander Enzmann的帮助。很多漂亮的图片就是由POV-Ray来制作的。

== 历史 ==
该软件最初发展始于80年代，是一個歷史悠久的三維算圖引擎。[[David_Kirk_Buck|David Kirk Buck]]下载了一个为[[Unix|Unix]]编写的[[Amiga|Amiga]]光线跟踪软件的[[source_code|source code]]。有趣的是，当他玩了一段时间后，他觉得应该自己写一个类似软件，最初名字叫[[DKBTrace|DKBTrace]]。於是他將它贴在了一个论坛上面，以为别人会对它感兴趣。1987, [[Aaron_Collins|Aaron Collins]]下载了[[DKBTrace|DKBTrace]]然后开始了[[x86|x86]]机器的移植工作。他和[[David_Buck|David Buck]]一起合作为它添加了更多功能。直到这个软件更加的流行，他们已经为了加新功能而应付不过来。1989, David把这个軟體变成了一个程序员团队合作的項目。这时候，他觉得已经没有资格来命名软件名字了。所以考虑了很多新的名字。"STAR"（为动画和渲染而生存的软件：Software Taskforce on Animation and Rendering）是一个最初的打算，但是最后变成了"持续不断更新版本的光线跟踪引擎Persistence of Vision Raytracer,"简写为"POV-Ray" .

POV-Ray是第一个在[[空间轨道|空间轨道]]渲染出图片的[[光线跟踪|光线跟踪]]软件，由[[马克·沙特尔沃思|马克·沙特尔沃思]]在[[国际空间站|国际空间站]]渲染。

== 特征 ==
POV-Ray不像一般的3D軟體有圖形化使用介面，其使用自有腳本語言來描述場景。POV腳本語言具備[[圖靈完備性|圖靈完備性]]，可以編寫巨集以及迴圈程式。
* 支援幾種幾何元素以及[[構造實體幾何|構造實體幾何]]。
* 物件表面的折射、反射。
* 支援TGA、PNG影像格式
== 当前版本 ==
最新的版本是3.7。
* 支援多核心CPU[[對稱多處理|對稱多處理]]。
* 新增[[高動態範圍成像|高動態範圍成像]]（HDRI）格式如[[OpenEXR|OpenEXR]]和[[Radiance|Radiance]]輸入與輸出。
== 基元 ==

== 场景描述语言（Scene Description Language）例子 ==
下面的例子给出了场景描述语言（Scene Description Language）在POV-Ray的一个应用实例。展示了使用视角，光源，一个简单的方块模型和缩放，旋转，平移变换的效果。

[[File:I_example_povray_scene_rendering.png|thumb]]

 #version 3.6;
 #include "colors.inc"
 global_settings { assumed_gamma 1.0 }
 
 background   { color rgb <0.25, 0.25, 0.25> }
 
 camera       { location  <0.0, 0.5, -4.0>
                direction 1.5*z
                right     x*image_width/image_height
                look_at   <0.0, 0.0, 0.0> }
 
 light_source { <0, 0, 0>
                color rgb <1, 1, 1>
                translate <-5, 5, -5> }
 
 light_source { <0, 0, 0>        
                color rgb <0.25, 0.25, 0.25>
                translate <6, -6, -6> }
 
 box          { <-0.5, -0.5, -0.5>
                <0.5, 0.5, 0.5>
                texture { pigment { color Red }
                          finish  { specular 0.6 }
                          normal  { agate 0.25 scale 1/2 } }	
                rotate <45,46,47> }

下面的脚本片段展示了使用变量声明，赋值，比较和while循环结构。

[[File:I_example_povray_scene_rendering2.png|thumb]]

 #declare the_angle = 0;
 
 #while (the_angle <= 360)
 	box {   <-0.5, -0.5, -0.5>
 		<0.5, 0.5, 0.5>
                texture { pigment { color Red }
                          finish  { specular 0.6 }
                          normal  { agate 0.25 scale 1/2 } }
 		rotate the_angle }
 	#declare the_angle = the_angle + 45;
 #end

== 外在连结 ==
* [http://www.povray.org/ 正式网址]{{Wayback|url=http://www.povray.org/ |date=20060610102257 }}
{{Reflist}}

{{三維圖像軟體}}
[[Category:三维图像软件|Category:三维图像软件]]
[[Category:自由三維圖形軟體|Category:自由三維圖形軟體]]
[[Category:带有代码示例的条目|Category:带有代码示例的条目]]