{{howto|time=2017-04-01T23:09:33+00:00}}
'''灵活数组类型'''<ref>{{cite web|url=http://d3s.mff.cuni.cz/~holub/c_features.html|title=Lesser known C features|publisher=|accessdate=2014-12-30|archive-date=2014-12-23|archive-url=https://web.archive.org/web/20141223174455/http://d3s.mff.cuni.cz/~holub/c_features.html|dead-url=no}}</ref>是[[C99|C99]]引入的语言特性。<ref>http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf {{Wayback|url=http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf |date=20180111210637 }} section §6.7.2.1, item 16, page 103</ref>即在<code>struct</code>数据类型的最后一个数据成员，可以为一个未指明长度的数组类型。例如：

<syntaxhighlight lang="c">
struct double_vector_st {
    size_t length;
    double array[]; // the flexible array member should be last
};
</syntaxhighlight>

[[Sizeof|<code>sizeof</code>]]运算符作用于这个<code>struct</code>，返回灵活数组成员的偏移量。在堆上分配这种<code>struct</code>，应该保留灵活数组的空间。如下例：

<syntaxhighlight lang="c">
struct double_vector_st *allocate_double_vector(size_t len) {
   struct double_vector_st *vec = malloc(sizeof *vec + len * sizeof vec->array[0]);

   if (!vec) {
       perror("malloc double_vector_st failed");
       exit(EXIT_FAILURE);
   }

   vec->length = len;

   for (size_t ix = 0; ix < len; ix++)
       vec->array[ix] = 0.0;

   return vec;
}
</syntaxhighlight>

[[C++|C++]]语言标准尚未支持灵活数组类型。但[[Visual_C++|Visual C++]]2015支持。

== 参考文献==
{{Reflist}}


[[Category:C语言|Category:C语言]]