{{noteTA
|G1=IT
|1=zh-cn:软件工程; zh-hk:軟件工程; zh-tw:軟體工程;
|2=zh-hans:工程; zh-hant:工程;
|3=zh-cn:蒂姆·伯纳斯-李; zh-tw:提姆·柏內茲-李;zh-hk:添·柏納斯-李;zh-hant:蒂姆·伯納斯-李;
|4=zh-cn:蒂莫西; zh-tw:提摩西; zh-hk:添莫菲;zh-hant:蒂莫西;
|5=zh-cn:蒂姆;zh-tw:提姆;zh-hk:添;zh-hant:蒂姆;
|6=zh-cn:伯纳斯; zh-tw:柏內茲;zh-hant:伯納斯;zh-hk:柏納斯;
}}

[[File:Process_and_data_modeling.jpg|350px]]

{{软件开发过程}}

'''软件工程'''（{{lang-en|software engineering<ref name="Software Engineering;SE">{{Cite web |url = http://irw.ncut.edu.tw/peterju/se.html |title = 軟體工程(Software Engineering;SE) |author =  |date =  |publisher = [[勤益科技大學|勤益科技大學]] |language = zh-tw |accessdate = 2015-02-24 |quote = 寫程式的難度愈來愈低，因為程式語言越來越高階，API 越來越多，開發工具越來越好用，寫程式的門檻自然就大大地降低了。想要開發出有價值的中大型系統，軟體工程就很重要了，以蓋房子來說，你可以隨便找一兩個工人用磚或木材來蓋一棟矮房，但是如果想蓋一百多層樓的101大樓，你非得有良好的工程規劃不可，軟體不也是如此？程式設計師名片上的頭銜都是工程師，雖然和建築工程師、機械工程師... 一樣都被稱為工程師，但比較起來，軟體產業的工程師卻是最不工程導向的。 |archive-date = 2021-01-23 |archive-url = https://web.archive.org/web/20210123155512/https://irw.ncut.edu.tw/peterju/se.html |dead-url = no }}</ref>}}），是[[软件开发|软件开发]]领域里对工程方法的系统应用。

1968年秋季，NATO（北約）的科技委員會召集了近50名一流的編程人員、計算機科學家和工業界巨頭，討論和制定擺脫“[[軟體危機|軟體危機]]”的對策。在那次會議上第一次提出了軟體工程（software engineering）這個[[概念|概念]]，研究和应用如何以系统性的、规范化的、可定量的过程化方法去开发和维护软件，以及如何把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术方法结合起来的学科。它涉及到[[程序设计语言|程序设计语言]]、[[数据库|数据库]]、[[软件开发工具|软件开发工具]]、[[系统平台|系统平台]]、标准、[[软件设计模式|设计模式]]等方面。其后的几十年里，各种有关软件工程的技术、思想、方法和概念不断被提出，软件工程逐步发展为一门独立的[[科学|科学]]。

1993年，[[电气电子工程师学会|电气电子工程师学会]]（IEEE）给出了一个更加综合的定义："将系统化的、规范的、可度量的方法用于软件的开发、运行和维护的过程，即将工程化应用于软件开发中"。此后，IEEE多次给出软件工程的定义。

在现代社会中，软件应用于多个方面。典型的软件比如有[[电子邮件|电子邮件]]、[[嵌入式系统|嵌入式系统]]、[[人机界面|人机界面]]、[[办公自动化|办公套件]]、[[操作系统|操作系统]]、[[網頁|網頁]]、[[编译器|编译器]]、[[数据库|数据库]]、[[电脑游戏|游戏]]等。同时，各个行业几乎都有计算机软件的应用，比如[[工业|工业]]、[[农业|农业]]、[[银行|银行]]、[[航空|航空]]、[[政府|政府]]部门等。这些应用促进了经济和社会的发展，提高人们的工作效率，同时提升了生活质量。

[[软件工程师|软件工程师]]是对应用软件创造软件的人们的统称，软件工程师按照所处的领域不同可以分为[[系统分析师|系统分析师]]、[[系统架构师|系统架构师]]、[[前端和后端|前端和后端]]工程師、[[程序员|程序员]]、[[测试工程师|测试工程师]]、[[用户界面设计|用户界面设计師]]等等。各种软件工程师人们俗称程序员。

== 名稱由來與定義 ==
軟體工程包括兩種構面：[[軟體開發|軟體開發]]技術和軟體專案管理。<ref name="Software Engineering;SE" />
#軟體開發[[技術|技術]]：軟體開發[[方法學|方法學]]、[[軟體工具|軟體工具]]和[[軟體工程環境|軟體工程環境]]。<ref name="Software Engineering;SE" />
#軟體[[專案管理|專案管理]]：[[軟體度量|軟體度量]]、[[項目估算|項目估算]]、[[進度控制|進度控制]]、[[人員組織|人員組織]]、[[配置管理|配置管理]]、[[項目計畫|項目計畫]]等。<ref name="Software Engineering;SE" />

=== 軟體危機 ===
{{main|软件危机}}

1970年代和1980年代的[[軟體危機|軟體危機]]。在那个时代，許多[[軟體|軟體]]最后都得到了一个悲惨的结局，[[軟體|软件]]项目开发时间大大超出了规划的时间表。一些项目导致了財產的流失，甚至某些软件导致了人员伤亡。同时软件开发人员也发现软
軟體开发的难度越来越大。在軟體工程界被大量引用的案例是[[Therac-25|Therac-25]]的意外：在1985年六月到1987年一月之間，六個已知的醫療事故來自於Therac-25錯誤地超過劑量，導致患者死亡或嚴重輻射灼傷<ref>{{Cite web |url=http://courses.cs.vt.edu/~cs3604/lib/Therac_25/Therac_1.html |title=An Investigation of the Therac-25 Accidents |accessdate=2005-06-05 |archive-date=2011-06-11 |archive-url=https://web.archive.org/web/20110611232626/http://courses.cs.vt.edu/~cs3604/lib/Therac_25/Therac_1.html |dead-url=no }}</ref>。

=== 由來 ===
鑒於軟體開發時所遭遇困境，[[北大西洋公約組織|北大西洋公約組織]]（NATO）在1968年舉辦了首次軟體工程學術會議<ref>{{Cite web |url=http://www.ntut.edu.tw/~jykuo/se.html |title=存档副本 |access-date=2011-02-25 |archive-date=2021-04-18 |archive-url=https://web.archive.org/web/20210418104007/https://www.ntut.edu.tw/~jykuo/se.html |dead-url=no }}</ref>，並於會中提出「軟體工程」來界定軟體開發所需相關知識，並建議「軟體開發應該是類似[[工程|工程]]的活動」。軟體工程自1968年正式提出至今，這段時間累積了大量的[[研究|研究]]成果，廣泛地進行大量的技術實踐，藉由[[學術界|學術界]]和產業界的共同努力，軟體工程正逐漸發展成為一門專業[[學科|學科]]。

=== 定義 ===
<blockquote>关于软件工程的定义，在GB/T11457-2006《[[訊息技術|訊息技術]] 软件工程术语》中将其定义为"应用计算机科学理论和技术以及工程管理原则和方法，按预算和进度，实现满足用户要求的软件产品的定义、开发、和维护的工程或进行研究的学科"。</blockquote>包括：
* 創立與使用健全的工程原則，以便經濟地獲得可靠且高效率的軟體。<ref>F. L. Bauer, NATO Software Engineering Conference, 1968.</ref>
* 應用系統化，遵從原則，可被計量的方法來發展、操作及維護軟體；也就是把工程應用到軟體上。<ref>[[IEEE|IEEE]]標準電腦字典，610.12，1990</ref>
* 與開發、管理及更新軟體產品有關的理論、方法及工具。<ref>I. Sommerville, Software Engineering, 7th ed.:Addison-Wesley Longman Publishing Co., Inc. Boston, MA, USA, 2004.</ref>
* 一種知識或學科，目標是生產品質良好、準時交貨、符合預算，並滿足用戶所需的軟體。<ref>S. R. Schach, Software Engineering: Asken Associates Pacific Palisades, CA, USA, 1990.</ref>
* 實際應用科學知識在設計、建構電腦程式，與相伴而來所產生的文件，以及後續的操作和維護上。<ref>B. W. Boehm, Software Engineering Economics: Prentice Hall PTR Upper Saddle River, NJ, USA, 1981.</ref>
* 使用與系統化生產和維護軟體產品有關之技術與管理的知識，使軟體開發與修改可在有限的時間與費用下進行。<ref>R. Fairley, Software Engineering Concepts: McGraw-Hill, Inc. New York, NY, USA, 1985.</ref>
* 建造由工程師團隊所開發之大型軟體系統有關的知識學科。<ref>C. Ghezzi, M. Jazayeri, and D. Mandrioli, Fundamentals of Software Engineering, 2nd ed.: Prentice Hall, 2002.</ref>
* 對軟體分析、設計、實施及維護的一種系統化方法。<ref>The Free On-Line Dictionary of Computing, http://foldoc.org/ {{Wayback|url=http://foldoc.org/ |date=20120729052149 }}</ref>
* 系統化地應用工具和技術於開發以计算机為主的應用。<ref>S. A. Conger, The New Software Engineering: Course Technology Press United States, 1993.</ref>
* 軟體工程是關於設計和開發優質軟體。<ref>S. L. Pfleeger, Software Engineering: the Production of Quality , 2nd.: Macmillan Publishing Co., Inc. Indianapolis, IN, USA, 1991.</ref>

== 軟體工程的核心知識（SWEBOK） ==
　[[ACM|ACM]]與IEEE Computer Society聯合修定的SWEBOK<ref>{{cite web |url=http://www.computer.org/portal/web/swebok |title=index • IEEE Computer Society |publisher=Computer.org |date=2004-02-06 |accessdate=2016-04-28 |archive-url=https://web.archive.org/web/20160509154355/https://www.computer.org/portal/web/swebok |archive-date=2016-05-09 |dead-url=yes }}</ref>（Software Engineering Body of Knowledge）提到，軟體工程領域中的核心知識包括：
* [[軟體需求|軟體需求]]（Software requirements）
* [[軟體設計|軟體設計]]（Software design）
* [[軟體建構|軟體建構]]（Software construction）
* [[軟體測試|軟體測試]]（Software test）
* [[軟體維護|軟體維護]]與更新（Software maintenance）
* [[軟體構型管理|軟體構型管理]]（Software Configuration Management, SCM）
* [[軟體工程管理|軟體工程管理]]（Software Engineering Management）
* [[軟體開發過程|軟體開發過程]]（Software Development Process）
* [[軟體工程工具與方法|軟體工程工具與方法]]（Software Engineering Tools and methods）
* [[軟體品質|軟體品質]]（Software Quality）

== 软件工程与计算机科学 ==
{{see also|软件工程主题列表}}

软件的开发到底是一门[[科学|科学]]还是一门[[工程学|工程]]，这是一个被争论了很久的问题。实际上，软件开发兼有两者的特点。但是这并不意味着它们可以被互相混淆。很多人认为软件工程基于[[计算机科学|计算机科学]]和[[信息科学|信息科学]]就如传统意义上的工程学之于[[物理学|物理]]和[[化学|化学]]一样。在美国，大约40%的[[软件工程师|软件工程师]]具有计算机科学的学位。在世界其他地方，这个比例也差不多。他们并不一定会每天使用计算机科学方面的知识，但是他们每天都会使用软件工程方面的知识。

{| class="wikitable"
|+'''軟體工程與電腦科學的差別'''<ref>P. McBreen, Software Craftmanship: The New Imperative: Addsion-Wesley Professional, 2001.</ref>
|-
!
!軟體工程
!電腦科學
|-
|目標
|在[[時間|時間]]、[[資源|資源]]、人員這3個主要限制條件下構建滿足用戶需求的[[軟體|軟體]]系統。
|探索正確的計算和建模方法，從而改進計算方法本身。
|-
|產品
|軟體（比如辦公套件和[[編譯器|編譯器]]）。
|[[演算法|演算法]]（比如希爾排序法）和[[抽象|抽象]]的問題（比如哲學家進餐問題）。
|-
|進度與時間表
|[[軟體專案|軟體專案]]都有特定的進度與[[時間表|時間表]]
|[[研究|研究]]專案一般不具有設定的進度與時間表
|-
|關注點
|軟體工程關注如何為用戶實現[[價值|價值]]。
|軟體理論關注的是軟體本身運行的[[原理|原理]]，比如[[時間複雜度|時間複雜度]]，[[空間複雜度|空間複雜度]]，和演算法的正確性。
|-
|變化程度
|隨著[[技術|技術]]和用戶需求的不斷變化，軟體開發人員必須時刻調整自己的開發以適應當前的需求。同時軟體工程本身也處於不斷的發展中。
|對於某一種特定問題的正確解決方法將永遠不會改變。
|-
|需要的其他知識
|相關領域的知識。
|[[數學|數學]]。
|-
|著名的探索者和教育家
|[[巴里·勃姆|巴里·勃姆]]，[[戴维·帕纳斯|戴维·帕纳斯]]，[[佛瑞德·布魯克斯|佛瑞德·布魯克斯]]。
|[[艾兹赫尔·戴克斯特拉|艾兹赫尔·戴克斯特拉]]，[[高德纳|高德纳]]，[[罗伯特·塔扬|罗伯特·塔扬]]，[[彼得·斯莱特|彼得·斯莱特]]，[[艾伦·图灵|艾伦·图灵]]，[[姚期智|姚期智]]。
|-
|著名的實踐者
|[[约翰·巴科斯|约翰·巴科斯]]，[[丹·布里克林|丹·布里克林]]，[[蒂姆·伯纳斯-李|蒂姆·伯纳斯-李]]，[[林纳斯·托瓦兹|林纳斯·托瓦兹]]，[[理查德·马修·斯托曼|理查德·马修·斯托曼]]。
|無。
|}

例如[[彼得·麦克布林|彼得·麦克布林]]（Peter McBreen）認為，軟體[[工程|工程]]意味著更高程度的[[嚴謹|嚴謹]]性與經過[[驗證|驗證]]的流程，並不適合現階段各類型的[[軟體開發|軟體開發]]。麦克布林在著作《Software Craftsmanship: The New Imperative》提出了所謂「craftsmanship」的說法，認為現階段軟體開發成功的關鍵因素，是開發者的[[技能|技能]]，而不是「manufacturing」軟體的[[流程|流程]]。

== 軟體工程的現況 ==
Capers Jones曾對美國軟體組織的績效做過評估，所得到結論是：軟體工程的專業[[分工|分工]]不足，是造成[[品質|品質]]低落、時程延誤、[[預算|預算]]超支的最關鍵因素。<ref>C. Jones Programmer Productivity: McGraw-Hill, Inc. New York, NY, USA, 1985</ref>

2003年，The Standish Group年度報告指出，在他們調查的13522個專案中，有66％的軟體專案失敗、82％超出時程、48％推出時缺乏必需的功能，總計約550億[[美元|美元]]浪費在不良的計畫、預算或軟體估算上。<ref>Chaos Report, The Standish Group, 2003.</ref>

== 沒有銀彈與人月神話 ==
{{main|没有银弹|人月神话}}
在1986年，[[IBM|IBM]]大型電腦之父[[佛瑞德·布魯克斯|佛瑞德·布魯克斯]]發表了他的著名論文《[[没有银弹|沒有銀彈]]》，在這篇著名的論文中他斷言：“在10年內無法找到解決軟件危機的靈丹妙藥”。從[[软件危机|軟件危機]]被提出以來。人們一直在尋找解決它的方法。於是一系列的方法被提出並且加以應用。比如[[結構化程式設計|結構化程式設計]]，[[方法_(電腦科學)|面向對象的開發]]，[[CMM|CMM]]，[[统一建模语言|UML]]等等。佛瑞德·布魯克斯著名作品還有《[[人月神话|人月神話]]》。

布魯克斯在《人月神話：軟體專案管理之道（The Mythical Man-Month）》提到，將沒有'''靈丹妙藥（silver bullet）'''可以一蹴而就，開發軟體的困難是內生的，只能漸進式的改善。整體環境沒有改變以前，唯一可能的解，是依靠[[人|人]]的素質，培養優秀的工程師。<ref>布魯克斯原文：「我認為軟體困難的部份是在建立規格、設計，並驗證其構思，而不是在表達和測試其實作」</ref>

== 软件工程与计算机程序设计 ==
软件工程存在于各种应用中，存在于软件开发的各个方面。而[[计算机程序设计|程序设计]]通常包含了程序设计和编码的反复迭代的过程，它是软件开发的一个阶段。

软件工程力图对软件项目的各个方面作出指导，从软件的可行性分析直到软件完成以后的维护工作。软件工程认为软件开发与各种市场活动密切相关。比如软件的[[销售|销售]]，用户[[培训|培训]]，与之相关的软件和硬件安装等。软件工程的方法学认为一个独立的[[程序员|程序员]]不应当脱离团队而进行开发，同时程序的编写不能够脱离软件的需求，设计，以及[[客户|客户]]的利益。

软件工程的发展是计算机程序设计工业化的体现。

== 软件开发过程 ==
{{main|软件开发过程}}

软件开发过程是随着开发技术的演化而随之改进的。从早期的瀑布式（Waterfall）的开发模型到后来出现的螺旋式的迭代（Spiral）开发，以致最近开始兴起的[[敏捷軟體開發|敏捷軟體開發]]（Agile），他们展示出了在不同的时代软件产业对于开发过程的不同的认识，以及对于不同类型项目的理解方法。

注意区分软件开发过程和软件过程改进之间的重要区别。诸如像ISO 15504, ISO 9000, CMM, CMMI这样的名词阐述的是一些软件过程改进框架，他们提供了一系列的标准和策略来指导软件组织如何提升软件开发过程的质量、软件组织的能力，而不是给出具体的开发过程的定义。

== 方法学 ==
软件工程的方法有很多方面的意义。包括项目管理，分析，设计，程序的编写，测试和质量控制。

[[软件设计|软件设计]]方法可以区别为'''重量级的方法'''和'''轻量级的方法'''。重量级的方法中产生大量的正式[[软件开发文档|文档]]。

著名的重量级开发方法包括[[ISO_9000|ISO 9000]]，[[CMM|CMM]]，和[[Rational統一過程|统一软件开发过程]]（RUP）。

轻量级的开发过程没有对大量正式文档的要求。著名的轻量级开发方法包括[[极限编程|极限编程]]（XP）和[[敏捷过程|敏捷过程]]（Agile Processes）。

根据《新方法学》这篇文章的说法，'''重量级方法'''呈现的是一种“防御型”的姿态。在应用“重量级方法”的软件组织中，由于软件项目经理不参与或者很少参与程序设计，无法从细节上把握项目进度，因而会对项目产生“恐惧感”，不得不要求程序员不断撰写很多“[[软件开发文档|软件开发文档]]”。而'''轻量级方法'''则呈现“进攻型”的姿态，这一点从XP方法特别强调的四个准则—“沟通、简单、反馈和勇气”上有所体现。目前有一些人认为，“重量级方法”适合于大型的软件团队（数十人以上）使用，而“轻量级方法”适合小型的软件团队（几人、十几人）使用。当然，关于'''重量级方法'''和'''轻量级方法'''的优劣存在很多争论，而各种方法也在不断进化中。

一些方法论者认为人们在开发中应当严格遵循并且实施这些方法。但是一些人并不具有实施这些方法的条件。实际上，采用何种方法开发软件取决于很多因素，同时受到环境的制约。

== 软件工程的发展方向 ==
“'''[[敏捷开发|敏捷开发]]'''”（Agile Development）被认为是软件工程的一个重要的发展。它强调软件开发应当是能够对未来可能出现的变化和不确定性作出全面反应的。

敏捷开发被认为是一种“'''轻量级'''”的方法。在轻量级方法中最负盛名的应该是“'''[[极限编程|极限编程]]'''”（Extreme Programming，简称为XP）。而与轻量级方法相对应的是“'''重量级方法'''”的存在。重量级方法强调以开发过程为中心，而不是以人为中心。重量级方法的例子比如[[CMM/PSP/TSP|CMM/PSP/TSP]]。

'''[[面向方面的程序設計|面向方面的程序設計]]'''（Aspect Oriented Programming，简称AOP）被认为是近年来软件工程的另外一个重要发展。这里的'''方面'''指的是完成一个功能的对象和函数的集合。在这一方面相关的内容有[[泛型编程|泛型编程]]（Generic Programming）和[[模板_(C++)|模板]]。

== 分支學科 ==

== 相關學科 ==
===系統工程===
[[系统工程|系统工程]]師主要處理系統的整體需求和設計，包括硬體與人力問題。

== 参考文献 ==
{{Reflist|30em}}

== 参见 ==
{{wikiversity|Subject:軟體工程}}
{{Portal box|软件|工程|软件测试|電腦程式設計|資訊科技}}

* [[软件|软件]]
* [[软件开发|软件开发]]
* [[软件测试|软件测试]]
* [[项目管理|项目管理]]
* [[系统工程|系统工程]]

== 外部链接 ==
{{zh}}
* [http://www.seat.org.tw SEAT社團法人台灣軟體工程學會] {{Wayback|url=http://www.seat.org.tw/ |date=20210417153327 }}
* [http://books.gotop.com.tw/oreilly.aspx 歐萊禮] {{Wayback|url=http://books.gotop.com.tw/oreilly.aspx |date=20210417153327 }}

{{en}}
* https://web.archive.org/web/20091022052322/http://www.computer.org/portal/web/swebok
* http://www.abet.org/ {{Wayback|url=http://www.abet.org/ |date=20180711185303 }}
* http://www.computer.org/certification/ {{Wayback|url=http://www.computer.org/certification/ |date=20080719233158 }}
* http://systemsguide.com/GuildSite/TDM/certification.html


{{-}}
{{軟體工程}}
{{系统工程}}
{{Engineering fields}}
{{技术}}
{{Computer Science}}
{{Authority control}}

[[Category:軟體開發|Category:軟體開發]]
[[Category:软件工程|]]
[[Category:系統工程|Category:系統工程]]