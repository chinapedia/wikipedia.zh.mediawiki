{{NoteTA
|G1 = IT
|1 = zh-hans:周期; zh-hant:週期;
}}
{{软件开发过程}}
'''软件开发过程'''（{{lang-en|software development process}}），或'''软件过程'''（{{lang-en|software process}}），是[[软件开发|软件开发]]的开发[[系统发展生命周期|生命周期]]（{{lang|en|software development life cycle}}），其各个阶段实现了软件的需求定义与分析、设计、实现、测试、交付和维护。软件过程是在开发与构建系统时应遵循的步骤，是软件开发的路线图。<ref name="Pressman">{{Cite book|title=Software Engineering: A Practitioner's Approach|last=Pressman|first=Roger S.|last2=Maxim|first2=Bruce R.|publisher=McGraw-Hill Education|year=2015|isbn=978-0-07-802212-8|edition=Eighth Edition|location=|pages=}}</ref>

软件过程方法涉及交付（{{lang|en|deliverables}}）和工件（{{lang|en|artifacts}}）的预定义、软件产品在项目团队中的开发与维护。过程方法的应用可以完善[[软件设计|软件设计]]、{{tsl|en|Software product management|软件产品管理|产品管理}}和[[软件项目管理|项目管理]]。<ref name="CMS08">Centers for Medicare & Medicaid Services (CMS) Office of Information Service (2008). ''[http://www.cms.gov/Research-Statistics-Data-and-Systems/CMS-Information-Technology/XLC/Downloads/SelectingDevelopmentApproach.pdf Selecting a development approach] {{Wayback|url=http://www.cms.gov/Research-Statistics-Data-and-Systems/CMS-Information-Technology/XLC/Downloads/SelectingDevelopmentApproach.pdf |date=20190102182947 }}''. Webarticle. United States Department of Health and Human Services (HHS). Re-validated: March 27, 2008.  Retrieved 27 Oct 2008.</ref>[[敏捷软件开发|敏捷开发]]是现代软件开发中被广泛使用的范式。过程模型（{{Lang-en|process models}}）则意图解决软件过程中的混乱，将软件开发过程中的沟通、计划、建模、{{Tsl|en|Software construction|软件构建|构建}}和部署等活动（{{Lang|en|activities}}）有效地组织了起来。

软件过程为软件的开发定义了一个框架，将自动化工具、软件开发方法和质量管理紧密结合在了一起。软件过程构成了软件项目管理控制的基础，建立了一个环境以便于技术方法的采用、工作产品（模型、文档、报告、表格等）的产生、里程碑（{{lang|en|milestones}}）的建立、质量的保证、正常变更的正确管理。<ref name="Pressman"/>

== 历史 ==
软件开发方法（{{Lang-en|software development methodology, SDM}}）框架在20世纪60年代开始出现。在信息系统的构建中，[[系统开发生命周期|系统开发生命周期]]（SDLC）可被视作最早的形式化方法。SDLC的主要想法是，在采用框架时应当“以审慎、结构化和方法化的方式开发信息系统。生命周期中的每个阶段，从概念提出到系统交付，都应当严格、依次地进行”。当时的软件开发目标是，“在大型商业集团中开发大规模的功能性商业系统，系统需要承载大量数据处理和数据运算任务”。<ref name="Ell04">Geoffrey Elliott (2004) ''Global Business Information Technology: an integrated systems approach''. Pearson Education. p.87.</ref>

方法、过程和框架覆盖范围甚广，包含从日常开发的步骤到为特定项目量身定制的灵活框架。一些情况下，组织会正式发布描述过程的文档。

软件开发方法历史中的重要事件有：

* 1969年，[[结构化编程|结构化编程]]
* 1980年，[[結構化設計|结构化系统分析与设计方法]]（{{Lang|en|Structured Systems Analysis and Design Method, SSADM}}）
* [[面向对象程序设计|面向对象程序设计]]，起步于1960年代，1990年代中期成为一种主流方法
* 1991年，[[快速應用程式開發|快速应用程序开发]]
* 1995年，[[Scrum|Scrum]]
* 1998年，{{Tsl|en|Team software process|团队软件过程}}
* 1998年，由IBM维护的[[统一软件开发过程|统一软件开发过程]]
* 1999年，[[极限编程|极限编程]]
* 2005年，{{Tsl|en|Agile Unified Process|敏捷统一过程}}（{{Lang|en|Agile Unified Process, AUP}}）
* 2010年代，{{Tsl|en|Scaled Agile Framework|基于大规模的敏捷框架}}（{{Lang|en|Scaled Agile Framework, SAFe}}）
* 2010年代，大规模Scrum（{{Lang|en|Large-Scale Scrum, LeSS}}）

== 方法 ==

==== 敏捷软件开发 ====
{{Main|敏捷软件开发}}
敏捷式开发模型的特性是能够持续性的对软件本体进行不断改造以及客户对软件开发过程中的不断介入。它适用于小规模的开发团队，好让每个成员能够互相在开发进行时方便交流。
敏捷模型的优点在于其灵活性——经过一次次例行的开发迭代期(iterations)后，在每一次迭代期的开始时小组便会考虑向软件引入新的特性和改变，也就不会特别跟随原有的开发要求。

==== 过程模型 ====
过程模型由五个基本的框架活动组成：沟通、计划、建模、{{Tsl|en|Software construction|软件构建|构建}}和部署。他们之间线性（{{Lang|en|linear}}）、迭代（{{Lang|en|iterative}}）、演进（{{Lang|en|evolutionary}}）和平行（{{Lang|en|parallel}}）关系会产生不同的模型。常见的过程模型包括：[[瀑布模型|瀑布模型]]、[[V模型_(軟體開發)|V模型]]、[[原型设计|原型设计]]、[[增量模型|增量模型]]、[[螺旋模型|螺旋模型]]等<ref name="Pressman" />

==== 瀑布模型 ====
{{Main|瀑布模型}}
[[File:Waterfall_model.svg|缩略图]]

瀑布模型是经典的生命周期模型，简单的线性过程模型。一般会依次进行以下环节：

* 需求分析
* [[软件设计|设计]]
* 实现
* [[软件测试|测试]]
* [[系統整合|集成]]
* [[软件部署|部署]]（或[[软件安装|安装]]）
* [[软件维护|维护]]

适用于需求良定义的软件开发工作，实际工作很难按照瀑布模型的预想进行。

[[V模型_(軟體開發)|V模型]]是瀑布模型的变种，它允许软件过程中环节的回顾调整。在V字曲线上下行时，团队理解需求和设计实现；在V的顶点处，可运行的软件已经被生成；而在曲线上行则会进行诸项测试。

==== 螺旋模型 ====
{{Main|螺旋模型}}
螺旋模型最初由{{Lang|en|Barry Boehm}}提出，它是软件过程的一个演进模型，为版本递增软件的快速开发提供了可能。其两个主要特性是;

* 循环地增加系统定义和实现的复杂度而降低风险
* 用一组锚点里程碑（{{Lang|en|anchor point milestones}}）保证利益者获得灵活和满意的系统解决方案<ref>{{Cite journal|title=A spiral model of software development and enhancement|author=B. Boehm|url=https://dl.acm.org/citation.cfm?doid=12944.12948|journal=ACM SIGSOFT Software Engineering Notes|issue=4|doi=10.1145/12944.12948|others=|year=1986|volume=11|page=14-24|pmid=|access-date=2018-07-06|archive-date=2019-10-10|archive-url=https://web.archive.org/web/20191010085702/https://dl.acm.org/citation.cfm?doid=12944.12948|dead-url=no}}</ref>

[[File:Spiral_model_(Boehm,_1988).svg|缩略图]]

== 实践 ==
在[[软件工程|软件工程]]领域，'''项目生命周期'''刻画了一个工程从起始到完成，是如何进行计划、控制和监控的[[模型|模型]]。在项目生命周期的早期和後期，[[软件架构|软件架构]]、[[需求_(產品開發)|需求]]和[[系统定义|系统定义]]是一个问题：

#系统／软件的市场是什么？
#竞争对手有哪些？
#系统／软件的运行平台是什么？
#这个项目可用的时间有多少？
#项目需要是什么？

经过这些年，从最早也最简单的[[瀑布模型|瀑布模型]]开始，已经开发出了许多不同的模型。但是，随着软件变得更大和更复杂，这种开发方法已经出现负面影响，尤其是牵扯到有大型团队的时候。迭代的模型得到了发展，它包括[[原型法|原型法]]、[[演化原型法|演化原型法]]、[[增量开发|增量开发]]、[[螺旋模型|螺旋模型]]、[[V模型|V模型]]和[[混沌模型|混沌模型]]。

这些模型的使用大部分都局限于项目的总体管理，但是现在认为，如果在项目的单独部分都由最合适的模型控制，则这个项目受到了更好的控制。例如，一个项目用增量开发模型，但是在每一个增量过程，文档是按照[[瀑布模型|瀑布模型]]创建和管理，而代码开发使用V模型管理。

每个项目的生命周期的正规性和复杂性受到很多因素的制约，包括预算约束，经验，项目规模和复杂度，开发队伍。

一些经验丰富和很受尊敬的项目领导和程序员认为生命周期的严格应用是一种理论，并不能在实践中起到好作用。[[Linux内核|Linux内核]]的創建者[[林納斯·托瓦茲|林納斯·托瓦茲]]（Linus Torvalds），在Linux内核的[[邮件列表|邮件列表]]中这样描述：

{{cquote|没有一个已经在通用市场上（相对特殊领域而言）取得成功的的较大的软件项目曾经经历了那些好的生命周期模型，就像在计算机科学课程裡告诉你的一样。}}

[[ISO_12207|ISO 12207]]是为描述为一个项目选择，执行和监控生命周期的方法而开发的國際标准。

==参见==
*[[开发阶段|开发阶段]]
*[[软件工程主题列表|软件工程主题列表]]
*[[软件工程|软件工程]]

== 参考文献 ==
{{Reflist|30em}}


{{軟體工程}}
{{Computer Science}}

[[Category:软件工程|Category:软件工程]]
[[Category:项目管理|Category:项目管理]]
[[Category:软件开发|Category:软件开发]]
[[Category:方法論|Category:方法論]]

[[da:Softwareudviklingsproces|da:Softwareudviklingsproces]]
[[de:Vorgehensmodell_zur_Softwareentwicklung|de:Vorgehensmodell zur Softwareentwicklung]]
[[es:Proceso_para_el_desarrollo_de_software|es:Proceso para el desarrollo de software]]
[[gl:Ciclo_de_desenvolvemento|gl:Ciclo de desenvolvemento]]
[[he:מתודולוגיית_פיתוח_תוכנה|he:מתודולוגיית פיתוח תוכנה]]
[[it:Ciclo_di_vita_del_software|it:Ciclo di vita del software]]
[[jv:Prosès_pangembangan_piranti_alus_komputer|jv:Prosès pangembangan piranti alus komputer]]
[[lt:Programų_kūrimo_gyvavimo_ciklo_modelis|lt:Programų kūrimo gyvavimo ciklo modelis]]
[[no:Programvareutviklingsprosess|no:Programvareutviklingsprosess]]
[[pl:Proces_wytwórczy_oprogramowania|pl:Proces wytwórczy oprogramowania]]
[[sq:Procesi_i_zhvillimit_të_softuerit|sq:Procesi i zhvillimit të softuerit]]
[[sv:Programutvecklingsmetodik|sv:Programutvecklingsmetodik]]