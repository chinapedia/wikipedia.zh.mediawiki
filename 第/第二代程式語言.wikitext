{{otheruses|subject=编程语言世代中对一定发展阶段的语言的分类|other=确切的一类语言|汇编语言}}

'''第二代程式語言'''（2GL）是在[[编程语言世代|编程语言世代]]的分类中对[[汇编语言|汇编语言]]的称呼。
<ref name="Computer Hope">{{Cite web |url=http://www.computerhope.com/jargon/num/1gl.htm |title="Computer Hope, Generation languages" |accessdate=2020-01-29 |archive-date=2017-07-04 |archive-url=https://web.archive.org/web/20170704045335/https://www.computerhope.com/jargon/num/1gl.htm |dead-url=yes }}</ref><ref name="Brookshear">{{cite book |last1=Brookshear |first1=J. Glenn |title=Computer science : an overview |publisher=Addison-Wesley |isbn=0-13-256903-5 |pages=240–241 |edition=11th}}</ref><ref name=":0">{{Cite web|url=http://www.uni-miskolc.hu/~geofiz/Oktatok/vass/Generations_and_paradigms.pdf|title=Programming Language generations and Programming Paradigms|last=Vass|first=Péter|date=|website=|archive-url=https://web.archive.org/web/20200129065933/http://www.uni-miskolc.hu/~geofiz/Oktatok/vass/Generations_and_paradigms.pdf|archive-date=2020-01-29|access-date=|dead-url=yes}}</ref>
这个称呼是为了将汇编语言与其他[[跨平台|跨平台]]的[[第三代编程语言|第三代编程语言]]（如 [[COBOL|COBOL]] 等高级语言）或更早期出现的[[第一代编程语言|第一代编程语言]]（[[机器语言|机器语言]]）区分开来或进行对比。
<ref name="Brookshear" /><ref name=":1">{{Cite web|url=http://www.wisegeek.com/what-are-programming-language-generations.htm|title=What Are Programming Language Generations?|website=wiseGEEK|language=en-US|access-date=2019-06-11}}</ref>

== 定义 ==
第二代编程语言的定义如下：

* 程序中的每一行直接对应到一条处理器指令，也就是说，它基本相当于[[记忆术|更易于记忆的机器语言]]。
* 程序员能够直接写出或读懂代码。要使代码运行在机器上，需要通过[[汇编语言|汇编过程]]将它转换为机器可理解的形式。<ref name=":1" />
* 每种语言写出的程序只能运行在特定的一类处理器架构上。<ref name="Brookshear" />

== 应用 ==
第二代编程语言有时会被用来编写[[内核|内核]]或[[驱动程序|驱动程序]]，有时候也用来编写游戏等计算密集的软件。<ref name="Computer Hope" />

在现代编程中，第二代编程语言很少有应用。
<ref>{{Cite web|url=http://statisticstimes.com/tech/top-computer-languages.php|title=Top Computer Languages 2019 - StatisticsTimes.com|website=statisticstimes.com|access-date=2019-06-11|archive-url=https://archive.today/20190612064009/http://statisticstimes.com/tech/top-computer-languages.php|archive-date=2019-06-12|dead-url=no}}</ref>
这些语言可能有一些优势，例如它们的执行速度更快；但是，它们也有缺点。在编写第二代编程语言的程序时，程序员需要：

* 以处理器指令为单位来思考，而非更高阶的逻辑；<ref name="Brookshear" /><ref name=":0" />
* 在内存管理时关注大量的细节，同时考虑其他硬件因素；<ref name="Brookshear" />
* 对于不同的架构编写不同版本的程序。<ref name=":0" />

当今，大多数程序都是用[[第三代编程语言|第三代编程语言]]或[[第四代编程语言|第四代编程语言]]编写的。汇编语言在运行速度方面的优势也不再明显；与汇编相比，编写完善的[[C语言|C语言]]程序通常能运行得一样快甚至更快。
<ref name="Brookshear" /><ref>{{cite web |last1=Walls |first1=Colin |title=Why C is faster than assembly |url=https://blogs.mentor.com/colinwalls/blog/2013/02/18/why-c-is-faster-than-assembly/ |website=Mentor, a Sieman's Business |publisher=Mentor Inc. |accessdate=11 June 2019}}</ref>

== 历史 ==
第二代编程语言占据了计算机发展史中的重要地位。有很长一段时间，给许多机器（如[[红白机|红白机]]或[[康懋达64|康懋达64]]）编程的唯一选择就是第二代编程语言。<ref>{{cite web |last1=Commodore corporation |title=C64 programmer's reference |url=https://www.commodore.ca/manuals/c64_programmers_reference/c64-programmers_reference_guide-05-basic_to_machine_language.pdf |publisher=Commodore corporation |accessdate=11 June 2019}}</ref><ref>{{cite web |author1=Wikibooks contributors |title=NES assembly |url=https://en.wikibooks.org/w/index.php?title=NES_Programming&oldid=3551383 |website=Wikibooks: NES Assembly |accessdate=11 June 2019}}</ref>
第二代编程语言在从“程序员向机器妥协”到“机器向程序员妥协”的道路上迈出了第一步，编程语言世代的发展遵循了这条道路。<ref name="Brookshear" /><ref name=":0" />

== 参考 ==
{{Reflist}}

{{程式語言世代}}


[[分类:程序设计语言|分类:程序设计语言]]