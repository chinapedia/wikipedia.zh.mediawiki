{{NoteTA|G1=IT}}
{{Expand English|Symbolic_link}}
{{about|UNIX符号链接|NTFS符号链接（Windows平台）|NTFS符号链接}}
'''符号链接'''（'''软链接、Symbolic link'''）是一类特殊的[[计算机文件|文件]]， 其包含有一条以绝对[[路径_(计算机科学)|路径]]或者相对路径的形式指向其它文件或者目录的引用。<ref>[http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11 Pathname resolution] {{Wayback|url=http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11 |date=20090908034202 }}, [[POSIX|POSIX]].</ref> 符号链接最早在4.2[[BSD|BSD]]版本中出现（1983年）。今天[[POSIX|POSIX]]操作系统标准、大多数[[类Unix系统|类Unix系统]]、[[Windows_Vista|Windows Vista]]、[[Windows_7|Windows 7]]都支持符号链接。[[Windows_2000|Windows 2000]]与[[Windows_XP|Windows XP]]在某种程度上也支持符号链接。

符号链接的操作是透明的：对符号链接文件进行读写的程序会表现得像直接对目标文件进行操作。某些需要特别处理符号链接的程序（如备份程序）可能会识别并直接对其进行操作。

一个符号链接文件仅包含有一个文本字符串，其被操作系统解释为一条指向另一个文件或者目录的路径。它是一个独立文件，其存在并不依赖于目标文件。如果删除一个符号链接，它指向的目标文件不受影响。如果目标文件被移动、重命名或者删除，任何指向它的符号链接仍然存在，但是它们将会指向一个不复存在的文件。这种情况被有时被称为''被遗弃''。

== Unix操作系统 ==
{{main|ln (Unix)}}
在Unix下创建一个符号链接，可以在命令行提示符下输入以下命令：
 -{}-
 ln -s 目标 链接名称

将上述命令中的“目标”用符号链接将要指向的相对路径或者绝对路径进行替换。在通常的情况下，目标文件应该存在。但是也可以创建一个指向不存在目标的符号链接。将“链接名称”用希望的符号链接名替换。这条ln命令将会创建一条符号链接。当创建完符号链接之后，可以将“链接名称”当作“目标”的别名看待。普通的文件操作命令（如cp、rm等）都能直接作用于符号链接。用于读写文件内容的命令将会直接访问目标文件。

<syntaxhighlight lang="bash">
user@userbox:~/one$ cd two
user@userbox:~/one/two$ ls
a  b
user@userbox:~/one/two$ cd ../..
user@userbox:~$ ln -s ~/one/two three
user@userbox:~$ cd three
user@userbox:~/three$ ls
a  b
user@userbox:~/three$ cd ..
user@userbox:~$ cat ./one/two/a
a
user@userbox:~$ echo "c" > ./one/two/a
user@userbox:~$ cat ./three/a
c
</syntaxhighlight>

在Unix中，符号链接的创建使用与创建[[硬链接|硬链接]]同样的命令，但是它们之间的实际行为差别很大。硬链接仅仅是一个与文件关联的名字，它不能离开关联文件而独立存在。当一个硬链接被移动、重命名或者删除时，其余关联到同一文件的硬链接不受影响。只有当最后一条指向该文件的硬链接被删除时，该文件内容将会消失。与硬链接不同，符号链接能够指向目录。

===符号链接的存储===

早期符号链接的实现，采用直接分配磁盘空间来存储符号链接的信息，这种机制与普通文件一致。这种符号链接文件里包含有一个指向目标文件的文本形式的引用，以及一个指示自己为符号链接的标志。

这样的存储方式被证明有些缓慢，并且早一些小型系统上会浪费[[磁盘空间|磁盘空间]]。一种名为'''快速符号链接'''的新型存储方式能够将文本形式的链接存储在用于存放文件信息的磁盘上的标准数据结构之中（[[inode|inode]]）。为了表示区别，原先的符号链接存储方式也被称作'''慢速符号链接'''。

== Mac OS操作系统 ==
===别名（Aliases）===
除开Unix系统下的普通符号链接之外，[[Mac_OS|Mac OS]]还能使用[[别名|别名]]（aliases）。当目标文件移动到同一磁盘上的其它地方时，别名仍然够继续有效。某些版本的[[Linux|Linux]]系统也有与别名类似的功能。

== Windows操作系统 ==
===Windows Vista的符号链接===
[[Windows_Vista|Windows Vista]] 的符号连接基于 [[NTFS|NTFS]] [[文件系统|文件系统]]的[[重解析点|重解析点]]功能，具体请参考 NTFS 的相关介绍。

Windows Vista 使用 mklink 命令（注意这是[[内部命令|内部命令]]，而非[[可执行程序|可执行程序]]）创建符号连接，命令行如下：
 -{}-
 mklink [/D | /H | /J] LinkName Target
 /D          创建[[目录符号链接|目录符号链接]]（默认为[[文件符号链接|文件符号链接]]）
 /H          创建[[硬链接|硬链接]]
 /J          创建[[目录连接|目录连接]]
 LinkName    链接名称
 Target      链接的目标（根据命令行参数不同，可能为文件、目录或者[[加载点|加载点]]）

[[Windows_2000|Windows 2000]] 和 [[Windows_XP|Windows XP]]上可以使用junction<ref>{{Cite web |url=https://technet.microsoft.com/en-us/sysinternals/bb896768.aspx |title=存档副本 |access-date=2017-01-24 |archive-date=2017-07-07 |archive-url=https://web.archive.org/web/20170707172241/https://technet.microsoft.com/en-us/sysinternals/bb896768.aspx |dead-url=no }}</ref>工具创建类似的符号链接。

===快捷方式===
快捷方式（shortcut）是一种功能上类似符号链接的[[文件|文件]]对象，但与符号链接有本质的不同。快捷方式是普通的文件（拥有扩展名 .lnk），而非符号，因此，快捷方式可以被复制、移动、更改（某些特殊的快捷方式无法更改所有信息）或删除。快捷方式可以指向文件、文件夹或其他任何系统中合法的位置（包括[[控制面板|控制面板]]、[[桌面|桌面]]等）。

如果快捷方式指向[[可执行程序|可执行程序]]，则可以同时指定启动的[[命令行参数|命令行参数]]以及[[启动位置|启动位置]]（对于非可执行程序的快捷方式也能指定这些信息，但无意义）。同时，可以为快捷方式单独选择图标（如果没有选择图标，则使用目标的图标），以方便用户个性化。

删除快捷方式完全不会影响被链接到的目标。如果删除了目标，则会使快捷方式失效。由于快捷方式可以使用相对路径或绝对路径，因此移动快捷方式或目标可能导致快捷方式失效，也可能不会有影响。在某些Windows操作系统（包括但不限于Windows XP、Windows Vista）中，操作系统会对文件路径的改变作一定程度的自动处理，使得快捷方式将在大多数情况下能保持有效：当快捷方式指向的目标失效而目标被移动过时，系统将自动修改快捷方式的目标到新的位置。

===文件夹快捷方式===
类似普通快捷方式，但只能指向文件夹并且对用户更为透明。文件夹快捷方式（Folder Shortcut）的实质为一个带有唯讀属性的普通文件夹，里面含有desktop.ini和target.lnk两个隐藏文件：target.lnk为指向目标文件夹的普通快捷方式；由desktop.ini定义该文件夹为“文件夹快捷方式”，其内容为：

 [.ShellClassInfo]
 CLSID2={0AFACED1-E828-11D1-9187-B532F1E9575D}

文件夹快捷方式可以在 Windows 外壳中被创建和使用。
同样，删除文件夹快捷方式不会影响被链接到的目标；删除目标则会使文件夹快捷方式失效。

== 参见 ==
* [[ln_(Unix)|ln (Unix)]]

==参考文献==
{{reflist}}

{{计算机文件}}

[[Category:文件系统|F]]