{{NoteTA|G1=IT}}
{{Solid principles}}
[[File:Barbara_Liskov_MIT_computer_scientist_2010.jpg|alt=Portrait of Barbara Liskov]]

在[[面向对象的程序设计|面向对象的程序设计]]中，'''里氏替换原则'''（Liskov Substitution principle）是对[[子类型|子类型]]的特别定义。它由[[芭芭拉·利斯科夫|芭芭拉·利斯科夫]]（Barbara Liskov）在1987年在一次会议上名为“数据的抽象与层次”的演说中首先提出。<ref name="FamilyValues">{{cite web|url=http://portal.acm.org/citation.cfm?id=62141|title=Data abstraction and hierarchy|last=Liskov|first=Barbara|authorlink=芭芭拉·利斯科夫|date=1987-10-04|accessdate=2008-03-23|archive-date=2019-06-30|archive-url=https://web.archive.org/web/20190630201153/https://dl.acm.org/citation.cfm?id=62141|dead-url=no}}</ref>

里氏替换原则的内容可以描述为：
“派生类（子类）对象可以在程式中代替其基类（超类）对象。”
以上内容并非利斯科夫的原文，而是译自[[罗伯特·马丁|罗伯特·马丁]]（Robert Martin）对原文的解读。其原文为：
:''Let <math>q(x)</math> be a property provable about objects <math>x</math> of type <math>T</math>. Then <math>q(y)</math> should be true for objects <math>y</math> of type <math>S</math> where <math>S</math> is a subtype of <math>T</math>.''

[[芭芭拉·利斯科夫|芭芭拉·利斯科夫]]与[[周以真|周以真]]（Jeannette Wing）在1994年发表论文并提出以上的'''Liskov代換原則'''。

==引用==
{{reflist}}

==參考文獻==
{{refbegin|2}}
'''一般參考'''
*{{cite book |first1=Gary T. |last1=Leavens |first2=Krishna K. |last2=Dhara |author-link=Gary T. Leavens  |chapter=Concepts of Behavioral Subtyping and a Sketch of Their Extension to Component-Bases Systems |editor-first=Gary T. |editor-last=Leavens |editor2-first=Murali |editor2-last=Sitaraman |title=Foundations of component-based systems |publisher=Cambridge University Press |date=2000 |isbn=0-521-77164-1 }} This paper surveys various notions of behavioral subtyping, including Liskov and Wing's.
*{{Cite conference| last1 = Liskov | first1 = B. H. | author-link1 = Barbara Liskov| last2 = Wing | first2 = J. M. | author-link2 = Jeannette Wing| doi = 10.1145/197320.197383| title = A behavioral notion of subtyping| journal = [[ACM_Transactions_on_Programming_Languages_and_Systems|ACM Trans. Program. Lang. Syst.]]| volume = 16| issue = 6| pages = 1811–41| date=November 1994 }}<br/>An updated version appeared: {{cite techreport |url=http://reports-archive.adm.cs.cmu.edu/anon/1999/CMU-CS-99-156.ps|title=Behavioral Subtyping Using Invariants and Constraints|last=Liskov|first=Barbara|author-link=Barbara Liskov|author2=Wing, Jeannette |author-link2=Jeannette Wing |date=July 1999 |publisher=Carnegie Mellon University |id=CMU-CS-99-156}} The formalization of the principle by its authors.
*{{cite book |first=Reinhold |last=Plösch |title=Contracts, scenarios and prototypes: an integrated approach to high quality software |url=https://archive.org/details/contractsscenari0000plos |publisher=Springer |date=2004 |isbn=3-540-43486-0 }} Contains a gentler introduction to behavioral subtyping in its various forms in chapter 2.
*{{cite web |author-link=Robert C. Martin |first=Robert C. |last=Martin |title=The Liskov Substitution Principle |date=March 1996 |work=C++ Report |url=http://www.objectmentor.com/resources/articles/lsp.pdf |archive-url=https://web.archive.org/web/20151128004108/http://www.objectmentor.com/resources/articles/lsp.pdf |archive-date=2015-11-28 }} An article popular in the object-oriented programming community that gives several examples of LSP violations.
*{{cite book |first=Kazimir |last=Majorinc |chapter=Ellipse-Circle Dilemma and Inverse Inheritance |chapter-url= https://www.researchgate.net/publication/323457799 |pages=627–632 |title=ITI 98, Proceedings of the 20th International Conference of Information Technology Interfaces, Pula, 1998 |journal=Information Technology Interfaces, 2009. Iti '09. Proceedings of the Iti 2009 31St International Conference on |issn=1330-1012 |oclc=894960131 }} This paper discusses LSP in the mentioned context.

'''具體參考'''
* {{Cite journal| last1 = Liskov | first1 = B. | author-link1 = Barbara Liskov| title = Keynote address — data abstraction and hierarchy| doi = 10.1145/62139.62141| journal = ACM SIGPLAN Notices| volume = 23| issue = 5| pages = 17–34| date=May 1988 }} A keynote address in which Liskov first formulated the principle.
*{{cite book |first=B. |last=Meyer |title-link=Object-oriented Software Construction |title={{le|物件導向軟體構建|Object-oriented Software Construction}} |publisher=Prentice Hall |date=1988 |isbn=0-13-629031-0 }}
{{refend}}

==参閲==
* [[SOLID_(面向对象设计)|SOLID]] - “SOLID”中的 L 指代了里氏替换原则
*[[類型簽名|類型簽名]]
*{{le|參考透明度|Referential transparency}}(Referential transparency)
*{{le|求精法 (編程計算)|Refinement (computing)}}(Refinement (computing))
*{{le|組合優於繼承|Composition over inheritance}}(Composition over inheritance)

==外部連結==
* {{cite web |first=T.S. |last=Norvell |title=The Liskov Substitution Principle |date=2003 |url=http://www.engr.mun.ca/~theo/Courses/sd/5895-downloads/sd-principles-3.ppt.pdf }}
* [https://medium.com/@wrong.about/liskov-substitution-principle-a982551d584a Liskov Substitution Principle Explained]
*[https://www.tomdalling.com/blog/software-design/solid-class-design-the-liskov-substitution-principle/ SOLID Class Design: The Liskov Substitution Principle]
*[https://medium.com/swlh/lsp-liskov-substitution-principle-24311d1f854 LSP: Liskov Substitution Principle]

[[Category:类型论|Category:类型论]]
[[Category:软件设计|Category:软件设计]]
[[Category:编程原则|Category:编程原则]]
[[Category:面向对象的程序设计|Category:面向对象的程序设计]]