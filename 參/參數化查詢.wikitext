{{noteTA |G1 = IT }}

'''參數化查詢'''（parameterized query 或 parameterized statement）是指在設計與資料庫連結並存取資料時，在需要填入數值或資料的地方，使用[[參數|參數]]（parameter）來給值，這個方法目前已被視為最有效可預防[[SQL注入攻击|SQL注入攻击]]的攻擊手法的防禦方式。

除了安全因素，相比起拼接字符串的SQL语句，参数化的查询往往有性能优势。因为参数化的查询能令不同的数据通过参数到达数据库，从而共用同一条SQL语句。大多数数据库会缓存解释SQL语句产生的[[字节码|字节码]]而省下重复解析的开销。如果采取拼接字符串的SQL语句，则会由于操作数据是SQL语句的一部分而非参数的一部分，而反复大量解释SQL语句产生不必要的开销。

== 原理 ==

在使用參數化查詢的情況下，[[資料庫伺服器|資料庫伺服器]]不會將參數的內容視為[[SQL指令|SQL指令]]的一部份來處理，而是在資料庫完成SQL指令的編譯後，才套用參數執行，因此就算參數中含有具破壞性的指令，也不會被資料庫所執行。

== SQL指令撰寫方法 ==

在撰寫SQL指令時，利用參數來代表需要填入的數值，例如：

=== Microsoft SQL Server ===

[[Microsoft_SQL_Server|Microsoft SQL Server]]的參數格式是以"@"字元加上參數名稱而成，SQL Server亦支援匿名參數"?"。

<syntaxhighlight lang="sql"> SELECT * FROM myTable WHERE myID = @myID </syntaxhighlight>
<syntaxhighlight lang="sql"> INSERT INTO myTable (c1, c2, c3, c4) VALUES (@c1, @c2, @c3, @c4) </syntaxhighlight>

=== Microsoft Access ===

[[Microsoft_Access|Microsoft Access]]不支援具名參數，只支援匿名參數"?"。

<syntaxhighlight lang="sql"> UPDATE myTable SET c1 = ?, c2 = ?, c3 = ? WHERE c4 = ?</syntaxhighlight>

=== MySQL ===

[[MySQL|MySQL]]的參數格式是以"@"字元加上參數名稱而成。

<syntaxhighlight lang="sql">
set @c1 := xxx;
set @c2 := xxx; 
set @c3 := xxx;
set @c4 := xxx;
UPDATE myTable SET c1 = @c1, c2 = @c2, c3 = @c3 WHERE c4 = @c4
</syntaxhighlight>

=== PostgreSQL/SQLite ===

[[PostgreSQL|PostgreSQL]]和[[SQLite|SQLite]]的参数格式是以“:”加上参数名而成。当然，也支持类似Access的匿名参数。

<syntaxhighlight lang="sql"> UPDATE "myTable" SET "c1" = :c1, "c2" = :c2, "c3" = :c3 WHERE "c4" = :c4</syntaxhighlight>

== 用戶端程式撰寫方法 ==

在用戶端程式碼中撰寫使用參數的程式碼，例如：

=== ADO.NET ===
[[ADO.NET|ADO.NET]]用於[[ASP.NET|ASP.NET]]之內。
<syntaxhighlight lang="csharp">
SqlCommand sqlcmd = new SqlCommand("INSERT INTO myTable (c1, c2, c3, c4) VALUES (@c1, @c2, @c3, @c4)", sqlconn);

sqlcmd.Parameters.AddWithValue("@c1", 1); // 設定參數@c1的值。
sqlcmd.Parameters.AddWithValue("@c2", 2); // 設定參數@c2的值。
sqlcmd.Parameters.AddWithValue("@c3", 3); // 設定參數@c3的值。
sqlcmd.Parameters.AddWithValue("@c4", 4); // 設定參數@c4的值。

sqlconn.Open();
sqlcmd.ExecuteNonQuery();
sqlconn.Close();
</syntaxhighlight>

=== PDO ===
[[PDO|PDO]]用於[[PHP|PHP]]之內。在使用[[PDO|PDO]]驱动时，参数查询的使用方法一般为：

<syntaxhighlight lang="php">
// 实例化数据抽象层对象
$db = new PDO('pgsql:host=127.0.0.1;port=5432;dbname=testdb');
// 对SQL语句执行prepare，得到PDOStatement对象
$stmt = $db->prepare('SELECT * FROM "myTable" WHERE "id" = :id AND "is_valid" = :is_valid');
// 绑定参数
$stmt->bindValue(':id', $id);
$stmt->bindValue(':is_valid', true);
// 查询
$stmt->execute();
// 获取数据
foreach($stmt as $row) {
    var_dump($row);
}
</syntaxhighlight>

对于[[MySQL|MySQL]]的特定驱动，也可以这样使用：

<syntaxhighlight lang="php">
$db = new mysqli("localhost", "user", "pass", "database");
$stmt = $db -> prepare("SELECT priv FROM testUsers WHERE username=? AND password=?");
$stmt -> bind_param("ss", $user, $pass);
$stmt -> execute();
</syntaxhighlight>

值得注意的是，以下方式虽然能有效防止[[SQL注入|SQL注入]]（归功于mysql_real_escape_string函数的转义），但并不是真正的参数化查询。其本质仍然是拼接字符串的SQL语句。

<syntaxhighlight lang="php">
$query = sprintf("SELECT * FROM Users where UserName='%s' and Password='%s'", 
                  mysql_real_escape_string($Username), 
                  mysql_real_escape_string($Password));
mysql_query($query);
</syntaxhighlight>

===ODBC/JDBC===
[[ODBC|ODBC]] 使用 C 样式的函数 / 句柄接口，而 [[JDBC|JDBC]] 用於 [[Java|Java]] 之內。
<syntaxhighlight lang="cpp">
//C/C++, Microsoft Windows ODBC
TCHAR szStatement[]=TEXT("select * from table where col1=?");
HSTMT hStmt;
SQLAllocHandle(SQL_HANDLE_STMT, hDBC, &sRet.hStmt);
SQLPrepare(hStmt, szStatement, SQL_NTS);
int iValue=5;
SQLLEN iLOI;
SQLBindParameter(hStmt, 1, SQL_PARAM_INPUT, SQL_C_LONG, SQL_INTEGER, sizeof(iValue), 0, &iValue, sizeof(iValue), &iLOI);
SQLExecute(hStmt);
</syntaxhighlight>
<syntaxhighlight lang="java">
//JDBC
java.sql.PreparedStatement prep = connection.prepareStatement(
                "SELECT * FROM users WHERE USERNAME = ? AND PASSWORD = ?");
prep.setString(1, username);
prep.setString(2, password);
prep.executeQuery();
</syntaxhighlight>

=== Cold Fusion ===
<syntaxhighlight lang="cfm">

<cfquery name="Recordset1" datasource="cafetownsend">
SELECT *
FROM COMMENTS
WHERE COMMENT_ID =<cfqueryparam value="#URL.COMMENT_ID#" cfsqltype="cf_sql_numeric">
</cfquery>

</syntaxhighlight>

{{-}}
{{Database}}

[[category:数据库|category:数据库]]
[[category:網路安全|category:網路安全]]
[[category:SQL|category:SQL]]
[[Category:带有代码示例的条目|Category:带有代码示例的条目]]