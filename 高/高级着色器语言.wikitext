'''高级着色器语言'''（即 '''HLSL'''，缩写自 {{lang|en|High Level Shader Language}}<ref>{{cite web|url=https://msdn.microsoft.com/en-us/library/windows/desktop/bb944006.aspx|title=Writing HLSL Shaders in Direct3D 9 (Windows)|website=msdn.microsoft.com|accessdate=2018-06-25|archive-date=2018-06-25|archive-url=https://web.archive.org/web/20180625161145/https://msdn.microsoft.com/en-us/library/windows/desktop/bb944006.aspx|dead-url=no}}</ref> 或 {{lang|en|High-Level Shading Language}}<ref>{{cite web|title=HLSL|url=https://msdn.microsoft.com/en-us/library/windows/desktop/bb509561%28v=vs.85%29.aspx|website=[[MSDN|MSDN]]|publisher=[[Microsoft|Microsoft]]|accessdate=5 January 2015|archive-date=2018-06-25|archive-url=https://web.archive.org/web/20180625161250/https://msdn.microsoft.com/en-us/library/windows/desktop/bb509561%28v=vs.85%29.aspx|dead-url=no}}</ref>），是由[[微軟|微軟]]擁有及開發的一種[[着色器語言|着色器語言]]，最初的开发是为了辅助 Direct3D 9 的着色器汇编语言，后成为 Direct3D 10 以来{{Tsl|en|Unified Shader Model|统一着色器模型}}所必须的语言。

HLSL只能供微軟的[[Direct3D|Direct3D]]以及[[XNA|XNA]]使用。HLSL是[[GLSL|GLSL]]的先辈，不能與[[OpenGL|OpenGL]]標準兼容。它跟[[Nvidia|Nvidia]]的[[Cg语言|Cg]]非常相似，是因为两个开发者曾经紧密合作。<ref>{{cite web|url=http://www.fusionindustries.com/default.asp?page=cg-hlsl-faq|archive-url=https://web.archive.org/web/20120824051248/http://www.fusionindustries.com/default.asp?page=cg-hlsl-faq|url-status=dead|archive-date=24 August 2012|title=Fusion Industries :: Cg and HLSL FAQ ::|date=24 August 2012|publisher=}}</ref>

HLSL的主要作用為將一些複雜的[[圖像處理|圖像處理]]，快速而又有效率地在[[顯示卡|顯示卡]]上完成，與組合式或低階Shader Language相比，能降低在編寫複雜特殊效果時所發生編程錯誤的機會。

== Shader model 比較 ==
=== Pixel shader 比較 ===
{| class="wikitable"
|-
! Pixel shader 版本
!1.0 to 1.3<ref name=PS1-3>{{cite web|url=http://msdn.microsoft.com/en-us/library/bb219846(v=VS.85).aspx|title=Pixel Shader Differences|date=2011-02-08|work=msdn.microsoft.com|accessdate=2014-08-28|archive-date=2013-03-16|archive-url=https://web.archive.org/web/20130316082743/http://msdn.microsoft.com/en-us/library/bb219846(v=VS.85).aspx|dead-url=no}}</ref>
      !1.4<ref name=PS1-3/>      !!2.0<ref name=PS1-3/><ref name=SM2>{{cite web|url=http://www.microsoft.com/download/en/details.aspx?displaylang=en&id=18901|title=Microsoft DirectX High Level Shader Language (HLSL)|first=Craig|last=Peeper|format=PPT|pages=5–8, 24–25|date=2004-03-15|work=microsoft.com}}{{Dead link|date=2018年9月 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>      !!2.0a<ref name=PS1-3/><ref name=SM2/>      !!2.0b<ref name=PS1-3/><ref name=SM2/>      !!3.0<ref name=PS1-3/><ref name=SM3>Shader Model 3.0, Ashu Rege, NVIDIA Developer Technology Group, 2004.</ref>      !!4.0<ref name=D3D10>The Direct3D 10 System, David Blythe, Microsoft Corporation, 2006.</ref>      !!4.1<ref name="SM4.1">{{Cite web |url=http://msdn.microsoft.com/en-us/library/windows/desktop/ff471379(v=vs.85).aspx |title=存档副本 |accessdate=2014-08-28 |archive-date=2015-12-01 |archive-url=https://web.archive.org/web/20151201203735/https://msdn.microsoft.com/en-us/library/windows/desktop/ff471379(v=vs.85).aspx |dead-url=no }}</ref>      !!5.0<ref name="SM5">{{Cite web |url=http://msdn.microsoft.com/en-us/library/windows/desktop/hh447212(v=vs.85).aspx |title=存档副本 |accessdate=2014-08-28 |archive-date=2013-09-09 |archive-url=https://web.archive.org/web/20130909140331/http://msdn.microsoft.com/en-us/library/windows/desktop/hh447212(v=vs.85).aspx |dead-url=no }}</ref>
|-
!Dependent texture limit
|4           ||6           || 8           ||Unlimited    ||8           ||Unlimited   ||Unlimited   ||Unlimited   ||Unlimited
|-
!Texture instruction limit
|4           ||6*2           ||32          ||Unlimited   ||Unlimited   ||Unlimited   ||Unlimited   ||Unlimited   ||Unlimited
|-
!Position register
| No         || No           || No         || No         || No         || Yes        || Yes         || Yes         || Yes
|-
!Instruction slots
|8+4         ||8+4           ||32 + 64     ||512         ||512        ||≥ 512    ||≥ 65536    ||≥ 65536    ||≥ 65536
|-
!Executed instructions
|8+4         ||6*2+8*2           ||32 + 64     ||512         ||512         ||65536   ||Unlimited   ||Unlimited   ||Unlimited
|-
!Texture indirections
|4           ||4           ||4           ||Unlimited    ||4           ||Unlimited     ||Unlimited     ||Unlimited     ||Unlimited
|-
!Interpolated registers
|2 + 8       ||2 + 8           ||2 + 8       ||2 + 8       ||2 + 8       ||10          ||32          ||32          ||32
|-
!Instruction predication
|No          ||No           ||No          ||Yes         ||No          ||Yes         ||No         ||No         ||No
|-
!Index input registers
|No          ||No           ||No          ||No          ||No          ||Yes         ||Yes         ||Yes         ||Yes
|-
!Temp registers
|2           ||6           ||12 to 32          ||22          ||32          ||32          ||4096          ||4096          ||4096
|-
!Constant registers
|8           ||8           ||32          ||32          ||32          ||224         ||16x4096         ||16x4096         ||16x4096
|-
!Arbitrary [[Swizzling_(computer_graphics)|swizzling]]
|No          ||No           ||No          ||Yes         ||No          ||Yes         ||Yes         ||Yes         ||Yes
|-
!Gradient instructions
|No          ||No           ||No          ||Yes         ||No          ||Yes         ||Yes         ||Yes         ||Yes
|-
!Loop count register
|No          ||No           ||No          ||No          ||No          ||Yes         ||Yes         ||Yes         ||Yes
|-
!Face register (2-sided lighting)
|No          ||No           ||No          ||No          ||No          ||Yes         ||Yes         ||Yes         ||Yes
|-
!Dynamic flow control
|No          ||No           ||No          ||No          ||No          ||24          ||Yes          ||Yes          ||Yes
|-
!Bitwise Operators
|No          ||No           ||No          ||No          ||No          ||No          ||Yes          ||Yes          ||Yes
|-
!Native Integers
|No          ||No           ||No          ||No          ||No          ||No          ||Yes          ||Yes          ||Yes
|}

*'''PS 2.0''' = DirectX 9.0 original '''Shader Model 2''' specification.
*'''PS 2.0a''' = NVIDIA [[GeForce_FX|GeForce FX]]-optimized model.
*'''PS 2.0b''' = ATI [[Radeon_R420|Radeon X700, X800, X850]] shader model, DirectX 9.0b.
*'''PS 3.0''' = '''Shader Model 3.0'''.
*'''PS 4.0''' = '''Shader Model 4.0'''.
*'''PS 4.1''' = '''Shader Model 4.1'''.
*'''PS 5.0''' = '''Shader Model 5.0'''.

"32 + 64" for ''Executed Instructions'' means "32 texture instructions and 64 arithmetic instructions."


=== Vertex shader 比較 ===

{| class="wikitable"
|-
! Vertex shader 版本
!VS 1.1<ref name=VS1-3>{{cite web|url=http://msdn.microsoft.com/en-us/library/bb172931(v=VS.85).aspx|title=Vertex Shader Differences|date=2011-02-08|work=msdn.microsoft.com|accessdate=2014-08-28|archive-date=2013-03-14|archive-url=https://web.archive.org/web/20130314181942/http://msdn.microsoft.com/en-us/library/bb172931(v=vs.85).aspx|dead-url=no}}</ref>
      !VS 2.0<ref name=SM2/><ref name=VS1-3/>      !!VS 2.0a<ref name=SM2/><ref name=VS1-3/>      !!VS 3.0<ref name=SM3 /><ref name=VS1-3/>    !!VS 4.0<ref name=D3D10 /> !!VS 4.1<ref>{{Cite web |url=http://msdn.microsoft.com/en-us/library/windows/desktop/ff471381(v=vs.85).aspx |title=存档副本 |accessdate=2014-08-28 |archive-date=2014-05-16 |archive-url=https://web.archive.org/web/20140516235402/http://msdn.microsoft.com/en-us/library/windows/desktop/ff471381(v=vs.85).aspx |dead-url=no }}</ref> !!VS 5.0<ref name="SM5"/>
|-
!# of instruction slots
|128         ||256         ||256         ||≥ 512     ||4096     ||4096     ||4096
|-
!Max # of instructions executed
|Unknown         ||65536         ||65536       ||65536     ||65536     ||65536     ||65536
|-
![[Branch_predication|Instruction predication]]
| No         || No         || Yes        || Yes      ||Yes      ||Yes      ||Yes
|-
!Temp registers
|12          ||12          ||13          ||32        ||4096        ||4096        ||4096
|-
!# constant registers
|≥ 96       ||≥ 256       ||≥ 256       ||≥ 256     ||16x4096     ||16x4096     ||16x4096
|-
!Static flow control
| ???        || Yes        || Yes        || Yes      || Yes      || Yes      || Yes
|-
!Dynamic flow control
| No         || No         || Yes        || Yes      || Yes      || Yes      || Yes
|-
!Dynamic flow control depth
|No          ||No          ||24          ||24        || Yes        || Yes        || Yes
|-
!Vertex texture fetch
|No          ||No          ||No          ||Yes       || Yes       || Yes       || Yes
|-
!# of texture samplers
|N/A         ||N/A         ||N/A         ||4         ||128         ||128         ||128
|-
![[Geometry_instancing|Geometry instancing]] support
|No          ||No          ||No          ||Yes       ||Yes       ||Yes       ||Yes
|-
!Bitwise operators
|No          ||No          ||No          ||No        ||Yes        ||Yes        ||Yes
|-
!Native integers
|No          ||No          ||No          ||No        ||Yes        ||Yes        ||Yes
|}

*'''VS 2.0''' = DirectX 9.0 original '''Shader Model 2''' specification.
*'''VS 2.0a''' = NVIDIA [[GeForce_FX|GeForce FX]]-optimized model.
*'''VS 3.0''' = '''Shader Model 3.0'''.
** Note that ATI X1000 series cards (e.g. X1900) does not support Vertex Texture Fetch, hence it does not fully comply with the VS 3.0 model. Instead, they offer a feature called "Render to Vertex Buffer (R2VB)" that provides functionality that is a superset of Vertex Texture Fetch.<ref>Radeon X1000 series lacks vertex texture fetch[https://techreport.com/news/8872/radeon-x1000-series-lacks-vertex-texture-fetch/]</ref>
*'''VS 4.0''' = '''Shader Model 4.0'''.
*'''VS 4.1''' = '''Shader Model 4.1'''.
*'''VS 5.0''' = '''Shader Model 5.0'''.

== 範例 ==
;灰階貼圖用
* 灰階值 = 0.3 x 紅 + 0.59 x 綠 + 0.11 x 藍
<syntaxhighlight lang=c>sampler2D Texture0;

float4 ps_main( float2 texCoord  : TEXCOORD0 ) : COLOR
{
   float4 _inColor = tex2D( Texture0, texCoord );
   float gray = 0.3*_inColor.x + 0.59*_inColor.y + 0.11*_inColor.z;
   float4 _outColor = float4(gray, gray, gray, 1.0);
   
   return _outColor;
}
</syntaxhighlight>

== 注釋 ==
<references/>

== 外部連結 ==
* [http://msdn2.microsoft.com/en-us/library/ms810449.aspx Introduction to the DirectX 9 High-Level Shader Language] {{Wayback|url=http://msdn2.microsoft.com/en-us/library/ms810449.aspx |date=20070107232808 }} (MSDN Library)
* [http://www.neatware.com/lbstudio/web/hlsl.html '''HLSL Introduction'''] {{Wayback|url=http://www.neatware.com/lbstudio/web/hlsl.html |date=20070127160056 }}
* [http://www.beyond3d.com/previews/nvidia/nv40/index.php?p=5 Shader Model Comparison at Beyond3D] {{Wayback|url=http://www.beyond3d.com/previews/nvidia/nv40/index.php?p=5 |date=20070202182113 }}
* [http://www.riemers.net/Tutorials/DirectX/Csharp3/index.php '''Riemer's HLSL Introduction & Tutorial with lots of sample code'''] {{Wayback|url=http://www.riemers.net/Tutorials/DirectX/Csharp3/index.php |date=20081119034954 }}

{{程序设计语言|C}}



[[Category:操作系统技术|Category:操作系统技术]]
[[Category:三维计算机图形学|Category:三维计算机图形学]]
[[Category:著色器語言|Category:著色器語言]]