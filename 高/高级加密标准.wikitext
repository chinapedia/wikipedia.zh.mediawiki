{{NoteTA
|G1 = IT
}}
{{區塊加解密方塊
|name = AES
|image = [[File:AES-SubBytes.svg|280px]]
|caption = <tt>SubBytes</tt>是AES演算法四步驟之一。
|designers = {{le|Vincent Rijmen}}、{{le|Joan Daemen}}
|publish date = 1998年
|derived from = {{le|Square (密码)|Square (cipher)|Square}}
|derived to = {{le|Anubis (密码)|Anubis (cipher)|Anubis}}、{{le|Grand Cru (密码)|Grand Cru (cipher)|Grand Cru}}、{{le|Kalyna (密码)|Kalyna (cipher)|Kalyna}}
|key size = 128、192或者256位元{{efn|密碼長度128, 160, 192, 224,與256位元為Rijndael演算法所支援，然而只有128, 192,與256位元長度密碼為AES標準所明定。|name="keysize"}}
|block size = 128位元{{efn|區塊長度128, 160, 192, 224,與256位元為Rijndael演算法所支援，不過只有128位元區塊長度為AES標準所明定。|name="blocksize"}}
|structure = [[置換排列網絡|置換排列網絡]]
|rounds = 10, 12或14（視密鑰長度而定）
|cryptanalysis = {{le|關聯密碼攻擊|Related-key attack}}可以破解9個加密迴圈/256位元（密鑰）的AES。另外[[選擇明文攻擊|選擇明文攻擊]]可以破解8個加密迴圈，192或256位元（密鑰）的AES，或7個加密迴圈、128位元（密鑰）的AES。（Ferguson ''et al.'', 2000）
}}

'''進階加密标准'''（{{lang-en|'''A'''dvanced '''E'''ncryption '''S'''tandard}}，[[缩写|缩写]]：{{lang|en|AES}}），又称'''Rijndael加密法'''（{{IPA-nl|ˈrɛindaːl}}，音似英文的「Rhine doll」），是[[美国联邦政府|美国联邦政府]]采用的一種[[區塊加密|區塊加密]]标准。这个标准用来替代原先的[[DES|DES]]，已經被多方分析且廣為全世界所使用。經過五年的甄選流程，進階加密標準由[[美國國家標準與技術研究院|美國國家標準與技術研究院]]（NIST）於2001年11月26日發佈於FIPS PUB 197，並在2002年5月26日成為有效的標準。現在，進階加密标准已然成為[[对称密钥加密|对称密钥加密]]中最流行的[[演算法|演算法]]之一。

该演算法為[[比利时|比利时]]密码学家Joan Daemen和Vincent Rijmen所設計，結合兩位作者的名字，以Rijndael為名投稿進階加密標準的甄選流程。

== 沿革 ==
Rijndael是由Daemen和Rijmen早期所设计的{{tsl|en|Square (cipher)|Square (cipher)|Square}}改良而來；而Square則是由[[SHARK|SHARK]]发展而来。

不同於它的前任標準DES，Rijndael使用的是[[代换-置换网络|代换-置换网络]]，而非[[Feistel架構|Feistel架構]]。

== 密码说明 ==
严格地说，AES和[[Rijndael|Rijndael]]加密法並不完全一樣（虽然在实际应用中兩者可以互换），因为Rijndael加密法可以支援更大範圍的[[块大小|區塊]]和[[密钥长度|密钥长度]]：AES的區塊長度固定為128[[位元|位元]]，密钥长度則可以是128，192或256位元；而Rijndael使用的密钥和區塊长度均可以是128，192或256位元。加密過程中使用的密钥是由[[Rijndael密钥生成方案|Rijndael密钥生成方案]]產生。

大多数AES计算是在一个特别的[[有限域|有限域]]完成的。

AES加密過程是在一個4×4的[[位元組|位元組]]矩陣上運作，這個矩陣又称为「体（state）」，其初值就是一個明文區塊（矩陣中一個元素大小就是明文區塊中的一個Byte）。（Rijndael加密法因支援更大的區塊，其矩陣的「列數（Row number）」可視情況增加）加密时，各轮AES加密迴圈（除最后一轮外）均包含4个步骤：

# <tt>AddRoundKey</tt>—[[矩阵|矩陣]]中的每一个位元組都与該次{{le|密鑰次序表|Key schedule|回合金鑰}}（round key）做[[XOR|XOR運算]]；每个子密钥由密钥生成方案产生。
# <tt>SubBytes</tt>—透過一个非线性的替換函數，用[[查找表|查找表]]的方式把每个字節替換成對應的字節。
# <tt>ShiftRows</tt>—將矩陣中的每個橫列進行循環式移位。
# <tt>MixColumns</tt>—為了充分混合矩陣中各個直行的操作。這個步驟使用線性轉換來混合每行內的四個字节。最後一個加密迴圈中省略<tt>MixColumns</tt>步驟，而以另一個<tt>AddRoundKey</tt>取代。

=== <tt>AddRoundKey</tt>步骤 ===
[[File:AES-AddRoundKey.svg|thumb]]（⊕）。]]

<tt>AddRoundKey</tt>步驟，回合金鑰將會與原矩陣合併。在每次的加密迴圈中，都會由主密鑰產生一把回合金鑰（透過[[Rijndael密鑰生成方案|Rijndael密鑰生成方案]]產生），這把金鑰大小會跟原矩陣一樣，以與原矩陣中每個對應的位元組作[[异或|异或]]（⊕）加法。
{{-}}
=== <tt>SubBytes</tt>步骤 ===
[[File:AES-SubBytes.svg|thumb]]

在<tt>SubBytes</tt>步骤中，矩陣中的各字節透過一個8位元的[[S-box|S-box]]進行轉換。這個步驟提供了[[加密法|加密法]]非線性的變換能力。[[S-box|S-box]]與<math>GF(2^8)</math>上的乘法[[反元素|反元素]]有關，已知具有良好的[[非線性|非線性]]特性。為了避免簡單代數性質的攻擊，S-box結合了乘法反元素及一個可逆的[[仿射變換|仿射變換]]矩陣建構而成。此外在建構S-box時，刻意避開了[[不動點|不動點]]與{{tsl|en|opposite fixed point|反不動點}}，即以S-box替換字節的結果會相當於錯排的結果。{{tsl|en|Rijndael S-box|Rijndael S-box}}條目有針對S-box的詳細描述。
{{-}}

=== <tt>ShiftRows</tt>步骤 ===
[[File:AES-ShiftRows.svg|thumb]]

<tt>ShiftRows</tt>描述矩陣的行操作。在此步驟中，每一行都向左循環位移某個[[偏移量|偏移量]]。在AES中（區塊大小128位元），第一行維持不變，第二行裡的每個位元組都向左循環移動一格。同理，第三行及第四行向左循環位移的偏移量就分別是2和3。128位元和192位元的區塊在此步驟的循環位移的模式相同。經過<tt>ShiftRows</tt>之後，矩陣中每一竖列，都是由輸入矩陣中的每個不同列中的元素組成。Rijndael演算法的版本中，偏移量和AES有少許不同；對於長度256位元的區塊，第一行仍然維持不變，第二行、第三行、第四行的偏移量分別是1位元組、2位元組、3位元組。除此之外，<tt>ShiftRows</tt>操作步驟在Rijndael和AES中完全相同。
{{-}}

=== <tt>MixColumns</tt>步骤 ===
[[File:AES-MixColumns.svg|thumb]]

在<tt>MixColumns</tt>步骤，每一列的四個位元組透過[[线性变换|线性变换]]互相結合。每一列的四個元素分別當作<math>1 , x , x^2 , x^3</math>的係數，合併即為<math>GF(2^8)</math>中的一個多項式，接著將此多項式和一個固定的多項式<math>c (x) = 3x^3 + x^2 + x + 2</math>在模<math>x^4+1</math>下相乘。此步驟亦可視為{{tsl|en|Finite field arithmetic|Rijndael有限域}}之下的矩陣乘法。<tt>MixColumns</tt>函数接受4個位元組的輸入，輸出4個位元組，每一個輸入的位元組都會對輸出的四個位元組造成影響。因此<tt>ShiftRows</tt>和<tt>MixColumns</tt>兩步驟為這個密碼系統提供了{{tsl|en|diffusion(cryptograohy)|擴散性}}。
 
以下條目有對<tt>MixColumns</tt>更加詳細的描述：{{tsl|en|Rijndael mix columns|Rijndael mix columns}}
{{-}}

=== 加密演算法优化 ===
使用32或更多位元定址的系統，可以事先對所有可能的輸入建立對應表，利用查表來實作<tt>SubBytes</tt>，<tt>ShiftRows</tt>和<tt>MixColumns</tt>步驟以達到加速的效果。這麼作需要產生4個表，每個表都有256個格子，一個格子記載32位元的輸出；約佔去4KB（4096位元組）記憶體空間，即每個表佔去1KB的記憶體空間。如此一來，在每個加密迴圈中，只需要查16次表，作12次32位元的[[XOR|XOR]]運算，以及<tt>AddRoundKey</tt>步驟中4次32位元[[XOR|XOR]]運算。若使用的平台記憶體空間不足4KB，也可以利用循環交換的方式一次查一個256格32位元的表。

然而，實際實作中應避免使用這樣的對應表，否則可能因為產生快取命中與否的差別而使[[旁道攻擊|旁道攻擊]]成為可能。

== 安全性 ==
截至2006年，针对AES唯一的成功攻击是[[旁道攻击|旁道攻击]]或[[社會工程學|社會工程學]]攻擊。[[美国国家安全局|美国国家安全局]]审核了所有的參與競選AES的最終入圍者（包括Rijndael），认为他們均能夠满足美国政府傳遞非機密文件的安全需要。2003年6月，美国政府宣布AES可以用于加密机密文件：

{{quote|The design and strength of all key lengths of the AES algorithm（i.e., 128, 192 and 256）are sufficient to protect classified information up to the SECRET level. TOP SECRET information will require use of either the 192 or 256 key lengths. The implementation of AES in products intended to protect national security systems and/or information must be reviewed and certified by NSA prior to their acquisition and use.<ref>{{Cite web |url=http://www.cnss.gov/Assets/pdf/cnssp_15_fs.pdf |title=存档副本 |access-date=2006-12-25 |archive-url=https://web.archive.org/web/20070927035010/http://www.cnss.gov/Assets/pdf/cnssp_15_fs.pdf |archive-date=2007-09-27 |dead-url=yes }}</ref> }}

（譯：AES加密演算法（使用128，192，和256位元密鑰的版本）的安全性，在設計結構及密鑰的長度上俱已到達保護機密資訊的標準。最高機密資訊的傳遞，則至少需要192或256位元的密鑰長度。用以傳遞國家安全資訊的AES實作產品，必須先由國家安全局審核認證，方能被發放使用。）

这标志着，由美国国家安全局NSA批准在最高机密資訊上使用的加密系統首次可以被公開使用。许多大众化产品只使用128位元密鑰當作預設值；由於最高機密文件的加密系統必須保證數十年以上的安全性，故推測NSA可能認為128位元太短，才以更長的密鑰長度為最高機密的加密保留了安全空間。

通常破解一個區塊加密系統最常見的方式，是先對其較弱版本（加密迴圈次數較少）嘗試各種攻擊。AES中128位元密鑰版本有10個加密迴圈，192位元密鑰版本有12個加密迴圈，256位元密鑰版本則有14個加密迴圈。至2006年為止，最著名的攻擊是針對AES 7次加密迴圈的128位元密鑰版本，8次加密迴圈的192位元密鑰版本，和9次加密迴圈的256位元密鑰版本所作的攻擊。<ref name="improved">[[Niels_Ferguson|Niels Ferguson]], [[John_Kelsey|John Kelsey]], [[Stefan_Lucks|Stefan Lucks]], [[Bruce_Schneier|Bruce Schneier]], [[Mike_Stay|Mike Stay]], [[David_Wagner|David Wagner]], and [[Doug_Whiting|Doug Whiting]], ''Improved Cryptanalysis of Rijndael'', [[Fast_Software_Encryption|Fast Software Encryption]], 2000 pp213–230 [http://www.schneier.com/paper-rijndael.html] {{Wayback|url=http://www.schneier.com/paper-rijndael.html |date=20070223215007 }}</ref>

由於已遭破解的弱版的AES，其加密迴圈數和原本的加密迴圈數相差無幾，有些密碼學家開始擔心AES的安全性：要是有人能將該著名的攻擊加以改進，這個區塊加密系統就會被破解。在[[密碼學|密碼學]]的意義上，只要存在一個方法，比[[蛮力攻击|窮舉法]]還要更有效率，就能被視為一種「破解」。故一個針對AES 128位元密鑰的攻擊若「只」需要2<sup>120</sup>計算複雜度（少於窮舉法2<sup>128</sup>），128位元密鑰的AES就算被破解了；即便該方法在目前還不實用。從應用的角度來看，這種程度的破解依然太不切實際。最著名的[[暴力攻擊法|暴力攻擊法]]是{{tsl|en|distributed.net|distributed.net}}針對64位元密鑰[[RC5|RC5]]所作的攻擊。

其他的爭議則著重於AES的[[數學|數學]]結構。不像其他區塊加密系統，AES具有相當井然有序的代數結構。<ref>{{Cite web |url=http://www.isg.rhul.ac.uk/~sean/ |title=存档副本 |accessdate=2006-12-25 |archive-date=2009-01-31 |archive-url=https://web.archive.org/web/20090131145521/http://www.isg.rhul.ac.uk/~sean/ |dead-url=yes }}</ref>雖然相關的代數攻擊尚未出現，但有許多學者認為，把安全性建立於未經透徹研究過的結構上是有風險的。Ferguson，Schroeppel和Whiting因此寫道：「...我們很擔心Rijndael演算法應用在機密系統上的安全性。」<ref name="rijndael-algebraic">

{{cite conference
|author = Niels Ferguson, Richard Schroeppel, Doug Whiting
|title = A simple algebraic representation of Rijndael
|booktitle = Proceedings of Selected Areas in Cryptography, 2001, Lecture Notes in Computer Science
|pages = pp. 103–111
|publisher = Springer Verlag
|date = 2001
|location = 
|url = http://www.macfergus.com/pub/rdalgeq.html
|doi = 
|format = [[PDF|PDF]]/[[PostScript|PostScript]]
|accessdate = 2006-10-06
|deadurl = yes
|archiveurl = https://web.archive.org/web/20061104080748/http://www.macfergus.com/pub/rdalgeq.html
|archivedate = 2006-11-04
}}</ref>

2002年，{{tsl|en|Nicolas Courtois|Nicolas Courtois}}和{{tsl|en|Josef Pieprzyk|Josef Pieprzyk}}發表名為{{tsl|en|XSL attack|XSL攻擊}}的理論性攻擊，試圖展示AES一個潛在的弱點。但該攻擊的數學分析有點問題，推測應是作者的計算有誤。因此，這種攻擊法是否對AES奏效，仍是未解之謎。就現階段而言，XSL攻擊AES的效果不十分顯著，故將之應用於實際情況的可能性並不高。

=== 旁道攻击===
[[旁道攻击|旁道攻击]]，又称旁路攻击、侧信道攻击，是一种基于从密码系统的物理实现中获取的信息的攻击方式。它不攻击加密算法本身，而是攻击那些基於不安全系統（會在不經意間洩漏資訊）上的加密系統。

2005年4月，{{tsl|en|D.J. Bernstein|D.J. Bernstein}}公佈了一种缓存时序攻击法，他以此破解了一个装载[[OpenSSL|OpenSSL]] AES加密系統的客戶伺服器<ref>{{cite journal |url = http://cr.yp.to/antiforgery/cachetiming-20050414.pdf |title = Cache-timing attacks on AES |author = Daniel J. Bernstei |journal = Citeseer |date = 2005年4月 |access-date = 2011-05-16 |archive-date = 2011-06-07 |archive-url = https://web.archive.org/web/20110607043143/http://cr.yp.to/antiforgery/cachetiming-20050414.pdf |dead-url = yes }}</ref>。為了設計使該伺服器公佈所有的時序資訊，攻击算法使用了2亿多条筛选过的明码。对于需要多个跳跃的国际互联网而言，这样的攻击方法并不实用<ref>{{cite web |url = http://groups.google.com/group/sci.crypt/msg/40d0f6fb6143de1a |title = Successful remote AES key extraction |date = 2005-04-17 |accessdate = 2011-05-16 |author = Lou Scheffer |archive-date = 2011-11-06 |archive-url = https://web.archive.org/web/20111106130019/http://groups.google.com/group/sci.crypt/msg/40d0f6fb6143de1a |dead-url = no }}</ref>。[[Bruce_Schneier|Bruce Schneier]]稱此攻擊為「好的時序攻擊法」<ref>{{cite web | url=http://www.schneier.com/blog/archives/2005/05/aes_timing_atta_1.html | title=AES Timing Attack | date=2005-05-17 | accessdate=2011-05-16 | author=Bruce Schneier | archive-date=2007-02-12 | archive-url=https://web.archive.org/web/20070212015727/http://www.schneier.com/blog/archives/2005/05/aes_timing_atta_1.html | dead-url=no }}</ref>。

2005年10月，[http://people.csail.mit.edu/tromer/ Eran Tromer] {{Wayback|url=http://people.csail.mit.edu/tromer/ |date=20091007050854 }}和另外兩個研究員發表了一篇論文，展示了數種針對AES的緩存時序攻擊法<ref>{{cite journal | url=http://people.csail.mit.edu/tromer/papers/cache-joc-20090619.pdf | title=Efficient Cache Attacks on AES, and Countermeasures | author=Eran Tromer , Dag Arne Osvik and Adi Shamir | journal=Journal of cryptology | year=2010 | volume=23 | issue=1 | pages=37-71}}</ref>。

== 注释 ==
{{notelist|iger=}}

== 参考文献 ==
=== 引用 ===
{{Reflist|2}}

=== 书目 ===
* Nicolas Courtois, Josef Pieprzyk, "Cryptanalysis of Block Ciphers with Overdefined Systems of Equations". pp267–287, ASIACRYPT 2002.
* Joan Daemen, Steve Borg and Vincent Rijmen, "The Design of Rijndael: AES - The Advanced Encryption Standard." Springer-Verlag, 2002. ISBN 3-540-42580-2.

== 外部链接 ==
* [https://web.archive.org/web/20050830051506/http://www.esat.kuleuven.ac.be/~rijmen/rijndael/ The Rijndael Page（Forwards automatically to the AES Lounge; use old version link to browse）]
* [https://web.archive.org/web/20070107211226/http://www.iaik.tu-graz.ac.at/research/krypto/AES/old/%7Erijmen/rijndael/ The Rijndael Page (old version)]
* [https://web.archive.org/web/20061221201719/http://www.iaik.tu-graz.ac.at/research/krypto/AES/ Literature survey on AES]
* [https://web.archive.org/web/20120801231831/http://rijndael.info/audio/rijndael_pronunciation.wav Recordings of the pronunciation of "Rijndael"]（85 KB [[wav|wav]] file）
* [https://web.archive.org/web/20021204193838/http://csrc.nist.gov/encryption/aes/ The archive of the old official AES website]
* [https://web.archive.org/web/20150407153905/http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf FIPS PUB 197: the official AES standard]（[[Portable_Document_Format|PDF]] file）
<!-- The following is a dead link 2005/05/15
* [http://www.nstissc.gov/Assets/pdf/fact%20sheet.pdf The C.N.S.S. announcement regarding the use of AES for classified data]（[[Portable_Document_Format|PDF]] file）-->
* [https://web.archive.org/web/20061224165300/http://www.quadibloc.com/crypto/co040401.htm John Savard's description of the AES algorithm]

=== 实现 ===
* [http://embeddedsw.net/Cipher_Reference_Home.html 参考代码] {{Wayback|url=http://embeddedsw.net/Cipher_Reference_Home.html |date=20110926210349 }}
* [https://web.archive.org/web/20070103003533/http://hardware-ciphers.com/en/aes/ 65+种AES硬件实施方案]
* [http://www.cs.eku.edu/faculty/styer/460/Encrypt/JS-AES.html A Javascript AES calculator showing intermediate values] {{Wayback|url=http://www.cs.eku.edu/faculty/styer/460/Encrypt/JS-AES.html |date=20061224104805 }}
* [https://web.archive.org/web/20050524003351/http://fp.gladman.plus.com/cryptography_technology/rijndael/ Brian Gladman's BSD licensed implementations of AES]
* http://www.esat.kuleuven.ac.be/~rijmen/rijndael/rijndael-fst-3.0.zip[ Paulo Barreto公布的AES的C语言算法] {{Wayback|url=http://www.esat.kuleuven.ac.be/~rijmen/rijndael/rijndael-fst-3.0.zip |date=20051217122133 }}
* [http://cr.yp.to/mac.html D.J. Bernstein所写的开放版权AES实施代码] {{Wayback|url=http://cr.yp.to/mac.html |date=20170914211533 }}
* [http://www.lysator.liu.se/~nisse/nettle/ The GPL-licensed Nettle library also includes an AES implementation] {{Wayback|url=http://www.lysator.liu.se/~nisse/nettle/ |date=20061210055008 }}
* [http://ipcores.com/Ultracompact_AESCore.htm Compact AES implementation in hardware by IP Cores] {{Wayback|url=http://ipcores.com/Ultracompact_AESCore.htm |date=20070110033001 }}
* [http://www.aescrypt.com/ AES加密在Windows系统的实现 (自由公开源码)] {{Wayback|url=http://www.aescrypt.com/ |date=20061223234621 }}
* [http://xyssl.org/code/source/aes/ LGPL授权的AES实现的C语言源代码] {{Wayback|url=http://xyssl.org/code/source/aes/ |date=20070928145819 }}
* [http://www.heliontech.com/aes.htm 广泛的AES硬件实施方案，Helion Technology] {{Wayback|url=http://www.heliontech.com/aes.htm |date=20070113013401 }}
* [http://fpgabasedaes.googlepages.com/home FPGA Based AES Implementation using Nios-II Processor] {{Wayback|url=http://fpgabasedaes.googlepages.com/home |date=20070211032204 }}

== 参见 ==
* [[高级加密标准评选过程|高级加密标准评选过程]]

{{-}}
{{分组密码}}

[[Category:高级加密标准|]]