{{NoteTA
|G1=IT
|T=zh-cn:解释型语言;zh-tw:直譯語言;
|1=zh-cn:解释型语言;zh-tw:直譯語言;
|2=zh-cn:解释器;zh-tw:直譯器;
|3=zh-cn:解释型;zh-tw:直譯式;
|4=zh-cn:解释;zh-tw:直譯;
}}
{{Unreferenced |time=2014-07-21T13:30:23+00:00 }}
'''解释型语言'''（{{lang-en|Interpreted language}}）是一種[[编程语言|编程语言]]类型。這種類型的程式語言，會將程式碼一句一句直接執行，不需要像[[編譯語言|編譯語言]]（Compiled language）一樣，經過[[編譯器|編譯器]]先行編譯為[[機器碼|機器碼]]，之後再執行。這種程式語言需要利用[[直譯器|直譯器]]，在執行期，動態將程式碼逐句直譯（interpret）為機器碼，或是已經預先編譯為機器碼的[[子程式|子程式]]，之後再執行。

理論上，任何程式語言都可以是編譯式，或直譯式的。它們之間的區別，僅與程式的應用有關。許多程式語言同時採用編譯器與直譯器來實作，其中包括[[Lisp|Lisp]]，[[Pascal_(程式語言)|Pascal]]，[[BASIC|BASIC]] 與 [[Python|Python]]。[[JAVA|JAVA]]及[[C♯|C#]]採用混合方式，先將程式碼編譯為[[字节码|字节码]]，在執行時再進行直譯。

==直譯語言列表==
*[[BASIC|BASIC]]
*[[LISP|LISP]]
*[[Perl|Perl]]
*[[Python|Python]]
*[[Ruby|Ruby]]
*[[JavaScript|JavaScript]]
*[[PHP|PHP]]
*[[R语言|R]]

== 参见 ==
* [[腳本語言|腳本語言]]
* [[編譯語言|編譯語言]]

{{Compu-lang-stub}}
[[Category:编程语言分类|I]]