{{cleanup-rewrite}}
<!--重写中，特性之前改写完成，特性及以下需要改写--> <!--特性写到用户界面--><!--特性续写2段-->
{{noteTA
|G1=IT
|1=zh-hans:实时; zh-tw:即時;
|2=zh-hans:便携; zh-tw:可攜式;
|3=zh-hans:外设; zh-tw:外部裝置;
}}
[[File:Soekris_net4801_board.jpg|thumb]] net4801,適用於網路應用程式]]
'''嵌入式系统'''（{{lang|en|embedded system}}），是一种嵌入机械或电气系统内部、具有专一功能和[[实时计算|实时计算]]性能的[[计算机|计算机]]系统。<ref name="Barr-glossary">{{cite web|author=Michael Barr|title=Embedded Systems Glossary|work=Neutrino Technical Library|accessdate=2007-04-21|url=http://www.netrino.com/Embedded-Systems/Glossary|authorlink=Michael Barr (software engineer)|archive-url=https://www.webcitation.org/6HdyZjJVb?url=http://www.barrgroup.com/Embedded-Systems/Glossary-A|archive-date=2013-06-25|dead-url=yes}}</ref><ref>{{cite book|last=Heath|first=Steve|title=Embedded systems design|publisher=Newnes|year=2003|edition=2|series=EDN series for design engineers|page=2|url=https://books.google.com/books?id=BjNZXwH7HlkC&pg=PA2|quote=An embedded system is a [[microprocessor|microprocessor]] based system that is built to control a function or a range of functions.|ISBN=978-0-7506-5546-0|access-date=2017-04-30|archive-date=2020-09-11|archive-url=https://web.archive.org/web/20200911122433/https://books.google.com/books?id=BjNZXwH7HlkC&pg=PA2|dead-url=no}}</ref>嵌入式系统常被用于高效控制许多常见设备，被嵌入的系统通常是包含數位硬件和机械部件的完整设备，例如汽車的[[防鎖死煞車系統|防鎖死煞車系統]]。相反，通用计算机如[[个人电脑|个人电脑]]则设计灵活，可以智能處理各式各樣的運算情況，以满足广大终端用户不同的需要。

现代嵌入式系统通常是基于[[微控制器|微控制器]]（如含集成内存和/或[[外围设备|外设]]接口的[[CPU|中央处理单元]]）的，但在较复杂的系统中普通微处理器（使用外部存储芯片和外设接口电路）也很常见。通用型处理器、专门进行某类计算的处理器、为手持应用订制设计的处理器等，都可能应用到嵌入式系统。常见的专用处理器有[[数字信号处理器|数字信号处理器]]。

嵌入式系统的关键特性是处理特定的任务，因此工程师能对其进行优化，以降低产品的体积和成本，提升可靠性和性能。

嵌入式系统的物理形态包括便携设备如計步器、电子手表和[[MP3播放器|MP3播放器]]，大型固定装置如交通灯、工厂控制器，大型复杂系统如混合动力汽车、[[MRI|磁共振成像设备]]、航空电子设备等。它们的复杂度低至[[单片机|单片机]]，高至大型底盘或外壳内安装有多个部件、外设和网络。

== 嵌入式系统实例 ==
嵌入式系统通常应用于消费类、烹饪、工业、自动化、医疗、商业及军事领域。

*电信系统
从网络级的[[电话交换机|电话交换机]]到手机终端都部署了大量嵌入式系统。

*消费类电子
包括[[PDA|PDA]]、MP3播放器、移动电话、游戏机、数字摄像机、DVD播放器、[[GPS|全球卫星定位系统]]接收器和打印机。

*家居应用
微波炉、洗衣机和洗碗机中采用了嵌入式系统，带来灵活性、效率和功能；高级[[HVAC|暖通空调]]系统采用联网的[[恒温器|恒温器]]更精确、高效的按天或季度控制温度；[[智能家居|智能家居]]使用嵌入式设备进行感知、控制，通过有线和无线网络控制灯光、温湿度、安全、音视频、监控等。

*交通系统
安全要求相当高的飞机中采用了先进的[[航空电子|航空电子]]设备，如[[惯性导航系统|惯性导航系统]]、全球卫星定位接收器；
各种[[电机|电机]]——[[直流无刷电机|直流无刷电机]]、[[异步电机|异步电机]]和[[直流电机|直流电机]]中使用了电气/电子[[电机控制器|电机控制器]]；
汽车、电动车、混合动力汽车越来越多地采用嵌入式系统来节能减排；
其他汽车安全系统，包括[[防鎖死煞車系統|防鎖死煞車系統]]、[[ESC/ESP|电子稳定控制系统]]、{{le|牵引力控制系统|Traction control system}}、自动[[四驱|四驱]]系统。

*医疗设备
使用嵌入式设备进行[[生命体征|生命体征]]监测，[[电子听诊器|电子听诊器]]放大声音，各种[[医疗成像|医疗成像]]系统（[[正电子发射计算机断层扫描|正电子发射计算机断层扫描]]、[[SPECT|单光子发射计算机化断层显像]]、[[X射线计算机断层成像|计算机断层扫描]]、[[MRI|核磁共振成像]]）进行非入侵式内部检查；
医疗设备内的嵌入式系统通常采用工业计算机。


嵌入式系统应用在交通、消防、安防、医疗和生命攸关系统中，由于这些系统能够与黑客等隔离，因而更可靠。在消防安全中，经过设计，系统能在高温环境下持续工作。出于安全需要，嵌入式系统可以自给自足，能够处理切断了电气和通信系统的情况。

[[无线传感器网络|WSN]]领域的发展，促使一种新型的微型无线设备[[智慧型微尘|智慧型微尘]]迅速普及。人们可以通过信息监测和控制系统感知并作用于物理世界的无数事物。微尘采用微制造技术，通过先进的[[集成电路|IC]]设计技术，将无线子系统与尖端的传感器结合；从而让人们可以通过信息监测和控制系统感知并作用于物理世界的无数事物。这些微尘是完全自给自足的，在需要更换电池或充电前通常可以工作数年。

利用嵌入式Wi-Fi模块，原先利用串口进行通信的设备可以轻松启用无线通信功能。

== 歷史 ==
[[麻省理工学院|MIT]]仪器研究室的查尔斯·斯塔克·德雷珀开发的阿波罗制导计算机是现代嵌入式系统的雏形之一。在项目初期，它被看成风险最高的部分，原因是为了减小尺寸和重量，它采用了当时最新研发的单片集成电路。

第一款大批量生产的嵌入式系统是1961年发布的民兵I导弹内的D-17自动制导计算机。当民兵II导弹在1966年开始生产的时候，D-17升级成一种新型计算机，其中首次大量使用了集成电路。仅这个项目就将[[反及閘|反及閘]]模块的单价从1000美元降低至3美元，低到可用于商业产品。

由于二十世纪六十年代的这些早期应用，不仅嵌入式系统的价格降低了，同时处理能力和功能也获得了巨大的提高。以第一款单片机[[Intel_4004|英特尔4004]]为例，它是为[[计算器|计算器]]和其他小型系统设计的，但仍然需要外部存储器和外围芯片。1978年，国家工程制造商协会发布了可编程单片机的“标准”，涵盖了几乎所有以计算机为基础的控制器，如[[單板機|單板機]]、数控设备，以及基于事件的控制器。

随着微控制器和微处理器的价格下降，消费品也可以更换掉基于按钮的[[類比訊號|模拟]]器件，如分压计和可变电容，采用微处理器读取开关或按钮信号。

到了二十世纪八十年代早期，存储器、输入输出部件集成到处理器内，产生了单片机。在采用通用计算机占用的成本太高昂的应用中，单片机取而代之。

较低成本的单片机编程后可取代很多独立部件，这种嵌入式系统通常比传统解决方案更复杂，但这些复杂性多数体现在单片机自身。嵌入式系统需要的外围元件很少，多数设计工作集中在软件，而软件原型的建立及测试与设计與建立新的不使用嵌入式处理器的电路相比速度更快。

== 特性 ==
区别于可以执行多重任务的通用型计算机，嵌入式系统是为某些特定任务而设计的。有些系统则必须满足实时性要求，以确保安全性和可用性；另一些系统则对性能要求很低甚至不要求性能，以简化硬件、降低成本。

嵌入式系统并不总是独立的设备。许多嵌入式系统由嵌入较大设备的小计算部件组成，提供较通用的功能。例如吉他机器人采用嵌入式系统来调弦，但总的来说它的设计目的绝不是调弦而是演奏音乐；[[车载电脑|车载电脑]]作为汽车的一个子系统存在，提供导航、控制、车况反馈等功能。

为嵌入式系统编写的程序称为[[固件|固件]]，存储在[[只读存储器|只读存储器]]或[[快閃記憶體|闪存芯片]]内，运行在有限的硬件资源上：小容量内存，小键盘或屏幕甚至没有。

===用户界面===
嵌入式系统[[使用者介面|用户界面]]包括了从没有用户界面而只专注于单一任务、到类似于现代桌面操作系统的复杂[[图形用户界面|图形用户界面]]的各类界面。

简单的嵌入式设备使用按钮、[[发光二极管|LED]]、图形或数字[[液晶显示器|LCD]]和简单的菜单系统。

较高階的嵌入式系统使用图形显示屏，配合触摸感应或屏边按钮使用，可使占用空间最小并提供灵活性：按钮的含义随屏幕显示的内容而改变，而且指向想要的选项进行操作就能实现选择。[[移动设备|手持系统]]通常采用显示屏加操纵杆按钮作为触控装置。

有些系统通过序列埠（如[[RS-232|RS-232]]、[[USB|USB]]、[[I2C|I2C]]等）或网络连接远程提供用户界面。这种方式的优势在于：扩展了系统的性能、削减了显示屏的成本、简化了[[板级支持包|BSP]]，可以在[[个人计算机|PC]]上构建丰富的用户界面。例如运行在嵌入式设备平台（如IP摄像机或[[路由器|路由器]]）上的[[嵌入式HTTP服务器|嵌入式网络服务器]]，它无需安装定制软件，而是在连到设备的PC端的[[网络浏览器|网络浏览器]]中显示用户界面。

=== 嵌入式系统的处理器===
嵌入式处理器大概可分为两类。一类是普通微处理器：使用独立的集成电路存储器和外设。另一类是单片机：具有片上外设，降低了功耗、尺寸和成本。嵌入式系统的软件是为某种应用定制的，而不是像个人计算机那样的由终端用户安装的商品，因此可以使用各种不同的基本CPU架构：既有[[范紐曼型架構|范紐曼型架構]]也有不同程度的[[哈佛结构|哈佛结构]]；既有[[精简指令集|RISC]]也有非精简指令集处理器；字长从4位到64位甚至更高，当然最典型的仍然是8/16位。多数架构由几家不同的公司生产，使用了大量不同的变量和类型。

嵌入式系统也会使用通用型微处理器，但比单片机需要更多外围电路。

==== 嵌入式主板====
[[PC/104|PC/104]]和PC/104+是小型、小批量嵌入式强固系统的标准之一，大多基于[[x86架构|x86架构]]；通常比标准PC要小，而比多数简单的8/16位嵌入式系统要大；使用[[MSDOS|MSDOS]]、[[Linux|Linux]]、[[NetBSD|NetBSD]]，或实时嵌入式操作系统如[[MicroC/OS-II|MicroC/OS-II]]、[[QNX|QNX]]、[[VxWorks|VxWorks]]。有时这些主板也会使用非x86处理器。

在某些应用中，小巧、高效并非主要关注点，因而可以使用与x86型PC主板兼容的部件。VIA EPIA系列板卡则可以弥补这个空缺，它兼容PC但是高度集成、体积较小，或提供其他对嵌入式工程师很有吸引力的特性。这种方法的好处是低成本商品也可以使用通用的软件开发工具。用这种方法构建的系统仍然是嵌入式系统，因为它嵌入在较大的设备中、用于满足单一用途。例如[[自动取款机|ATM]]和电子游戏机，它们都包含了针对各自应用的代码。

多数嵌入式主板都不是围绕PC设计的，也不使用ISA或PCI总线。如果采用[[片上系统|SoC]]处理器，用标准总线连接分立元件就不是上策，此外软硬件开发环境都可能会很不一样。

一种常用的设计模式是采用小型系统模块——也许只有商务卡片大小，容纳高密度的[[球状矩阵阵列|BGA]]芯片如[[ARM架构|ARM]]处理器和外设、用于存储的外部闪存、作为内存的[[动态随机存取存储器|DRAM]]。模块厂商通常会提供引导软件和操作系统选项，一般包括[[Linux|Linux]]和一些实时操作系统。这些模块由熟悉专业测试方法的组织大批量生产，配合较小批量的、带特殊应用外设的定制主板使用。

====ASIC和FPGA解决方案====
[[片上系统|SoC]]是一种常见的为超大批量嵌入式系统设计的可配置阵列。它在单个芯片内包含了多处理器、乘法器、缓存和接口，形成一个完整的系统；通过[[专用集成电路|专用集成电路]]或[[FPGA|现场可编程门阵列]]来实现。

===外围设备===
嵌入式系统通过[[外围设备|外设]]与外部通信：
* 序列埠：[[RS-232|RS-232]]、[[RS-422|RS-422]]、[[RS-485|RS-485]]等
* 同步序列埠：[[I2C|I2C]]、[[串行外设接口|SPI]]、[[增强型同步串行接口|ESSI]]等
* [[通用序列总线|USB]]
* 多媒体卡：[[SD卡|SD卡]]、[[CompactFlash|CF卡]]等
* 网络：[[以太网|以太网]]、[[现场网络|LonWorks]]等
* 现场总线：[[控制器局域网|CAN]]总线、[[LIN|LIN]]总线、[[PROFIBUS|PROFIBUS]]等
* 定时器：[[锁相环|PLL]]、[[捕获比较|捕获比较]]模块和[[时间处理单元|时间处理单元]]
* 分立[[IO|IO]]：[[通用输入/输出|GPIO]]
* 模拟-數位/數位-模拟转换([[模数转换|ADC]]/[[数模转换|DAC]])
* 调试接口：[[JTAG|JTAG]]、[[在线编程|ISP]]、[[在线串行编程|ICSP]]、[[BDM|BDM]]端口、[[BITP|BITP]]、[[DP9|DP9]]端口等

=== 工具 ===
同典型的计算机程序员一样，嵌入式系统设计人员也使用[[编译器|编译器]]、[[连结器|连结器]]和[[调试器|调试器]]开发嵌入式系统软件。然而，他们也使用一些大多数程序员不熟悉的工具。

软件工具的来源有如下几种：
* 专注于嵌入式系统市场的软件公司
* 从[[GNU|GNU]]软件开发工具移植（参见[[交叉平台编译|交叉平台编译]]）
* 有些情况下，如果嵌入式处理器与普通个人计算机处理器很近似的话也可以使用个人计算机开发工具

嵌入式系统设计人员也使用一些不为普通计算机程序员所熟悉的软件工具：
* 一个常用工具是“电路内部仿真器”（ICE，in-circuit emulator）或者是最新设计中的嵌入式调试器。这个调试工具是开发嵌入式程序的基本技巧。它代替微处理器或者嵌入微处理器内部，提供了在系统中快速调用和调试试验代码的便捷工具。一个焊点通常就是一个插入系统的特殊电路，通常使用一台连结到这些焊点的个人计算机作为调试界面。
* 连结器通常是各种各样。对于大多数商业编程来说，连接器几乎是事后才考虑的部分，缺省设置也从来不变。与此相反，嵌入式连结器有完整、复杂的命令行语言是很普通的。经常有不同类型的内存，分别保存特殊的代码和数据。单独的数据结构能够放在特殊的地址，这样软件能够很方便地访问映射到内存的控制寄存器。嵌入式连结器经常有用于减小代码大小和运行时间的外部优化工具。例如，他们可能移动子程序的位置以使用较小的调用和跳转指令。它们经常带有管理{{link-en|数据叠加|data overlays}}和{{link-en|band switch|band switch}}技术的特性，这些技术是在嵌入式软件经常使用的扩展廉价CPU的方法。
* 另外一个常用的工具是一个在程序中添加代码和或者[[循环冗余校验|CRC]]的工具程序（经常是自己写的），使用这个工具嵌入式系统能够在执行程序之前先进行程序数据检查。
* 为[[数字信号处理|数字信号处理]]开发软件的嵌入式程序员经常使用[[MathCad|MathCad]]或者[[Mathematica|Mathematica]]这样的数学工具进行数学仿真。
* 一些较少使用的工具有将数据文件转换成代码的工具，使用这种工具就可以在程序中包含任意类型的数据。
* 少数一些项目为了特殊的可靠性或者[[数字信号处理|数字信号处理]]要求使用[[同步式编程|同步式编程]]语言。

一些编程语言为嵌入式系统编程提供了一些特殊支持。
* 对于[[C语言|C语言]]，ISO/IEC TR 18037:2005定义了
** 指定的地址空间
** 指定的存储类
** 基本输入输出的硬件寻址

=== 调试 ===
调试通常使用内部电路仿真器或者其他一些能够在微控制器[[microcode|微码]]（[[微程序|microcode]]）内部产生[[中断|中断]]的调试器。微码中断让调试器能够在只有CPU工作的硬件中进行操作，基于CPU的调试器能够从CPU的角度来测试和调试计算机的电路。[[PDP-11|PDP-11]]开创了这种特性的先河。

开发人员能够仍然使用[[断点|断点]]、[[单步执行|单步执行]]以及高级语言进行调试，在许多的调试工具上都有这种能力。另外开发人员在调试实时事件顺序的时候需要记录、使用简单的记录工具。

首先遇到这种问题的个人电脑和大型机程序员经常在设计优先级和可行方法的时候感到困惑。指导、代码审查和非个人风格（{{link-en|egoless|egoless}}）的编程是值得推荐的。

随着嵌入式系统变得越来越复杂，更高层次的工具和操作系统逐渐移植到可行的设备上。例如，[[蜂窝电话|蜂窝电话]]、[[个人数字助理|个人数字助理]]和其他的消费用计算机需要一些从个人或者这些电子设备制造商之外的公司购买或者提供的一些重要软件。在这些系统中，需要如[[Linux|Linux]]、[[OSGi|OSGi]]或者[[Java|Java]]这样的开放编程环境，这样第三方软件提供上才能够在大规模的市场上销售软件。

大多数这样的开发环境都有一个运行在[[个人电脑|个人电脑]]上的参考设计，这种软件的绝大部分都可以在传统的个人电脑上开发。然而，从开放环境移植到专用的电子设备和电子设备的驱动程序开发通常仍然是传统的嵌入式系统软件工程师的工作。在有些情况下，the engineer works for the integrated circuit manufacturer, but there is still such a person somewhere.

=== 操作系统 ===
[[File:Payphone_loading_Microsoft_Windows_XP.jpg|thumb]]的因特网收费电话]]
嵌入式系统经常没有[[操作系统|操作系统]]、专用的[[嵌入式操作系统|嵌入式操作系统]]（经常是[[实时操作系统|实时操作系统]]）或者指定程序员移植到这些新系统。

=== 启动 ===
嵌入式系统带有启动代码，通常它禁止中断、设置电子设备参数、测试计算机（RAM、CPU和软件），然后开始应用程序运行。许多嵌入式系统从短暂的掉电状态恢复，经常重起而不进行最近的自检。在十分之一秒内重啟是常见的现象。

许多设计人员发现[[light-emitting_diode|LED]]在指示错误状态上非常有用，它们可以帮助进行[[故障处理|故障处理]]。一个常用的机制是在复位的时候点亮电子设备所有的LED以表明供电和LED正常工作；然后在进行[[加电自检|加电自检]]时由软件改变LED的状态；在此之后，软件用这些LED指示操作过程中的正常或者故障状态。这可以让技术人员、工程师和用户了解系统的状态。一个有趣的例外是电度表（{{link-en|electric power meters|electric power meters}}）和其他一些大街上的东西，闪烁的指示灯是为了吸引注意力或者表示损坏状态。

==== 内部自检 ====
许多嵌入式系统都有一定程度或者一定数量的内部[[加电自检|加电自检]]，自检有几种类型：

# 计算机检查：检查CPU、RAM和程序存储器。通常一加电就开始这些检查，在一些安全性非常重要的系统中，通常周期性地在安全时间间隔内进行自检，或者经过一段时间就进行自检。
# [[外围设备|外围设备]]检查：仿真输入和读入数据或者测量输出数据。有大量的通信、模拟和控制系统都有这些非常廉价的检查。
# 电源检查：通常测试每个供电电路，也可能检查电池或者主电源输入。通常供电部分的负载都很重，并且少有余量，所以这项检查很有意义。
# 通信检查：验证从相连单元接收到的简单消息，例如在互联网上使用[[ICMP|ICMP]]消息“ping”。
# 电缆检查：将线连结到待检查的电缆上指示针进行检查。如电话这样的同步通信系统经常使用“同步”测试。电缆检查成本很低，当单元部分有插头的时候这项检查尤其重要。
# 装备检查：一个系统在安装时经常需要进行调整，这项检查就向安装人员做出状态指示。
# 消耗检查：检查系统所消耗的东西、在预量太低时发出警告。最常见的例子是汽车的[[油量表|油量表]]，最复杂的例子可能是维持化学反应物详细状态的自动医学分析系统。
# 运行检查：检查用户关心的系统运行状态。显然，在系统运行时必须进行这项检查，这方面的检查包括飞机上的导航仪器、汽车的速度表和磁盘的指示灯等。
# 安全检查：在'安全时限'内进行检查确保系统仍然可靠。安全时限通常小于能够产生损害的最小时间。

=== 可靠性体系 ===
根据人们需求的不同，可靠性也有不同的定义，有意思的是，可靠性的类型却相对较少，相似可靠性类型的系统，使用相似类型的内在检查和恢复方法：

# 系统非常不安全或者无法修理。这包括太空系统、水下电缆、导航灯塔、钻孔系统，非常奇怪的是还包括汽车和大规模生产产品。总的来说，嵌入式系统检测各个子系统、在线切换到冗余部分或者工作在“limp模式”提供部分的功能。大规模生产的消费产品如汽车、个人电脑或者打印机也属于这个类别，这是因为与购买的费用相比维修费用高昂、维修人员又路途遥远。
# 系统不能安全地停止运行。这包括飞机导航、反应控制系统、重要的化学工厂安全控制、铁路信号、单发动机飞机的发动机，如上所述，但是“limp模式”较难容忍，通常需要操作员选择备份系统。
# 系统停机时将会造成大量的金钱损失。这些包括电话交换机、工厂控制、桥梁和电梯控制、资金转移、市场开发、自动销售和服务等，这些系统通常有一些运转/不运转测试，它们通常带有在线冗余或者使用替换系统和人工过程的limp模式。
# 系统不安全的时候不能操作。同上面的情况类似，系统的运行将会造成大量的金钱损失。医疗设备、带有发动机这样的热备份的飞行器、化学工厂控制、自动股票交易、游戏系统等。测试可能是五花八门，但是出错时能够做的就是停止整个系统。

== 嵌入式软件架构的类型 ==
常用的嵌入式软件架构有几种不同的基本类型。

=== 控制迴圈 ===
在這種設計中，軟體有一個簡單的循環，這個循環調用各個[[子程序|子程序]]，每個子程序管理硬體或者軟體的某一部分。[[中斷|中斷]]通常用來設置標記或者更新軟體其他部分能夠讀取的[[暫存器|暫存器]]。

系統使用簡單的[[API|API]]來完成允許和禁止中斷設置。如果處理得當的話，它能夠在[[嵌套子程序|嵌套子程序]]中處理[[嵌套調用|嵌套調用]]，在最外面的中斷允許嵌套中恢復前面的中斷狀態。這種方法是實作[[Exokernel|Exokernel]]的一個最簡單的方法。

通常在循環中有一些子程序使用周期性的即時中斷控制一組[[定時器|軟體定時器]]，當一個定時器時間到的時候就會執行相應的子程序或者設置相應的標誌。

任何可能發生的硬體事件都應該有軟體定時器的支持，硬體事件大概每萬億次出現一次錯誤，對於現代的硬體來說大概是一年發生一次，對於以百萬計大規模生產的設備來說，遺漏一個軟體軟體定時器在商業上可能是災難性的。

有時測試軟體運行一組基於軟體的安全定時器，它們周期性地複位硬體中的[[看門狗計時器|看門狗計時器]]。如果軟體錯過一個事件，安全定時器軟體將會捕捉到它。如果安全定時器出錯，看門狗硬體將會複位系統。

可以使用指向每個[[狀態機|狀態機]]函數的[[指针_(计算机科学)|指標]]實作狀態機，函數可以用[[C++|C++]]、[[C|C]]或者[[組合語言|組合語言]]等實作。變化的狀態將不同的函數放到指標中，每次循環運行時都會執行[[函數指標|函數指標]]。

許多設計人員建議每個循環讀一次輸入輸出設備、並且保存得到的結果，這樣可以保證邏輯過程的在一致的參數上運行。

許多設計人員喜歡將狀態機設計成每個狀態僅僅檢查一到兩項內容，通常是檢查硬體事件和軟體定時器。

設計人員建議多級狀態機應該讓低層狀態機早於高層狀態機運行，這樣高層就能夠根據正確的信息運行。

如內部燃燒控制這樣的複雜功能通常根據多維表格進行處理，代碼通常進行查表處理而不進行複雜的計算，為了減小表格的大小以及成本軟體可以在條目之間進行差值運算。

在最小的微控制器中，尤其是只有128位元組[[堆疊|堆疊]]的[[8051|8051]]中，控制環允許好的[[链接器|链接器]]使用靜態分配的數據覆蓋本地[[變數|變數]]。在這種機制中，離子程序調用樹末端越近的變數得到的記憶體地址越高。當開始一個新的分支的時候，它的變數可以在以前分支遺棄的空間中進行重新分配。

簡單控制迴圈的一個主要缺點是它無法保證響應特定硬體事件的時間。

細心的設計可以很容易地保證中斷不會被長時間禁止，這樣中斷代碼就可以在非常精確的時間運行。

控制環的另外一個主要缺陷是增加新的特性的時候會變得複雜。需要花費很長時間的[[演算法|演算法]]必須小心地進行分解以使得每次只有一小部分在主循環中運行。

這種系統的優勢是它的簡單性，並且在很小的軟體上，循環執行地很快幾乎沒有人關心它是不可預測的。

它的另外一個優勢是這種系統保證運行軟體的質量，無法將不好的運行結果歸咎為其他的作業系統。

=== 非抢先式任务 ===
[[非抢先式任务|非抢先式任务]]系统非常类似于上面的系统，只是这个循环是隐藏在[[应用程序接口|API]]中的。我们定义一系列的任务，每个任务获得自己的子程序栈；然后，当一个任务空闲的时候，它调用一个空闲子程序（通常调用“暂停”、“等候”、“交出（{{link-en|yield|yield}}）”等等）。

带有类似属性的架构都带有一个事件队列，有一个循环根据队列列表中的一个域确定删除时间和调用子程序。

这种架构的优点和缺点都非常类似于控制环，只是这种方法添加新的软件更加简单，只需要简单地编写新的任务或者将它添加到队列解释器中。

=== 抢先式定时器 ===
使用上面的任何一种系统，但是添加一个按照[[定时器中断|定时器中断]]运行子程序的定时器系统，这样就给系统添加了崭新的能力，这样定时器子程序第一次能在一个有保证的时间内运行。

另外，代码第一次能够在非预期的时间访问自己的数据结构。定时器子程序必须要象中断子程序一样进行处理。

=== 抢先式任务 ===
使用上面的非抢先式任务系统，从一个抢先式定时器或者其他中断运行。

这样系统就突然变得很不一样了。任何一个任务的代码都有可能损害其他任务的数据&emdash;所以它们必须进行切缺的切分。对于共享数据的访问必须使用一些同步策略进行控制，如消息队列、信号灯或者[[non-blocking_synchronization|非阻塞同步]]机制。

经常在这一步开发组织就会购买一套[[实时操作系统|实时操作系统]]。如果一个组织缺少能够编写操作系统的人才或者操作系统将要在几个产品之上，这可能是一个明智的选择。这通常要将开发计划增加六到八周，and forever after programmers can blame delays on it.

=== 微内核与[[外内核|外内核]] ===
这种方法试图将系统组织得比宏内核更易于配置，而同时提供类似的特点。

微内核是实时操作系统的一个逻辑发展，通常的组织方式是操作系统内核分配内存并且将CPU在不同的线程之间进行切换。用户模式的进程实现如文件系统、用户接口等主要的功能。

微内核在二十世纪五十年代开始首次尝试，但是由于计算机在任务间切换以及在任务间交换数据速度非常缓慢，所以人们放弃了微内核而钟情于[[Multics|MULTICS]]和[[UNIX|UNIX]]风格的大内核。总体上来说，微内核在任务切换以及任务间通信速度快的时候是比较成功的，在速度慢的时候是失败的。

外内核通过使用普通的子程序调用获得的通信效率很高，硬件以及系统中的软件都是程序员能用也能扩展的。资源内核（可能是库的一部分）分配CPU时间、内存以及其他资源。如多任务、网络以及文件系统这样的大内核特性通过代码库来提供。库可以进行动态的连接、扩展或者共享。不同的应用甚至可以使用的不同的库，但是所有的资源都来自于资源内核。

=== 虚拟机 ===
一些航空电子系统使用几个商用计算机。这样更进一步，每个计算机都在模拟它们自身的几个副本，重要的程序同时在几个计算机上运行并且进行投票控制（{{lang|en|vote}}）。

模拟环境的优点就是即使一个计算机出现故障，软件的不同例程能够迁移到正常工作的软件分区，表决的票数并不受影响。

通常虚拟软件运行在计算机的用户模式下，它捕捉、模拟硬件访问和不在用户模式下运行的指令。

=== 检查点计算 ===
另外一种常用的机制是两个计算机计算for a bit，然后将它们的计算结果报到那个点上。如果一个计算机的计算是nut，它就会被关闭。

=== 办公用（[[宏内核|宏内核]]）操作系统 ===
这种系统通常在没有系统经费的嵌入式项目中流行，但是从这篇文章的多个作者来看，这通常是不正确的，它们的逻辑是：

* 操作系统是经过特殊封装的重用代码库。如果这些代码有用，设计人员就会节省时间和金钱，否则它们就是无用的。
* 商务系统的操作系统没有嵌入式硬件的接口。例如，如果要用Linux写一个马达控制器或者电话交换机，绝大部分的实际控制操作都是[[IOCTL|IOCTL]]调用，同时，正常的读、写和查询界面都是无用的。所以操作系统对于实际的开发妨碍很大。
* 大多数的嵌入式系统不处理办公事务，所以办公操作系统的大部分代码都被浪费了。例如，绝大多数的嵌入式系统从来都不使用文件系统或者屏幕，所以文件系统和图形用户界面部分就是浪费的，这些不用的代码只会影响系统的可靠性。
* 办公用操作系统保护硬件不让用户程序操作，这就严重地妨碍了嵌入式开发工作。
* 操作系统必须移植到嵌入式系统上，也就是说，硬件驱动程序无论如何都必须重写，这也是操作系统最难的部分，所以使用这样的操作系统几乎没有功效。
* 操作系统真正有用、可移植的特性是小段代码。例如，一个基本的[[TCP/IP|TCP/IP]]接口大约有3000行代码，另外的一个例子是大约同样大小的简单文件系统。如果设计需要这些代码，能够使用少于嵌入式系统开发10%的经费就能完成，不需要支付版权费用，只需要简单地重写就可以了。如果系统这些代码有足够的通用性，嵌入式系统杂志封面的后面通常有公司销售没有版权费的C语言实现代码。

然而许多工程师并不认同这一点，[[嵌入式Linux|嵌入式Linux]]越来越受到人们的欢迎，尤其是在无线[[路由器|路由器]]和[[全球定位系统|全球定位系统]]这样的功能强大的嵌入式系统中。其中有下面一些原因：

* 有现成的移植到普通嵌入式芯片的实现代码。
* 它们允许重用公开获得的[[驱动程序|设备驱动程序]]、[[网页服务器|网页服务器]]、[[防火墙|防火墙]]或者其他代码。
* 开发系统能够从许多特性组合开始，在发布的时候可以剔除不需要的功能，从而节约所消耗的内存。
* 许多工程师认为在用户模式运行应用程序更为可靠、更容易调试，所以开发过程更容易、代码更易于移植。
* 许多嵌入式系统没有控制系统那样对于实时性的严格要求，对于许多应用来说如嵌入式Linux这样的系统的响应速度就已经足够了。
* 要求更快的响应速度，而不是可靠性的特性，通常放到了[[计算机硬件|硬件]]上。
* 许多实时操作系统都针对每件产品收取费用，当产品是消费品时，这项费用是巨大的。

=== Exotic custom操作系统 ===
一些系统需要安全、及时、可靠或者高效的特性，上面的架构却无法达到，构建这样的系统有一些广为人知的技巧：

* 雇佣一个真正的[[系统程序员|系统程序员]]。他们的花费很小，但是能够节约数年的调试以及相关的收入损失。
* RMA（[[rate-monotonic_scheduling|rate monotonic analysis]]），可以用来评估一组任务能否在特定的硬件系统下运行，在最简单的形式下，设计人员保证最快完成的任务有最高的优先级，平均来说CPU至少有30%的空闲时间。
* 和谐的任务能够高效地优化CPU。基本上来说，设计人员保证每件工作都是从heartbeat timer开始工作的。在[[实时操作系统|实时操作系统]]上很难这样做，因为它们在等候输入输出设备的时候通常就会切换任务。
* 刚好有两个优先级（通常是''运行''和''禁止中断''）的系统不能出现高优先级任务等候低优先级任务释放信号灯或者其他资源的[[优先级倒置|优先级倒置]]问题，
* 有监视器（{{lang|en|monitor}}）的系统不能出现死锁。[[Critical_sections|监视器]]锁住一段代码禁止中断和其他抢先任务。如果这个监视器只用于一小段快速运行的代码，系统可能工作正常。如果能够证明监视器API在所有情况下都能够完整运行，例如仅仅禁止中断，那么就不会产生系统挂起的情况。

这就意味着使用两个优先级和监视器的系统是安全、可靠的，因为它们没有死锁和优先级倒置的问题。如果监视器能够执行到结束，那么就永远不会挂起。如果使用和谐的任务，可能还会相当高效。然而，RMA无法描述这些系统，优先级最好也不要到处都有，其中包括操作系统和硬件。

== 外部链接 ==
* [https://web.archive.org/web/20120204083915/http://www.freertos.org/implementation/ 即時操作系统如何工作]（英）
* [http://Microcontroller.com/ 嵌入式系統門戶] {{Wayback|url=http://microcontroller.com/ |date=20200801025403 }}（英）
* [http://msdn.microsoft.com/embedded/ 視窗嵌入開發者中心] {{Wayback|url=http://msdn.microsoft.com/embedded/ |date=20081205063713 }}（英）
* [http://www.vliw.org/book 嵌入系統與VLIW處理器] {{Wayback|url=http://www.vliw.org/book |date=20210122063955 }}（英）
* [http://www.caravan.net/ec2plus/ 嵌入式C++ 首頁] {{Wayback|url=http://www.caravan.net/ec2plus/ |date=20081201032107 }}（英）
* [http://www.qnx.com QNX首頁] {{Wayback|url=http://www.qnx.com/ |date=20120717113821 }}（英）
* [http://www.lynuxworks.com/ LynuxWorks嵌入式系統首頁] {{Wayback|url=http://www.lynuxworks.com/ |date=20210224141149 }}（英）
* [http://www.embeddedrelated.com 嵌入式系統討論群、書籍、職缺、與其他林林總總] {{Wayback|url=http://www.embeddedrelated.com/ |date=20210124182448 }}（英）
* [http://www.eventhelix.com/RealtimeMantra/ 嵌入式軟體設計] {{Wayback|url=http://www.eventhelix.com/RealtimeMantra/ |date=20210305014342 }}（英）
* [https://web.archive.org/web/20060526053044/http://www.emlabs.info/ 擁有嵌入式系統研發社團的大學列表]（英）
* [http://www.embedded.com/ 嵌入式系統編程] {{Wayback|url=http://www.embedded.com/ |date=20071001113745 }}（英）
* [http://ee.cleversoul.com/ EE概要 - 電機工程與嵌入系統編程] {{Wayback|url=http://ee.cleversoul.com/ |date=20210212115018 }}（英）
* [http://www.devicetools.com DeviceTools] {{Wayback|url=http://www.devicetools.com/ |date=20200518003352 }} - 給內嵌裝置開發者的工具與矽片（英）
* [https://web.archive.org/web/20060813135235/http://wiki.debian.org/Embedian Embedian]（英）
* [http://www.rtcmagazine.com 內嵌計算工業的紀錄雜誌] {{Wayback|url=http://www.rtcmagazine.com/ |date=20210224062530 }}（英）
* [https://web.archive.org/web/20060527012202/http://www.embeddedstar.com/ 內嵌白皮書、下載、公司、新聞、文章]（英）
* [https://web.archive.org/web/20110906115936/http://www.3amsystems.com/embedded/troubleshooting.htm 內嵌系統疑難排解] - 一個概述從基版醞釀、製造、到後勤的問題。（英）
* [http://www.clarinox.com/docs/whitepapers/Whitepaper_06_CrossPlatformDiscussion.pdf Working across Multiple Embedded Platforms] {{Wayback|url=http://www.clarinox.com/docs/whitepapers/Whitepaper_06_CrossPlatformDiscussion.pdf |date=20210225053843 }}跨平台嵌入式系统。（英）

== 常见的嵌入式操作系统 ==
参见[[嵌入式操作系统|嵌入式操作系统]]
* [[Android|Android]]
* [[Firefox_OS|Firefox OS]]
* [[iPhone_OS|iPhone OS]]
* [[uC/OS_II|uC/OS II]]
* [[FreeRTOS|FreeRTOS]]
* [[uCLinux|uCLinux]]
* [[VxWorks|VxWorks]]
* [[pSOS|pSOS]]
* [[Nucleus|Nucleus]]
* [[PalmOS|PalmOS]]
* [[Windows_CE|Windows CE]]
* [[Windows_XP_Embedded|Windows XP Embedded]]
* [[Windows_Vista_Embedded|Windows Vista Embedded]]
* [[Embedded_Linux|Embedded Linux]]
* [[ECOS|ECOS]]
* [[QNX|QNX]]
* [[Lynx|Lynx]]
* [[Symbian|Symbian]]
* [[RT-Thread|RT-Thread]]

== 业界常见的开源嵌入式软硬件系统 ==
{| class="wikitable"
|-
|  || 无操作系统 || 有操作系统 +弱GUI || 有操作系统 + GUI界面
|-
| 8/16位处理器 ||
* [[Ardunio|Ardunio]]开发板（软硬件全套，开源，目前较热门）
* 各家单片机公司提供参考设计(如Ateml等) 
||
* [[Arduino|Arduino]]开发板（软硬件全套，开源，目前较热门）
* [[Ethernut/nutos|Ethernut/nutos]]项目（软硬件配套，开源，偏重计算机网络）
* [[UcosII|UcosII]]操作系统(软件，开源但商业版本需要license费)
* [[FreeRTOS|FreeRTOS]]操作系统（软件，商业公司提供的开源版本，也售卖对应的商业版本）
* Keil RTX51 Real-Time Kernel（开源，Keil软件自带需要license）
||/
|-
| 32位处理器   ||/ ||
* Ethernut/nutos项目（软硬件配套，开源，偏重计算机网络）
* [[eCos|eCos]]操作系统（软件，开源，优点是可以定制化RTOS）
* [[uClinux|uClinux]]操作系统（软件，开源，有对应的硬件板uCsimm项目）
* [[FreeRTOS|FreeRTOS]]操作系统（软件，商业公司提供的开源版本，也售卖对应的商业版本） 
* Keil RTX Real-Time Kernel（开源，Keil软件自带需要license） 
* [[RT-thread|RT-thread]]操作系统（软件，开源，国内开发,有简单GUI）
||
* [[Android|Android]]操作系统
* [[Beagle_board|Beagle board]]项目（软硬件配套，开源）
* [[Raspberry_Pi|Raspberry Pi]] 项目（软硬件配套，开源）
|}

== 参考文献 ==
{{Reflist}}

{{-}}
{{Embedded systems}}
{{Microcontrollers}}
{{Computer_sizes}}
{{Authority control}}

[[Category:嵌入式系统|]]