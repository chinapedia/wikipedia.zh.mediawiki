{{noteTA
|G1=IT
}}
'''初始化'''（{{lang-en|Initialization}}）在[[计算机|计算机]][[编程|编程]]领域中指为[[对象_(计算机科学)|数据对象]]或[[变量|变量]]赋初值的做法，如何初始化则取决于所用的[[程序语言|程序语言]]以及所要初始化的对象的存储类型等属性。用于进行初始化的程序结构则称为初始化器或初始化列表。初始化和变量[[前向声明|声明]]是明显有区别的，而且初始化也先于变量声明进行，但两者在实践中仍常被混淆。

==实现==

初始化可以在[[编译|编译]]时通过静态嵌入值来实现，也可以在[[运行时|运行时]]进行分配。进行初始化的[[代码|代码]]部分称为“初始化代码”，但这部分代码可能还包含其他的一次性使用[[函数|函数]]（例如打开文件）。将存储单元设为16进制0的做法也称作“清除”，这一般在[[机器代码|机器代码]]级用[[异或|异或]][[指令|指令]]的方式实现（指令的两个操作数必须为相同的变量），因为这不需要额外的[[内存|内存]]访问。

==C系编程语言==

===初始化器===

在[[C语言|C]]/C99/[[C++|C++]]中，初始化器是声明器的可选部分，它由一个'='以及其后的一个[[表达式|表达式]]（或含有多个以','隔开的带圆括号表达式的单一列表）所组成。后面这一列表有时也被称为“初始化（器）列表”（initializer list）或”初始化列表”（initialization list），不过initializer list也是C++中用于初始化[[类|类]]或[[结构|结构]]中的元素的[[保留字|保留字]]。

一个包含初始化的声明则通常被称为定义。根据C++标准规定，定义是声明的一种；具体来说，声明只需为函数或数据对象指定类型即可，而定义则还必须为其赋初值。所以“声明和定义”的提法严格来说是不准确的，但这种说法仍被广为采用。<ref>{{Cite_book|title=C++ FAQs|author= Cline, Lomow, and Girou, Addison-Wesley|date=1999|isbn=0-201-30983-1}}</ref>

===初始化列表===

一个类/结构的[[构造函数|构造函数]]可以在定义中于构造函数体前包含一个初始化列表，用以给类/结构的元素赋初值。例如如下程序段：

<syntaxhighlight lang="c">
  struct int_complex {
    int re, im;
    int_complex() : re(0), im(0) { }
  };
</syntaxhighlight>

这里的" : re(0), im(0)"就是初始化列表。

有时“初始化列表”这个术语也用来指[[数组|数组]]或结构初始化器中的表达式表。

在[[C++0x|C++0x]]标准中也以模板的形式提供了一个更强力的初始化表的概念，即为std:initializer_list。

===默认初始化===

在程序里，数据初始化也可能在没有由明确的语法来实现的情况下进行。例如说，如果一个[[静态变量|静态变量]]在没有初始化（即未指定初值）的情况下被声明，则：
#对于[[原始类型|原生数据类型]]：以对应类型的零值进行初始化；
#对于类中的静态对象：由其默认的构造函数来进行初始化。

==参考==
<references />

[[Category:计算机编程|Category:计算机编程]]