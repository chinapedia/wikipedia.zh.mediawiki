{{noteTA
|G1=IT
}}

[[程式語言|程式語言]]中的'''標記'''是加在[[源代碼|源代碼]]中識別用的字串，大部份的語言都將標記視為[[標識符|標識符]]，後面要加一個[[冒號|冒號]]作為識別。

在許多[[高階語言|高階語言]]中標記會用來標示<code>[[Goto|Goto]]</code>指令的終點<ref>{{Cite web |url=http://c0x.coding-guidelines.com/6.8.6.1.html |title=C Standard section 6.8.6.1 The goto statement |access-date=2011-03-16 |archive-date=2007-12-24 |archive-url=https://web.archive.org/web/20071224215314/http://c0x.coding-guidelines.com/6.8.6.1.html |dead-url=yes }}</ref><ref>{{cite web|url=http://www.qbasicnews.com/qboho/qckgoto.shtml|title=GOTO Statement QuickSCREEN|date=1988|accessdate=2008-07-03|publisher=Microsoft|archive-url=https://web.archive.org/web/20090725050926/http://www.qbasicnews.com/qboho/qckgoto.shtml|archive-date=2009-07-25|dead-url=yes}}</ref>。在[[組合語言|組合語言]]中標記則是用來標示跳躍指令（如<code>JMP</code>）的終點<ref>{{cite web|url=http://www.cs.uaf.edu/2007/fall/cs301/support/x86/index.html|title=nasm x86 Assembly|date=|accessdate=2008-07-03|author=O. Lawlor|archive-date=2018-01-21|archive-url=https://web.archive.org/web/20180121184346/https://www.cs.uaf.edu/2007/fall/cs301/support/x86/index.html|dead-url=no}}</ref>。也時也會利用標記來作為程式的分段。[[Fortran|Fortran]]及[[BASIC|BASIC]]語言支援數字型的標記，也就是[[行號_(程式語言)|行號]]<ref name="GBvsQB">{{cite web|url=http://support.microsoft.com/kb/73084|title=Differences Between GW-BASIC and QBasic|date=2003-05-12|accessdate=2008-06-28|author=|archive-date=2013-10-19|archive-url=https://web.archive.org/web/20131019181140/http://support.microsoft.com/kb/73084|dead-url=no}}</ref>。標記也在[[调试|调试]]時用來識別已[[編譯器|編譯]]過程式的進入點。

== 用途 ==
=== 組合語言 ===
在組合語言中要實現[[流程控制|流程控制]]時，往往需要讓[[程式計數器|程式計數器]]前移或後移一段距離（例如前移5個位元），移動的距離會因程式碼變動而不同，例如在某處增加（或刪除）一行程式碼，程式中所有有越過更改程式碼的前移（及後移）指令都要重新計算需移動的距離。這樣的程式在閱讀時需經過計算才能知道任何跳躍指令的終點，程式的可讀性顯然不佳。

標記可以避免上述的問題。可以在程式任何需要的位置加上不同標記，跳躍指令直接指定其終點對應的標記，不需用人工計算程式計數器移動的距離。而且還可以使用有意義，可讀性高的標記，更加提昇程式的可讀性。

以下是一段使用標記的組合語言程式：
<syntaxhighlight lang=asm>
 mov $v0, 0
 MyLabel:                   ; 此處為一個名稱為MyLabel的標記
   add  $v0, $s0            ; 迴圈本體中的程式
   subi $t0, 1              ; 迴圈本體中的程式
 bne $t0, $zero, MyLabel    ; 條件跳躍至MyLabel標記處
                            ; 若指定條件不滿足，繼續執行後續的程式
</syntaxhighlight>

== 高階語言 ==
有些高階語言（例如C語言）允許在程式中加上標記，標示像Goto等直接跳躍指令的終點。不過這類指令若應用不當，很容易使得程式變得複雜而難以理解，即所謂的[[麵條式代碼|麵條式代碼]]。

現代的高階語言提供許多結構化控制流程的指令，可以取代標記及直接跳躍指令。所以許多程式語言已不支援標記，或者只在極少數的場合下使用（如C#中的case）。

另一種可以取代標記及直接跳躍指令的是[[異常處理|異常處理]]，一般會使用try和catch的指令。

== 參照 ==
* [[行號_(程式語言)|行號 (程式語言)]]
* {{le|Switch指令|Switch statement}}

== 參考資料 ==
{{reflist}}

[[Category:源代码|Category:源代码]]
[[Category:控制流程|Category:控制流程]]