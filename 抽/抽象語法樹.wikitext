{{unreferenced|time=2011-09-17T03:28:58+00:00}}
[[File:Abstract_syntax_tree_for_Euclidean_algorithm.svg|thumb]]編程碼的抽象語法樹:<br/>{{mono|1=
<dl>
<dd>'''while''' b ≠ 0<dl>
<dd>'''if''' a > b<dl>
<dd>a := a − b</dd></dl></dd>
<dd>'''else'''<dl>
<dd>b := b − a</dd></dl></dd></dl></dd>
<dd>'''return''' a</dd>
</dl>}}
]]
在[[计算机科学|计算机科学]]中，'''抽象语法树'''（'''A'''bstract '''S'''yntax '''T'''ree，AST），或简称'''语法树'''（Syntax tree），是[[源代码|源代码]][[语法学|语法]]结构的一种抽象表示。它以[[树_(图论)|树状]]的形式表现[[编程语言|编程语言]]的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似于 <code>if-condition-then</code> 这样的条件跳转语句，可以使用带有三个分支的节点来表示。

和抽象语法树相对的是具体语法树（通常称作[[分析树|分析树]]）。一般的，在源代码的翻译和[[编译|编译]]过程中，[[語法分析器|語法分析器]]创建出分析树，然后从分析树生成AST。一旦AST被创建出来，在后续的处理过程中，比如[[语义分析|语义分析]]阶段，会添加一些信息。
{{Authority control}}
[[Category:树结构|Category:树结构]]
[[Category:形式语言|Category:形式语言]]