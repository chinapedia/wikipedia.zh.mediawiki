{{NoteTA
|G1 = IT
|1 = zh-cn:克隆; zh-tw:複製;
}}
'''代码重复'''（英文：'''duplicate code'''，也叫'''代码克隆'''）在[[程序设计|程序设计]]中表示一段[[源代码|源代码]]在一个程序，或者一个团体所维护的不同程序中重复出现，是[[一次且仅一次|不希望]]出现的[[代码异味|现象]]。为避免巧合，只有一定数量的代码完全相同才能判定为代码重复。重複代碼的段落有時被稱為代碼克隆，自动检测代码重复的过程叫做'''克隆检测'''。
<!--疑似OR 代码重复有以下几类：
* 字字相同
* 字字相同（[[空格|空格]]和[[注释|注释]]除外）
* 词词相同
* 词词相同（除了有个别增删、调整）
* 功能相同-->

== 产生 ==
产生代码重复可能有以下几个原因：

* 因为某段代码能用就复制粘贴过来。多数情况下代码会有少许不同，如[[变量|变量]]名称改变或代码增删。
* 因为要实现与已有功能类似的功能，开发者独立写出与别处相似的代码。研究表明独立撰写的代码在[[语法|语法]]上不一定相似。<ref>[https://www.cqse.eu/publications/2010-code-similarities-beyond-copy-paste.pdf Code similarities beyond copy & paste] {{Wayback|url=https://www.cqse.eu/publications/2010-code-similarities-beyond-copy-paste.pdf |date=20190122195617 }} by Elmar Juergens, Florian Deissenboeck, Benjamin Hummel.</ref>
* [[抄袭|抄袭]]，即不经允许复制代码，且未列出版权归属。
* 代码系自动生成。这时可能需要重复代码以提高性能或方便开发。注：这里代码重复是指代码生成器自动生成的代码，而非生成器本身的代码。

== 成本與效益 ==
不恰当的代码重复表明程序设计不良，例如缺少[[抽象化_(计算机科学)|抽象]]。这会导致程序过长，[[程序错误|错误]]更多，进而难以维护，因为需要人工寻找并修改重复的部分。<ref>{{cite web|url=http://www.informit.com/articles/article.aspx?p=457502&seqNum=5|title=The Bad Code Spotter's Guide|publisher=InformIT.com|accessdate=2008-06-06|first=Diomidis|last=Spinellis|archive-url=https://web.archive.org/web/20121018012312/http://www.informit.com/articles/article.aspx?p=457502&seqNum=5|archive-date=2012-10-18|dead-url=yes}}</ref>然而由于种种原因，适当的代码重复难以避免，例如给与已有设备相似的新设备写[[驱动程序|驱动程序]]时，复制代码能使开发更便捷。<ref>Kapser, C.; Godfrey, M.W., [http://plg2.cs.uwaterloo.ca/~migod/papers/2006/wcre06-clonePatterns.pdf ""Cloning Considered Harmful" Considered Harmful] {{Wayback|url=http://plg2.cs.uwaterloo.ca/~migod/papers/2006/wcre06-clonePatterns.pdf |date=20160304043908 }}," 13th Working Conference on Reverse Engineering (WCRE), pp. 19-28, Oct. 2006</ref>

當複製具有軟件漏洞的代碼時，如果開發人員不知道這樣的副本，則複製的代碼中可能會繼續存在漏洞。[[代码重构|代码重构]]可以改善許多軟件的度量衡標準，例如源代碼行數，[[循環複雜度|循環複雜度]]和[[耦合性_(計算機科學)|耦合度]]。這可能會縮短編譯時間，降低認知負載，減少人為錯誤，減少被遺忘或被忽視的代碼。

但並不是所有的代碼重複都可以被重構。如果編程語言提供不充分或過於複雜的抽象，克隆或許是具有速度效益上的解決方式，特別是修改代碼使用的編輯器如有支持區塊(行)編輯的功能。而且，重構時破壞代碼的風險可能會超過維護的效益。重複的代碼似乎不會比不重複的代碼更容易出錯。使用[[开源软件|開源]]方式共享代碼組件，而不是在[[软件配置管理|软件配置管理]]的倉儲庫之間複製它們，也可以減少複製。

== 检测 ==
检测代码重复的手段有：

* Baker算法<ref>Brenda S. Baker. ''A Program for Identifying Duplicated Code.'' Computing Science and Statistics,24:49–57, 1992.</ref>
* {{link-en|Rabin–Karp字符串搜索算法|Rabin–Karp string search algorithm.}}
* 利用[[抽象语法树|抽象语法树]]<ref>Ira D. Baxter, et al. [http://www.semanticdesigns.com/Company/Publications/ICSM98.pdf Clone Detection Using Abstract Syntax Trees] {{Wayback|url=http://www.semanticdesigns.com/Company/Publications/ICSM98.pdf |date=20170810065949 }}</ref>
* 可视化检测器<ref>[http://www.iam.unibe.ch/~scg/Archive/Papers/Rieg98aEcoopWorkshop.pdf Visual Detection of Duplicated Code] {{Wayback|url=http://www.iam.unibe.ch/~scg/Archive/Papers/Rieg98aEcoopWorkshop.pdf |date=20060629083352 }} by Matthias Rieger, Stephane Ducasse.</ref>
* 矩阵计数检测<ref>Yuan, Y. and Guo, Y.  ''CMCD: Count Matrix Based Code
Clone Detection,'' in 2011 18th Asia-Pacific Software Engineering Conference. IEEE, Dec. 2011, pp. 250–257.</ref><ref>Chen, X., Wang, A. Y., & Tempero, E. D. (2014). [http://www.qualitascorpus.com/pubs/ChenWangTemperoClones.pdf A Replication and Reproduction of Code Clone Detection Studies] {{Wayback|url=http://www.qualitascorpus.com/pubs/ChenWangTemperoClones.pdf |date=20171215012454 }}. In ACSC (pp. 105-114).</ref>

== 例子 ==
以计算[[整数|整数]][[数组|数组]]的[[平均值|平均值]]的代码[[片段|片段]]为例

<syntaxhighlight lang="c">
extern int array1[];
extern int array2[];
 
int sum1 = 0;
int sum2 = 0;
int average1 = 0;
int average2 = 0;
 
for (int i = 0; i < 4; i++)
{
   sum1 += array1[i];
}
average1 = sum1/4;
 
for (int i = 0; i < 4; i++)
{
   sum2 += array2[i];
}
average2 = sum2/4;
</syntaxhighlight>

这两个循环可以改写为一个函数：
<syntaxhighlight lang="c">
int calcAverage (int* Array_of_4)
{
   int sum = 0;
   for (int i = 0; i < 4; i++)
   {
       sum += Array_of_4[i];
   }
   return sum/4;
}
</syntaxhighlight>
利用以上函数可以写出无重复的源代码
<syntaxhighlight lang="c">
extern int array1[];
extern int array2[];

int average1 = calcAverage(array1);
int average2 = calcAverage(array2);

</syntaxhighlight>

[[File:Duplicate_code.gif|thumbnail]]

== 参见 ==
* [[代码异味|代码异味]]
* [[一次且仅一次|一次且仅一次]]
* [[抽象化_(计算机科学)|抽象化 (计算机科学)]]

== 參考資料 ==
{{reflist}}

[[分類:計算機編程|分類:計算機編程]]