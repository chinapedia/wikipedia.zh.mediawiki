{{copyedit|time=2017-03-20T02:52:41+00:00}}
{{NoteTA
|G1 = IT
|1 = 编程=>zh-tw:程式設計; 编程=>zh-hk:程式設計; 编程=>zh-mo:程式設計
}}
'''代码重构'''（{{lang-en|code refactoring}}）指对[[软件|软件]]代码做任何更动以增加可读性或者简化结构而不影响输出结果。

软件重构需要借助工具完成，重构工具能够修改代码同时修改所有引用该代码的地方。在[[极限编程|极限编程]]的方法学中，重构需要[[单元测试|单元测试]]来支持。

== 重构代码 ==
[[File:Refactor_Rename_Variable.PNG|thumb]]
[[File:Refactor_Extract_Method.PNG|thumb]]

在[[软件工程学|软件工程学]]裡，'''重构'''[[代码|代码]]一词通常是指在不改变代码的外部行为情况下而修改[[源代码|源代码]]，有时非正式地称为「清理乾淨」。在[[极限编程|极限编程]]或其他[[敏捷软件开发|敏捷方法学]]中，重构常常是[[项目生命周期|软件开发循环]]的一部分：开发者轮流增加新的测试和功能，并重构代码来增进内部的清晰性和一致性。自动化的[[单元测试|单元测试]]保证了重构不至于让代码停止工作。

重构既不修正错误，又不增加新的[[功能性|功能性]]。反而它是用于提高代码的[[程式可讀性|可读性]]或者改变代码内部[[结构|结构]]与[[设计|设计]]，并且[[刪除死碼|刪除死碼]]，使其在将来更容易被维护。重构代码可以是结构层面抑或是语意层面，不同的重构手段施行时，可能是结构的调整或是语意的转换，但前提是不影响代码在转换前后的行为。特别是，在现有的程序的结构下，给一个程序增加一个新的行为可能会非常困难，因此开发人员可能先重构这部分代码，使加入新的行为变得容易。

一个重构的小范例是修改一个变量的名称使其具有更明确的含义，例如从单个字母的「i」重构为「interestRate」（利率，图一）。较复杂的重构是把一段if区块中的代码变为一个[[子程序|子程序]]（图二）。更复杂一点的重构是用[[多型_(物件導向)|多态性]]来替换<code>if</code> 条件式。進一步還可重新設計運作的演算法。「清理」代码已经发生了几十年，重构中最关键的认知是有意地「清理」代码，透过从已知的纪录里一些常用的重构方法清理代码，把它从增加新功能分开，然后个别的对代码进行测试（任何的行为改变都可能带来错误）。新的实现切合实际需要以改善现有设计，并且不改变原软件的意图或行为。

重构面对业界调适接受方面的挑战。首先，对重构长远的影响需要更深入研究追踪。再者，重构存于[[资料库轮廓|资料库轮廓]]（database schema）的[[商业逻辑层|商业逻辑层]]几乎是不可能或者非常困难的。最后，对[[介面_(程式設計)|介面]]造成影响的重构可能造成程式開發上的困境，除非程式员有对所有使用者介面的存取權。例如，程序员若改变某實體中的[[方法_(電腦科學)|方法]]名称，他或她不然要对整个专案里头所有连结到旧名的参考都加以编辑，不然就只能继续维护使用旧名的残株残瓦介面。而该旧名的介面于内部呼叫该方法的新名。

== 源流 ==

重构这个术语是从[[数字|数字]]与[[多项式|多项式]]的[[因式分解|因式分解]]类比而来<ref>英文重构（refactor）为“重新”（re-）与“（因式）分解”（factor）两单词的结合</ref>。如，''x''<sup>2</sup> − 1可以被分解为(''x'' + 1)(''x'' − 1)，这样揭示了前面的形式不可见的内部结构（如两个根+1和−1）。同样，在软件重构中，在可见结构上的改变通常会揭示原代码中「隐藏」的内部结构。

上面数学的例子展示了「重构」的问题。一个表示式不尽然客观地或者处处比另一个更好。它们每个强调不同的方程式的观点，故其实用便多多少少随着个别不同使用情况，以及各个数学家个性与风格变动。这个问题于软件开发领域亦然；个别程式员可能对某既定演算法理想的程式形式实现会有不同的意见。

为了简化测试，重构是分步骤完成的。当重构结束后，任何行为上的变化无疑都是[[程序错误|错误]]并可透过除错该程式的新行为个别修正。

[[马丁·福勒|马丁·福勒]]的著作《重构》是一个经典参考书。虽然重构已经非正式的使用了很多年了，{{link-en|威廉·歐普迪克|William Opdyke}}在1993年的博士论文<ref name="etymology">{{Cite web |url=http://martinfowler.com/bliki/EtymologyOfRefactoring.html |title=存档副本 |accessdate=2007-11-10 |archive-date=2018-09-20 |archive-url=https://web.archive.org/web/20180920162016/https://martinfowler.com/bliki/EtymologyOfRefactoring.html |dead-url=no }}</ref>却是第一篇著名的关于的重构的文章，即使所有的理论与机制长久以来就以[[程式转换系统|程式转换系统]]存在。所有这些资源提供了一种常用重构方法的型录索引──所有重构方法需要描述，包括怎样辨识你需要（或者不需要）套用该方法，以及如何套用的问题。

== 重构方法简单列表 ==
下面是不完整的代码重构清单。长一点的清单可以在福勒的重构书找到。因为研究者们继续努力不懈的发明以及实现重构，完整清单可能永远都不存在。

* {{le|成员变数封装|Field encapsulation|封装成员变量}}（Encapsulate Field）—将仅限于本-{zh-cn:类; zh-tw:類別;}-使用的变量重写成私有（private）成员变量，并提供访问方法（accessor method）。这种重构方式可以将与外部调用者无关的变量隐藏起来，减少代码的[[耦合性_(計算機科學)|耦合性]]，并减少意外出错的概率。
* 提取方法（Extract Method）—意思是将大段代码中的一部分提取后，构成一个新方法。这种重构可以使整段程序的结构变得更清晰，从而增加可读性。这也对[[函式|函数]]（Function）通用。
* {{le|一般化类|Type generalization|类一般化}}（Generalize Type）—将多个-{zh-cn:类; zh-tw:類別;}-/函数共用的类型抽象出可以公用的基类（base class），然后利用多态性追加每个-{zh-cn:类; zh-tw:類別;}-/函数需要的特殊函数。这种重构可以让结构更加清晰，同时可以增加代码的可维护性。
* 函数归父（Pull Up）—或译'''函数上移'''，指的是方法从子类移动到父类。
* 函数归子（Push Down）—或译'''函数下移'''，指的是方法从父类移动到子类。
* {{le|方法更名|Rename_method}}（Rename Method）—将方法名称以更好的表达它的用途。

{| class="wikitable"
|-
! width=8%|重构方法 !! width=46%|重构前 !! width=46%|重构后
|-
| 封装成员变量 
| <syntaxhighlight lang=java> 
class SomeClass {
public int memberA;
...
}</syntaxhighlight> 
| <syntaxhighlight lang=java>
class SomeClass { 
private int memberA; 
public int getMemberA();
public void setMemberA(int a);
...
}</syntaxhighlight>
|-
| 方法提取 || <syntaxhighlight lang=java>
void Process(MyDataSet mds) 
{   
　// Step 1 ... 
　int result = 0;  
　if (mds.isReady) 
　{  
　　int data1 = mds.param[0]; 
　　int data2 = mds.param[1];  
　　// Preprocess... 
　　result = data1 % data2;  
　} 
　// Step 2... 
} </syntaxhighlight>
| <syntaxhighlight lang=java>void Process(MyDataSet mds)
{  
　// Step 1 ... 
　int result = 0;  
　if (mds.isReady) 
　　result = CalculateMDS(mds.param[0], mds.param[1]);  
　// Step 2 ... 
}      

int CalculateMDS(int data1, int data2)  
{ 
　　// Preprocess...  
　　return data1 % data2; 
}</syntaxhighlight>
|-
| 一般化类型 
| <syntaxhighlight lang=java>
class Rectangle {
  private:
  int w, h;
  public:
  double Area(){
    return w*h;
  }
}
class Triangle {
  private:
  int w, h;
  public:
  double Area(){
    return w*h/2;
  }
} </syntaxhighlight>
| <syntaxhighlight lang=java>
class Polygon {
  private:
  int w, h;
  public:
  virtual double Area() = 0;
}
class Rectangle : public Polygon {
  double Area(){
  return w*h;
  }
}
class Triangle : public Polygon {
  double Area() {
    return w*h/2;
  }
}</syntaxhighlight>
|-
| 方法更名 || <syntaxhighlight lang=java>public double f(double m, double a); </syntaxhighlight>|| <syntaxhighlight lang=java>public double calculateForce(double mass, double acceleration);</syntaxhighlight>
|}

== 代码重构自动化 ==

许多软件编辑器与整合环境支援重构自动化，又称为[[重构浏览器|重构浏览器]]。枚举如下：

* [[IntelliJ_IDEA|IntelliJ IDEA]]（[[Java|Java]]专用）
* [[Eclipse|Eclipse]]给[[Java|Java]]用的开发包（JDK）
* [[NetBeans|NetBeans]]（Java专用）
* [[Microsoft_Visual_Studio|Visual Studio 2005]]（.NET专用）
* CodeGear Delphi
* [http://bicyclerepair.sourceforge.net Bicycle Repair Man] {{Wayback|url=http://bicyclerepair.sourceforge.net/ |date=20110907091525 }}（[[Python|Python]]专用，可与[[emacs|emacs]]与[[vi|vi]]共用）
* [https://web.archive.org/web/20071030032803/http://www.refactory.com/RefactoringBrowser/ Refactoring Browser]，[[Smalltalk|Smalltalk]]专用

== 辞源 ==

首先使用「重构」一辞于出版文献是于一篇文章：《Refactoring: An Aid in Designing Application Frameworks and Evolving Object-Oriented Systems'', ''Proceedings of the Symposium on Object Oriented Programming Emphasizing Practical Applications (SOOPPA)》，1990年9月，由William F. Opdyke与Ralph E. Johnson联名出版<ref>{{cite web |url=http://www.cs.ucd.ie/staff/meloc/home/papers/thesis/Chapter2.pdf |title=存档副本 |accessdate=2007-11-10 |deadurl=yes |archiveurl=https://web.archive.org/web/20070418015048/http://www.cs.ucd.ie/staff/meloc/home/papers/thesis/Chapter2.pdf |archivedate=2007-04-18 }}</ref>。William Opdyke的博士论文于「重构：物件导向框架」，伊利诺大学，1992年出版<ref name="etymology" />。「重构」术语几乎至其后确定。

就英文[[新造字学|新造字学]]来说，代码重构（Refactoring）清楚地来自数学上的[[整数分解|分解]]（factoring）。

== 注释 ==
{{NoteFoot}}

== 参考文献 ==
=== 引用 ===
{{Reflist|30em}}

=== 來源 ===
{{refbegin}}
; 书籍
* 马丁·福勒：《重构：改进现有代码的设计》，Addison-Wesley Professional 1999, ISBN 978-0-201-48567-7
* William C. Wake：《重构练习册》，Addison-Wesley, ISBN 978-0-321-10929-3
* Joshua Kerievesky：《重构到模式》，Addison-Wesley, ISBN 978-0-321-21335-8
{{refend}}

== 外部链接 ==
* {{en}}[http://c2.com/cgi/wiki?WhatIsRefactoring 什么是重构?] {{Wayback|url=http://c2.com/cgi/wiki?WhatIsRefactoring |date=20110623133907 }}（c2.com文献）
* {{en}}[http://www.refactoring.com/ Martin Fowler的关于重构的主页] {{Wayback|url=http://www.refactoring.com/ |date=20201112003553 }}
* {{en}}[ftp://st.cs.uiuc.edu/pub/papers/refactoring/opdyke-thesis.ps.Z William F. Opdyke在1993年发表的博士论文]{{dead link|date=2017年11月 |bot=InternetArchiveBot |fix-attempted=yes }}
* {{en}}[https://web.archive.org/web/20041011162823/http://www.theserverside.com/articles/article.tss?l=AspectOrientedRefactoringPart1 面向方面的重构]，[[Ramnivas_Laddad|Ramnivas Laddad]]著
* {{en}}[http://csdl.computer.org/comp/trans/ts/2004/02/e2toc.htm 软件重构的纵览] {{Wayback|url=http://csdl.computer.org/comp/trans/ts/2004/02/e2toc.htm |date=20181216073756 }}，[[Tom_Mens|Tom Mens]]和[[Tom_Tourwé|Tom Tourwé]]著
* {{en}}[http://mindprod.com/unmain.html 如何编写难以维护的代码] {{Wayback|url=http://mindprod.com/unmain.html |date=20201027034322 }}，[[Roedy_Green|Roedy Green]]著
* {{en}}[https://web.archive.org/web/20041103090514/http://www.refactoring.com/tools.html 重构工具]
* {{en}}[http://www.refactoring.com/catalog/index.html 重构] {{Wayback|url=http://www.refactoring.com/catalog/index.html |date=20201109031704 }} - alphabetical list
* {{en}}[http://industriallogic.com/xp/refactoring/catalog.html 重构为模式的目录] {{Wayback|url=http://industriallogic.com/xp/refactoring/catalog.html |date=20201109025840 }}
* {{en}}[http://www.methodsandtools.com/archive/archive.php?id=4 重构Java代码] {{Wayback|url=http://www.methodsandtools.com/archive/archive.php?id=4 |date=20201109015916 }}
* {{en}}[http://www.localpin.com/info/en/computers/programming/methodologies/refactoring/index.htm 通用重构连结] {{Wayback|url=http://www.localpin.com/info/en/computers/programming/methodologies/refactoring/index.htm |date=20160324171754 }}
* {{en}}[https://web.archive.org/web/20071014045402/http://the-software-experts.de/e_dta-sw-refact.htm 微控制器软件的重构]
* {{en}}[http://www.waterfall2006.com/gorman.html Refuctoring] {{Wayback|url=http://www.waterfall2006.com/gorman.html |date=20200213162939 }}—重构的反面（来自Waterfall2006会议的嘲讽）
* {{en}}[https://web.archive.org/web/20071014020221/http://softdevarticles.com/modules/weblinks/viewcat.php?cid=70 重构文献]
* {{en}}[http://scriptionary.com/beta/kb-knowledge-base/got-a-minute-refactor-your-code 重构相关短文] {{Wayback|url=http://scriptionary.com/beta/kb-knowledge-base/got-a-minute-refactor-your-code |date=20200716190107 }}

== 参见 ==
{{Portal|计算机程序设计|软件|工程}}
* [[代码评审|代码评审]]
* [[同行评审|同行评审]]
* [[软件设计模式|软件设计模式]]
* [[关注点分离|关注点分离]]
* [[测试驱动开发|测试驱动开发]]
* [[軟體智能|軟體智能]]
[[Category:软件工程|Category:软件工程]]
[[Category:计算机编程|Category:计算机编程]]
[[Category:极限编程|Category:极限编程]]