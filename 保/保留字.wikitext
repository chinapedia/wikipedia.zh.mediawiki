{{NoteTA
|G1 = IT
|1 = zh-cn:里; zh-tw:裡; zh-hk:裏;
}}
'''保留字'''（{{lang-en|'''Reserved word'''}}），有时也叫'''关键字'''（{{lang|en|'''keyword'''}}）<ref>{{cite web
|quote= The following character sequences, formed from ASCII letters, are reserved for use as keywords and cannot be used as identifiers[...]
|title= The Java Language Specification, 3rd Edition, Section 3.9: Keywords
|url= http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.9
|publisher= [[Sun_Microsystems|Sun Microsystems]]
|year= 2000
|accessdate= 2009-06-17
|archive-date= 2012-02-13
|archive-url= https://web.archive.org/web/20120213060739/http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.9
|dead-url= no
}}</ref><ref>{{cite web
|quote=The above tokens (case sensitive) are reserved (in translation phases 7 and 8) for use as keywords, and shall not be used otherwise.
|url=http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf
|title=ISO/IEC 9899:TC3, Section 6.4.1: Keywords
|publisher=[[International_Organization_for_Standardization|International Organization for Standardization]] JTC1/SC22/WG14
|date=2007-09-07
|accessdate=2011-09-28
|archive-date=2018-01-11
|archive-url=https://web.archive.org/web/20180111210637/http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf
|dead-url=no
}}</ref>，是[[编程语言|编程语言]]中的一类语法结构。在特定的编程语言里，这些保留字具有较为特殊的意义，并且在语言的格式说明里被预先定义。通常，保留字包括用来支持[[类型系统|类型系统]]的原始数据类型的[[標記_(程式語言)|标记]]，并可以用来识别诸如循环结构、语句块、条件、分支等程序结构。

保留字在编程语言设计之时就被定义。有时，语言说明具有一定的灵活性，软件商可能会在其生产的[[编译器|编译器]]中添加非标准的语言特性。同样，当发展得更加成熟时，编程语言的保留字标准可能会扩展一些额外的特性，例如，在传统的编程语言中增加[[面向对象程序设计|面向对象程序设计]]的特性。有时，编程语言说明会包含一些将来版本可能需要用到的保留字。在[[Java|Java]]中，<code>const</code>和<code>goto</code>就是两个保留字——它们在Java中目前没有被使用，因此不具有意义，但是不能够被用作标识符。<ref>{{cite web|url=http://download.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html|title=Java Language Keywords|publisher=Oracle|accessdate=2011-09-28|archive-date=2011-11-20|archive-url=https://web.archive.org/web/20111120230910/http://download.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html|dead-url=no}}</ref>通过“保留”这个术语，它们可以在Java的未来版本中补充，而不需要“破坏”旧的Java源代码。不像预定义函数、方法和子程序，保留字不能被程序员定义，而前面那些的名称通常被归类于标识符，而不是保留字。

== 语言间的比较 ==
不是所有的编程语言都有相同数量的保留字。例如，Java（以及其他[[C语言|C语言]]<ref>{{cite web|url=http://cs.smu.ca/~porter/csc/ref/cpp_keywords.html|title=C++ Reference Material Keywords|publisher=Saint Mary's University|accessdate=2011-09-28|archive-date=2020-02-15|archive-url=https://web.archive.org/web/20200215111745/http://cs.smu.ca/~porter/csc/ref/cpp_keywords.html|dead-url=no}}</ref>派生的语言），具有相对较少的保留字，大约有50个。而[[COBOL|COBOL]]则具有大约400个保留字。相反的极端则是[[Prolog|Prolog]]，根本就没有保留字。

一个语言具有的保留字数量与其功能“强大”程度没有必然联系。COBOL在20世纪50年代被设计成一种商业语言，它是一种自存档（{{lang|en|self-documenting}}）、使用类似[[英语|英语]]结构的元素（例如动词、子句、语句等）。而相反地，C语言被设计成一种在句法上较为简练的编程语言。例如，比较下列来自C语言和COBOL的两段计算单周收入的等价语句块：

<syntaxhighlight lang="c">
// 使用C语言计算：

if (salaried)
        amount = 40 * payrate;
else
        amount = hours * payrate;
</syntaxhighlight>

<syntaxhighlight lang="fortran">

* 使用COBOL计算：

IF Salaried THEN
        MULTIPLY Payrate BY 40 GIVING Amount
ELSE
        MULTIPLY Payrate BY Hours GIVING Amount
END-IF.
</syntaxhighlight>

<syntaxhighlight lang="fortran">

* 另一个使用COBOL计算的例子：

IF Salaried 
        COMPUTE Amount = Payrate * 40
ELSE
        COMPUTE Amount = hours * payrate
END-IF.

</syntaxhighlight>

上述例子中彩色的部分即是它们各自的保留字。

纯的Prolog语言使用关系式来表达，并通过询问这些关系触发处理方法。诸如循环的结构通过使用循环、递归的关系来实现。

虽然以上三個例子具有不同的保留字，但是它们都能胜任解决上述问题。程序的功能取决于它们对一系列[[图灵完全|图灵]]语言的归属。

== 一些跨语言的保留字 ==
微软[[.NET框架|.NET框架]]下的[[通用语言架构|通用语言架构]]允许程序源代码以超过40种不同的编程语言混合编译，并生成一个解决方案。鉴于此，标识符、保留字的冲突可能会在一种语言写成的源代码试图处理另一种语言的源代码的过程中发生。例如，一个[[Visual_Basic_.NET|Visual Basic .NET]]库可能会包含这样一个类：

<syntaxhighlight lang="vbnet">
' Class Definition of This in Visual Basic.NET:

Public Class this
        ' This class does something...
End Class
</syntaxhighlight>

假设这一段源代码被编译，并被作为一个工具箱的一部分，那么一个[[C_Sharp|C#]]<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/x53a06bb.aspx|title=C# Keywords|publisher=MSDN|accessdate=2011-09-28|archive-date=2017-01-28|archive-url=https://web.archive.org/web/20170128224237/https://msdn.microsoft.com/en-us/library/x53a06bb.aspx|dead-url=no}}</ref>程序员在同一程序中定义<code>this</code>类的变量就会遇到问题，因为<code>this</code>是C#中的一个保留字，因此，下列的源代码将不能成功编译：

<syntaxhighlight lang="csharp">
// Using This Class in C#:

this x = new this();  // Won't compile!
</syntaxhighlight>

类似的问题在访问成员、覆盖虚方法以及识别[[命名空间|命名空间]]的情况中出现。

为了解决这个问题，语言说明允许C#程序员在保留字前面加上符号“[[@|@]]”，从而强制编译器将后面的保留字看成一般的标识符，而非保留字。<ref>{{cite web|url=http://en.csharp-online.net/CSharp_FAQ:_What_does_at_sign_identifier_mean|title=C# FAQ: What does at sign identifier mean|publisher=C# Online.NET|accessdate=2011-09-28|archive-date=2020-07-02|archive-url=https://web.archive.org/web/20200702225109/http://en.csharp-online.net/CSharp_FAQ:_What_does_at_sign_identifier_mean|dead-url=no}}</ref>例如：

<syntaxhighlight lang="csharp">
// Using This Class in C#:

@this x = new @this();  // Will compile! 
</syntaxhighlight>

相反地，也可在 VB 中使用 [] 括起来以达到相似的目的：

<syntaxhighlight lang="csharp">
//C#:
public class Me{
...
}
</syntaxhighlight>
<syntaxhighlight lang="vbnet">
//VB:
Dim myMe As New [Me]()
</syntaxhighlight>

为了保持连贯性，这样的用法也可以在非公有情况下使用，例如声明[[局部变量|局部变量]]、参数名称以及私有成员。

另一例子是 SQL 中也可用 [] 括起数据库对象名（表、列等），而被括的不仅限于 SQL 保留字 / 关键字：

<syntaxhighlight lang="sql">
select [1st col] from [select]
</syntaxhighlight>
这将选出名为“select”表中“1st col”列的数据。

== 参考文献 ==
{{reflist}}

[[Category:程序架构|R]]