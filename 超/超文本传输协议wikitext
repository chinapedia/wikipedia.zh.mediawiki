{{noteTA
|G1=IT
|T=zh-cn:超文本传输协议; zh-tw:超文本傳輸協定
|1=zh-cn:超文本传输协议; zh-tw:超文本傳輸協定
|2=zh-cn:超文本传输安全协议; zh-tw:超文本傳輸安全協定
|3=zh-cn:蒂姆·伯纳斯-李; zh-tw:提姆·柏內茲-李;zh-hk:添·柏納斯-李;zh-hant:蒂姆·伯納斯-李;
|4=zh-cn:蒂莫西; zh-tw:提摩西; zh-hk:添莫菲;zh-hant:蒂莫西;
|5=zh-cn:蒂姆;zh-tw:提姆;zh-hk:添;zh-hant:蒂姆;
|6=zh-cn:伯纳斯; zh-tw:柏內茲;zh-hant:伯納斯;zh-hk:柏納斯;
|7=zh:默认;zh-tw:預設;zh-cn:默认;zh-hant:預設;zh-hans:默认;
|8=zh:内嵌;zh-tw:內建;zh-cn:内嵌;zh-hant:內建;zh-hans:内嵌;
|9=zh:支持;zh-tw:支援;zh-cn:支持;zh-hant:支援;zh-hans:支持;
|10=zh:信息;zh-tw:訊息;zh-cn:信息;zh-hant:訊息;zh-hans:信息;
|11=zh-cn:通过; zh-tw:透過;
|12=zh-cn:握手; zh-tw:交握;
|13=zh-cn:实现; zh-tw:實作;
|14=zh-cn:地址栏;zh-tw:網址列;
|15=zh-cn:数据包;zh-hk:數據封包;zh-tw:資料封包;
|16=zh-cn:分布式; zh-tw:分佈式;zh-hant:分佈式;zh-hk:分佈式;
|17=zh-cn:电子前哨基金会;zh-hk:電子前哨基金會;zh-tw:電子前線基金會;
|18=zh-cn:持久连接;zh-tw:持續连線;
|19=zh-cn:TCP连接;zh-tw:TCP連線;
}}
{{网络协议}}
{{HTTP}}
'''超文本傳輸協定'''（{{Lang-en|'''H'''yper'''T'''ext '''T'''ransfer '''P'''rotocol}}，縮寫：'''HTTP'''）是一種用於分佈式、協作式和[[超媒體|超媒體]]信息系統的[[应用层|應用層]][[网络传输协议|協議]]<ref name="ietf2616">{{cite IETF
 | rfc = 2616
 | title = Hypertext Transfer Protocol – HTTP/1.1
 | first1 = Roy T. | last1 = Fielding | first2 = James | last2 = Gettys | first3 = Jeffrey C. | last3 = Mogul
 | first4 = Henrik Frystyk | last4 = Nielsen | first5 = Larry | last5 = Masinter | first6 = Paul J. | last6 = Leach
 | first7 = Tim | last7 = Berners-Lee
 | publisher = [[Internet_Engineering_Task_Force|IETF]]
 | year = 1999
 | month = June
 | ref = ietf
}}</ref>。HTTP是[[全球資訊網|全球資訊網]]的數據通信的基礎。

设计HTTP最初的目的是为了提供一种发布和接收[[HTML|HTML]]页面的方法。通过HTTP或者[[HTTPS|HTTPS]]协议请求的资源由[[统一资源标志符|统一资源标识符]]（Uniform Resource Identifiers，URI）来标识。

HTTP的发展是由[[提姆·柏內茲-李|提姆·柏內茲-李]]於1989年在[[歐洲核子研究組織|歐洲核子研究組織]]（CERN）所發起。HTTP的標準制定由[[万维网联盟|万维网协会]]（World Wide Web Consortium，W3C）和[[互联网工程任务组|互联网工程任务组]]（Internet Engineering Task Force，IETF）進行協調，最终发布了一系列的[[RFC|RFC]]，其中最著名的是1999年6月公佈的 RFC 2616，定義了HTTP協議中現今廣泛使用的一個版本——HTTP 1.1。

2014年12月，[[互联网工程任务组|互联网工程任务组]]（IETF）的Hypertext Transfer Protocol Bis（httpbis）工作小组将[[HTTP/2|HTTP/2]]标准提议递交至{{Link-en|IESG|Internet Engineering Steering Group}}进行讨论<ref>{{cite web|url=http://msopentech.com/blog/2014/08/06/wait-for-it-http2-begins-working-group-last-call/|title=Wait for it – HTTP/2 begins Working Group Last Call!|author=Raymor, Brian|publisher=Microsoft Open Technologies|date=2014-08-07|accessdate=2014-09-08|archive-date=2014-10-06|archive-url=https://web.archive.org/web/20141006091749/http://msopentech.com/blog/2014/08/06/wait-for-it-http2-begins-working-group-last-call/|dead-url=yes}}</ref>，于2015年2月17日被批准。<ref name="approval2">{{cite web|url=http://www.ietf.org/blog/2015/02/http2-approved/|title=HTTP/2 Approved|author=Mark Nottingham|publisher=[[Internet_Engineering_Task_Force|Internet Engineering Task Force]]|website=www.ietf.org|date=2015-02-18}}</ref> HTTP/2标准于2015年5月以RFC 7540正式发表，取代HTTP 1.1成为HTTP的实现标准。<ref name="rfc7540">{{cite web|url=https://tools.ietf.org/html/rfc7540|title=RFC 7540 - Hypertext Transfer Protocol Version 2 (HTTP/2)|publisher=IETF|date=May 2015|accessdate=14 May 2015}}</ref>

== 协议概述 ==
[[File:Internet1.svg|缩略图]]
HTTP是一个客户端（用户）和服务端（网站）之间请求和应答的标准，通常使用[[传输控制协议|TCP协议]]。通过使用[[網頁浏览器|網頁浏览器]]、[[网络爬虫|网络爬虫]]或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认[[通訊埠|端口]]为80）。我们称这个客户端为用户代理程式（user agent）。应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个「中间层」，比如[[代理伺服器|代理伺服器]]、[[网关|网关]]或者[[隧道|隧道]]（tunnel）。

尽管[[TCP/IP|TCP/IP]]协议是互联网上最流行的应用，但是在HTTP协议中并没有规定它必须使用或它支持的层。事实上HTTP可以在任何互联网协议或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用，所以其在TCP/IP协议族使用TCP作为其传输层。

通常，由HTTP客户端发起一个请求，建立一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如"HTTP/1.1 200 OK"，以及返回的内容，如请求的文件、错误消息、或者其它信息。

== 请求方法 ==
HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：
;GET:向指定的资源发出「顯示」请求。使用GET方法應該只用在讀取資料，而不应当被用于产生「[[#副作用|副作用]]」的操作中，例如在[[网络应用程序|网络应用程序]]中。其中一个原因是GET可能会被[[網路爬蟲|網路爬蟲]]等随意访问。参见[[#安全方法|安全方法]]。浏览器直接发出的GET只能由一个url触发。GET上要在url之外带一些参数就只能依靠url上附带querystring。

;HEAD:與GET方法一樣，都是向服务器发出指定资源的请求。只不过服务器將不傳回資源的本文部份。它的好處在於，使用这個方法可以在不必传输全部内容的情况下，就可以获取其中「關於該資源的信息」（元信息或稱元資料）。

;POST:向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。這個請求可能会建立新的资源或修改現有资源，或二者皆有。每次提交，表单的数据被浏览器用编码到HTTP请求的body里。浏览器发出的POST请求的body主要有两种格式，一种是application/x-www-form-urlencoded用来传输简单的数据，大概就是"key1=value1&key2=value2"这样的格式。另外一种是传文件，会采用multipart/form-data格式。采用后者是因为application/x-www-form-urlencoded的编码方式对于文件这种二进制的数据非常低效。

;PUT:向指定资源位置上传其最新内容。

;DELETE:请求服务器删除Request-URI所标识的资源。

;TRACE:回显服务器收到的请求，主要用于测试或诊断。

;OPTIONS:這個方法可使服务器傳回該资源所支持的所有HTTP请求方法。用'*'來代替資源名稱，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常運作。

;CONNECT:HTTP/1.1协议中预留给能够将连接改为隧道方式的代理服务器。通常用於SSL加密伺服器的連結（經由非加密的HTTP代理伺服器）。

方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回[[HTTP状态码#405|状态码405]]（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回[[HTTP状态码#501|状态码501]]（Not Implemented）。

'''HTTP服务器至少应该实现GET和HEAD方法'''，其他方法都是可选的。当然，所有的方法支持的实现都应当符合下述的方法各自的语义定义。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。例如：

;PATCH（由 RFC 5789 指定的方法）:用于将局部修改应用到资源。

=== 安全方法 ===
对于GET和HEAD方法而言，除了进行获取资源信息外，这些请求不应当再有其他意义。也就是说，这些方法应当被认为是“安全的”。
客户端可能会使用其他“非安全”方法，例如POST，PUT及DELETE，应该以特殊的方式（通常是按钮而不是[[超链接|超链接]]）告知客户可能的后果（例如一个按钮控制的资金交易），或请求的操作可能是不安全的（例如某个文件将被上传或删除）。

但是，不能想当然地认为服务器在处理某个GET请求时不会产生任何副作用。事实上，很多动态资源会把这作为其特性。这里重要的区别在于用户并没有请求这一副作用，因此不应由用户为这些副作用承担责任。

=== 副作用 ===
{{anchor|幂等方法}}
假如在不考虑诸如错误或者过期等问题的情况下，若干次请求的副作用与单次请求相同或者根本没有副作用，那么这些请求方法就能够被视作“[[冪等|冪等(idempotence)]]”的。GET，HEAD，PUT和DELETE方法都有这样的幂等属性，同样由于根据协议，OPTIONS，TRACE都不应有副作用，因此也理所当然也是幂等的。

假如一个由若干请求组成的请求序列产生的结果，在重复执行这个请求序列或者其中任何一个或多个请求后仍没有发生变化，则这个请求序列便是“幂等”的。但是，可能出现一个由若干请求组成的请求序列是“非幂等”的，即使这个请求序列中所有执行的请求方法都是幂等的。例如，这个请求序列的结果依赖于某个会在下次执行这个序列的过程中被修改的变量。

== 版本 ==
超文本传输协议已经演化出了很多版本，它们中的大部分都是[[向下兼容|向下兼容]]的。在<nowiki/>RFC 2145<nowiki/>中描述了HTTP版本号的用法。客户端在请求的开始告诉服务器它采用的协议版本号，而后者则在响应中采用相同或者更早的协议版本。

=== HTTP/0.9 ===
已过时。只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。由于该版本不支持POST方法，因此客户端无法向服务器传递太多信息。

=== HTTP/1.0 ===
这是第一个在通讯中指定版本号的HTTP协议版本。

=== HTTP/1.1 ===
默认采用持续连接（Connection: keep-alive），能很好地配合代理服务器工作。还支持以[[HTTP管线化|管道方式]]在同时发送多个请求，以便降低线路负载，提高传输速度。

HTTP/1.1相较于HTTP/1.0协议的区别主要体现在：
* 缓存处理
* 带宽优化及网络连接的使用
* 错误通知的管理
* 消息在网络中的发送
* 互联网地址的维护
* 安全性及完整性

=== HTTP/2 ===
{{Main|HTTP/2}}
当前版本，于2015年5月作为互联网标准正式发布。<ref>{{cite web|url=https://tools.ietf.org/html/rfc7540|title=RFC 7540 - Hypertext Transfer Protocol Version 2 (HTTP/2)|publisher=IETF|date=May 2015|accessdate=14 May 2015}}</ref>

== 状态码 ==
{{Main|HTTP状态码}}

所有HTTP响应的第一行都是'''状态行'''，依次是当前HTTP版本号，3位数字组成的[[HTTP状态码|状态代码]]，以及描述状态的短语，彼此由空格分隔。

状态代码的第一个数字代表当前响应的类型：
* [[HTTP状态码#1xx消息|1xx消息]]——请求已被服务器接收，继续处理
* [[HTTP状态码#2xx成功|2xx成功]]——请求已成功被服务器接收、理解、并接受
* [[HTTP状态码#3xx重定向|3xx重定向]]——需要后续操作才能完成这一请求
* [[HTTP状态码#4xx请求错误|4xx请求错误]]——请求含有词法错误或者无法被执行
* [[HTTP状态码#5xx服务器错误|5xx服务器错误]]——服务器在处理某个正确请求时发生错误

虽然 RFC 2616 中已经推荐了描述状态的短语，例如"200 OK"，"[[HTTP_404|404 Not Found]]"，但是WEB开发者仍然能够自行决定采用何种短语，用以显示本地化的状态描述或者自定义信息。

== 持續連線 ==
[[File:HTTP_persistent_connection.svg|縮略圖]]
{{Main|HTTP持久連接}}
在HTTP 0.9和1.0中，[[传输控制协议|TCP連線]]在每一次請求/回應對之後關閉。在HTTP 1.1中，引入了保持連線的機制，一個連接可以重複在多個請求/回應使用。持續連線的方式可以大大減少[[延迟_(工程学)|等待時間]]，因為在發出第一個請求後，雙方不需要重新執行[[握手_(技术)|TCP交握程序]]。

HTTP 1.1還改進了HTTP 1.0的頻寬。 例如，HTTP 1.1引入了[[分块传输编码|分块传输编码]]，以允許傳遞內容可以在持續連線上被串流傳輸而不必使用到[[緩衝器|緩衝器]]。HTTP管道允許客戶端在收到每個回應之前發送多個請求，進一步減少[[使用者經驗|用戶感受到的]]滯後時間。協議的另一個補充是字節服務，允許客戶端請求資源的某一部份，伺服器僅回應某資源的指明部分。

== 协议例子 ==
下面是一个HTTP客户端与服务器之间会话的例子，运行于www.google.com，端口80
=== 请求信息 ===
发出的请求信息（message request）包括以下几个:
* 请求行（例如GET /images/logo.gif HTTP/1.1，表示从/images目录下请求logo.gif这个文件）
* [[HTTP头字段#请求字段|请求头]]（例如Accept-Language: en）
* 空行
* 其他消息体
请求行和标题必须以<CR><LF>作为结尾。空行内必须-{只}-有<CR><LF>而无其他空格。在HTTP/1.1协议中，所有的请求头，除Host外，都是可选的。

=== 客户端请求 ===
<syntaxhighlight lang="http">
GET / HTTP/1.1
Host: www.google.com
</syntaxhighlight>
（末尾有一个空行。第一行指定方法、资源路径、协议版本；第二行是在1.1版里必带的一个header作用于指定主机）

=== 服务器应答 ===
<syntaxhighlight lang="http">
HTTP/1.1 200 OK
Content-Length: 3059
Server: GWS/2.0
Date: Sat, 11 Jan 2003 02:44:04 GMT
Content-Type: text/html
Cache-control: private
Set-Cookie: PREF=ID=73d4aef52e57bae9:TM=1042253044:LM=1042253044:S=SMCc_HRPCQiqy
X9j; expires=Sun, 17-Jan-2038 19:14:07 GMT; path=/; domain=.google.com
Connection: keep-alive
</syntaxhighlight>

（紧跟着一个空行，并且由HTML格式的文本组成了Google的主页）

在HTTP1.0，单一TCP连接内仅执行一个“客户端发送请求—服务器发送应答”周期，之后释放TCP连接。在HTTP1.1优化支持持续活跃连接：客户端连续多次发送请求、接收应答；批次多请求时，同一TCP连接在活跃（Keep-Live）间期内复用，避免重复TCP初始握手活动，减少网络负荷和响应周期。此外支持应答到达前继续发送请求（通常是两个），称为「流线化」（stream）。

== 類似協議 ==
[[Gopher_(网络协议)|Gopher]]是1990年代早期被HTTP取代的內容傳遞協議。[[SPDY|SPDY]]是[[Google|Google]]開發的HTTP的替代方案，它被新版本的HTTP協議[[HTTP/2|HTTP/2]]所取代。

== 参见 ==
* [[HTTP基本认证|HTTP基本认证]]
* [[內容協商|內容協商]]
* [[.har|.har]]
* [[HTTP摘要認證|HTTP摘要認證]]
* [[HTTP壓縮|HTTP壓縮]]
* [[HTTP/2|HTTP/2]]
* [[HTTPS|HTTPS]]
* [[HTTP頭欄位|HTTP頭欄位]]
* [[HTTP状态码|HTTP状态码]]
* [[表现层状态转换|表现层状态转换]]（REST）
* [[頁庫存檔|頁庫存檔]]
* [[WebSocket|WebSocket]]
* [[Wireshark|Wireshark]]

== 参考 ==
<div class="references-small">
<references />
</div>

== 外部链接 ==
{{Commons category|HTTP}}
* {{cite web|url=http://www.w3.org/Protocols/History.html |title=Change History for HTTP |publisher=W3.org |date= |accessdate=2010-08-01}}
* {{cite web|url=http://www.w3.org/Protocols/DesignIssues.html |title=Design Issues for HTTP |publisher=W3.org |date= |accessdate=2010-08-01}}
* {{cite web|url=http://www.w3.org/Protocols/Classic.html |title=Classic HTTP Documents |publisher=W3.org |date=1998-05-14 |accessdate=2010-08-01}}

{{语义网}}
{{URI scheme}}
{{Web interfaces}}

{{Authority control}}

[[Category:HTTP|Category:HTTP]]
[[Category:应用层协议|Category:应用层协议]]
[[Category:網際協議|Category:網際協議]]
[[Category:网络协议|Category:网络协议]]
[[Category:全球資訊網|Category:全球資訊網]]
[[Category:W3C標準|Category:W3C標準]]