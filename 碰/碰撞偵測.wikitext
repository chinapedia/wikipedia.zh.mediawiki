{{TA
|G1=IT
}}
'''碰撞偵測'''（Collision detection）或稱為'''碰撞檢測'''通常是指一種判斷兩個或多個對象是否產生交集的的方法。往往應用於[[電子遊戲|電子遊戲]]和其他[[計算物理學|計算物理學]]當中，也應用於[[人工智慧|人工智慧]]當中。除了確定兩個對象是否已經碰撞，碰撞偵測也可以用於計算衝擊的時間（TOI），以及回報對象交叉的位置。<ref>Ericson, Christer. Real-time Collision Detection. Elsevier, 2005, p. 13.</ref> {{link-en|碰撞響應|collision response}}一旦偵測到碰撞則處理模擬（[[物理引擎|物理引擎]]，[[布娃娃系統|布娃娃系統]]）。解決碰撞偵測問題需要使用廣泛的概念，如[[線性代數|線性代數]]和[[計算幾何|計算幾何]]。

== 概述 ==
[[Image:Billiards_balls.jpg|right]]碰撞的模擬是碰撞偵測的經典例子。]]
在物理模擬當中，如果驗證撞球產生的位置，則需要模擬剛體運動和彈性碰撞。並且在初始化的時候賦予與台球桌和球一些非常精確的物理描述，以及所有的球的初始位置。設定施於母球的力（可能是從一個玩家以球桿擊中球的得到數值），之後計算球的運動軌跡，並計算所有球的最終位置。

電子遊戲也應用碰撞偵測，但與模擬真實世界的物理通常需要較多的計算，與模擬真實世界的物理不一樣的地方是，通常電子遊戲當中都是採用可以實時且近似的計算來模擬物理來滿足玩家。
== 物理模擬 ==
== 改善 ==

== 電子遊戲 ==

== 演算法 ==

===GJK===
GJK（Gilbert–Johnson–Keerthi distance algorithm）是確定兩個凸集之間的最小距離的一個方法。與其它的距離的算法不同的是，它不需要對特定的形狀編寫代碼即可通用，僅依賴於一個[[支撐集|支撐集]]功能<ref>{{cite news |language = en |url = http://www.dyn4j.org/2010/04/gjk-gilbert-johnson-keerthi/ |title = GJK (Gilbert–Johnson–Keerthi) |date = 2010-04-13 |accessdate = 2016-02-18 |archive-date = 2016-03-01 |archive-url = https://web.archive.org/web/20160301161856/http://www.dyn4j.org/2010/04/gjk-gilbert-johnson-keerthi/ |dead-url = no }}</ref>，以迭代地生成單形以對兩個凸集求[[閔可夫斯基和|閔可夫斯基和]]。

===分離軸定理===
分離軸定理（Separating Axis Theorem，簡稱SAT），是判斷兩個凸集狀是否相交的方法。SAT是一個快速通用的演算法不必為每個形狀去編寫代碼由此減少和以便維護碰撞偵測的程式碼。<ref>{{cite news |language = en |url = http://www.dyn4j.org/2010/01/sat/ |title = SAT (Separating Axis Theorem) |date = 2010-01-01 |accessdate = 2016-02-18 |archive-date = 2016-03-02 |archive-url = https://web.archive.org/web/20160302225836/http://www.dyn4j.org/2010/01/sat/ |dead-url = no }}</ref>

== 參見 ==
*[[四元樹|四元樹]]
*[[八叉樹|八叉樹]]
*[[包圍體|包圍體]]
*[[物理引擎|物理引擎]]

== 參考 ==
{{Reflist}}

[[Category:計算物理學|Category:計算物理學]]
[[Category:物理引擎|Category:物理引擎]]
[[Category:電子遊戲研發|Category:電子遊戲研發]]
[[Category:计算机图形学|Category:计算机图形学]]
[[Category:算法|Category:算法]]
[[Category:電子遊戲術語|Category:電子遊戲術語]]