{{noteTA
|G1=IT
|1=zh-hans:知识产权; zh-hant:智慧財產權; zh-hk:知識產權;
|2=zh-hans:集成电路; zh-hant:積體電路; zh-hk:集成電路;
}}

'''逆向工程'''(Reverse Engineering)，又稱'''反向工程'''，是一種技術過程，即對一專案標產品進行逆向分析及研究，從而演繹並得出該產品的處理流程、組織結構、功能效能規格等設計要素，以製作出功能相近，但又不完全一樣的產品。逆向工程源於商業及軍事領域中的硬體分析。其主要目的是，在無法輕易獲得必要的生產資訊下，直接從成品的分析，推導產品的設計原理。

逆向工程可能會被誤認為是對[[智慧財產權|智慧財產權]]的嚴重侵害，但是在實際應用上，反而可能會保護智慧財產權所有者。例如在[[積體電路|積體電路]]領域，如果懷疑某公司侵犯智慧財產權，可以用逆向工程技術來尋找證據。

==动机==
需要逆向工程的原因如下：
*接口设计。由于[[互操作性|互操作性]]，逆向工程被用来找出系统之间的协作协议。
*军事或商业机密。窃取敌人或竞争对手的最新研究或产品原型。
*改善文档。当原有的文档有不充分处，又当系统被更新而原设计人员不在时，逆向工程被用来获取所需数据，以补充说明或了解系统的最新状态。
*软件升级或更新。出于功能、合规、安全等需求更改，逆向工程被用来了解现有或遗留软件系统，以评估更新或移植系统所需的工作。
*制造没有许可／未授权的副本。
*学术／学习目的。
*去除复制保护和伪装的登录权限。
*文件丢失：采取逆向工程的情况往往是在某一个特殊设备的文件已经丢失了（或者根本就没有），同时又找不到工程的负责人。完整的系统时常需要基于陈旧的系统上进行再设计，这就意味着想要整合原有的功能进行项目的唯一方法便是采用逆向工程的方法分析已有的碎片进行再设计。
*产品分析：用于调查产品的运作方式，部件构成，估计预算，识别潜在的侵权行为。

==應用==
===机械设备===
随着[[计算机辅助设计|计算机辅助设计]]的流行，逆向工程变成了一种能根据现有的物理部件通过[[计算机辅助设计|CAD]]、[[计算机辅助设计|CAM]]、[[计算机辅助设计|CAE]]或其他软件构筑3D虚拟模型的方法。<ref>{{cite journal|doi=10.1016/S0010-4485(96)00054-1|url=http://ralph.cs.cf.ac.uk/papers/Geometry/RE.pdf|title=Reverse engineering of geometric models–an introduction|year=1997|last1=Varady|first1=T|last2=Martin|first2=R|last3=Cox|first3=J|journal=Computer-Aided Design|volume=29|issue=4|pages=255–268|access-date=2019-01-18|archive-date=2011-09-28|archive-url=https://web.archive.org/web/20110928151109/http://ralph.cs.cf.ac.uk/papers/Geometry/RE.pdf|dead-url=no}}</ref>逆向工程的过程採用了通过測量实际物体的尺寸并将其制作成3D模型的方法，真实的物件可以通过如[[三次元量床|CMMs]]，[[三维扫描仪#三角测距|激光扫描仪]]，[[三维扫描仪#结构光源|结构光源转换仪]]或者[[X射线断层成像|X射线断层成像]]这些[[三维扫描仪|3D扫描]]技术进行尺寸测量。这些测量数据通常被认作是[[點雲|點雲]]，缺乏拓扑信息并且同时通常会被制作成更有用格式例如多边形网格，[[非均匀有理B样条|NURBS曲线]]或者CAD模型。由于點雲本身并不像3D软件裡的模型那样直观，所以如同{{tsl|en|Materialise NV|3-matic}}、[[西门子PLM软件|Imageware]]、{{tsl|de|PolyWorks|}}、{{tsl|fr|Rapidform|}}或者[[杰魔公司|杰魔公司]]等这些软件都提供了将點雲变成能可视图像，或者被其他应用软件如3D CAD、CAM、CAE识别的格式的功能。

反向工程同时会被需要将真实的几何体应用在虚拟的数字开发环境中的商业活动中应用，比如将自己产品或者竞争者的三维数据数字化。通过这种手段可以分析出产品的运作方式，部件构成，估计预算和识别潜在的[[侵权|侵权]]行为等。

[[价值工程|价值工程]]也是商业中应用的类似手段。不过价值工程的目的是通过反构造和分析产品来找到节省开销的办法。

===软件===
由于「逆向工程」一词用在[[软件工程|软件工程]]（简称「软工」）领域中的具体含义模糊不清，Chikofsky和Cross为此写了篇文章，以阐清及区分「逆向工程」与各种相近的概念。据文章所述，逆向工程是一种分析目标系统的过程，其目的是识别出系统的各个组件以及它们之间的关系，并以其它的形式或在较高的抽象层次上，重建系统的表征（Representations）。<ref name="IEEE 1990">{{Cite journal | last1 = Chikofsky | first1 = E. J. | last2 = Cross | first2 = J. H. | doi = 10.1109/52.43044 | title = Reverse engineering and design recovery: A taxonomy | journal = IEEE Software | volume = 7 | pages = 13–17 | date = January 1990 | url = http://win.ua.ac.be/~lore/Research/Chikofsky1990-Taxonomy.pdf | author =  | access-date = 2019-01-18 | archive-url = https://web.archive.org/web/20180417124021/http://win.ua.ac.be/~lore/Research/Chikofsky1990-Taxonomy.pdf | archive-date = 2018-04-17 | dead-url = yes }}</ref>  软件逆向工程也可被视作「开发周期的逆行」。<ref>{{cite book | last=Warden | first=R. | title=Software Reuse and Reverse Engineering in Practice | year=1992 | publisher=Chapman & Hall | location=London, England | pages=283–305}}</ref>
在此定义下，对一项软件程序进行逆向工程，类似于逆行传统[[瀑布模型|瀑布模型]]中的开发步骤，即把实现阶段的输出（即软件程序）还原回在设计阶段所做的构思。软件逆向工程仅仅是一种检测或分析的过程，它并不会更改目标系统（否则就成了[[软件再工程|软件再工程]]）。

软件[[防篡改|防篡改]]技术被用于遏制对专有软件进行逆向工程及[[再工程|再工程]]。{{Fact|实际应用中出现了两类逆向工程。第一种，软件的源代码可用，但是更高层次的部分几乎没有描述文档或者描述文档不再适用或者丢失。第二种，软件没有可用的源代码，任何能找到它的源代码的努力都被称为逆向工程。}}大部分人都熟悉这个词的第二种用法。软件的逆向工程可以使用[[净室设计|净室技术]]来避免侵犯版权。

[[软工|软工]]中的[[黑盒测试|黑盒测试]]与逆向工程有很多共同点，但黑箱测试人员常供以[[API|API]]以作测试，并且测试的目的就是通过外部攻击，找出程序漏洞和未归档的特性。

逆向工程的其他目的包括：安全审查、 解除复制保护（又称[[破解|破解]]）、绕过[[消费类电子产品|消费类电子产品]]中常设有的访问限制、定制[[嵌入式系统|嵌入式系统]]（例如引擎管理系统）、产品内部修补或更新、给功能不全的廉价硬件（例如某些显卡芯片组）添加额外功能，或仅为满足好奇心。

====二进制软件====
对最终程序的二进制代码所进行的逆向工程被称为「代码反向工程」，或简称RCE（'''R'''everse '''C'''ode '''E'''ngineering）。<ref>{{cite book | last=Chuvakin | first=Anton |author2=Cyrus Peikari  | edition=1st | title=Security Warrior | url=http://www.oreilly.com/catalog/swarrior/reviews.html | accessdate=2006-05-25 | publisher=O'Reilly | date=January 2004 | deadurl=yes | archiveurl=https://web.archive.org/web/20060522102255/http://www.oreilly.com/catalog/swarrior/reviews.html | archivedate=2006-05-22 }}</ref>例如，我们可以用Jad对[[Java平台|Java平台]]的二进制码进行[[反编译|反编译]]。一个著名的逆向工程案例是，首个由非[[IBM|IBM]]公司所实现的IBM[[个人电脑|个人电脑]]中的[[BIOS|BIOS]]，这开创了[[IBM_PC兼容机|IBM PC兼容机]]产业，使得[[IBM_PC兼容机|IBM PC兼容机]]成为多年来的主流计算机硬件平台。一个以软件逆向工程为乐的团体例子是CORE（'''C'''hallenge '''O'''f '''R'''everse '''E'''ngineering，意为「挑战逆向工程」）。在美国，软件逆向工程只要遵守[[版权法|版权法]]的[[合理使用|合理使用]]规定，都是受保护的。<ref>{{Cite journal |doi=10.2307/797533 |first=Pamela |last=Samuelson |lastauthoramp=yes |first2=Suzanne |last2=Scotchmer |title=The Law and Economics of Reverse Engineering |volume=111 |journal={{tsl|en|Yale Law Journal|}} |issue=7 |pages=1575–1663 |year=2002 |url=http://www.yalelawjournal.org/the-yale-law-journal/content-pages/the-law-and-economics-of-reverse-engineering/ |jstor=797533 |author= |access-date=2019-01-18 |archive-url=https://web.archive.org/web/20100715135359/http://yalelawjournal.org/the-yale-law-journal/content-pages/the-law-and-economics-of-reverse-engineering/ |archive-date=2010-07-15 |dead-url=yes }}</ref>成功的软件逆向工程项目有：
*[[Samba|Samba]]：一个允许非[[Windows|Windows]]系统与[[Windows|Windows]]系统共享文件的开源项目。由于微软没有公开Windows[[文件共享|文件共享]]机制的信息，Samba必须作逆向工程，以便在非Windows系统上，仿真出同样的行为。
*[[Wine|Wine]]：对[[Windows_API|Windows API]]做了同样的工作，
*[[OpenOffice.org|OpenOffice.org]]：对[[Microsoft_Office|Microsoft Office]]文件格式作逆向工程。
*[[ReactOS|ReactOS]]：竭力在[[应用二进制接口|ABI]]及[[API|API]]上，兼容NT系Windows系统，以便让为Windows所编写的软件和驱动程序可以在其上运行。
*[[WindowsSCOPE|WindowsSCOPE]]：用来监测及分析Windows系统内存的实况内容。

====二进制软件技术====
软件逆向工程有多种实现方法，主要有三：
# 分析通过信息交换所得的观察。最常用于协议逆向工程，涉及使用{{link-en|总线分析器|Bus analyzer}}和[[数据包嗅探器|数据包嗅探器]]。在接入计算机[[总线|总线]]或[[互聯網|网络]]的连接，并成功截取通信数据后，可以对总线或网络行为进行分析，以制造出拥有相同行为的通信实现。此法特别适用于[[设备驱动程序|设备驱动程序]]的逆向工程。有时，由硬件制造商特意所做的工具，如JTAG端口或各种调试工具，也有助于嵌入式系统的逆向工程。对于[[微软|微软]]的[[Windows|Windows]]系统，受欢迎的底层调试器有[[SoftICE|SoftICE]]。
# [[反汇编|反汇编]]，即藉用[[反汇编器|反汇编器]]，把程序的原始[[机器码|机器码]]，翻译成较便于阅读理解的[[汇编代码|汇编代码]]。这适用于任何的计算机程序，对不熟悉机器码的人特别有用。流行的相关工具有[[IDA_Pro|Interactive Disassembler]]。
# [[反编译|反编译]]，即藉用[[反编译器|反编译器]]，尝试从程序的[[机器码|机器码]]或[[字节码|字节码]]，重现[[高级语言|高级语言]]形式的[[源代码|源代码]]。

====源代码====
许多[[统一建模语言|UML]]工具涉及到导入源代码生成UML图，即“逆向工程”。

===集成电路和智能卡===
分析智能卡的逆向工程具有侵入性和破坏性，智能卡被层层刮掉用电子显微镜拍照。这种技术可以完整地揭示出智能卡的硬件和软件部份。主要的问题就是，把所有的东西按正确的顺序放好以找出每一个部件是如何工作的。工程师们用打乱内存位置的方法隐藏密码和操作，例如[[busscrambling|busscrambling]]<ref>Wolfgang Rankl, Wolfgang Effing, Smart Card Handbook (2004)</ref><ref>T. Welz: Smart cards as methods for payment (2008), Seminar ITS-Security Ruhr-Universität Bochum, "http://www.crypto.rub.de/its_seminar_ws0708.html {{Webarchive|url=https://archive.is/20120724013648/http://www.crypto.rub.de/its_seminar_ws0708.html |date=2012-07-24 }}"</ref>。有时甚至可以在智能卡运行的时候用探针直接测量电压，设计师则用感应器来检测和防止。<ref>David C. Musker: Protecting & Exploiting Intellectual Property in Electronics, IBC Conferences, 10 June 1998</ref>破坏支付业务中使用的智能卡很困难，只有大芯片制造商使用那些专业的设备。况且，和其他安全机制例如阴影帐户相比，这种方法回报太低。

===军事===
逆向工程经常被用在军事上，用来复制从战场上由常规部队或[[军事情报|情报]]活动获得的别国之技术、设备、信息或其零件。[[二战|二战]]和[[冷战|冷战]]中经常被用到。二战以来的著名例子有：
* [[德國桶|德國桶]]：英美军注意到德军有一种设计绝妙的油桶，于是就用逆向工程复制了这些桶。这些被泛称为“便携油桶”。
* [[四式7.5公分高射炮|四式7.5公分高射炮]]：日本從中國戰場擄獲的[[波佛斯75毫米口徑M1929高射炮|波佛斯75毫米口徑M1929高射炮]]上的逆向工程，產生四式7.5公分高射炮<ref>雖然在炮架結構上與波佛斯防空炮類似，但是在火炮倍徑以及重量上比較接近自[[蘇聯|蘇聯]]輸入的[[1931年型76公厘高射炮|1931年型76公厘高射炮]]，不能排除日本是以兩種防空炮混合的可能性。</ref>並搭配日本的[[九八式六噸牽引車|九八式六噸牽引車]]使用，拖弋速度可達時速45[[公里|公里]]<ref name="#1">「日本の大砲」　竹内昭・佐山二郎共著　出版共同社　昭和61年 p376</ref>，並擁有快速放列的作戰的能力。<ref name="#1"/>
* [[图-4|图波列夫Tu-4]]：三架飞往[[日本|日本]]的[[B-29超級堡壘轟炸機|B-29「超級堡壘」]]轰炸机迫降到了[[苏联|苏联]]。苏联没有类似的战略轰炸机，就决定复制B-29。几年后他们开发出了Tu-4，几近完美的复制品。
* [[V-2火箭|V-2火箭]]：战争结束时V2的技术文档和相关技术被西方联盟俘获。苏联和被俘的德工程师要用俘获的构件重建技术文档和图纸，用于生产这种导弹的代件。[[R-1導彈|R-1]]啟動了戰後蘇聯導彈畫，一直到[[R-7导弹|R-7]]，并导致了[[太空竞赛|太空竞赛]]。
* [[AA-2飛彈|K-13/R-3S]]导弹（[[北約代號|北約代號]]为'''AA-2 'Atoll'''）是苏联对[[AIM-9響尾蛇飛彈|AIM-9响尾蛇]]的逆向工程复制品。早期傳說一枚[[中華民國|臺灣]]AIM-9B射中[[中华人民共和国|中國大陆]][[米格-17战斗机|MiG-17]]后没有爆炸，这枚导弹留在机身裡，飞行员带着这枚导弹返回了基地。根據蘇聯公開的資料則是由墜毀在中國境內的美國海軍戰鬥機殘骸上取得。
* [[BGM-71拖式飛彈|BGM-71 TOW導彈]]：1975年三月，[[伊朗|伊朗]]與[[休斯飛機公司|休斯导弹系统公司]]的关于TOW和Maverick导弹合作的谈判因价格体系的分歧停止了，接下来的[[伊朗伊斯蘭革命|1979年革命]]结束了这种合作的所有计划。伊朗成功地对这种导弹进行逆向工程，目前正在生产他们自己的复制品：[[颱風反坦克導彈|圖芬]]（Toophan）。

==相关法律==
在美国及其他许多国家，制品或制法都受[[商业秘密|商业秘密]]保护，只要合理地取得制品或制法就可以对其进行逆向工程。[[专利|专利]]需要把你的[[发明|发明]]公开发表，因此专利不需要逆向工程就可进行研究。逆向工程的一种动力就是确认竞争者的产品是否[[侵权专利|侵权专利]]或[[侵犯版权|侵犯版权]]。

为了[[互用性|互用性]]（例如，支持未公开的文件格式或硬件外围），而对软件或硬件系统进行的逆向工程被认为是合法的，虽然专利持有者经常反对并试图打压以任何目的对他们产品进行的逆向工程。

为了获取一个有版权的计算机程序中隐含的思想和功能元素且有合法的理由要获取，当只有拆解这一种方法时，根据法律判定，拆解是对有版权作品的[[合理使用|合理使用]]。<ref>Sega v. Accolade, 203 F.3d 596 (9th Cir. 1993)</ref>

==在虛構作品==
* [[记忆裂痕|记忆裂痕]]

==另见==
* [[安提基特拉机械|安提基特拉机械]]
* [[基准化分析法|基准化分析法]]
* {{le|总线分析器|Bus analyzer}}
* [[净室设计|净室设计]]
* [[代码融合|代码融合]]
* [[索尼PS游戏机模拟器|索尼PS游戏机模拟器]]
* [[反编译|反编译]]
* [[千禧年数字版权法案|千禧年数字版权法案]]（DMCA）
* [[法工程学|法工程学]]
* [[交互式反汇编器|交互式反汇编器]]
* {{le|知识挖掘元模型|Knowledge Discovery Metamodel}}
* [[逻辑分析器|逻辑分析器]]
* [[价值工程|价值工程]]

==延伸導讀==
*Reverse Engineering for Beginners, D.Yurichev. [https://beginners.re/].
*{{cite book |title={{tsl|en|Reversing: Secrets of Reverse Engineering|}} |last=Eilam |first=Eldad |year=2005 |publisher=[[約翰威立|約翰威立]] |isbn=0764574817 |pages=595 }}
*{{cite book |title=Reverse Engineering - An Industrial Perspective  |last=Raja Vinesh |first=Fernandes Kiran J. |year=2008 |publisher=[[Springer|Springer]] |isbn=978-1-84628-855-5 |pages=242}}

== 参考 ==
{{reflist}}

==外部链接==
* [https://web.archive.org/web/20050925040245/http://www.crackmes.de/ Crackmes.de, the longest running and most complete Crackmes web page on the internet. Free Reverse Code Engineering training material]
* [https://web.archive.org/web/20080828161223/http://video.reverse-engineering.net/ Video RCE, the biggest Reverse Code Engineering Video Library, with hundreds of free video tutorials]
* [https://web.archive.org/web/20190114043903/http://www.iitac.org/ IITAC, the Reverse Code Engineering and IT Security Training/Audit Institute] a leading consulting institute, home of the above free RCE resources
* [http://www.woodmann.com Reverse Code Engineering: The complete resource for RE of software. Archives of the most important Reverse Code Engineering sites]
* [http://www.openrce.org OpenRCE: Reverse Engineering Portal] {{Wayback|url=http://www.openrce.org/ |date=20080828152956 }}
* [https://web.archive.org/web/20081005021426/http://www.eclipse.org/gmt/modisco/ MoDisco: (Model Discovery), an Eclipse Project on Model Driven Reverse Engineering]
* [http://www.eresi-project.org ERESI: The ERESI Reverse Engineering Software Interface] for RCE on UNIX
* [http://radare.nopcode.org Radare: Advanced CmdLine Hexadecimal Editor, Disassembler and Debugger] multi-platform full-featured RCE tool
* [http://www.program-transformation.org/Transform/ReverseEngineering Program transformation wiki on Reverse Engineering]
* [http://www.acm.uiuc.edu/sigmil/RevEng/ Introduction to Reverse Engineering Software] {{Wayback|url=http://www.acm.uiuc.edu/sigmil/RevEng/ |date=20080509145730 }}, preprint of a book by [[Mike_Perry|Mike Perry]] and [[Nasko_Oskov|Nasko Oskov]].
* [http://www.ercim.org/publication/Ercim_News/enw44/varady.html Reverse Engineering Shapes], article by [[Tamás_Várady|Tamás Várady]]
* [http://www.reteam.org/ Online Resource for Reverse Engineering Software]
* [https://web.archive.org/web/20081120150629/http://www.jenkins-ip.com/serv/serv_6.htm Article on legal considerations] by [[David_C._Musker|David C. Musker]]
* [http://archives.cnn.com/2001/US/01/25/smithsonian.cold.war/ CNN: How Soviets copied America's best bomber during WWII]
* [https://web.archive.org/web/20080618012740/http://w3.umh.ac.be/genlog/SE/SE-contents.html#ReverseEngineering Very good RE definitions from Software Engineering]
* [http://adm.omg.org Architecture-Driven Modernization group at OMG] {{Wayback|url=http://adm.omg.org/ |date=20110222110205 }}
* [https://web.archive.org/web/20070825034300/http://www.elecdesign.com/Articles/Index.cfm?ArticleID=11966 Reverse Engineering Delivers Product Knowledge Aids Technology Spread] - Article in Electronic Design by Dick James, Senior Technology Adviser, Chipworks
* [http://www.cs.cmu.edu/~aldrich/courses/654-sp05/ReengineeringTaxonomy.pdf Chikofsky, E.J.; J.H. Cross II (January 1990). "Reverse Engineering and Design Recovery: A Taxonomy in IEEE Software". IEEE Computer Society: 13–17.] - Original Paper hosted at cs.cmu.edu
* [https://web.archive.org/web/20161224094357/https://www.creaform-engineering.com/en/expertises/engineering/reverse-engineering Reverse Engineering Applications] Creaform 3D Reverse Engineering Services

[[Category:逆向工程|]]
[[Category:著作權侵害|Category:著作權侵害]]