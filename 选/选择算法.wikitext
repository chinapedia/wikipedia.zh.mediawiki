{{expand|time=2017-04-13T16:02:53+00:00}}
在[[计算机科学|计算机科学]]中，'''选择算法'''是一种在[[串列_(抽象資料型別)|列表]]或[[数组|数组]]中找到第k个最小数字的[[算法|算法]]；这样的数字被称为第k个''[[顺序统计量|顺序统计量]]''。该算法寻找的对象主要有三种：[[极值|最小]]、[[极值|最大]]和[[中位數|中位数]]。已知存在O(''n'')（最坏情况下为线性时间）的选择算法，还有对于结构化数据可能有次线性的表现的算法；在极端的情况下，对于已排序数据是O(''1'')。选择是一些更复杂问题的子问题，如[[最邻近搜索|最近邻]]和[[最短路问题|最短路径]]问题。 许多选择算法是由[[排序算法|排序算法]]推广而来，反之，一些排序算法可由反复应用选择算法推导出来。

最简单的选择算法是通过遍历列表找到最小（或最大）的元素，在此过程中跟踪当前的最小（或最大）值。这种算法与[[选择排序|选择排序]]有关。相反地，最困难的选择算法是寻找中位数，这必然需要''n''/2的空间。 事实上，一个专门的中位选择算法可用来构造一个一般选择算法，例如{{le|中位数的中位数|Median of medians}}。已知最好的选择算法是[[快速选择|快速选择]]（quickselect），它与[[快速排序|快速排序]]有关。和快速排序类似，它有渐进最佳的复杂度，但是最坏情况的复杂度较差。不过这可以通过调整基准（pivot）的选择来优化。

== 通过排序选择 ==
通过对列表或数组的排序，然后选择所需的元素，选择算法可以[[规约|规约]]为[[排序算法|排序算法]]。这种方法对于选择单个元素是低效的，但需要从数组中做出很多选择时是高效的。在这种情况下，仅仅需要一个起初一个代价昂贵的排序，紧接着就是各种便宜的选择操作了 – 对于数组而言是 O(1)。尽管对于链表而言，即使排序后，选择操作也需要 O(n)，这是由于缺乏[[随机访问|随机访问]]造成的。通常的，排序需要耗费 O(''n'' log ''n'') 的时间，其中 ''n'' 是列表的长度，尽管对于非比较算法而言可能更低一些，如[[基数排序|基数排序]]和[[计数排序|计数排序]]。

相比将整个列表或数组进行排序，还可以用[[偏排序|偏排序]]来选择第 ''k'' 小或第 ''k'' 大的元素。第 ''k'' 小的（第 ''k'' 大的) 也就是偏排序后列表中最大的 (最小的) 那个 – 这在数组中会耗费 O(1) 来访问，在链表中会耗费 O(''k'')。

== 基于分区的选择 ==
{{Empty section|time=2018-08-28T14:02:02+00:00}}

== 通过选择增量排序 ==
{{Empty section|time=2018-08-28T14:02:02+00:00}}

== 参见 ==
* [[序优化|序优化]]

== 参考文献 ==

== 外部链接 ==
* "[http://www.ics.uci.edu/~eppstein/161/960125.html Lecture notes for January 25, 1996: Selection and order statistics]", ''ICS 161: Design and Analysis of Algorithms,'' David Eppstein

[[Category:选择算法|*]]