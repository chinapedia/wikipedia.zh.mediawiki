{{noteTA
|G1=IT
}}
{{lowercase}}
'''ARM big.LITTLE'''或'''big.LITTLE'''是由[[安謀國際科技|安謀國際科技]]公司（ARM）提出的[[异构運算|异构運算]][[多核心處理器|多核心處理器]]組態結構配置。在這個組態，將比較耗電、但運算能力強的處理器核心組成的「big叢集」與低耗電、運算能力弱的處理器核心組成的「LITTLE叢集」結合在一起，這些處理器核心共用[[記憶體|記憶體]]區段，並能夠在不同的CPU叢集之間線上實時分派、切換負載。<ref name=uber>{{Cite web |url=http://www.ubergizmo.com/2013/01/what-is-arm-big-little/ |title=What Is ARM big.LITTLE? |date=2013-01-17 |author=Nguyen, Hubert |publisher=UberGizmo.com |access-date=2017-04-26 |archive-url=https://web.archive.org/web/20150910025814/http://www.ubergizmo.com/2013/01/what-is-arm-big-little/ |archive-date=2015-09-10 |dead-url=yes }}</ref>這個多核心處理器組態結構運用在-{zh-hant:行動計算;zh-cn:移动计算}-上，從而能夠做出計算高效能，但是平均耗電低的多核心處理器，ARM的市場資料稱在某些運算操作中這個組態配置相比只使用與「big叢集」相同CPU核心數量的處理器可節省多達75%的功耗。<ref name="arm-mkt">{{Cite web |url=http://www.arm.com/products/processors/technologies/biglittleprocessing.php |title=big.LITTLE technology |publisher=ARM.com |access-date=2013-07-25 |archive-url=https://web.archive.org/web/20121022055646/http://www.arm.com/products/processors/technologies/bigLITTLEprocessing.php |archive-date=2012-10-22 |dead-url=yes }}</ref>

本組態配置式在2011年10月ARM發表[[ARM_Cortex-A7_MPCore|Cortex-A7]]時首次對外公布，[[ARM_Cortex-A15_MPCore|Cortex-A15]]也能夠與這個架構相容。<ref name="Auto4J-1"/>2012年10月，ARM公司宣布[[ARM_Cortex-A53|Cortex-A53]]與{{le|ARM Cortex-A57|ARM Cortex-A57|Cortex-A57}}（[[ARMv8|ARMv8]]）也能與這個架構相容。<ref name="cortex-a50 announce"/>2014年2月ARM發表{{le|ARM Cortex-A17|ARM Cortex-A17|Cortex-A17}}，同一年在[[台北國際電腦展覽會|Computex 2013]]上ARM又發表了{{le|ARM Cortex-A12|ARM Cortex-A12|Cortex-A12}}，這兩種CPU核心也可用於big.LITTLE配置式中的「big叢集」上（「LITTLE叢集」由Cortex-A7擔當）。<ref>{{cite web |url=http://www.theverge.com/2013/6/2/4390076/arm-cortex-a12-mali-t622-v500 |title=ARM's new Cortex-A12 is ready to power 2014's $200 midrange smartphones |date=April 2014 |publisher=The Verge |accessdate=2017-04-26 |archive-date=2017-06-14 |archive-url=https://web.archive.org/web/20170614185735/https://www.theverge.com/2013/6/2/4390076/arm-cortex-a12-mali-t622-v500 |dead-url=no }}</ref><ref>{{cite web |url=http://www.anandtech.com/show/7739/arm-cortex-a17 |title=ARM Cortex A17: An Evolved Cortex A12 for the Mainstream in 2015 |date=April 2014 |publisher=AnandTech |accessdate=2017-04-26 |archive-date=2014-09-11 |archive-url=https://web.archive.org/web/20140911082939/http://www.anandtech.com/show/7739/arm-cortex-a17 |dead-url=yes }}</ref>

2017年5月，ARM發表DynamIQ取代big.LITTLE。<ref>{{cite news|last1=Humrick|first1=Matt|title=Exploring Dynamiq and ARM's New CPUs|url=http://www.anandtech.com/show/11441/dynamiq-and-arms-new-cpus-cortex-a75-a55|accessdate=2017-07-10|publisher=Anandtech|date=2017-05-29|archive-date=2018-06-13|archive-url=https://web.archive.org/web/20180613040827/https://www.anandtech.com/show/11441/dynamiq-and-arms-new-cpus-cortex-a75-a55|dead-url=no}}</ref>與big.LITTLE相比，DynamIQ允許更為靈活的CPU核心配置和更大規模的叢集設計（每個CPU叢集可以有八顆CPU核心）、叢集數量更多（一塊CPU上最大可擴充至32個叢集）、更精確的電源控制（每個核心內有更多的時鐘門控和電壓控制）以及更快速的L2快取存取操作。然而DynamIQ僅適用於[[ARM_Cortex-A75|Cortex-A75]]、[[ARM_Cortex-A55|Cortex-A55]]及往後推出的ARM CPU核心。

== 運行狀態遷移切換方式 ==
big.LITTLE中，節電的「LITTLE叢集」和高效能的「big叢集」之間有三種切換方式，均要求線上實時操作，除了電路設計以外還需要作業系統的配合得當（一些方式需要依賴作業系統的工作流排程實作）<ref>{{cite web | url=http://blogs.arm.com/soc-design/1009-ten-things-to-know-about-biglittle/ | title=Ten Things to Know About big.LITTLE | author=Brian Jeff | date=2013-06-18 | publisher=[[ARM_Holdings|ARM Holdings]] | accessdate=2013-09-17 | archive-url=https://web.archive.org/web/20130910163539/http://blogs.arm.com/soc-design/1009-ten-things-to-know-about-biglittle/ | archive-date=2013-09-10 | dead-url=yes }}</ref><ref>{{cite web | url=http://www.linaro.org/linaro-blog/2013/07/10/big-little-software-update/ | title=big.LITTLE Software Update | author=George Grey | publisher=[[Linaro|Linaro]] | date=2013-07-10 | accessdate=2013-09-17 | deadurl=yes | archiveurl=https://web.archive.org/web/20131004230806/http://www.linaro.org/linaro-blog/2013/07/10/big-little-software-update/ | archivedate=2013-10-04 }}</ref>

=== 叢集切換 ===
[[File:Big.Little_Cluster_Switching.png|thumb]]
最早也是最簡單的big.LITTLE組態實作是這種大小核心叢集的切換，高效能CPU核心亦即大核心組成「big叢集」，而低功耗CPU核心亦即小核心，則是組成「LITTLE叢集」。作業系統的排程器在某一時間點上只能見到一組CPU叢集，整個處理器的負載高低變化時，系統會在不同叢集間轉移負載。當負載從一個CPU叢集轉移至另一CPU叢集時，相關的資料、執行狀態等被保存在這些叢集共用的[[CPU快取|二級快取]]（L2 Cache）當中，先前運作的CPU叢集斷電關閉然後加電壓開啟另一個叢集。叢集的資料轉移還需要使用快取一致性互聯（CCI）。這種big.LITTLE的第一個實作是[[三星電子|三星]][[Exynos|Exynos]] 5410 Octa。<ref>{{cite web | url=http://www.embedded.com/electronics-news/4419448/Benchmarking-ARM-s-big-little-architecture | title=Benchmarking ARM’s big-little architecture | author=Peter Clarke | date=2013-08-06 | accessdate=2013-09-17 | archive-date=2013-10-17 | archive-url=https://web.archive.org/web/20131017163709/http://www.embedded.com/electronics-news/4419448/Benchmarking-ARM-s-big-little-architecture | dead-url=no }}</ref>這種方式的一大缺點是CPU叢集間的切換延時較高，並且CPU核心的利用率較低。
{{Clear}}

=== 內核內建切換器（CPU遷移） ===
[[File:In_Kernel_Switcher.jpg|thumb]]
這種切換方式自叢集切換方式演變，主要區別在於每一個叢集對作業系統排程器來說都是可見的。在此種方式中，任務在CPU核心之間切換使用內核內建切換器（in-kernel switcher，IKS），晶片設計上是一個高效能CPU核心和一個低功耗CPU核心組成一個復合叢集，這一個叢集作為一個「虛擬的」核心來供作業系統操作，同一時間點上這一對CPU核心只有一顆在運作，高效能CPU核心僅在有高效能運算需求時才開啟，運算效能需求低時則是只開啟低功耗核心。當虛擬核心內負載在高低之間變化時，先開啟將要切換到的CPU核心，轉移執行狀態，轉移完成後關閉先前運行的CPU核心，由該CPU核心繼續執行先前的處理進程。切換工作需要通過cpufreq框架完成。[[Linux|Linux]] 3.11內核開始提供了big.LITTLE IKS完整實作所需內核元件模組。

[[蘋果公司|蘋果公司]]的[[Apple_A10_Fusion|A10 Fusion]]以及A10X Fusion即採用此種big.LITTLE組態。不過，更複雜多樣的「大小核心」CPU核心分組，也是有可能的，一隻採用IKS方式的處理器上容許一個虛擬核心內有一顆以上的高效能CPU核心或低功耗CPU核心，或者是相同的CPU核心而分成主副CPU核心。[[輝達|輝達]]的[[Tegra_3|Tegra 3]] SoC也採用類似IKS切換方式，但Tegra 3上採用的是相同的CPU核心，多個主CPU核心與一個副CPU核心的設計。
{{Clear}}

=== {{Anchor|GTS|HMP}}異构多處理機（全域任務排程） ===
[[File:Global_Task_Scheduling.jpg|thumb]]
異构多處理（heterogeneous multi-processing，HMP）是big.LITTLE組態中最靈活也是效能最強勁的使用模式，在這種組態中，同一時間點上所有的物理CPU核心都是可用的並且可以同時全部開啟使用，也可以將高效能CPU核心全數關閉而只使用低功耗CPU核心。高優先級或者對運算速度吃重的執行緒可以被分派至高效能CPU核心上，而低優先級或對運算速度要求不高的執行緒（如背景任務），則是由低功耗CPU核心負責完成<ref>[https://www.academia.edu/18301534/A_Survey_Of_Techniques_for_Architecting_and_Managing_Asymmetric_Multicore_Processors A Survey Of Techniques for Architecting and Managing Asymmetric Multicore Processors] {{Wayback|url=https://www.academia.edu/18301534/A_Survey_Of_Techniques_for_Architecting_and_Managing_Asymmetric_Multicore_Processors |date=20170618200303 }}, ACM Computing Surveys, 2015.</ref><ref>{{citation |url=http://www.arm.com/files/downloads/big.LITTLE_Final.pdf |title=Big.LITTLE Processing with ARM Cortex™-A15 & Cortex-A7 |date=September 2013 |publisher=[[ARM_Holdings|ARM Holdings]] |accessdate=2013-09-17 |deadurl=yes |archiveurl=https://web.archive.org/web/20120417183714/http://www.arm.com/files/downloads/big.LITTLE_Final.pdf |archivedate=2012-04-17 |df=dmy }}</ref>

最早的實作是三星電子的Exynos Octa 5420/5422/5430。<ref name="anand-5420"/><ref name="Samsung Tomorrow">{{cite web |title =Samsung Unveils New Products from its System LSI Business at Mobile World Congress |publisher =Samsung Tomorrow |url =http://global.samsungtomorrow.com/?p=34630 |accessdate =2013-02-26 |archive-date =2014-03-16 |archive-url =https://web.archive.org/web/20140316044700/http://global.samsungtomorrow.com/?p=34630 |dead-url =no }}</ref>而現時大部分實現big.LITTLE組態的ARM架構相容處理器，多採用這種切換方式。迫於行動裝置對CPU核心規模的控制，蘋果公司的[[Apple_A11|Apple A11]]也採用此種排程方式。<ref>{{Cite news|url=https://www.apple.com/newsroom/2017/09/the-future-is-here-iphone-x/|title=The future is here: iPhone X|work=Apple Newsroom|access-date=2018-02-25|language=en-US|archive-date=2018-04-01|archive-url=https://web.archive.org/web/20180401112702/https://www.apple.com/newsroom/2017/09/the-future-is-here-iphone-x/|dead-url=no}}</ref>

全域任務排程的優勢：
* 對各個CPU核心有更細粒度的工作量控制。因為作業系統排程器直接對各個CPU核心分配及搬移任務、降低作業系統內核態的額外開銷而令節電效果和效能相應地獲得提升
* 相比內核內建切換器（IKS）依賴cpufreq框架來實現，直接使用任務排程器來實現CPU核心的切換來得快，而且更容易實現
* 更靈活的CPU叢集組合（像是兩個Cortex-A15和四個Cortex A7組成的SoC CPU部分）
* 相比固定只能使用虛擬核心數量的CPU核心數，如有需要，可以實現SoC內所有的CPU核心一同運作以最大限度發揮SoC的運算效能
{{Clear}}

== 任務排程 ==
對於大小CPU核心（叢集）成對配置的，它們之間的切換過程對作業系統來說是透明的，[[作業系統|作業系統]]使用現成的動態電壓與時鐘信號調整（DVFS）功能來實現。作業系統核心現成的DVFS支援（像是[[Linux|Linux]]核心的<code>cpufreq</code>）將根據負載輕重，從預先設定的一個時鐘信號-核心電壓參數配置表中以合適的參數設定CPU的電壓與時脈，和此前僅需調整核心電壓、時脈的CPU一樣，然而，較低的參數設定則會開啟節電（小）CPU核心，而較高的參數設定則是開啟高效能（大）CPU核心。

另一種相對的，則是所有的CPU核心都呈現給作業系統內核排程器，排程器將依據請求決定由哪個核心執行哪個行程或執行緒。這種排程方式需要非成對配置的CPU核心（叢集），不過成對配置的CPU核心（叢集）也可能允許使用。不過這種排程方式更考驗作業系統內核排程器的調校功力（多核心處理器的效能最佳化），至少當前大多數的硬體中，多核心處理器的結構使用的是[[对称多处理|對稱多處理器系統]]，big.LITTLE組態其實也不例外。

== 參見 ==
* {{le|ARMv7處理器內核列表|Comparison of ARMv7-A cores}}
* {{le|ARMv8處理器內核列表|Comparison of ARMv8-A cores}}
* {{cite web | url=https://lwn.net/Articles/481055/ | title=Linux support for ARM big.LITTLE | publisher=[[LWN.net|LWN.net]] | date=2012-02-15 | author=Nicolas Pitre | accessdate=2012-10-18 | archive-date=2012-10-17 | archive-url=https://web.archive.org/web/20121017032801/http://lwn.net/Articles/481055/ | dead-url=no }}
* {{cite web | url=https://lwn.net/Articles/501501/ | title=A big.LITTLE scheduler update | publisher=[[LWN.net|LWN.net]] | date=2012-06-12 | author=Paul McKenney | accessdate=2012-10-18 | archive-date=2012-10-22 | archive-url=https://web.archive.org/web/20121022174902/http://lwn.net/Articles/501501/ | dead-url=no }}
* {{cite web | url=https://lwn.net/Articles/514063/ | title=KS2012: ARM: A big.LITTLE update | publisher=[[LWN.net|LWN.net]] | date=2012-09-05 | author=Jake Edge | accessdate=2012-10-18 | archive-date=2012-11-02 | archive-url=https://web.archive.org/web/20121102110139/http://lwn.net/Articles/514063/ | dead-url=no }}
* {{cite web | url=http://arstechnica.com/gadgets/2011/10/arms-new-cortex-a7-is-tailor-made-for-android-superphones/ | title=ARM's new Cortex A7 is tailor-made for Android superphones | publisher=[[Ars_Technica|Ars Technica]] | date=2011-10-20 | author=Jon Stokes | accessdate=2012-10-31 | archive-date=2012-12-03 | archive-url=https://web.archive.org/web/20121203090323/http://arstechnica.com/gadgets/2011/10/arms-new-cortex-a7-is-tailor-made-for-android-superphones/ | dead-url=no }}
* {{cite web | url=http://arstechnica.com/information-technology/2012/10/arm-goes-64-bit-with-new-cortex-a53-and-cortex-a57-designs/ | title=ARM goes 64-bit with new Cortex-A53 and Cortex-A57 designs | publisher=[[Ars_Technica|Ars Technica]] | date=2012-10-30 | author=Andrew Cunningham | accessdate=2012-10-31 | archive-date=2012-11-01 | archive-url=https://web.archive.org/web/20121101175648/http://arstechnica.com/information-technology/2012/10/arm-goes-64-bit-with-new-cortex-a53-and-cortex-a57-designs/ | dead-url=no }}

== 參考資料 ==
{{Reflist|30em|refs=
<ref name="Auto4J-1">{{cite press release | url=http://www.arm.com/about/newsroom/arm-unveils-its-most-energy-efficient-application-processor-ever-with-biglittle-processing.php | title=ARM Unveils its Most Energy Efficient Application Processor Ever; Redefines Traditional Power And Performance Relationship With big.LITTLE Processing | publisher=[[ARM_Holdings|ARM Holdings]] | date=19 October 2011 | accessdate=2012-10-31 | archive-date=2018-05-07 | archive-url=https://web.archive.org/web/20180507080622/https://www.arm.com/about/newsroom/arm-unveils-its-most-energy-efficient-application-processor-ever-with-biglittle-processing.php | dead-url=no }}</ref>
<ref name="cortex-a50 announce">{{cite press release | url=http://www.arm.com/about/newsroom/arm-launches-cortex-a50-series-the-worlds-most-energy-efficient-64-bit-processors.php | title=ARM Launches Cortex-A50 Series, the World’s Most Energy-Efficient 64-bit Processors | publisher=[[ARM_Holdings|ARM Holdings]] | accessdate=2012-10-31 | archive-date=2013-01-09 | archive-url=https://www.webcitation.org/6DXHAnOzS?url=http://www.arm.com/about/newsroom/arm-launches-cortex-a50-series-the-worlds-most-energy-efficient-64-bit-processors.php | dead-url=no }}</ref>
<ref name="anand-5420">{{cite web | url=http://www.anandtech.com/show/7313/samsung-announces-biglittle-mp-support-in-exynos-5420 | title=Samsung Announces big.LITTLE MP Support in Exynos 5420 | publisher=[[AnandTech|AnandTech]] | date=2013-09-11 | author=Brian Klug | accessdate=2013-09-16 | archive-date=2020-11-12 | archive-url=https://web.archive.org/web/20201112030133/https://www.anandtech.com/show/7313/samsung-announces-biglittle-mp-support-in-exynos-5420 | dead-url=no }}</ref>
}}

== 外部連結 ==
* [https://web.archive.org/web/20121022055646/http://www.arm.com/products/processors/technologies/bigLITTLEprocessing.php big.LITTLE Processing]
* [https://web.archive.org/web/20131017064722/http://www.arm.com/files/downloads/big_LITTLE_Final_Final.pdf Big.LITTLE Processing with ARM CortexTM-A15 & Cortex-A7] (PDF)

{{Authority control}}
[[Category:ARM架構|Category:ARM架構]]
[[Category:異質計算|Category:異質計算]]