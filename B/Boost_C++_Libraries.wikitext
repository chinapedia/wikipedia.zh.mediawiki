{{noteTA
|G1=IT
|G2=FL
}}
{{ Infobox Software
| name                   = Boost C++ Libraries
| logo                   = Boost.png
| logo size              = 200px
| caption                = 
| author                 = 
| latest_release_version = 1.78.0
| latest_release_date    = {{Release date and age|2021|12|08}}
| latest_preview_version = 
| latest_preview_date    = 
| genre                  = [[函式庫|函式庫]]
| license                = [[Boost许可证|Boost许可证]]
| website                = {{URL|https://www.boost.org/}}
}}

'''Boost C++ 函式庫'''（Libraries）是一組擴充[[C++|C++]]功能的經過[[同行評審|同行評審]]（Peer-reviewed）且[[開放源碼|開放源碼]]程式庫。大多數的函式為了能夠以開放源碼或者封閉專案的方式運作，而授權於Boost軟體授權條款（Boost Software License）之下。許多Boost的開發人員是來自C++標準委員會，而部份的Boost函式庫成為C++的[[C++_Technical_Report_1|TR1]]標準之一。<ref>{{Cite web |url=http://www.open-std.org/jtc1/sc22/wg21/docs/library_technical_report.html |title=Library Technical Report<!-- Bot generated title --> |accessdate=2008-08-07 |archive-date=2017-12-11 |archive-url=https://web.archive.org/web/20171211014333/http://www.open-std.org/jtc1/sc22/wg21/docs/library_technical_report.html |dead-url=no }}</ref>

為了要確保函式庫的效率與彈性，Boost廣泛的使用[[模板_(C++)|模板]]（template）功能。而它是針對各式領域的C++使用者與應用領域（Application Domain）上，包含的函式庫類別從像[http://www.boost.org/doc/libs/1_35_0/libs/smart_ptr/smart_ptr.htm smart_ptr 函式庫]{{Wayback|url=http://www.boost.org/doc/libs/1_35_0/libs/smart_ptr/smart_ptr.htm |date=20080906190553 }}這種類通用函式庫，到像是[[Boost_檔案系統|檔案系統]]的[[作業系統|作業系統]]抽象層，甚至能夠利用Boost來開發額外的函式庫或是給進階的C++使用者利用，像是[http://www.boost.org/libs/mpl MPL]{{Wayback|url=http://www.boost.org/libs/mpl |date=20080222151335 }}。

== 內容 ==
*[[标准模板库#演算法|演算法]]
*并行计算
**[http://boost.org/libs/thread/index.html thread]{{Wayback|url=http://boost.org/libs/thread/index.html |date=20071021182442 }} - [[執行緒|執行緒]]
**[http://boost.org/libs/context/index.html context]{{Wayback|url=http://boost.org/libs/context/index.html |date=20190924173459 }} - 用戶層級[[上下文交換|上下文交換]]
*[[容器_(计算机科学)|容器]]
**[http://boost.org/doc/html/array.html array]{{Wayback|url=http://boost.org/doc/html/array.html |date=20080829213552 }} - STL的数组容器
**[http://boost.org/libs/graph/doc/table_of_contents.html Boost Graph Library (BGL)]{{Wayback|url=http://boost.org/libs/graph/doc/table_of_contents.html |date=20080821220341 }} - 通用的图容器，组件和算法
**[http://boost.org/libs/multi_array/doc/index.html multi-array]{{Wayback|url=http://boost.org/libs/multi_array/doc/index.html |date=20080905140301 }} - N维数组
**[http://boost.org/libs/multi_index/doc/index.html multi-index containers]{{Wayback|url=http://boost.org/libs/multi_index/doc/index.html |date=20080113212825 }} - 多索引容器
**[http://boost.org/libs/ptr_container/doc/ptr_container.html pointer containers]{{Wayback|url=http://boost.org/libs/ptr_container/doc/ptr_container.html |date=20081202133945 }} - 指针容器
**[https://web.archive.org/web/20081010133941/http://www.boost.org/libs/property_map/property_map.html property map] - 属性Map
**[http://boost.org/doc/html/variant.html variant]{{Wayback|url=http://boost.org/doc/html/variant.html |date=20081011063518 }} - 安全的，基于泛型的，支持访问者模式的联合
**[http://boost.org/libs/fusion/ fusion]{{Wayback|url=http://boost.org/libs/fusion/ |date=20080517054137 }} - 基于tuple的容器和算法集合
*正当性與測試
**[http://boost.org/libs/concept_check/concept_check.htm concept check]{{Wayback|url=http://boost.org/libs/concept_check/concept_check.htm |date=20081202205949 }} - 檢查模板參數是否滿足模板的要求<!--(功能如同 C++0x 引入的 concept)-->
**[http://boost.org/doc/html/boost_staticassert.html static assert]{{Wayback|url=http://boost.org/doc/html/boost_staticassert.html |date=20081203011214 }} - 編譯期的斷言檢查
**[https://web.archive.org/web/20080516051646/http://boost.org/libs/test/doc/index.html Boost Test Library] - C++ 单元测试框架
*[[資料結構|資料結構]]
**[http://boost.org/libs/dynamic_bitset/ dynamic_bitset]{{Wayback|url=http://boost.org/libs/dynamic_bitset/ |date=20080827235124 }} - <code>std::bitset-</code>的動態轉型
*[[仿函式|仿函式]]與[[高階函式|高階函式]]（含無名関数）
**[http://boost.org/libs/bind/bind.html bind]{{Wayback|url=http://boost.org/libs/bind/bind.html |date=20080906151923 }} and [http://www.boost.org/libs/bind/mem_fn.html mem_fn]{{Wayback|url=http://www.boost.org/libs/bind/mem_fn.html |date=20080113213814 }} - 函式的綁定
**[http://boost.org/doc/html/function.html function]{{Wayback|url=http://boost.org/doc/html/function.html |date=20081011163142 }} - 函式。
**[http://boost.org/libs/functional/index.html functional]{{Wayback|url=http://boost.org/libs/functional/index.html |date=20080101113836 }} - C++標準函式之強化。包含以下的内容。
***[http://boost.org/libs/functional/function_traits.html function object traits]{{Wayback|url=http://boost.org/libs/functional/function_traits.html |date=20081202222247 }}
***[http://boost.org/libs/functional/negators.html negators]{{Wayback|url=http://boost.org/libs/functional/negators.html |date=20081202215539 }}
***[http://boost.org/libs/functional/binders.html binders]{{Wayback|url=http://boost.org/libs/functional/binders.html |date=20081205030621 }}
***[http://boost.org/libs/functional/ptr_fun.html adapters for pointers to functions]{{Wayback|url=http://boost.org/libs/functional/ptr_fun.html |date=20080307231117 }}
***[http://boost.org/libs/functional/mem_fun.html adapters for pointers to member functions]{{Wayback|url=http://boost.org/libs/functional/mem_fun.html |date=20081202220818 }}
**[http://boost.org/doc/html/hash.html hash]{{Wayback|url=http://boost.org/doc/html/hash.html |date=20080930164212 }} - C++ Technical Report 1（TR1）定義的雜湊表
**[http://boost.org/doc/html/lambda.html lambda]{{Wayback|url=http://boost.org/doc/html/lambda.html |date=20081011063855 }} - [[λ演算|λ演算]]的實作
**[http://boost.org/doc/html/ref.html ref]{{Wayback|url=http://boost.org/doc/html/ref.html |date=20081012151255 }} - 標準C++参照（call by reference）的加強、特別強化與函式的呼叫
**[http://boost.org/libs/utility/utility.htm#result_of result_of]{{Wayback|url=http://boost.org/libs/utility/utility.htm#result_of |date=20081204140615 }} - 函式型別與回傳值
**[http://boost.org/doc/html/signals2.html signals2]{{Wayback|url=http://boost.org/doc/html/signals2.html |date=20190924173507 }} - 信号和槽回调的实现托管
*[[泛型|泛型]]
*[[圖|圖]]
*[[I/O|I/O]]
*語言之間的支援（[[Python|Python]]用）
*[[迭代器|迭代器]]
**[http://boost.org/libs/iterator/doc/index.html iterators]{{Wayback|url=http://boost.org/libs/iterator/doc/index.html |date=20041009145549 }}
**[http://boost.org/libs/utility/operators.htm operators]{{Wayback|url=http://boost.org/libs/utility/operators.htm |date=20081011163433 }} 
**[http://boost.org/libs/tokenizer/index.html tokenizer]{{Wayback|url=http://boost.org/libs/tokenizer/index.html |date=20080907211346 }} 
*数学和計算
*内存（memory）
**[http://boost.org/libs/pool/doc/index.html pool]{{Wayback|url=http://boost.org/libs/pool/doc/index.html |date=20080113205027 }} - 内存池，boost提供4种内存池模型供使用：pool、object_pool、singleton_pool、pool_allocator/fast_pool_allocator
**[http://boost.org/libs/smart_ptr/smart_ptr.htm smart_ptr]{{Wayback|url=http://boost.org/libs/smart_ptr/smart_ptr.htm |date=20080724032159 }} - boost的smart_ptr中提供了4种智能指针，作为std::auto_ptr的补充
***[https://web.archive.org/web/20080905004740/http://www.boost.org/libs/smart_ptr/scoped_ptr.htm scoped_ptr] - 具作用域指针，与std::auto_ptr类似，但不能转让所有权，用于确保离开作用域能夠正确地删除动态分配的对象
***[https://web.archive.org/web/20080908033515/http://boost.org/libs/smart_ptr/scoped_array.htm scoped_array] - 配合scoped_ptr使用
***[https://web.archive.org/web/20081011105952/http://www.boost.org/libs/smart_ptr/shared_ptr.htm shared_ptr] - 
***[https://web.archive.org/web/20080905004024/http://www.boost.org/libs/smart_ptr/shared_array.htm shared_array] - 配合shared_ptr使用
***[https://web.archive.org/web/20080724032255/http://boost.org/libs/smart_ptr/weak_ptr.htm weak_ptr] - shared_ptr 的观察者，避免shared_ptr循环引用，是一种辅助指针
***[https://web.archive.org/web/20081010135940/http://www.boost.org/libs/smart_ptr/intrusive_ptr.html intrusive_ptr] - 比 shared_ptr 更好的智能指针
**[http://boost.org/libs/utility/utility.htm utility]{{Wayback|url=http://boost.org/libs/utility/utility.htm |date=20081204140615 }} - 以下是utility类型的定义。
***[https://web.archive.org/web/20081204140532/http://www.boost.org/libs/utility/base_from_member.html base from member idiom] - 
***[http://boost.org/libs/utility/checked_delete.html checked delete]{{Wayback|url=http://boost.org/libs/utility/checked_delete.html |date=20080905115246 }} - 保证在摧毀一个对象时，必须对该对象的类型有充份了解
***[http://boost.org/libs/utility/utility.htm#functions_next_prior next and prior functions]{{Wayback|url=http://boost.org/libs/utility/utility.htm#functions_next_prior |date=20081204140615 }} - 
***[http://boost.org/libs/utility/utility.htm#Class_noncopyable noncopyable]{{Wayback|url=http://boost.org/libs/utility/utility.htm#Class_noncopyable |date=20081204140615 }} - 把copy constructor和assign operaotr 宣告为private，不加以实现
***[http://boost.org/libs/utility/utility.htm#addressof addressof]{{Wayback|url=http://boost.org/libs/utility/utility.htm#addressof |date=20081204140615 }} - 用于获得变量的地址
***[http://boost.org/libs/utility/utility.htm#result_of result_of]{{Wayback|url=http://boost.org/libs/utility/utility.htm#result_of |date=20081204140615 }} - 指涉函式回返型別
*[[序列化|序列化]]
*[[語法分析器|語法分析器]]
*預處理元編程
*[[字串|字串]]與文字處理（[[正規表示式|正規表示式]]等）
**[https://web.archive.org/web/20080724032825/http://boost.org/libs/conversion/lexical_cast.htm lexical_cast] - lexical_cast 类別模板
**[http://boost.org/libs/format/index.html format]{{Wayback|url=http://boost.org/libs/format/index.html |date=20081202214711 }} - 文字格式化，类似printf
**[http://boost.org/libs/iostreams/doc/index.html iostreams]{{Wayback|url=http://boost.org/libs/iostreams/doc/index.html |date=20071224064500 }} - 新式iostream的補強
**[https://web.archive.org/web/20080113211048/http://www.boost.org/libs/regex/doc/index.html regex] - 正規表示法（Regular expression）
**{{link-en|Spirit Parser Framework|Spirit Parser Framework|Spirit}} - 根据EBNF规则对文件进行分析
**[http://boost.org/doc/html/string_algo.html string algorithms]{{Wayback|url=http://boost.org/doc/html/string_algo.html |date=20080830032859 }} - 文字列演算法
**[http://boost.org/libs/tokenizer/index.html tokenizer]{{Wayback|url=http://boost.org/libs/tokenizer/index.html |date=20080907211346 }} - 把字串序列分解成一系列标记（tokens）
**[http://boost.org/libs/wave/index.html wave]{{Wayback|url=http://boost.org/libs/wave/index.html |date=20081204142215 }} -
*[[模板元编程|模板元编程]]（Template Metaprogramming）
**[http://boost.org/libs/mpl/doc/index.html mpl]{{Wayback|url=http://boost.org/libs/mpl/doc/index.html |date=20080517030035 }} - 模板元编程框架
**[http://boost.org/doc/html/boost_staticassert.html static assert]{{Wayback|url=http://boost.org/doc/html/boost_staticassert.html |date=20081203011214 }} - 靜態斷言
**[https://web.archive.org/web/20080113213705/http://boost.org/doc/html/boost_typetraits.html type traits] - 型別的基本属性的模板
*其他

== 范例 ==

现有的 Boost 包含大约150种不同的函数库，以下面几项做范例：

=== 线性代数 – uBLAS ===
Boost 包含了 '''uBLAS''' [[线性代数|线性代数]]函数库，能够藉由基本函数库子函数（BLAS）来支持向量与矩阵形运算。

* 此范例表示如何矩阵与向量作乘积：
<syntaxhighlight lang="cpp"> 
#include <boost/numeric/ublas/vector.hpp>
#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/io.hpp>
#include <iostream>

using namespace boost::numeric::ublas;

/* 举例 "y = Ax"  */
int main () 
{
      vector<double> x (2);
      x(0) = 1; x(1) = 2;
 
      matrix<double> A(2,2);
      A(0,0) = 0; A(0,1) = 1;
      A(1,0) = 2; A(1,1) = 3;

      vector<double> y = prod(A, x);

      std::cout << y << std::endl;
      return 0;
}
</syntaxhighlight>

=== 随机数产生 – Boost.Random ===
Boost 也提供独立分布的[[模拟随机|模拟随机]]与 PRNG 独立性的机率分布，而这些能夠具体的建立产生器。

* 此范例表示如何使用 [[Mersenne_Twister|Mersenne Twister]] 演算法来产生随机

<syntaxhighlight lang="cpp">
#include <boost/random.hpp>
#include <ctime>

using namespace boost;

double SampleNormal (double mean, double sigma)
{
    // 建立一个 Mersenne twister 随机数产生器
    // 使用 Unix 时间设定 seed
    static mt19937 rng(static_cast<unsigned> (std::time(0)));

    // 选择高斯机率分布
    normal_distribution<double> norm_dist(mean, sigma);

    // 使用 function 的形式，生成随机数据产生器
    variate_generator<mt19937&, normal_distribution<double> >  normal_sampler(rng, norm_dist);

    // 传回样本分布结果
    return normal_sampler();
}
</syntaxhighlight>
更详细的说明请参阅 [http://boost.org/libs/random/ Boost 随机数库]{{Wayback|url=http://boost.org/libs/random/ |date=20081202172712 }}。

=== 多執行緒 – Boost.Thread ===
範例碼演示建立執行緒：
<syntaxhighlight lang="cpp">
#include <boost/thread/thread.hpp>
#include <iostream>

using namespace std; 

void hello_world() 
{
  cout << "Hello world, I'm a thread!" << endl;
}

int main(int argc, char* argv[])
{
  // 開始一條使用 "hello_world" function 的新執行緒
  boost::thread my_thread(&hello_world);
  // 等待執行緒完成工作
  my_thread.join();
  
  return 0;
}
</syntaxhighlight>

* [http://www.ddj.com/dept/cpp/184401518 Introduction to Boost.Threads]{{Wayback|url=http://www.ddj.com/dept/cpp/184401518 |date=20080905162611 }} in [[Dr._Dobb's_Journal|Dr. Dobb's Journal]]. (2002)
* Boost.Threads [http://www.boost.org/doc/html/thread.html API reference]{{Wayback|url=http://www.boost.org/doc/html/thread.html |date=20081013005142 }}。
* [http://threadpool.sourceforge.net threadpool library]{{Wayback|url=http://threadpool.sourceforge.net/ |date=20200615195035 }} based on Boost.Thread

== 引用 ==
{{portal|Free software|Free Software Portal Logo.svg}}

{{reflist}}

== 外部連結 ==
{{wikibooks|en:C++ Programming/Libraries/Boost|Libraries/Boost}}

* [http://boost.org/ Boost 官方網站]{{Wayback|url=http://boost.org/ |date=20110717142414 }}
* [https://web.archive.org/web/20081201143925/http://www.codeproject.com/vcpp/stl/boostsmartptr.asp Smart Pointers to boost your code]
* [http://shoddykid.blogspot.com/2008/07/getting-started-with-boost.html Building Boost libraries]{{Wayback|url=http://shoddykid.blogspot.com/2008/07/getting-started-with-boost.html |date=20090205120125 }}
* [http://code.google.com/p/boost-doc-zh/ Boost 中文翻译]{{Wayback|url=http://code.google.com/p/boost-doc-zh/ |date=20100123023928 }} [https://web.archive.org/web/20101101223651/http://www.easycpp.org/book/boost%E5%AE%98%E6%96%B9%E6%89%8B%E5%86%8C 在线阅读]

[[Category:C++|Category:C++]]
[[Category:C++_Template_Library|Category:C++ Template Library]]
[[Category:C++函式庫|Category:C++函式庫]]
[[Category:自由發展元件與函式庫|Category:自由發展元件與函式庫]]