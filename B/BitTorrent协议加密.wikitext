{{校对翻译}}
{{NoteTA
|G1=IT
}}
'''协议加密'''（'''Protocol encryption'''，'''PE'''）、'''消息流加密'''（'''message stream encryption'''，'''MSE'''）或'''协议头加密'''（'''protocol header encrypt'''，'''PHE'''）是部分[[對等網路|對等網路]][[檔案分享|檔案分享]][[檔案分享程式比較|客户端]]的特性，包括[[BitTorrent客户端|BitTorrent客户端]]。它们尝试增强隐私和保密性，并尝试使第三方（如[[互联网服务供应商|互联网服务供应商]]）更难识别流量头部。

MSE/PE在[[BitComet|BitComet]]、{{tsl|en|BitTornado}}、[[Deluge|Deluge]]、[[快车|Flashget]]、[[KTorrent|KTorrent]]、[[BitTorrent客户端|Mainline]]、[[µTorrent|µTorrent]]、[[qBittorrent|qBittorrent]]、[[rTorrent|rTorrent]]、[[Transmission|Transmission]]、{{tsl|en|Tixati}}和[[Vuze|Vuze]]等软件中有被实现。PHE在旧版本的BitComet中被实现。类似的协议{{tsl|en|Obfuscation|混淆}}在最新版本的非BitTorrent系统（包括[[eMule|eMule]]）中也有实现<ref>{{cite web|url=http://www.emule-project.net/home/perl/help.cgi?l=1&rm=show_topic&topic_id=848|title=eMule protocol obfuscation (encryption)|accessdate=2010-03-11|date=2006-09-16|publisher=emule-project.net|archive-date=2009-09-25|archive-url=https://web.archive.org/web/20090925023618/http://www.emule-project.net/home/perl/help.cgi?l=1&topic_id=848&rm=show_topic|dead-url=no}}</ref>。

== 目的 ==
截至2005年1月，BitTorrent流量占据了住宅互联网总流量的三分之一以上<ref>{{cite web|url=http://www.wired.com/wired/archive/13.01/bittorrent.html|title=The Bittorrent Effect|date=2007-05-30|publisher=Wired|accessdate=2016-12-05|archive-date=2014-03-15|archive-url=https://web.archive.org/web/20140315074953/http://www.wired.com/wired/archive/13.01/bittorrent.html|dead-url=no}}</ref>，虽然这在2009年下降到不足20%<ref>{{cite web |url=http://www.sandvine.com/downloads/documents/2009%20Global%20Broadband%20Phenomena%20-%20Executive%20Summary.pdf |title=2009 Global Broadband Phenomena |date=2009-11-16 |publisher=Sandvine.com |deadurl=yes |archiveurl=https://web.archive.org/web/20091122162729/http://www.sandvine.com/downloads/documents/2009%20Global%20Broadband%20Phenomena%20-%20Executive%20Summary.pdf |archivedate=2009-11-22 |accessdate=2016-12-05 }}</ref>。一些互联网服务提供商通过增加其容量来处理这种流量，另有一些服务商使用专用的系统来降速对等流量以降低成本。混淆和加密会使流量更难以被检测和控制。这些系统的最初设计目的是[[匿名|匿名性]]或[[保密|保密性]]，但在某些国家（或地区、运营商）因[[互联网服务供应商|互联网服务供应商]]限制BitTorrent流量或用户而变成必需品，他们认为BitTorrent流量占用过多网络资源（增加运营成本）、干扰网络正常运行，或认为或限制“非法的”文件共享。{{fact}}

== 历史 ==

=== 早期方法 ===
协议头加密（PHE）由{{tsl|en|RnySmile}}构想并最先在2005年9月8日的[[BitComet|BitComet]] 0.60中实现。一些软件如IPP2P声称可以检测到使用了PHP的BitComet流量<ref>{{cite web|url=http://www.ipp2p.org/news_en.html|title=News|date=2006-01-04|publisher=IPP2P.org|accessdate=2016-12-05|archive-date=2013-05-20|archive-url=https://web.archive.org/web/20130520031545/http://www.ipp2p.org/news_en.html|dead-url=no}}</ref>。PHE是可以被检测的，因为只有部分流被加密。由于没有此协议的开放规范，其他客户端支持它的唯一方法是通过[[逆向工程|逆向工程]]。

=== MSE/PE的开发 ===
2006年1月下旬，[[Vuze|Vuze]]（当时称为Azureus）的开发者决定设计并实现一个新的、开放的协议混淆方法，它被称消息流加密（message stream encryption，简称MSE）。该协议被包含在2006年1月19日的Azureus CVS快照2307-B29中<ref>{{cite web|url=http://sourceforge.net/mailarchive/forum.php?thread_name=200601200753.k0K7rYp0016440%40aelitis.com&forum_name=azureus-commitlog|title=[Azureus-commitlog] CVS Snapshot Azureus2307-B29.jar has been released !|date=2006-01-19|publisher=Sourceforge.net|accessdate=2016-12-05|archive-date=2019-09-24|archive-url=https://web.archive.org/web/20190924171204/https://sourceforge.net/p/azureus/mailman/azureus-commitlog/thread/200601200753.k0K7rYp0016440@aelitis.com/|dead-url=no}}</ref>。

这份首稿受到了严重的批评，因为它缺乏几个关键特征。在几名BitTorrent开发者磋商后，一份新的提案在几天内被撰写并实现到[[Vuze|Azureus]]和[[µTorrent|µTorrent]] beta。在µTorrent中，新的协议被称为协议加密（protocol encryption，简称PE）。

=== BitTorrent客户端各版本中的MSE/PE ===
* BitComet 0.63版本，发布于2006年3月7日。它移除了旧的协议头加密并实现了新的MSE/PE以兼容Azureus和µTorrent<ref>{{cite web|url=http://www.bitcomet.com/doc/changelog.htm|title=BitComet Client Release Notes|date=2006-03-07|publisher=Bitcomet.com|accessdate=2016-12-05|archive-date=2010-12-17|archive-url=https://web.archive.org/web/20101217053502/http://www.bitcomet.com/doc/changelog.htm|dead-url=no}}</ref>。
* {{tsl|en|BitTornado}}从T-0.3.18版本开始支持MSE/PE。截至2007年1月5日，该版本仍在下载页面上标为“实验性”<ref>{{cite web|url=http://forums.degreez.net/viewtopic.php?t=7074|title=BitTornado T-0.3.18|date=2007-01-05|publisher=Degreez.net forum|accessdate=2016-12-05|archive-date=2017-03-25|archive-url=https://web.archive.org/web/20170325113536/http://forums.degreez.net/viewtopic.php?t=7074|dead-url=no}}</ref>。
* [[BitTorrent客户端|BitTorrent]] （Mainline）从2006年5月2日的4.9.2-beta开始支持MSE/PE<ref>{{cite web|url=http://www.bittorrent.com/versionnotes.html|title=Version Notes|date=2006-05-02|publisher=BitTorrent.com|archiveurl=https://web.archive.org/web/20060613094322/http://www.bittorrent.com/versionnotes.html|archivedate=2006-06-13|accessdate=2016-12-05|dead-url=no}}</ref>。
* [[Deluge|Deluge]]从Deluge-0.5.1开始支持MSE/PE<ref>{{cite web|url=http://deluge-torrent.org/?p=15|title=Changelog: Deluge 0.5.1 (11 June 2007)|date=2007-06-11|publisher=Deluge-torrent.org|archiveurl=https://web.archive.org/web/20080401062051/http://deluge-torrent.org/Changelog.php|archivedate=2008-04-01|accessdate=2016-12-05|dead-url=no}}</ref>。
* [[KTorrent|KTorrent]]在2006年4月29日的SVN版本535386中实现MSE/PE<ref>{{cite web|url=http://ktorrent.pwsp.net/forum/viewtopic.php?t=432|title=Encryption has been added !|date=2006-04-29|publisher=KTorrent.pwsp.net forum|archiveurl=https://web.archive.org/web/20070605174155/http://ktorrent.pwsp.net/forum/viewtopic.php?t=432|archivedate=2007-06-05|accessdate=2016-12-05|dead-url=no}}</ref>。
* [[rTorrent|rTorrent]]从rTorrent-0.7.0开始支持MSE/PE<ref>{{cite web|url=http://rakshasa.no/pipermail/libtorrent-devel/2006-December/000982.html|title=[Libtorrent-devel] LibTorrent 0.11.0 and rTorrent 0.7.0 released|date=2006-12-13|publisher=Rakshasa.no mail archive|access-date=2016-12-05|archive-url=https://web.archive.org/web/20070502055625/http://rakshasa.no/pipermail/libtorrent-devel/2006-December/000982.html|archive-date=2007-05-02|dead-url=yes}}</ref>。
* [[Transmission|Transmission]]从Transmission-0.90开始支持MSE/PE<ref>{{cite web|url=http://transmission.m0k.org/forum/viewtopic.php?t=2631|title=Transmission 0.90 Released!|date=2007-10-24|publisher=Transmission.m0k.org forum|archiveurl=https://web.archive.org/web/20071027022525/http://transmission.m0k.org/forum/viewtopic.php?t=2631|archivedate=2007-10-27|accessdate=2016-12-05|dead-url=no}}</ref>。
* [[Vuze|Vuze]]（以前名为Azureus）自2006年1月25日（CVS快照2307-B33）起支持最终版标准<ref>{{cite web|url=http://sourceforge.net/mailarchive/forum.php?thread_name=200601252228.k0PMSnp0024117%40aelitis.com&forum_name=azureus-commitlog|title=[Azureus-commitlog] CVS Snapshot Azureus2307-B33.jar has been released !|date=2006-01-25|publisher=Sourceforge.net|accessdate=2016-12-05|archive-date=2019-09-24|archive-url=https://web.archive.org/web/20190924171211/https://sourceforge.net/p/azureus/mailman/azureus-commitlog/thread/200601252228.k0PMSnp0024117@aelitis.com/|dead-url=no}}</ref>。Azureus 2.4.0.0于2006年2月10日发布，是首个支持MSE/PE的稳定版本客户端。不过，Azureus的实现中存在瑕疵，会导致不正确的加密片段，从而散列检查失败。该瑕疵在2.4.0.2版本中被纠正<ref>{{cite web|url=http://azureus.sourceforge.net/changelog.php?version=2.4.0.2|title=Azureus : Java BitTorrent Client - Changelog|publisher=Azureus.sourceforge.net|accessdate=2016-12-05|archive-date=2006-03-20|archive-url=https://web.archive.org/web/20060320195041/http://azureus.sourceforge.net/changelog.php?version=2.4.0.2|dead-url=no}}</ref>。
* [[µTorrent|µTorrent]]在Azureus的beta 1.4.1 build 407发布4年后支持MSE/PE<ref>{{cite web |url=http://forum.utorrent.com/viewtopic.php?id=5384 |title=µTorrent 1.4.2 beta 435 |date=2006-01-29 |publisher=uTorrent Announcements |deadurl=yes |archiveurl=https://web.archive.org/web/20060514085453/http://forum.utorrent.com/viewtopic.php?id=5384 |archivedate=2006-05-14 |accessdate=2016-12-05 }}</ref>。µTorrent的1.5（build 436）版本于2006年3月7日发布；它是首个支持PE的µTorrent稳定版本<ref>[http://forum.utorrent.com/viewtopic.php?id=7199 "µTorrent 1.5 released"] {{Wayback|url=http://forum.utorrent.com/viewtopic.php?id=7199 |date=20130529090641 }}. uTorrent Announcements. 2006-03-07.</ref>。

== 操作 ==
BitComet 0.60至0.62版本中使用的PHE方法即没有发布，也不兼容MSE/PE。

MSE/PE使用[[迪菲-赫爾曼密鑰交換|密钥交换]]结合torrent的infohash建立一个[[RC4|RC4]]加密密钥。密钥交换有助于最小化被动监听器的风险，而infohash有助于避免[[中间人攻击|中间人攻击]]。选择RC4是为了速度更快。输出的第一个[[kibibyte|kibibyte]]（1024字节）被丢弃以防止{{tsl|en|Fluhrer, Mantin and Shamir attack}}。

该规范允许用户选择仅加密报头或者完全加密整个连接。加密整个连接提供更强的混淆能力，但也消耗更多的CPU时间。

为确保与不支持此规范的其他客户端的兼容性，用户还可选择是否仍允许未加密的传入或传出连接。

支持的客户端通过[[节点交换|节点交换]]（PEX）和[[分散式雜湊表|分散式雜湊表]]（DHT）通告它们已启用MSE/PE。

== 安全性 ==
该加密方法若对应常用的对称加密算法，加密强度约为60-80比特<ref>{{cite web|url=http://tools.ietf.org/html/rfc3526#section-8|title=RFC 3526 chapter 8|publisher=IETF.org|accessdate=2016-12-05|archive-date=2017-01-18|archive-url=https://web.archive.org/web/20170118225103/https://tools.ietf.org/html/rfc3526#section-8|dead-url=no}}</ref>。在密码学领域，这个有效的密钥长度相当低，但该协议不是为安全传输而设计，而是作为一种快速并有效的混淆方法。[[高级加密标准|AES]]曾被提出作为加密方法，但未被采用，因为会消耗太多的CPU时间。它需要[[迪菲-赫爾曼密鑰交換|迪菲-赫爾曼密鑰交換]]（Diffie–Hellman）密钥来做到AES级别的安全性，而AES要做到会更大，或者需要[[椭圆曲线密码学|椭圆曲线密码学]]，使握手要使用较多的CPU时间。

== 效果 ==
一些互联网服务提供商正在使用更复杂的措施（例如模式/时量分析，或者基于信道侧数据对端口进行分类）来检测BitTorrent流量。这意味着加密的BitTorrent流量也可以被限流。但是，也有些服务商继续使用简单、便宜的方法来识别和限流BitTorrent，因此当前的方案仍有效果。{{Fact|date=March 2010}}

对BitTorrent协议加密（也称MSE）的分析显示，数据包大小的测量统计和TCP会话中前100个数据包的数据包方向可以被用来识别混淆的协议，具有超过96%的准确性<ref name="breaking">{{cite web|url=http://www.iis.se/docs/hjelmvik_breaking.pdf|title=Breaking and Improving Protocol Obfuscation|date=2010-07-27|format=PDF|publisher=Department of Computer Science and Engineering, [[Chalmers_University_of_Technology|Chalmers University of Technology]]|last1=Hjelmvik|first1=Erik|last2=John|first2=Wolfgang|issn=1652-926X|accessdate=2016-12-05|archive-date=2016-12-04|archive-url=https://web.archive.org/web/20161204140555/https://www.iis.se/docs/hjelmvik_breaking.pdf|dead-url=yes}}</ref>。

{{tsl|en|Sandvine}}应用程序采用另一种途径，通过使播种（Seeding）失效来瓦解BitTorrent流量。Sandvine截取对等端到跟踪服务器（tracker）的通信并基于跟踪服务器返回的节点列表中的节点地址和端口号来识别对等端。当Sandvine在之后看到已截取的对等端列表中的对等端的连接时，它可能（根据策略）发送伪造的TCP重置来中断这些连接。有多种方案来抗击Sandvine的攻击，包括对等端到跟踪服务器及对等端到对等端之间的通信加密，使用微软的[[Teredo|Teredo]]使TCP连接隧道化为UDP数据包，在终端主机的TCP层中过滤掉TCP重置包，或者完全从基于TCP的传输变为基于UDP的传输等。每个解决方案都各有利弊。过滤掉TCP重置通常需要内核访问权限和远程节点的参与，因为Sandvine会将重置数据包同时发给本地和远程节点。{{Fact|date=September 2012}}

== 批评 ==
[[BitTorrent_(协议)|BitTorrent]]的发明者[[布莱姆·科亨|布莱姆·科亨]]（Bram Cohen）反对将加密加入BitTorrent协议，他担心加密可能导致客户端之间的不兼容，并还强调大多数ISP不封阻torrent协议。2006年他写道：“我相当怀疑有些开发者受到了他的ISP的限制，并更有兴趣破解他的ISP的限制，而不是整个互联网的性能。”<ref>{{cite web |url=http://bramcohen.livejournal.com/29886.html |title=Obfuscating BitTorrent |date=2006-01-29 |last=Cohen |first=Bram |authorlink=Bram Cohen |publisher=Bram Cohen blog |deadurl=yes |archiveurl=https://web.archive.org/web/20060207023731/http://bramcohen.livejournal.com/29886.html |archivedate=2006-02-07 |accessdate=2016-12-05 }}</ref> 许多BitTorrent社区的用户强烈反对Cohen的指责<ref>{{cite web |url=http://forum.utorrent.com/viewtopic.php?id=5742 |title=Debate over Protocol Encryption |date=2006-02-04 |publisher=uTorrent.com forum |deadurl=yes |archiveurl=https://web.archive.org/web/20071022175414/http://forum.utorrent.com/viewtopic.php?id=5742 |archivedate=2007-10-22 |accessdate=2016-12-05 }}</ref>。Cohen后来也添加了加密连接到他的[[BitTorrent_(软件)|Mainline客户端]]<ref>{{cite web|url=http://www.bittorrent.com/versionnotes.html|title=BitTorrent Mainline Version History|date=2006-10-15|publisher=BitTorrent.com|archiveurl=https://web.archive.org/web/20070225131829/http://www.bittorrent.com/versionnotes.html|archivedate=2007-02-25|accessdate=2016-12-05|dead-url=no}}</ref>使其有接收能力，但不会如此发送加密连接。{{Fact|date=April 2013}}

== 参考资料 ==
{{reflist|colwidth=30em}}

== 外部链接 ==
* [http://wiki.vuze.com/w/Message_Stream_Encryption "Message Stream Encryption"]{{Wayback|url=http://wiki.vuze.com/w/Message_Stream_Encryption |date=20161231215426 }}. Vuze.
* [http://wiki.vuze.com/w/Bad_ISPs "ISPs that shape BitTorrent"]{{Wayback|url=http://wiki.vuze.com/w/Bad_ISPs |date=20161126071415 }}. Vuze.
* [https://web.archive.org/web/20170711104140/http://www.slyck.com/news.php?story=1083 "BitTorrent End to End Encryption and Bandwidth Throttling - Part I" with µTorrent developers]. Slyck News.
* [https://web.archive.org/web/20160510034323/http://www.slyck.com/news.php?story=1098 "BitTorrent End to End Encryption and Bandwidth Throttling - Part II" with Azureus developers] Slyck News.
* [http://yro.slashdot.org/story/06/02/06/2039241/bittorrent-and-end-to-end-encryption "BitTorrent and End to End Encryption"]{{Wayback|url=http://yro.slashdot.org/story/06/02/06/2039241/bittorrent-and-end-to-end-encryption |date=20161228020209 }}. Slashdot.
* [http://bittorrent.org/beps/bep_0008.html "Tracker Peer Obfuscation"]{{Wayback|url=http://bittorrent.org/beps/bep_0008.html |date=20080218100858 }}. BitTorrent.org.
* [https://web.archive.org/web/20121109160226/http://sourceforge.net/apps/mediawiki/spid/index.php?title=Identifying_the_Message_Stream_Encryption_%28MSE%29_protocol "Identifying the Message Stream Encryption (MSE) protocol" for Statistical Protocol IDentification]. Sourceforge.
* [http://www.cisco.com/en/US/products/ps5855/products_configuration_example09186a0080ac3082.shtml "Block P2P Traffic on a Cisco IOS Router using NBAR"]{{Wayback|url=http://www.cisco.com/en/US/products/ps5855/products_configuration_example09186a0080ac3082.shtml |date=20140208154832 }}. Cisco.
* [https://web.archive.org/web/20131006215023/http://gotux.net/arch-linux/aria2c-downloader-through-vpn-tunnel/ "Aria2c VPN/Proxy Tutorial"]. GoTux.

{{BitTorrent}}
[[Category:BitTorrent|Category:BitTorrent]]
[[Category:加密协议|Category:加密协议]]