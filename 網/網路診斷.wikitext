{{cleanup-jargon}}
'''網路診斷'''<ref>{{Cite thesis |degree= |chapter= |title=樹狀網路之控制與統計反向問題 |url=https://www.airitilibrary.com/Publication/alDetailedMesh?docid=U0031-0207200917352552 |author=詹政霖 |last= |first= |year=2008 |publisher=中央大學統計研究所 |accessdate=2021-02-26 |docket= |oclc= }}</ref>又称'''网络断层扫描'''<ref>{{cite journal |author1=李惠康 |coauthors=高艺,董玮,陈纯 |title=网络断层扫描:理论与算法 |journal=软件学报 |date=2021 |volume=32 |issue=2 |pages=475-495 |url=http://www.jos.org.cn/jos/ch/reader/view_abstract.aspx?file_no=6134 |accessdate=2021-02-26 |archive-date=2021-01-17 |archive-url=https://web.archive.org/web/20210117231129/http://jos.org.cn/jos/ch/reader/view_abstract.aspx?file_no=6134 |dead-url=no }}</ref>，是近代發展的一種新的[[網路|網路]]測量與推論方法，透過可收集到的有限資訊來推估無法觀測的網路資訊，主要分成[[主動診斷|主動診斷]](active tomography)與[[被動診斷|被動診斷]](passive tomography)兩類問題。被動診斷是資料從個別節點蒐集，去尋找路徑上的資訊，問題在估計起始節點至終端節點之流量矩陣。主動診斷是藉由設置接收節點，向接收節點發送大量的封包，根據接收節點收集到的測量數據，分析網路內部有興趣的參數或識別網路[[拓撲|拓撲]]結構。而衍生出來的[[統計|統計]]問題稱為[[統計反向問題|統計反向問題]](Statistical Inverse Problem)。

==研究主題==
網路診斷的概念最早由Vardi在1996年提出，現今的研究主要分為：

===網路起始節點至終端節點的流量強度估計===
所謂網路起始節點至終端節點(SD)流量強度估計主要是想要估計網路內各條SD路徑的封包流量。其主要概念為假設我們能觀測到網路內各節點互相傳送封包的路徑，以下簡稱連結和各條連結的封包流量，由各條連結所觀測到的結果來估計各條SD路徑的網路流量。

主要問題架構與符號定義如下：
假設網路模型內有 <math>n</math> 個節點、<math>r</math> 條連結、<math>c</math> 條SD路徑且定義A為<math> r</math>x<math>c </math> 的路徑矩陣。
<br/>舉例來說，網路模型有4個節點(a,b,c,d)、7條連結、12條SD路徑，如下方左圖所示，且路徑矩陣A可表達如下方右圖所示。
<br/> 

令<math>X_j^\left(k\right)</math>表示第 <math>j</math> 條SD路徑在第 <math>k</math> 期的封包流量，在此假設
<math>X_j^\left(k\right)\sim Poisson(\lambda_j),\;j=1,...,c,\;k=1,...,K</math>。
<br/>因此連結的流量與SD路徑的流量可以表示成下列的線性模型
:<math>\boldsymbol{Y^\left(k\right)=AX^\left(k\right)}, k=1,...,K</math>
其中，
:<math>\boldsymbol{Y^\left(k\right)}=\left(Y_1^\left(k\right),...,Y_r^\left(k\right)\right)'</math>表示從第1期到第<math>K</math>期各條連結上觀察到的流量向量
:<math>\boldsymbol{A} </math>表示路徑矩陣，由元素0和1構成
:<math>\boldsymbol{X^\left(k\right)}=\left(X_1^\left(k\right),...,X_r^\left(k\right)\right)'</math>表示從第1期到第<math>K</math>期各條SD路徑的流量向量

我們希望利用觀測到的Y向量去估計X向量中的參數值<math>\mathrm{\lambda=\left(\lambda_1,...,\lambda_c\right)'}</math>，但通常X向量的維度遠大於Y向量的維度，因此X可能會有無限多解，
而目前發展出下列幾種尋找最佳參數解的方法
#[[最大概似法|最大概似法]]
#參數可能解中讓概似函數最大者
#藉由EM演算法找最大概似估計量
#[[動差法|動差法]]
#[[貝氏方法|貝氏方法]]

====例子====
假設網路模型有2條連結、3條SD路徑、1期的SD流量，即<math>r=2,c=3,K=1\ </math><br/>
令<math>X_i \sim Poisson(\lambda_i),\;i=1,2,3</math> 且 <math>X_1+X_2=1 , X_1+X_3=2</math><br/>
如下圖所示<br/>


則我們可以得到 
:<math>Y=\binom{1}{2},A=\begin{pmatrix}1&1&0\\1&0&1\end{pmatrix},X=\begin{pmatrix}X_1\\X_2\\X_3\end{pmatrix}</math>
因此模型可表示成 
:<math>\binom{1}{2} = \begin{pmatrix}1&1&0\\1&0&1\end{pmatrix} \cdot \begin{pmatrix}X_1\\X_2\\X_3\end{pmatrix}</math>
<br/>

以最大概似法求最佳解為例，
*參數可能解中讓概似函數最大者
先將所有可能的參數解找出。因為封包流量必須為正整數，因此只有以下兩組解：
:<math>X=\begin{pmatrix}1&0&1\end{pmatrix}'</math> 或 <math>X=\begin{pmatrix}0&1&2\end{pmatrix}'</math>
將可能的參數解代入概似函數
:<math>L(\lambda)=(\lambda_1\lambda_3+\frac{\lambda_2\lambda_3^2}{2})exp(-\lambda_1-\lambda_2-\lambda_3)</math>
找出讓概似函數最大的參數解，即為最佳參數解
:<math>Find\;\lambda : max_\lambda L(\lambda)</math>
因為
:<math>L(\begin{pmatrix}1&0&1\end{pmatrix}')</math> > <math>L(\begin{pmatrix}0&1&2\end{pmatrix}')</math>
最佳解為
:<math>{\lambda}=\begin{pmatrix}1&0&1\end{pmatrix}'</math>
*藉由EM演算法找最大概似估計量
先將概似函數整理成期望值的型態
:<math>\mathbf{\lambda}=E_\lambda [X|Y=AX]</math>
選定起始值<math>\lambda^\left(0\right)</math>
，運用EM演算法，進行遞迴運算，直到找出讓期望值最大的參數解
:<math>\lambda^\left(n+1\right)=E[X|Y,\lambda^\left(n\right)]</math>

利用EM演算法求解的缺點是當網路模型較大時，在計算上比較複雜；即使當期數夠多時，EM演算法僅能提高估計上的準確性並無法解決計算上的複雜。


針對EM演算法的缺點，Vardi在1996年提出一種較為可行的方法，即利用動差法來估計參數解。

假設當各條連結流量觀測的期數夠多時，根據中央極限定理
:<math>\bar{Y}=\frac{1}{K} \sum_{k=1}^K Y^\left(k\right)\;{dist.\to}\;N_r (A\lambda, K^\left(-1\right) A \Lambda A'),\;\Lambda=diag(\lambda)</math>
利用動差法，令樣本平均數等於母體平均數，樣本共變異數等於母體共變異數，即
:<math>\bar{Y}=A\lambda</math> ， <math>S=K^\left(-1\right) A \Lambda A'</math>
由上述式子即可估計出參數解<br/>

因此Vardi提出動差法可解決計算上的困難，也可以利用產生動差等式解決參數解不唯一的情況。

===網路連結層級參數推估===
所謂網路連結層級參數推估問題主要是想要推論網路連結的特性，例如節點傳輸之間資訊遺失率或延遲分配等。其主要概念為假設已知網路的形式，包含節點、路徑等，一般常見為樹狀，以及假設已知網路特性的模型，蒐集端點所測量的結果來找出有最大機率產生觀察結果的網路參數。

若考慮封包遺失率下，其主要問題架構與符號定義如下：
<br/>

假設有一個樹狀網路定義為

:<math>T=\left\{{V},{E} \right\}</math>，<br />
表示該網路有V個節點(包含起始節點0、終端節點R及中間節點I)、E條連結。令

:<math>X=(X_k)_{k \in V}</math>，<br/>
其中<math>X_k</math>表示封包傳送是否通過節點<math> k </math>，即

:*<math>X_k=0</math>表示沒有通過<math> k </math>節點
:*<math>X_k=1</math>表示有通過<math> k </math>節點<br/>
此外，若<math>X_i=1</math>且<math>X_j=1</math>，表示節點<math> i </math>與<math> j </math>之間的連結有封包通過，此處以<math>\alpha\,_i</math>表示封包通過的機率。

舉例來說，
<br/>
 
上圖為一個樹狀網路<br>
:<math>T=\left\{{V}=\left\{0,1,2,3,4,5,6,7\right\},{E}=\left\{(0,1),(1,2),(1,3),(2,4),(2,5),(3,6),(3,7)\right\}\right\}</math> <br/>
數字表示節點，起始節點為0，中間節點為1、 2、 3，而終端節點為4、5、6、7，<math>\alpha\,_i</math>表示連結<math>i</math>的通過率。

令封包傳送結果<math>X_{(R)}=(X_k)_{k \in R}</math>，則其機率分配表示為

:<math>p\,(x;\alpha) = P_\alpha(X_{(R)}=x)</math>。<br>
並假設發送了<math> n </math>個封包，令<math> n(x) </math>表示<math>x</math>所獲得的封包數，則 <math> n </math>個獨立的觀測值
<math>x^1</math>、<math>x^2</math>到<math>x^n</math>的分配為

:<math>p(x^1,x^2 ,\cdots, x^n; \alpha)</math>
:<math>=\prod_{m=1}^n p(x^m;\alpha) </math>
:<math> = \prod_{x\in\Omega} p(x; \alpha)^{n(x)}</math>，<br>
因此問題的目標即為估計<math>\alpha</math>。

從起始節點傳送封包，並觀察終端節點封包通過情況。傳送封包主要有兩種情況，一種為一次只傳送到一個接收的端點，稱為[[單一傳送|單一傳送]]；另一種為封包傳送到特定的一些接收端點，稱為[[多重傳送|多重傳送]]。然而這兩種傳送方式較沒有彈性，且無法使用不同的流量或不同時間下觀察網域，因此Xi et al. (2006)及Lawrence et al. (2006)針對'''彈性傳送(flexicast)'''封包的情況作探討。

此種觀察封包傳送情況來對網路做推論產生了[[統計反向問題|統計反向問題]]，即利用觀察結果來診斷連結中的分配或特徵。有許多統計方法可解決此類推論問題，Castro et al. (2004)提到像是降低複雜性的階層統計模型(Complexity-Reducing Hierarchical Statistical Models)、動差或最大概似法為主的估計、EM及馬可夫鏈蒙地卡羅(Markov Chain Monte Carlo, MCMC)演算方法等已被使用；且認為而使用統計方法來解決此問題的領域仍具有發展性，而未來應有更多現存的統計方法可加以應用。

以下茲列舉一種問題情況：「針對多重傳送為主的網路來推論該網路的封包遺失率」來說明網路連結參數中的遺失率推估問題。估計封包遺失率為Cáceres et al.(1999)首先研究，在假設連結遺失為獨立的[[伯努利分配下|伯努利分配下]]，利用最大概似法來估計多重傳送的樹狀網路中連結遺失率；他們亦證明此估計量具備[[強烈一致性|強烈一致性]]，並透過最大概似估計量之漸近常態性來推導出這些估計的比率會收斂到真正的比率。

以最大概似法求估計之連結遺失率方法如下：首先計算對數概似函數，

:<math>L(\alpha)=\log \, p(x^1,x^2 ,\cdots, x^n; \alpha)=\sum [{n(x)}log\, p(x;\alpha)]</math>；<br />
則<math>\alpha</math>的最大概似估計量

:<math>\hat{\alpha} = argmax_{\alpha\in [0,1]} L (\alpha)</math>。
另外，Cáceres et al.(1999)亦利用終端節點接收封包機率來估計<math>\alpha</math>。令<math>R(k)</math>為第<math>k</math>個節點傳送下來之終端節點所成集合，<math>\Omega(k)</math>為<math>R(k)</math>集合中至少有一個終端節點有收到封包之所有觀測情況所成集合。假設<math>\gamma_{k} = P[\Omega(k)]</math>，則<math>\gamma_{k}</math>估計量為<math>\Sigma \left[\frac{n(x)}{n}\right]</math>，
即觀察到的比例總和。令<math> k = f\,(j) </math>表示節點<math>k</math>為前一個節點<math>j</math>所傳下來的，<br/>
且定義<math>f\, ^{n}\, (j)=f (f\,^{n-1}\,(j))</math>，即前<math>n</math>個節點傳下來。並令<math>l(k)</math>表示第<math>k</math>條連結所在從起始到終端節點的層級。定義

:<math>\beta_k = P\,[\Omega(k)|X _{f(k)}=1]</math>，

表示給定從第<math>k</math>的節點傳送的節點有通過下，其傳送到的終端節點至少有一個有收到封包的機率。他們證明<math>\gamma_{k}</math>跟<math>\alpha</math>的關係為

:<math>\gamma_{k} = \beta_k \prod_{i=1}^{l(k)}\alpha_{f\,^i(k)}</math>，

即將通過第k條連結所在從起始到終端節點的所有<math>\alpha_{k}</math>相乘，在該篇文章中亦提供求<math>\gamma_{k}</math>的演算程序。因此，利用觀察到的樣本結果，則可推估封包通過率，而封包遺失率則可求之。

====例子====
以兩層的樹狀網路為例：
<br/>[[File:Network_2level.JPG|File:Network_2level.JPG]]

令通過此網路終端節點的可能情況集合為

:<math>\Omega=\left\{00,01,10,11\right\}</math>，

其中
*00表示封包皆沒有通過節點2跟3，
*10表示封包通過節點2但沒有通過節點3，
*01表示封包通過節點3但沒有通過節點2，
*11表示封包節點2跟3皆有通過。

可計算<math>\gamma_{i}</math>值如下：
<br>
:<math>\gamma_1</math>= P[<math>\Omega</math>(1)]表示從第1個節點傳送下來之終端節點中，至少有一個節點有收到封包的機率。
:<math>\gamma_2</math>= P[<math>\Omega</math>(2)]表示從第2個節點傳送下來之終端節點中，至少有一個節點有收到封包的機率。
:<math>\gamma_3</math>= P[<math>\Omega</math>(3)]表示從第3個節點傳送下來之終端節點中，至少有一個節點有收到封包的機率。

則
:<math>\hat{\gamma}_1 = \hat{P}(11) + \hat{P}(10)+ \hat{P}(01)</math>,

:<math>\hat{\gamma}_2 = \hat{P}(11) + \hat{P}(10)</math>,

:<math>\hat{\gamma}_3 = \hat{P}(11) + \hat{P}(01)</math>


利用<math>\gamma_k</math>跟<math>\alpha</math>的關係式可得

:<math>\hat{\alpha}_1 = \dfrac{\hat{\gamma}_2\hat{\gamma}_3}{\hat{\gamma}_2+\hat{\gamma}_3-\hat{\gamma}_1}
     = \dfrac{(\hat{P}(01) + \hat{P}(11))(\hat{P}(10) + \hat{P}(11))}{\hat{P}(11)}</math>，

:<math>\hat{\alpha}_2 = \dfrac{\hat{\gamma}_2+\hat{\gamma}_3-\hat{\gamma}_1}{\hat{\gamma}_3}
     = \dfrac{\hat{P}(11)}{\hat{P}(01)+\hat{P}(11)}</math>

:<math>\hat{\alpha}_3 = \dfrac{\hat{\gamma}_2+\hat{\gamma}_3-\hat{\gamma}_1}{\hat{\gamma}_2}
     = \dfrac{\hat{P}(11)}{\hat{P}(10)+\hat{P}(11)}</math>

==補充==
===EM演算法===
EM演算法為一種在具有無法觀測的資料或是混合模型下計算最大概似估計量之一種有效率的反覆程序，每次遞迴(iteration)包含下列兩個步驟：
*E步驟(Expectation)
此步驟為在給定完全的資料及當下的參數估計值後，計算對數概似函數的條件期望值。
* M步驟(Maximization)
此步驟為在最大化E步驟中的條件期望值對數概似函數，即求最大概似估計量。

令<math>\mathbf{X}</math>表示觀察到的資料，<math>\mathbf{Z}</math>表示遺失或無法觀測的資料，及<math>\boldsymbol{\theta}</math>表示欲估計的參數。
演算步驟如下：
# 選擇參數起始值 <math>\boldsymbol{\theta}^{(0)}</math>。
# 第m次遞迴
*E步驟：
:<math>Q(\boldsymbol{\theta} |\boldsymbol{\theta}^{(m-1)})=E_{\mathbf{Z}\mid \mathbf{X}, \boldsymbol{\theta}^{(m-1)}}[log f (\mathbf{x}, \mathbf{z} \mid \boldsymbol{\theta})]</math>
*M步驟：
:<math>\hat{\boldsymbol{\theta}} = arg max_{\boldsymbol{\theta}\in\boldsymbol{\Theta}}  E_{\mathbf{Z}\mid \mathbf{X}, \boldsymbol{\theta}^{(m-1)}} [log f (\mathbf{x},\mathbf{z} \mid\boldsymbol{\theta})]</math>

==参考文献==
{{reflist}}

#Cáceres, R., Duffield, N., Horowitz, J. and Towsley, D.(1999). Multicast-based inference of network-internal loss characteristics. IEEE Trans. Inform. Theory, 45 2462–2480.
#Castro, R., Coates, M., Liang, G., Nowak, R.D. and Yu, B. (2004), Network tomography: recent developments, Statistical Science, 19, 499-517.
#Lawrence, E., Michailidis, G. and Nair, V. N. (2006). Network delay tomography using flexicast experiments. J. Roy. Statist. Soc. Ser. B 68 785–813.
#Lawrence, E., Michailidis, G. and Nair, V. N.(2007). “Statistical Inverse Problems in Active Network Tomography.”in Statistical Inverse Problems, Liu, R., Straderman, W. and Zhang, C. H.(editors), IMS Lecture Note Series.
#Tebaldi, C. and West, M. (1998), Bayesian inference of network traffic using link count data (with discussion), Journal of the American Statistical Association, 93, 557-576.
#Vardi, Y. (1996), Estimating source-destination traffic intensities from link data, Journal of the American Statistical Association, 91, 365-377.
#Xi, B., Michailidis, G. and Nair, V. N. (2006). Estimating network loss rates using active tomography. J. Amer. Statist. Assoc. 101 1430–1438.
{{规范控制}}
[[Category:网络|Category:网络]]
[[Category:电气工程|Category:电气工程]]