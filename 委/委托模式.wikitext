{{NoteTA|
1=zh-cn:委托;zh-tw:委派;
}}

'''委托模式（delegation pattern）'''是[[软件设计模式|软件设计模式]]中的一项基本技巧。在委托模式中，有两个对象参与处理同一个请求，接受请求的对象将请求委托给另一个对象来处理。委托模式是一项基本技巧，许多其他的模式，如[[状态模式|状态模式]]、[[策略模式|策略模式]]、[[访问者模式|访问者模式]]本质上是在更特殊的场合采用了委托模式。委托模式使得我们可以用[[聚合_(计算机)|聚合]]来替代[[继承_(计算机科学)|继承]]，它还使我们可以模拟[[mixin|mixin]]。

== 简单的Java例子 ==

在这个例子里，[[类|类]]模拟打印机Printer拥有针式打印机RealPrinter的实例，Printer拥有的[[方法_(计算机科学)|方法]]print()将处理转交给RealPrinter的方法print()。
<syntaxhighlight lang="java">
 class RealPrinter { // the "delegate"
     void print() { 
       System.out.print("something"); 
     }
 }
 
 class Printer { // the "delegator"
     RealPrinter p = new RealPrinter(); // create the delegate 
     void print() { 
       p.print(); // delegation
     } 
 }
 
 public class Main {
     // to the outside world it looks like Printer actually prints.
     public static void main(String[] args) {
         Printer printer = new Printer();
         printer.print();
     }
 }
</syntaxhighlight>

== 复杂的Java例子 ==

通过使用[[接口|接口]]，[[委托|委托]]可以做到[[类型安全|类型安全]]并且更加灵活。在这个例子里，类別C可以委托类別A或类別B，类別C擁有方法使自己可以在类別A或类別B间选择。因为类別A或类別B必须实现接口I规定的方法，所以在这里委托是类型安全的。这个例子显示出委托的缺点是需要更多的代码。
<syntaxhighlight lang="java">
 interface I {
     void f();
     void g();
 }
 
 class A implements I {
     public void f() { System.out.println("A: doing f()"); }
     public void g() { System.out.println("A: doing g()"); }
 }
 
 class B implements I {
     public void f() { System.out.println("B: doing f()"); }
     public void g() { System.out.println("B: doing g()"); }
 }
 
 class C implements I {
     // delegation
     I i = new A();
 
     public void f() { i.f(); }
     public void g() { i.g(); }
 
     // normal attributes
     public void toA() { i = new A(); }
     public void toB() { i = new B(); }
 }
 
 
 public class Main {
     public static void main(String[] args) {
         C c = new C();
         c.f();     // output: A: doing f()
         c.g();     // output: A: doing g()
         c.toB();
         c.f();     // output: B: doing f()
         c.g();     // output: B: doing g()
     }
 }
</syntaxhighlight>

== 参考 ==
参见[[软件设计模式|软件设计模式]]和[[后对象程序设计|后对象程序设计]]。


{{软件设计模式}}
[[Category:软件设计模式|Category:软件设计模式]]