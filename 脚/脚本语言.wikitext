{{refimprove|time=2019-05-15T06:39:49+00:00}}
{{NoteTA
|G1 = IT
|1 = zh-cn:解释; zh-tw:直譯;
}}
'''脚本语言'''（{{lang-en|Scripting language}}）是为了缩短传统的「编写、编译、链接、运行」（edit-compile-link-run）过程而创建的计算机[[编程|编程]]语言。早期的脚本语言经常被称为[[批处理|批处理]]语言或{{en-link|作业控制语言|Job Control Language}}。一个脚本通常是解释运行而非编译。脚本語言通常都有簡單、易學、易用的特性，目的就是希望能讓[[程式設計師|程式設計師]]快速完成[[计算机程序|程式]]的編寫工作。而[[巨集語言|巨集語言]]則可視為脚本語言的分支，兩者也有實質上的相同之處。

虽然许多脚本语言都超越了计算机简单任务自动化的领域，比如[[JavaScript|JavaScript]]<ref name='ecma262'>{{cite web | url = https://tc39.github.io/ecma262/#sec-overview | title = ECMAScript 2019 Language Specification | access-date = 2018-04-02 | publisher = www.ecma-international.org | archive-date = 2016-08-13 | archive-url = https://web.archive.org/web/20160813162445/https://tc39.github.io/ecma262/#sec-overview | dead-url = no }}</ref>、[[Perl|Perl]]<ref name='sheppard00'>{{cite web | url = http://www.perl.com/pub/2000/10/begperl1.html | title = Beginner's Introduction to Perl | access-date = 2011-01-08 | last = Sheppard | first = Doug | date = 2000-10-16 | publisher = dev.perl.org | archive-date = 2011-06-05 | archive-url = https://web.archive.org/web/20110605130400/http://www.perl.com/pub/2000/10/begperl1.html | dead-url = no }}<br />[http://www.perl.com/pub/2007/12/06/soto-11.html Programming is Hard, Let's Go Scripting…] {{Wayback|url=http://www.perl.com/pub/2007/12/06/soto-11.html |date=20170728023959 }}, [[Larry_Wall|Larry Wall]], December 6, 2007</ref>、[[PHP|PHP]]、[[Python|Python]]、[[Ruby|Ruby]]和[[Tcl|Tcl]]，成熟到可以编写精巧的程序，但仍然还是被称为脚本。几乎所有计算机系统的各个层次都有一种脚本语言。包括操作系统层，如[[计算机游戏|计算机游戏]]，[[网络应用程序|网络应用程序]]，字处理文档，网络[[软件|软件]]等。在许多方面，高级[[编程语言|编程语言]]和'''脚本语言'''之间互相交叉，二者之间没有明确的界限。

== 起源 ==
脚本語言是一种[[電腦程式語言|電腦程式語言]]，因此也能讓開發者藉以編寫出讓電腦聽命行事的程式。以簡單的方式快速完成某些複雜的事情通常是創造腳本語言的重要原則，基於這項原則，使得腳本語言通常比[[C語言|C語言]]、[[C++語言|C++語言]]或 [[Java|Java]]之類的{{tsl|en|System programming language|系統程式語言}}要簡單容易，也讓腳本語言另有一些屬於腳本語言的特性：<ref>{{cite web | url=http://www.microsoft.com/taiwan/technet/columns/profwin/28-monad.mspx#EUB | title=易學易用的 Windows PowerShell | publisher=Microsoft TechNet | date=2006-06-01 | accessdate=2014-03-05 | author=賴榮樞 | archive-date=2020-02-02 | archive-url=https://web.archive.org/web/20200202032807/http://www.microsoft.com/taiwan/technet/columns/profwin/28-monad.mspx#EUB | dead-url=no }}</ref>

*語法和結構通常比較簡單
*學習和使用通常比較簡單
*通常以容易修改程式的「直譯」作為執行方式，而不需要「編譯」
*程式的開發產能優於執行效能

一个脚本可以使得本来要用[[键盘|键盘]]进行的相互式操作自动化。一个[[Shell|Shell]]脚本主要由原本需要在[[命令行|命令行]]输入的命令组成，或在一个[[文本编辑器|文本编辑器]]中，用户可以使用脚本来把一些常用的操作组合成一组序列。主要用来书写这种脚本的语言叫做脚本语言。很多脚本语言实际上已经超过简单的用户命令序列的指令，还可以编写更复杂的程序。

== 定义 ==

计算机语言是为了各种目的和任务而开发的，一个常见任务就是把各种不同的已有组件连接起来以完成相关任务。大多脚本语言共性是：良好的快速开发，有效率的执行，解释而非编译执行，和其它语言编写的程序组件之间通信功能很强大。

许多脚本语言用来执行一次性任务，尤其是系统管理方面。它可以把服务组件粘合起来，因此被广泛用于GUI创建或者命令行，[[操作系统|操作系统]]通常提供一些默认的脚本语言，即通常所谓shell脚本语言。

脚本通常以文本（如[[ASCII|ASCII]]）保存，只在被调用时进行解释或编译。
测试大型项目中经常把脚本和其它低级编程语言一起使用，各自发挥优势解决特定问题。脚本经常用于设计互动通信，它有许多可以单独执行的命令，可以做很高级的操作，（如在传统的[[Unix_shell|Unix shell]]（sh）中，大多操作就是程序本身。）

这些高级命令简化了代码编写过程。诸如内存自动管理和溢出检查等性能问题可以不用考虑。在更低级或非脚本语言中，[[内存|内存]]及变量管理和数据结构等耗费人工，为解决一个给定问题需要大量代码，当然这样能够获得更为细致的控制和优化。脚本缺少优化程序以提速或者降低[[内存|内存]]的伸缩性。

综上所述，脚本编程速度更快，且脚本文件明显小于如同类C程序文件。这种灵活性是以执行效率为代价的。脚本通常是解释执行的，速度可能很慢，且运行时更耗内存。在很多案例中，如编写一些数十行的小脚本，它所带来的编写优势就远远超过了运行时的劣势，尤其是在当前程序员工资趋高和硬件成本趋低时。

然而，在脚本和传统编程语言之间的界限越来越模糊，尤其是在一系列新语言及其集成常出现时。在一些脚本语言中，有经验的程序员可以进行大量优化工作。在大多现代系统中通常有多种合适的脚本语言可以选择，所以推荐使用多种语言（包括C或者汇编语言）编写一种脚本。

== 脚本语言分类 ==

=== 作业控制语言和shell ===
{{main|Shell脚本}}
此类脚本用于自动化工作控制，即启动和控制系统程序的行为。大多的脚本语言解释器也同时是命令行界面，如[[Unix_shell|Unix shell]]和MS-DOS COMMAND.COM。其他如AppleScript，可以为系统增加脚本环境，但没有命令行界面。

具体包括：
{{div col|colwidth=15em}}
*{{tsl|en|4DOS}}
*{{tsl|en|Take Command Console|4NT / Take Command}}
*[[AppleScript|AppleScript]]
*{{tsl|en|ARexx}}（Amiga Rexx）
*[[bash|bash]]
*[[C_shell|csh]]
*{{tsl|en|DIGITAL Command Language|DCL}}
*{{tsl|en|Job Control Language|JCL}}
*[[Korn_shell|ksh]]
*[[Cmd.exe|Cmd.exe批处理]]（[[Microsoft_Windows|Windows]], [[OS/2|OS/2]]）
*[[Command.com|Command.com批处理]]（[[DOS|DOS]]）
*[[REXX|REXX]]
*[[tcsh|tcsh]]
*[[Unix_shell|sh]]
*{{tsl|en|Winbatch}}
*[[Windows_PowerShell|Windows PowerShell]]
*[[Windows_Script_Host|Windows Script Host]]
*[[Z_shell|zsh]]
{{div col end}}

=== 文本处理语言 ===
处理基于文本的记录是脚本语言最早的用处之一。如Unix's awk最早是设计来帮助系统管理员处理调用[[UNIX|UNIX]]基于文本的配置和LOG文件。Perl最早是用来产生报告的，现在它已经成了全面成熟的语言。

具体包括：
{{div col|colwidth=15em}}
*[[Awk|Awk]]
*[[Perl|Perl]]
*[[sed|sed]]
*[[XSL_Transformations|XSLT]]
{{div col end}}

===胶水语言===
{{main|动态语言}}
一些通用[[动态语言|动态语言]]，比如Perl，从一门脚本语言发展成了更通用的编程语言，由于“解释执行，内存管理，动态”等特性，它们仍被归类为脚本语言。脚本编程常与[[系統程式設計|系统编程]]相对比，如{{en-link|John Ousterhout|John Ousterhout|Ousterhout}}在{{en-link|Ousterhout二分法|Ousterhout's dichotomy}}或{{en-link|大型编程和小型编程|programming in the large and programming in the small}}中做出的那样。在这种视角下，脚本是{{en-link|胶水代码|glue code}}，被来连接[[基于组件的软件工程|软件组件]]，专门用于这个目的的语言叫做'''胶水语言'''。
{{div col|colwidth=15em}}
*[[APL語言|APL]]
*[[Dylan_(编程语言)|Dylan]]
*[[Groovy|Groovy]]
* [[JavaScript|JavaScript]]/[[JScript|JScript]]
*[[Lua|Lua]]
*{{tsl|en|MUMPS}}（M）
*[[newLISP|newLISP]]
*[[Nuva|Nuva]]
*[[Perl|Perl]]
*[[PHP|PHP]]
*[[Python|Python]]
*[[Ruby|Ruby]]
*[[Scheme|Scheme]]
*[[Shell脚本|Shell脚本]]（如 [[Unix_shell|Unix shell]]、[[Windows_PowerShell|Windows PowerShell]]等）
*[[GNU_Smalltalk|GNU Smalltalk]]
*{{tsl|en|SuperCard}}
*[[Tcl|Tcl]]（工具命令语言）
*[[VBScript|VBScript]]
{{div col end}}

=== 可扩展/可嵌入语言 ===

少数的语言被设计通过嵌入应用程序来取代应用程序定制的脚本语言。开发者（如使用C等其它系统语言）包入使脚本语言可以控制应用程序的hook。这些语言和应用程序定制的脚本语言是同种用途，但优点在于可以在应用程序之间传递一些技能。

具体包括：
{{div col|colwidth=15em}}
*{{tsl|en|Ch (computer programming)|Ch (程序)|Ch}}（C/C++解释器）
*[[ECMAScript|ECMAScript]]（实现为[[DMDScript|DMDScript]]、[[JavaScript|JavaScript]]等）
*{{tsl|en|GameMonkey Script|GameMonkeyScript}}
*[[GNU_Guile|Guile]]
*{{tsl|en|ICI (programming language)||ICI}}
*[[Lua|Lua]]
*[[Xojo|RBScript]]（REALbasic脚本）
*{{tsl|en|Squirrel (programming language)|Squirrel}}
*[[Tcl|Tcl]]
{{div col end}}

JavaScript直到现在仍然是网页浏览器内的主要编程语言，它的ECMAScript标准化保证了它成为流行的通用嵌入性语言。

Tcl作为一种可扩展语言而创建，但更多地被用作通用性语言，就如同Python, Perl, Ruby一样。

=== 应用程序定制的脚本语言 ===

许多大型的应用程序都包括根据用户需求而定制的惯用脚本语言。同样地，许多电脑游戏系统使用一种自定义脚本语言来表现NPC（non-player character,non-playable character,non-player class）和游戏环境的预编程动作。

此类语言通常是为一个单独的应用程序所设计，虽然它们貌似一些通用语言（如QuakeC, modeled after C），但它们有自定义的功能。

具体包括：
{{div col|colwidth=15em}}
*{{tsl|en|Action Code Script}}
*[[ActionScript|ActionScript]]
*[[AutoLISP|AutoLISP]]
*[[Emacs_Lisp|Emacs Lisp]]
*{{tsl|en|Game Maker Language}}
*{{tsl|en|HyperTalk}}
*{{tsl|en|IPTSCRAE}}
*{{tsl|en|IRC script}}
*{{tsl|en|Lingo (programming language)|Lingo}}
*[[MATLAB|Matlab Embedded Language]]
*{{tsl|en|Maya Embedded Language}}
*{{tsl|en|mIRC scripting language|mIRC script}}
*{{tsl|en|NWscript}}
*[[QuakeC|QuakeC]]
*{{tsl|en|Unreal_Engine#UnrealScript|UnrealScript}}
*[[Visual_Basic_for_Applications|Visual Basic for Applications]]
*[[VBScript|VBScript]]
*{{tsl|en|ZZT#Development|ZZT-oop}}
{{div col end}}

=== [[WEB|WEB]]编程脚本 ===

应用程序定制的脚本语言中有一种重要的类别，用于提供WEB页面的自定义功能。它专业处理互联网通信，使用[[网页浏览器|网页浏览器]]作为用户界面。当然，大多现代WEB编程语言都比较强大可以做一些通用编程。

具体包括：
{{div col|colwidth=15em}}
*[[ColdFusion|ColdFusion]]（应用服务器）
*{{tsl|en|Lasso (programming language)|Lasso}}
*{{tsl|en|MIVA Script|Miva}}
*{{tsl|en|SMX (computer language)|SMX}}
*{{tsl|en|IPTSCRAE}}，一些网络开发团队用于创建论坛的工具
{{div col end}}

=== GUI脚本 ===

[[GUI|GUI]]出现带来一种专业的控制计算机的脚本语言。它在用户和图形界面，[[選單|菜单]]，按钮等之间互动。它经常用来自动化重复性动作，或设置一个标准状态。理论上它可以用来控制运行于基于GUI的计算机上的所有[[应用程序|应用程序]]，但实际上这些语言是否被支持还要看应用程序和操作系统本身。当通过键盘进行互动时，这些语言也被称为巨集语言。

具体包括：
{{div col|colwidth=15em}}
*[[AutoHotkey|AutoHotkey]]
*[[AutoIt|AutoIt]]
*[[Expect|Expect]]
{{div col end}}

=== 其它 ===
{{div col|colwidth=15em}}
*{{tsl|en|BeanShell}}（Java的脚本）
*{{tsl|en|CobolScript}}
*{{tsl|en|Euphoria (programming language)||Euphoria}}
*{{tsl|en|F-Script (programming language)|F-Script}}
*[[Groovy|Groovy]]
*[[Io_(程式語言)|Io]]
*[[KiXtart|KiXtart]]
*{{tsl|en|Object REXX}}
*[[Pike|Pike]]
*[[REBOL|REBOL]]
*{{tsl|en|ScriptBasic}}
*{{tsl|en|StepTalk}}
*{{tsl|en|Visual DialogScript}}
{{div col end}}

== 参见 ==
* [[領域特定語言|領域特定語言]]

== 参考文献 ==
{{Reflist|2}}

== 外部链接 ==
{{refbegin}}
* [http://merd.sourceforge.net/pixel/language-study/scripting-language/ A study of the Script-Oriented Programming (SOP) suitability of selected languages] {{Wayback|url=http://merd.sourceforge.net/pixel/language-study/scripting-language/ |date=20070629215315 }} – from The Scriptometer.
* [http://www.hotscripts.com Hotscripts.com] {{Wayback|url=http://www.hotscripts.com/ |date=20210506140814 }} -A collection of many scripts written in an assortment of languages
* [https://web.archive.org/web/20110202202913/http://www.opensourcescripts.com/ OpenSourceScripts.com] -A collection of open source scripts
* [http://www.softpanorama.org/Articles/a_slightly_skeptical_view_on_scripting_languages.shtml A Slightly Skeptical View on Scripting Languages] {{Wayback|url=http://www.softpanorama.org/Articles/a_slightly_skeptical_view_on_scripting_languages.shtml |date=20090329072119 }} by Dr. Nikolai Bezroukov
* [http://home.pacbell.net/ouster/scripting.html Scripting: Higher Level Programming for the 21st Century] {{Wayback|url=http://home.pacbell.net/ouster/scripting.html |date=20100201153512 }} by John K. Ousterhout
* [http://page.mi.fu-berlin.de/~prechelt/Biblio/jccpprt2_advances2003.pdf Are Scripting Languages Any Good? A Validation of Perl, Python, Rexx, and Tcl against C, C++, and Java (PDF)] {{Wayback|url=http://page.mi.fu-berlin.de/~prechelt/Biblio/jccpprt2_advances2003.pdf |date=20061206001235 }}—2003 study
* [http://canadaclassify.com Free Classified ASP Script Site Software ] {{Wayback|url=http://canadaclassify.com/ |date=20141217010608 }}
* [http://linux.vbird.org/linux_basic/0340bashshell-scripts.php 學習Shell Scripts] {{Wayback|url=http://linux.vbird.org/linux_basic/0340bashshell-scripts.php |date=20210425201008 }}鳥哥的Linux私房菜
{{refend}}

{{-}}
{{编程语言类别}}

[[Category:脚本语言|]]