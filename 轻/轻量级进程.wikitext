{{Refimprove|time=October 2007}}
{{Proofreader needed|en|Light-weight process}}
{{NoteTA
|G1 = IT
}}
在计算机[[操作系统|操作系统]]中，'''轻量级进程'''（{{lang-en|Light-weight process}}，{{lang|en|LWP}}）是一种实现[[多任务|多任务]]的方法。与普通进程相比，{{lang|en|LWP}}与其他进程共享所有（或大部分）它的逻辑地址空间和系统资源；与[[线程|线程]]相比，{{lang|en|LWP}}有它自己的[[进程标识符|进程标识符]]，并和其他进程有着[[父进程|父子关系]]；这是和[[类Unix|类Unix]]操作系统的系统调用<code>vfork()</code>生成的进程一样的。另外，线程既可由应用程序管理，又可由[[内核|内核]]管理，而{{lang|en|LWP}}只能由内核管理并像普通进程一样被调度。[[Linux内核|Linux内核]]是支持{{lang|en|LWP}}的典型例子。

在大多数系统中，{{lang|en|LWP}}与普通进程的区别也在于它只有一个最小的执行上下文和调度程序所需的统计信息，而这也是它之所以被称为'''轻量级'''的原因。一般来说，一个进程代表[[程序|程序]]的一个实例，而{{lang|en|LWP}}代表[[程序|程序]]的执行线程（其实，在内核不支持线程的时候，{{lang|en|LWP}}可以很方便地提供线程的实现）。因为一个执行线程不像进程那样需要那么多状态信息，所以{{lang|en|LWP}}也不带有这样的信息。

因为{{lang|en|LWP}}之间共享它们的大部分资源，所以它在某些应用程序就不适用了；这个时候就要使用多个普通的进程了。例如，为了避免[[内存泄漏|内存泄漏]]（{{lang|en|a process can be replaced by another one}}）和实现[[特权分隔|特权分隔]]（{{lang|en|processes can run under other credentials and have other permissions}}）。

使用多个进程也使得应用程序在出现进程池内的进程崩溃或被攻击的情况下变得更加健壮。

== 参见 ==
* [[多任务|多任务]]
* [[线程|线程]]
* [[进程|进程]]
* {{link-en|轻量级内核线程|Light Weight Kernel Threads}}

==外部链接==
* [http://moss.csc.ncsu.edu/~mueller/pthreads/threads-faq.html#5-5-Lightweight-process comp.programming.threads FAQ: Lightweight process] {{Wayback|url=http://moss.csc.ncsu.edu/~mueller/pthreads/threads-faq.html#5-5-Lightweight-process |date=20160319221757 }}

[[Category:进程|Category:进程]]