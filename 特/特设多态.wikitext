{{noteTA
|G1 = IT
}}
{{多态}}
'''特定多态'''（''[[ad_hoc|ad hoc]]'' polymorphism）是[[程序设计语言|程序设计语言]]的一种[[多态_(计算机科学)|多态]]，多态函数有多个不同的实现，依赖于其实参而调用相应版本的函数。因此，特设多态仅支持有限数量的不同类型。[[函数重载|函数重载]]乃至[[运算符重载|运算符重载]]也是特设多态的一种。

==概述==
特设多态与[[参数多态|参数多态]]相对。''ad hoc''在这里并不是贬义，而是指这类多态并不是[[类型系统|类型系统]]的基本特性，不是像参数多态那样适用于无穷多的类型，而是针对特定问题的解决方案。

换言之，参数多态对各模板参数的实现，是根据模板的通用（generically）的行为的抽象，即泛型的语义；而特设多态可以针对不同的版本实现完全不同的行为，或曰对于每个不同的模版参数都有单独的版本来应对。打个比方：假如我们要把原材料切成两半——
* 参数多态：只要能“切”，就用工具来切割它；
* 特设多态：根据原材料是铁还是木头还是什么来选择不同的工具来切。

==历史==
特定多态的名字来源于其发明人[[克里斯托弗·斯特雷奇|克里斯托弗·斯特雷奇]]于1967年8月在[[哥本哈根|哥本哈根]]的计算机程序设计暑期学校发表了著名论文《{{tsl|en|Fundamental Concepts in Programming Languages|编程语言中的基础概念}}》中首次提出了[[参数多态|参数多态]]、特设多态、[[左值|左值]]、[[右值|右值]]等概念。<ref>C. Strachey, Fundamental concepts in programming languages. Lecture notes for International Summer School in Computer Programming, Copenhagen, August 1967</ref>。

==早绑定==
多态的早绑定（early binding）是在[[编译期|编译期]]，编译器完成多态的[[动态分派|分派]]机制：把多态函数、多态类型的名字根据模板参数绑定到具体的模板实现。   

==晚绑定==
多态的{{en-link|晚绑定|Late binding}}是在运行期，程序确定即将要调用的多态函数的实现。[[Smalltalk|Smalltalk]]实现了这种晚绑定机制。

==例子==
加法运算符<code>+</code>假设可以运用到如下的情形：
# <code>1 + 2 = 3</code>
# <code>3.14 + 0.0015 = 3.1415</code>
# <code>1 + 3.7 = 4.7</code>
# <code>[1, 2, 3] + [4, 5, 6] = [1, 2, 3, 4, 5, 6]</code>
# <code>[true, false] + [false, true] = [true, false, false, true]</code>
# <code>"bab" + "oon" = "baboon"</code>

===重载===
为此，需要的重载实现： 
* 第一种情形，需要整型加法；
* 第二、第三种情形，需要浮点型加法。其中第三种情形需要隐式类型转换（type coercion）。
* 第四、第五种情形，需要[[列表_(抽象数据类型)|list]]的[[串接|连接]]操作；
* 第六种情形，需要{{tsl|en|literal string|字符串字面量}}的连接操作。 
因此，运算符名字<code>+</code>实际上使用了三到四种完全不同的函数实现。 
==参考文献==
{{reflist}} 
[[Category:多态|Category:多态]] 
[[Category:类型论|Category:类型论]]