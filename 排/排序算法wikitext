{{Unreferenced|time=2013-11-10T09:12:10+00:00}}
{{NoteTA
|G1 = IT
|1 = zh-cn:列表; zh-tw:串列;
}}
在[[計算機科學|計算機科學]]與[[數學|數學]]中，一個'''排序算法'''（{{lang-en|Sorting algorithm}}）是一種能將一串資料依照特定排序方式进行排列的一種[[算法|算法]]。最常用到的排序方式是數值順序以及[[字典順序|字典順序]]。有效的排序算法在一些算法（例如[[搜尋算法|搜尋算法]]與{{le|合併算法|Merge algorithm}}）中是重要的，如此這些算法才能得到正確解答。排序算法也用在處理文字資料以及產生人類可讀的輸出結果。基本上，排序算法的輸出必須遵守下列兩個原則：

# 輸出結果為遞增序列（遞增是針對所需的排序順序而言）
# 輸出結果是原輸入的一種[[排列|排列]]、或是重組

雖然排序算法是一個簡單的問題，但是從計算機科學發展以來，在此問題上已經有大量的研究。舉例而言，[[泡沫排序|泡沫排序]]在1956年就已經被研究。雖然大部分人認為這是一個已經被解決的問題，有用的新算法仍在不斷的被發明。（例子：[[圖書館排序|圖書館排序]]在2004年被發表）

== 分類 ==
在[[计算机科学|计算机科学]]所使用的排序算法通常被分類為：
* 計算的[[計算複雜性理論|時間複雜度]]（最差、平均、和最好-{zh-cn:性能; zh-tw:表現;}-），依據串列（list）的大小(<math>n</math>)。一般而言，好的-{zh-cn:性能; zh-tw:表現;}-是<math>O(n\log n)</math>（[[大O符号|大O符号]]），壞的-{zh-cn:性能; zh-tw:表現;}-是<math>O(n^2)</math>。對於一個排序理想的-{zh-cn:性能; zh-tw:表現;}-是<math>O(n)</math>，但平均而言不可能達到。[[比較排序|基於比較的排序算法]]對大多數輸入而言至少需要<math>O(n\log n)</math>。使用具有強大計算能力的計算機，能令時間複雜度趨近於<math>O(n)</math>（但不等於<math>O(n)</math>）。
* -{zh-cn:内存; zh-tw:記憶體;}-使用量（以及其他電腦資源的使用）
* 穩定性：'''穩定排序算法'''會讓原本有相等鍵值的紀錄維持相對次序。也就是如果一個排序算法是'''穩定'''的，當有兩個相等鍵值的紀錄<math>R</math>和<math>S</math>，且在原本的串列中<math>R</math>出現在<math>S</math>之前，在排序過的串列中<math>R</math>也將會是在<math>S</math>之前。
* 依據排序的方法：插入、交換、選擇、合併等等。

=== 穩定性 ===
[[File:Sorting_stability_playing_cards.svg|thumb]]
當相等的元素是無法分辨的，比如像是整數，穩定性並不是一個問題。然而，假設以下的數對將要以他們的第一個數字來排序。

 <math>(4, 1) (3, 1) (3, 7) (5, 6)</math>

在這個狀況下，有可能產生兩種不同的結果，一個是讓相等鍵值的紀錄維持相對的次序，而另外一個則沒有：

 <math>(3, 1)  (3, 7)  (4, 1)  (5, 6) </math> （維持次序）
 <math>(3, 7)  (3, 1)  (4, 1)  (5, 6) </math> （次序被改變）

不穩定排序算法可能會在相等的鍵值中改變紀錄的相對次序，但是穩定排序算法從來不會如此。不穩定排序算法可以被特別地實作為穩定。作這件事情的一個方式是人工擴充鍵值的比較，如此在其他方面相同鍵值的兩個物件間之比較，（比如上面的比较中加入第二个标准：第二个键值的大小）就會被決定使用在原先資料次序中的條目，當作一個同分決賽。然而，要記住這種次序通常牽涉到額外的空間負擔。

== 排序算法列-{}-表 ==
在這個表格中，<math>n</math>是要被排序的紀錄數量以及<math>k</math>是不同鍵值的數量。

=== 穩定的排序 ===
* [[冒泡排序|冒泡排序]]（bubble sort）— <math>O(n^2)</math>
* [[插入排序|插入排序]]（insertion sort）—<math>O(n^2)</math>
* [[鸡尾酒排序|鸡尾酒排序]]（cocktail sort）—<math>O(n^2)</math>
* [[桶排序|桶排序]]（bucket sort）—<math>O(n)</math>；需要<math>O(k)</math>額外空間
* [[计数排序|计数排序]]（counting sort）—<math>O(n+k)</math>；需要<math>O(n+k)</math>額外空間
* [[归并排序|归并排序]]（merge sort）—<math>O(n\log n)</math>；需要<math>O(n)</math>額外空間
* 原地[[归并排序|归并排序]]— <math>O(n\log^2 n)</math>如果使用最佳的現在版本
* [[二叉排序树|二叉排序树]]排序（binary tree sort）— <math>O(n\log n)</math>期望时间；<math>O(n^2)</math>最坏时间；需要<math>O(n)</math>額外空間
* [[鸽巢排序|鸽巢排序]]（pigeonhole sort）—<math>O(n+k)</math>；需要<math>O(k)</math>額外空間
* [[基數排序|基數排序]]（radix sort）—<math>O(nk)</math>；需要<math>O(n)</math>額外空間
* [[侏儒排序|侏儒排序]]（gnome sort）— <math>O(n^2)</math>
* [[圖書館排序|圖書館排序]]（library sort）— <math>O(n\log n)</math>期望时间；<math>O(n^2)</math>最坏时间；需要<math>(1+\varepsilon)n</math>額外空間
* {{tsl|en|Block sort|塊排序}}（block sort）— <math>O(n\log n)</math>

=== 不穩定的排序 ===
* [[選擇排序|選擇排序]]（selection sort）—<math>O(n^2)</math>
* [[希爾排序|希爾排序]]（shell sort）—<math>O(n\log^2 n)</math>如果使用最佳的現在版本
* [[克洛弗排序|克洛弗排序]]（Clover sort）—<math>O(n)</math>期望时间，<math>O(n^2)</math>最坏情况{{來源請求}}
* [[梳排序|梳排序]]— <math>O(n\log n)</math>
* [[堆排序|堆排序]]（heap sort）—<math>O(n\log n)</math>
* {{tsl|en|Smoothsort|平滑排序}}（smooth sort）— <math>O(n\log n)</math>
* [[快速排序|快速排序]]（quick sort）—<math>O(n\log n)</math>期望時間，<math>O(n^2)</math>最壞情況；對於大的、亂數串列一般相信是最快的已知排序
* [[內省排序|內省排序]]（introsort）—<math>O(n\log n)</math>
* [[耐心排序|耐心排序]]（patience sort）—<math>O(n\log n+k)</math>最坏情況時間，需要額外的<math>O(n+k)</math>空間，也需要找到[[最長的遞增子序列|最長的遞增子序列]]（longest increasing subsequence）

=== 不實用的排序 ===

* [[Bogo排序|Bogo排序]]— <math>O(n \times n!)</math>，最壞的情況下期望時間為無窮。
* [[Stupid排序|Stupid排序]]—<math>O(n^3)</math>;遞迴版本需要<math>O(n^2)</math>額外記憶體
* [[珠排序|珠排序]]（bead sort）— <math>O(n)</math> 或 <math>O(\sqrt{n})</math>,但需要特別的硬體
* [[煎餅排序|煎餅排序]]—<math>O(n)</math>,但需要特別的硬體
* [[臭皮匠排序|臭皮匠排序]]（stooge sort）算法简单，但需要约<math>n^{2.7}</math>的时间

== 简要比较 ==

{| class="wikitable"
|-
!rowspan=2| 名称 !!rowspan=2| 数据对象 !!rowspan=2| 稳定性 !!colspan=2| 时间复杂度 !!rowspan=2| 額外空间复杂度 !!rowspan=2| 描述
|-
! 平均 !! 最坏
|-
| [[冒泡排序|冒泡排序]] || 数组 ||{{Y}} ||colspan=2| <math>O(n^2)</math> || <math>O(1)</math>||（无序区，有序区）。<br>從无序区透過交換找出最大元素放到有序区前端。
|-
|rowspan=2| [[选择排序|选择排序]] ||数组||{{N}}||colspan=2 rowspan=2|<math>O(n^2)</math> ||rowspan=2| <math>O(1)</math>||rowspan=2|（有序区，无序区）。<br>在无序区里找一个最小的元素跟在有序区的后面。对数组：比较得多，换得少。
|-
| 链表 || {{Y}} 
|-
| [[插入排序|插入排序]] || 数组、链表  ||{{Y}} ||colspan=2| <math>O(n^2)</math> || <math>O(1)</math>||（有序区，无序区）。<br>把无序区的第一个元素插入到有序区的合适的位置。对数组：比较得少，换得多。
|-
| [[堆排序|堆排序]]  || 数组  ||{{N}}||colspan=2|<math> O(n\log n)</math>|| <math>O(1)</math> ||（最大堆，有序区）。<br>从堆顶把根卸出来放在有序区之前，再恢复堆。
|-
|rowspan=3| [[归并排序|归并排序]]  ||rowspan=2| 数组 ||rowspan=3| {{Y}} ||colspan=2|<math> O(n\log^2 n)</math>|| <math>O(1) </math> ||rowspan=3| 把数据分为两段，从两段中逐个选最小的元素移入新数据段的末尾。<br>可从上到下或从下到上进行。
|-
|colspan=2 rowspan=2|<math> O(n\log n)</math>|| <math>O(n) +O(\log n) </math><br>如果不是从下到上
|-
| 链表 ||<math> O(1)</math>
|-
|rowspan=2| [[快速排序|快速排序]] || 数组 || {{N}}||rowspan=2| <math>O(n\log n) </math>||rowspan=2| <math>O(n^2)</math> ||rowspan=2|<math>O(\log n)</math>||rowspan=2|（小数，基准元素，大数）。 <br>在区间中随机挑选一个元素作基准，将小于基准的元素放在基准之前，大于基准的元素放在基准之后，再分别对小数区与大数区进行排序。
|-
| 链表 || {{Y}} 
|-
| [[希爾排序|希爾排序]] || 数组 || {{N}}|| <math>O(n\log^2n) </math>|| <math>O(n^2)</math> ||<math>O(1)</math>||每一輪按照事先決定的間隔進行插入排序，間隔會依次縮小，最後一次一定要是1。
|-
| colspan=7 |
|-
| [[计数排序|计数排序]]  || 数组、链表|| {{Y}}||colspan=2|<math>O(n+m)</math>||<math>O(n+m)</math>|| 统计小于等于该元素值的元素的个数i，于是该元素就放在目标数组的索引i位（i≥0）。
|-
| [[桶排序|桶排序]] || 数组、链表|| {{Y}}|| <math>O(n)</math> || <math>O(n^2)</math> || <math>O(m)</math>|| 将值为i的元素放入i号桶，最后依次把桶里的元素倒出来。 
|-
| [[基数排序|基数排序]] || 数组、链表 || {{Y}}||  <math>O(k\times n)</math> || <math>O(n^2)</math> || || 一种多关键字的排序算法，可用桶排序实现。
|}

* 均按从小到大排列 
* k代表数值中的"数位"个数
* n代表数据规模 
* m代表数据的最大值减最小值

== 参考文献 ==
{{Reflist}}

== 外部链接 ==
* [http://commons.wikimedia.org/wiki/File:SortingAlgoComp.png 不同排序算法间的比较（英语）] {{Wayback|url=http://commons.wikimedia.org/wiki/File:SortingAlgoComp.png |date=20210223000038 }}
* [https://web.archive.org/web/20101024150215/http://www.nocow.cn/index.php/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95 一些排序算法的C及Pascal实现]
* [http://panthema.net/2013/sound-of-sorting/ 可视化排序] {{Wayback|url=http://panthema.net/2013/sound-of-sorting/ |date=20210223000044 }}
{{-}}
{{排序算法表}}

[[Category:排序算法|]]