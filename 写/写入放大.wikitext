{{noteTA
|G1=IT
}}
[[File:Write_Amplification_on_SSD.svg|frame]]

'''写入放大'''（{{lang-en|Write amplification}}，简称'''WA'''）是[[闪存|闪存]]和[[固态硬盘|固态硬盘]]（SSD）中一种不良的现象，即实际写入的物理資料量是写入資料量的多倍。

由于闪存在可重新写入数据前必须先擦除，而擦除操作的粒度与写入操作相比低得多{{Efn|数据以页面为单位写入到闪存中，其由多个单元组成。然而，存储器只能以较大的单位区块擦除，其由多个页面组成。<ref name="L Smith">{{cite web |url=http://www.snia.org/sites/default/education/tutorials/2009/spring/solid/JonathanThatcher_NandFlash_SSS_PerformanceV10-nc.pdf |title=NAND Flash Solid State Storage Performance and Capability – an In-depth Look |author=Thatcher, Jonathan |date=2009-08-18 |publisher=SNIA |accessdate=2012-08-28 |archive-url=https://web.archive.org/web/20120907062956/http://www.snia.org/sites/default/education/tutorials/2009/spring/solid/JonathanThatcher_NandFlash_SSS_PerformanceV10-nc.pdf |archive-date=2012-09-07 |dead-url=no }}</ref>}}，执行这些操作就会多次移动（或改写）用户数据和[[元数据|元数据]]。因此，要改写数据，就需要读取闪存某些已使用的部分，更新它们，并写入到新的位置，如果新位置在之前已被使用过，还需连同先擦除；由于闪存的这种工作方式，必须擦除改写的闪存部分比新数据实际需要的大得多。此倍增效应会增加请求写入的次数，缩短SSD的寿命，从而减小SSD能可靠运行的时间。增加的写入也会消耗闪存的[[带宽|带宽]]，此主要降低SSD的随机写入性能<ref name="IBM_WA">{{cite web |url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.154.8668 |title=Write Amplification Analysis in Flash-Based Solid State Drives |author=Hu, X.-Y. and E. Eleftheriou, R. Haas, I. Iliadis, R. Pletka |year=2009 |publisher=[[IBM|IBM]] |id={{citeseerx|10.1.1.154.8668}} |accessdate=2010-06-02 |archive-url=https://web.archive.org/web/20130703055441/http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.154.8668 |archive-date=2013-07-03 |dead-url=no }}</ref><ref name="K Smith">{{cite web |url=http://www.sandforce.com/userfiles/file/downloads/FMS2009_F2A_Smith.pdf |title=Benchmarking SSDs: The Devil is in the Preconditioning Details |author=Smith, Kent |date=2009-08-17 |publisher=SandForce |accessdate=2012-08-28 |archive-url=https://web.archive.org/web/20111206222229/http://www.sandforce.com/userfiles/file/downloads/FMS2009_F2A_Smith.pdf |archive-date=2011-12-06 |dead-url=no }}</ref>。许多因素会影响SSD的写入放大，一些可以由用户来控制，而另一些则是数据写入和SSD使用的直接结果。

在2008年，[[英特尔|英特尔]]<ref name="Lucchesi">{{cite web |url=http://www.silvertonconsulting.com/newsletterd/SSDf_drives.pdf |title=SSD Flash drives enter the enterprise |author=Lucchesi, Ray |date=September 2008 |publisher=Silverton Consulting |accessdate=2010-06-18 |deadurl=yes |archiveurl=https://web.archive.org/web/20110531215833/http://www.silvertonconsulting.com/newsletterd/SSDf_drives.pdf |archivedate=2011-05-31 }}</ref>和[[西部数据|SiliconSystems]]（2009年为[[西部数据|西部数据]]所收购）<ref name="Zsolt_Silicon_Systems">{{cite web |url=http://www.storagesearch.com/siliconsystems.html |title=Western Digital Solid State Storage - formerly SiliconSystems |author=Kerekes, Zsolt |publisher=ACSL |accessdate=2010-06-19 |archive-url=https://web.archive.org/web/20100620061448/http://www.storagesearch.com/siliconsystems.html |archive-date=2010-06-20 |dead-url=no }}</ref>首先在他们的论文和出版物使用了术语“写入放大”。写入放大通常用闪存的写入与主机系统的写入之比来衡量。没有开启[[数据压缩|数据压缩]]时，写入放大不小于1。在使用压缩的情况下，[[SandForce|SandForce]]声称他们的典型写入放大达到了0.5<ref name="Anand_WA">{{cite web |url=http://www.anandtech.com/show/2899 |title=OCZ's Vertex 2 Pro Preview: The Fastest MLC SSD We've Ever Tested |author=Shimpi, Anand Lal |date=2009-12-31 |work= |publisher=AnandTech |accessdate=2011-06-16 |archive-url=https://web.archive.org/web/20110623145121/http://www.anandtech.com/show/2899 |archive-date=2011-06-23 |dead-url=no }}</ref>，而在最佳情况下，使用SF-2281控制器，此值能低至0.14<ref>{{cite web | url = http://www.tomshardware.com/reviews/ssd-520-sandforce-review-benchmark,3124-11.html | title = Intel SSD 520 Review: SandForce's Technology: Very Low Write Amplification |work=Tomshardware|date=2012-02-06 |first= Andrew |last=Ku|accessdate=2012-02-10 }}</ref>。

== SSD基本操作 ==
{{See also|闪存|固态硬盘}}

[[File:NAND_Flash_Pages_and_Blocks.png|frame]]

由于闪存操作的性质，数据不能像在[[硬盘|硬盘]]中那样直接[[覆写|覆写]]。当首次向SSD写入数据时，[[闪存#运作原理|单元]]都处于已擦除状态，因而数据可以直接写入，一次一[[闪存#NAND_Flash|页]]（大小{{as of|2010|5|alt=通常为4至8[[千字节|千字节]]（KB）}}）。SSD中管理闪存与主控系统[[介面_(資訊科技)|接口]]的SSD控制器，使用称为[[逻辑区块地址|逻辑区块地址]]（LBA）的逻辑到物理映射系统，这是[[闪存转换层|闪存转换层]]（FTL）的一部分<ref name="IBM_Hu_Haas">{{cite web |url=http://domino.watson.ibm.com/library/cyberdig.nsf/papers/50A84DF88D540735852576F5004C2558/$File/rz3771.pdf |title=The Fundamental Limit of Flash Random Write Performance: Understanding, Analysis and Performance Modelling |author=Hu, X.-Y. and R. Haas |publisher=IBM Research, Zurich |date=2010-03-31 |accessdate=2010-06-19 |archive-url=https://web.archive.org/web/20110713001639/http://domino.watson.ibm.com/library/cyberdig.nsf/papers/50A84DF88D540735852576F5004C2558/$File/rz3771.pdf |archive-date=2011-07-13 |dead-url=no }}</ref>。当新的数据要替换已写入的旧数据时，SSD控制器将会写入新的数据至新的位置，并且更新逻辑映射，将其指向新的物理位置。原位置的数据将不再有效。在可以再次写入之前，它需要先被擦除<ref name="IBM_WA"/><ref name="IBM_Perf">{{cite web |url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.141.1709 |title=Design Tradeoffs for SSD Performance |author=Agrawal, N., V. Prabhakaran, T. Wobber, J. D. Davis, M. Manasse, R. Panigrahy |date=June 2008 |work= |publisher=[[微软|微软]] |id={{citeseerx|10.1.1.141.1709}} |accessdate=2010-06-02 |archive-url=https://web.archive.org/web/20130622035836/http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.141.1709 |archive-date=2013-06-22 |dead-url=no }}</ref>。

闪存的编程和擦除次数有限。通常以闪存在整个寿命中最多可忍受的[[闪存#记忆耗损|编程/擦除循环]]（P/E循环）次数来表示。[[单层单元|单层单元]]（SLC）闪存，通常设计为高性能和长寿命，一般能有50000到100000次循环。{{As of|2011}}，设计用于低成本应用的[[多层单元|多层单元]]（MLC）闪存，循环次数就大为减少，一般只有3000至5000次循环。自2013年起，已有[[三层单元|三层单元]]（TLC）闪存，其[[闪存#記憶耗損|编程-擦除]]（P/E）循环次数又降至1000。写入放大越低，则越为理想，因为与之对应的是闪存中P/E循环次数减少，所以能延长SSD的寿命。<ref name="IBM_WA"/>

== 计算数值 ==
即使是在定义术语之前，写入放大就已经存在于固态硬盘中，但直到2008年，才有英特尔<ref name="Lucchesi" /><ref>{{Cite web |url=http://www.extremetech.com/computing/80622-intel-x25-80gb-solidstate-drive-review |title=Intel X25 80GB Solid-State Drive Review |last=Case |first=Loyd |date=2008-09-08 |accessdate=2011-07-28 |archive-url=https://web.archive.org/web/20110823094616/http://www.extremetech.com/computing/80622-intel-x25-80gb-solidstate-drive-review |archive-date=2011-08-23 |dead-url=no }}</ref>和SiliconSystems开始在他们的论文和出版物中使用它<ref name="Zsolt_Silicon_Systems" />。所有的SSD都有一个写入放大值，基于目前正在写入的数据及先前已写入到SSD的数据。为了能准确地测量特定SSD的该值，应使选定的测试流程运行足够长的时间，以确保驱动器已达到[[穩態_(系統)|稳态]]<ref name="K Smith" />。

一个简单计算SSD写入放大的公式是：<ref name="IBM_WA" /><ref name="Zsolt_WA">{{cite web |url=http://www.storagesearch.com/ssd-jargon.html |title=Flash SSD Jargon Explained |author=Kerekes, Zsolt |date= |work= |publisher=ACSL |accessdate=2010-05-31 |archive-url=https://web.archive.org/web/20100611052700/http://www.storagesearch.com/ssd-jargon.html |archive-date=2010-06-11 |dead-url=no }}</ref><ref name="OCZ_WA" /><ref>{{cite web|url=http://www.intel.com/cd/channel/reseller/asmo-na/eng/products/nand/feature/index.htm|title=Intel Solid State Drives|author=|date=|work=|publisher=Intel|accessdate=2010-05-31|archive-url=https://web.archive.org/web/20100526070908/http://www.intel.com/cd/channel/reseller/asmo-na/eng/products/nand/feature/index.htm|archive-date=2010-05-26|dead-url=no}}</ref>

:闪存写入的数据量 ÷ 主控写入的数据量 = 写入放大

== 影响因素 ==
SSD的写入放大会受许多因素的影响。下表列出了主要因素以及它们对写入放大的影响。对于变量因素，表中注明了“正面”相关或“反面”相关。如随着预留空间的增加，写入放大将减小（反相关）。如果该因素是一个开关（“启用”或“禁用”）关系，那么它的关系或“正向”或“反向”。<ref name="IBM_WA"/><ref name="IBM_Hu_Haas"/><ref name="Zsolt_WA"/>

{| class="wikitable sortable"
|+ 写入放大因素
|-
! style="width: 7em;" | 因素
! 描述
! style="width: 5em;" | 类型
! style="width: 7em;" | 关系*
|-
| [[写入放大#垃圾回收|垃圾回收]]
| 用来挑选用于擦除和重写的最佳块的算法的效率
| style="background: lightblue;" | 变量
| style="background: lightgreen;" | 反面（小为好）
|-
| [[写入放大#预留空间|预留空间]]
| 分配到SSD控制器的物理容量百分比
| style="background: Lightblue;" | 变量
| style="background: Lightgreen;" | 反面（小为好）
|-
| SATA的[[TRIM|TRIM]]命令 或 SCSI中的UNMAP
| 这些命令必须由操作系统（OS）发送，可以通知存储设备哪些扇区含有无效数据。可以处理这些命令的SSD能在擦除块时，将包含这些扇区的页作为空闲空间回收，而不是复制无效的数据到干净的页中。
| style="background: Wheat;" | 开关
| style="background: Lightgreen;" | 正向（小为好）
|-
| [[写入放大#空闲用户容量|空闲用户容量]]
| 没有实际用户数据的用户容量百分比；需要TRIM，否则SSD不会从任何空闲的用户容量中获得好处
| style="background: Lightblue;" | 变量
| style="background: Lightgreen;" | 反面（小为好）
|-
| [[写入放大#安全擦除|安全擦除]]
| 擦除所有的用户数据和相关元数据，将SSD的性能重置到最初状态（直至重新开始垃圾回收）
| style="background: Wheat;" | 开关
| style="background: Lightgreen;" | 正向（小为好）
|-
| [[写入放大#耗损均衡|耗损均衡]]
| 算法的效率，令每块的写入次数与其他的块尽可能相同
| style="background: Lightblue;" | 变量
| style="background: LightCoral;" | 正面（大为坏）
|-
| [[写入放大#静动数据分离|静动数据分离]]
| 将数据按修改频率分组
| style="background: Wheat;" | 开关
| style="background: Lightgreen;" | 正向（小为好）
|-
| [[写入放大#顺序写入|顺序写入]]
| 理论上，顺序写入的写入放大为1，但其他因素仍会影响此值
| style="background: Wheat;" | 开关
| style="background: Lightgreen;" | 正向（小为好）
|-
| [[写入放大#随机写入|随机写入]]
| 写入到非连续的LBA对写入放大的影响最大
| style="background: Wheat;" | 开关
| style="background: LightCoral;" | 反向（大为坏）
|-
| [[数据压缩|数据压缩]]，包括[[重复数据删除|重复数据删除]]
| 数据压缩和重复数据删除能消除更多的冗余数据，降低写入放大，同时提升SSD速度。
| style="background: Lightblue;" | 变量
| style="background: Lightgreen;" | 反面（小为好）
|-
| 以[[多层单元#单层单元|SLC]]模式使用[[多层单元|MLC]] NAND
| 以每单元1位，而不是以设计的每单元位数（通常为每单元2位）写入数据，以加快读取和写入操作。如果临近SLC模式下的NAND容量限制，SSD必须把旧有用SLC模式写入的数据改写为MLC或TLC模式，才能让SLC模式的NAND空间释放出来，以便容纳更多的数据。然而，通过让经常更改的页面维持在SLC模式，而不是以MLC或TLC模式修改，这种做法也可以降低磨损，因为比用SLC模式，用MLC或TLC模式写入对闪存的伤害确实更大。因此，这种做法提高了写入放大，但当写入模式设为向常写页面上写入时，却可以减少磨损。然而，顺序和随机写入却会加剧磨损，因为这样就没有或少有频繁写入的页是SLC模式，迫使旧数据不断地从SLC模式改写到MLC或TLC。
| style="background: Wheat;" | 开关
| style="background: LightCoral;" | 反向（大为坏）
|}
<!-- Defragmenting an SSD has a negative impact on the WA. (Source needed.)-->

{| class="wikitable"
|+ *关系定义
|-
! 类型
! 关系
! 描述
|- 
| style="background: Lightblue;" rowspan="2" | 变量
| style="background: LightCoral;" |正面
| style="background: LightCoral;" |随着因子增加WA增加
|- 
| style="background: Lightgreen;" |反面
| style="background: Lightgreen;" |随着因子增加WA减小
|- 
| style="background: wheat;" rowspan="2" | 开关
| style="background: Lightgreen;" |正向
| style="background: Lightgreen;" |当因子开启时WA减小
|- 
| style="background: LightCoral;" |反向
| style="background: LightCoral;" |当因子开启时WA增加
|}

{{clear}}

== {{Anchor|GC}}垃圾回收 ==
{{details|垃圾回收 (計算機科學)}}
[[File:Garbage_Collection.png|right]]

数据以页面（由多个单元组成）为单位写入到闪存中。然而，存储器只能以较大的单位区块（由多个页面组成）擦除<ref name="L Smith" />。如果不再需要一个块中某些页内的数据（称为过期页），仅会读取该块中含有有效数据的页面，并重新写入到另一个先前擦除的空块中<ref name="K Smith"/>。因而，由于没有移动过期数据，留下的空闲页就可用来存储新的数据。这一过程称为“[[垃圾回收_(计算机科学)|垃圾回收]]”（GC）<ref name="IBM_WA"/><ref name="OCZ_WA">{{cite web|url=http://www.oczenterprise.com/whitepapers/ssds-write-amplification-trim-and-gc.pdf|title=SSDs - Write Amplification, TRIM and GC|author=|date=|work=|publisher=OCZ Technology|accessdate=2012-11-13|archive-url=https://web.archive.org/web/20120526033947/http://www.oczenterprise.com/whitepapers/ssds-write-amplification-trim-and-gc.pdf|archive-date=2012-05-26|dead-url=yes}}</ref>所有的SSD都包含不同程度的垃圾回收机制，但在执行的频率和速度上有所不同<ref name="OCZ_WA"/>。垃圾回收占了SSD上写入放大的很大一部分<ref name="IBM_WA"/><ref name="OCZ_WA"/>。

读取数据不需要擦除闪存，因此通常与写入放大无关。在有限的情况下会发生[[闪存#读取干扰|读取干扰]]错误，此时会读取并重新写入区块中的数据，但是这不会对驱动器的写入放大造成实质性的影响。<ref>{{cite web |url=http://download.micron.com/pdf/technotes/nand/tn2917.pdf |title=TN-29-17: NAND Flash Design and Use Considerations |author= |year=2006 |work= |publisher=Micron |accessdate=2010-06-02 |deadurl=yes |archiveurl=https://web.archive.org/web/20110719170510/http://download.micron.com/pdf/technotes/nand/tn2917.pdf |archivedate=2011-07-19 }}</ref>

=== {{Anchor|BG-GC}}后台垃圾回收 ===
垃圾回收的过程包括读取并重新向闪存写入数据。这意味着，主控写入新数据时，就必须先读取整个区块，再写入区块中仍包含有效数据的部分，之后才写入新数据。这显著降低了系统的性能<ref name="Mehling_Garbage">{{cite web |url=http://www.enterprisestorageforum.com/technology/features/article.php/3850436/Solid-State-Drives-Take-Out-the-Garbage.htm |title=Solid State Drives Take Out the Garbage |author=Mehling, Herman |publisher=Enterprise Storage Forum |date=2009-12-01 |accessdate=2010-06-18 |archive-url=https://web.archive.org/web/20101209012243/http://www.enterprisestorageforum.com/technology/features/article.php/3850436/Solid-State-Drives-Take-Out-the-Garbage.htm |archive-date=2010-12-09 |dead-url=no }}</ref>。有的SSD控制器实现了“后台垃圾回收”（BGC），有时也被称为“空闲垃圾回收”或“空闲时间垃圾回收”（ITGC），能让控制器在主控需要写入新的数据之前，使用[[空闲_(CPU)|空闲]]时间整理闪存块。这使驱动器能维持较高的性能<ref name="Conley"/>。

如果能在需要快閃記憶體前，控制器在后台垃圾回收时,就已经收集好了所有的空闲区块，那么就可以直接写入主控要写入的新数据，而無須先移動数据，这样驱动器就总能表现出最佳性能。不幸的是，实际上某些區块上的数据主控并不需要，它们最终将会被删除，但操作系统并没有告诉控制器这些信息。结果，要被删除的数据被重写到了闪存的另一个位置，因而提高了写入放大。在一些[[OCZ|OCZ]]的SSD中，后台垃圾回收仅会清除少量的块，之后便停止，以此限制过度写入的数量<ref name="OCZ_WA"/>。另一种解决方案是配备一个高效的垃圾回收系统，在主控写入的同时同步执行必要的数据移动。在SSD少有空闲的环境中，这种解决方案更有效<ref name="Layton">{{cite web |url=http://www.linux-mag.com/id/7590/2/ |title=Anatomy of SSDs |author=Layton, Jeffrey B. |publisher=Linux Magazine |date=2009-10-27 |accessdate=2010-06-19 |archive-url=https://web.archive.org/web/20100701142947/http://www.linux-mag.com/id/7590/2 |archive-date=2010-07-01 |dead-url=no }}</ref>。[[SandForce|SandForce]]的SSD控制器<ref name="Mehling_Garbage"/>和[[Violin_Memory|Violin Memory]]的系统有这项功能<ref name="Zsolt_WA"/>。

=== 文件系统感知垃圾回收 ===
2010年，一些厂商（特别是三星）推出的SSD控制器扩展了BGC的概念，它们会分析固态硬盘上使用的[[文件系统|文件系统]]，以识别出最近删除的文件，及[[硬盘分区|未分区的空间]]。制造商声称，系统（操作系统和SATA控制器硬件）即便不支持[[TRIM|TRIM]]，也能获得相似的性能。三星实现的操作似乎在假定、并且需要有一个[[NTFS|NTFS]]文件系统<ref name="Bell_Garbage">{{cite web |url=http://www.jdfsl.org/subscriptions/JDFSL-V5N3-Bell.pdf |title=Solid State Drives: The Beginning of the End for Current Practice in Digital Forensic Recovery? |author=Bell, Graeme B. |publisher=Journal of Digital Forensics, Security and Law |year=2010 |accessdate=2012-04-02 |deadurl=yes |archiveurl=https://web.archive.org/web/20120423230137/http://www.jdfsl.org/subscriptions/JDFSL-V5N3-Bell.pdf |archivedate=2012-04-23 }}</ref>。目前，这些厂商生产的SSD是否仍具备该功能不得而知。有报道称，如果没有正确地用[[主引导记录|MBR]]和NTFS格式化这些驱动器，将会出现系统数据的损坏<ref name="AT_SSDCorrupt">{{cite web |url=http://forums.anandtech.com/archive/index.php/t-2228064.html |title=SSDs are incompatible with GPT partitioning?! |access-date=2014-10-11 |archive-url=https://web.archive.org/web/20141018173754/http://forums.anandtech.com/archive/index.php/t-2228064.html |archive-date=2014-10-18 |dead-url=yes }}</ref>。

== 预留空间 ==
[[File:Over-provisioning_on_an_SSD.png|500px]]

预留空间（有时简称OP）是闪存的物理容量和[[操作系统|操作系统]]（OS）呈现给用户的可用逻辑容量之间的差值。在SSD的垃圾收集、耗损均衡及坏块映射操作中，额外的预留空间有助于降低控制器写入闪存时的写入放大。<ref name="Lucchesi"/><ref name="Jim_Bagley">{{cite web |url=http://www.plianttechnology.com/pdf/SSG-NOW_SSD_Flash_Bulletin_July_2009.pdf |title=Over-provisioning: a winning strategy or a retreat? |page=2 |author=Bagley, Jim |publisher=StorageStrategies Now |date=2009-07-01 |accessdate=2010-06-19 |deadurl=yes |archiveurl=https://web.archive.org/web/20100104144120/http://plianttechnology.com/pdf/SSG-NOW_SSD_Flash_Bulletin_July_2009.pdf |archivedate=2010-01-04 }}</ref><ref name="Drossel">{{cite web |url=http://www.snia.org/events/storage-developer2009/presentations/wednesday/GaryDrossel_Methodologies_SSD_Usable_Life.pdf |title=Methodologies for Calculating SSD Useable Life |author=Drossel, Gary |publisher=Storage Developer Conference, 2009 |date=2009-09-14 |accessdate=2010-06-20 }}{{dead link|date=2017年11月 |bot=InternetArchiveBot |fix-attempted=yes }}</ref><ref name="Smith_2012">{{cite web |url=http://www.flashmemorysummit.com/English/Collaterals/Proceedings/2012/20120822_TE21_Smith.pdf |title=Understanding SSD Over-provisioning |last=Smith |first=Kent |date=2011-08-01 |page=14 |publisher=flashmemorysummit.com |accessdate=2012-12-03 |archive-url=https://web.archive.org/web/20141019022817/http://www.flashmemorysummit.com/English/Collaterals/Proceedings/2012/20120822_TE21_Smith.pdf |archive-date=2014-10-19 |dead-url=no }}</ref>

预留空间的第一级来自容量的计算，单位使用[[吉字节|吉字节]]（GB），而不是[[gibibyte|gibibyte]]（GiB）。HDD和SSD的厂商都使用术语GB来表示“十进制”的GB，即1,000,000,000（10^9）字节。闪存（象其它大多数电子存储器一样）以二的幂组装，所以SSD的物理容量将以每二进制GB 1,073,741,824（2<sup>30</sup>）字节来计算。两个值之间的差距是7.37%（=(2<sup>30</sup>-10<sup>9</sup>)/10<sup>9</sup> × 100%）。从而预留0%空间的128 GB SSD提供给用户的容量是128,000,000,000字节。这个初始的7.37％通常不计算在总的预留空间数量中。<ref name="Jim_Bagley"/><ref name="Smith_2012"/>

预留空间的第二级来自制造商。这一级的预留空间大小通常为0％、7％或28％，基于十进制吉字节的物理容量与十进制吉字节的用户可用空间之差。举例而言，制造商发布的规格为100 GB、120 GB或128 GB的SSD，可能它们的实际物理容量都是128 GB。这种差异就是由28％、7％和0％造成的，而这也是制造商声称它们的驱动器有28％预留空间的依据。这不包括额外的十进制和二进制吉字节之间相差的7.37％。<ref name="Jim_Bagley"/><ref name="Smith_2012"/>

预留空间的第三级来自驱动器上的已知可用空间，以获得持久性和性能，前提是报告未使用的部分，和/或以目前或未来的空间为代价。可以藉由操作系统使用TRIM命令来确定空闲空间。另外，一些SSD提供了工具，以让最终用户选择额外的预留空间。此外，如果在SSD上没有100%地使用可用空间划分分区布局，SSD也将会自动把未分区的空间作为预留空间使用<ref name="Smith_2012"/>。还有一个预留空间来源于操作系统的最小可用空间限制；一些操作系统在每一个驱动器上都保留有一定的最小可用空间，特别是在启动或主驱动器上。如果SSD，也许是通过连续使用TRIM命令，能够识别出这些额外空间，那么它就能作为半永久性的预留空间。预留空间往往需要占用用户容量，或暂时或永久，但它能减少写入放大，增加持久性，并提高性能<ref name="Layton"/><ref name="Drossel"/><ref name="Anand_Spare_Area">{{cite web |url=http://www.anandtech.com/show/3690/the-impact-of-spare-area-on-sandforce-more-capacity-at-no-performance-loss |title=The Impact of Spare Area on SandForce, More Capacity At No Performance Loss? |page=2 |author=Shimpi, Anand Lal |publisher=AnandTech.com |date=2010-05-03 |accessdate=2010-06-19 |archive-url=https://web.archive.org/web/20100610074739/http://www.anandtech.com/show/3690/the-impact-of-spare-area-on-sandforce-more-capacity-at-no-performance-loss |archive-date=2010-06-10 |dead-url=no }}</ref><ref>{{cite web | url=http://www.storagereview.com/intel_ssd_520_enterprise_review | title=Intel SSD 520 Enterprise Review | quote=20% over-provisioning adds substantial performance in all profiles with write activity | first=Kevin | last=OBrien | work=Storage Review | date=2012-02-06 | accessdate=2012-11-29 | archive-url=https://web.archive.org/web/20121115073901/http://www.storagereview.com/intel_ssd_520_enterprise_review | archive-date=2012-11-15 | dead-url=no }}</ref><ref>{{cite web |url=http://cache-www.intel.com/cd/00/00/45/95/459555_459555.pdf |archiveurl=https://web.archive.org/web/20111125012226/http://cache-www.intel.com/cd/00/00/45/95/459555_459555.pdf |archivedate=2011-11-25 |title=White Paper: Over-Provisioning an Intel SSD |publisher=Intel |format=PDF |year=2010 |accessdate=2012-11-29 |deadurl=yes }}</ref>。<blockquote>

{| cellpadding="12" border="1" align=center
|+ '''预留空间计算'''
|-
| ( 物理容量 - 用户容量 ) ÷ 用户容量 = 预留空间
|}
</blockquote>
{{clear}}

== TRIM ==
{{details|Trim命令}}
'''TRIM'''是一个SATA命令，使得操作系统可以告诉SSD不再需要哪些之前保存过数据的区块。可能这些文件已被删除，或整个分区已被格式化。若操作系统替换了一个LBA的同时覆写了一个文件时，SSD就能知道可以标记原来的LBA为过时或无效，在垃圾回收的过程中就不用再保留那些块。如果用户或操作系统删除一个文件（不只是除去它的一部分），通常只会将该文件标记为已删除，而并未真正擦除磁盘上的实际内容。正因如此，SSD不知道可以擦除文件先前占用的LBA，所以在垃圾回收时仍会保留它们。<ref name="Christiansen">{{cite web |url=http://www.snia.org/events/storage-developer2009/presentations/thursday/NealChristiansen_ATA_TrimDeleteNotification_Windows7.pdf |title=ATA Trim/Delete Notification Support in Windows 7 |author=Christiansen, Neal |publisher=Storage Developer Conference, 2009 |date=2009-09-14 |accessdate=2010-06-20 |deadurl=yes |archiveurl=https://web.archive.org/web/20100326065117/http://www.snia.org/events/storage-developer2009/presentations/thursday/NealChristiansen_ATA_TrimDeleteNotification_Windows7.pdf |archivedate=2010-03-26 }}</ref><ref name="SSD_Improv">{{cite web |url=http://www.anandtech.com/show/2865 |title=The SSD Improv: Intel & Indilinx get TRIM, Kingston Brings Intel Down to $115 |author=Shimpi, Anand Lal |publisher=AnandTech.com |date=2009-11-17 |accessdate=2010-06-20 |archive-url=https://web.archive.org/web/20100617074232/http://www.anandtech.com/show/2865 |archive-date=2010-06-17 |dead-url=no }}</ref><ref name="Mehling_TRIM">{{cite web |url=http://www.enterprisestorageforum.com/technology/features/article.php/3861181/Solid-State-Drives-Get-Faster-with-TRIM.htm |title=Solid State Drives Get Faster with TRIM |author=Mehling, Herman |publisher=Enterprise Storage Forum |date=2010-01-27 |accessdate=2010-06-20 |archive-url=https://web.archive.org/web/20100606042125/http://www.enterprisestorageforum.com/technology/features/article.php/3861181/Solid-State-Drives-Get-Faster-with-TRIM.htm |archive-date=2010-06-06 |dead-url=no }}</ref>

在有操作系统[[TRIM#操作系统和SSD支持|支持]]的情况下，TRIM命令解决了这个问题，如[[Windows_7新功能#固态硬盘|Windows 7]]<ref name="SSD_Improv"/>、Mac OS（Snow Leopard、Lion及Mountain Lion的最新版，有些情况下需要补丁）<ref>{{cite web |url=http://osxdaily.com/2012/01/03/enable-trim-all-ssd-mac-os-x-lion/ |title=Enable TRIM for All SSD’s [sic] in Mac OS X Lion |publisher=osxdaily.com |date=2012-01-03 |accessdate=2012-08-14 |archive-url=https://web.archive.org/web/20120810055953/http://osxdaily.com/2012/01/03/enable-trim-all-ssd-mac-os-x-lion/ |archive-date=2012-08-10 |dead-url=no }}</ref>及[[Linux|Linux]] >= 2.6.33<ref>{{cite web |url=http://kernelnewbies.org/Linux_2_6_33#head-b9b8a40358aaef60a61fcf12e9055900709a1cfb |title=Linux 2 6 33 Features |publisher=kernelnewbies.org |date=2010-02-04 |accessdate=2010-07-23 |archive-url=https://www.webcitation.org/68ok0wDgp?url=http://kernelnewbies.org/Linux_2_6_33#head-b9b8a40358aaef60a61fcf12e9055900709a1cfb |archive-date=2012-06-30 |dead-url=no }}</ref>。当永久删除一个文件或格式化硬盘时，操作系统依据不再包含有效数据的LBA发送TRIM命令。这可告知SSD可以擦除并重新使用哪些使用中的LBA。垃圾回收过程中需要移动的LBA因此而减少。结果是SSD将有更多的空闲空间，同时获得低写入放大及更高的性能<ref name="Christiansen"/><ref name="SSD_Improv"/><ref name="Mehling_TRIM"/>。

=== 限制和依赖 ===
TRIM命令也需要SSD支持。SSD[[固件|固件]]如果不支持TRIM命令，就不会标记TRIM命令收到的LBA为无效，而仍假设数据有效，并在垃圾回收时继续予以保留。只有当操作系统向这些LBA中保存新数据时，SSD才能将最初的LBA标记为无效<ref name="Mehling_TRIM"/>。若驱动器中没有内建支持TRIM，SSD厂商可以为用户升级固件，或提供一个单独的实用程序，以从操作系统中提取关于无效数据的信息，再另外TRIM SSD。只有用户每次运行程序后，才能从中获得好处。用户可以设定计划任务，让该实用程序在后台定期自动运行<ref name="Mehling_Garbage"/>。

正因为SSD支持TRIM命令，在收到命令后，它不一定能立即表现出最快性能。TRIM命令释放的空间可能随机散落于SSD中。要经过几轮的数据写入和垃圾回收之后，空间才会逐渐合并，表现的性能才能提高。<ref name="Mehling_TRIM"/>

即使已配置OS和SSD支持TRIM命令，其他情况也可能会使TRIM无法发挥出它的功效。{{As of|2010|1|27|alt=截至2010年初}}，数据库和RAID系统还没有配备TRIM感知，因而无法向SSD传递信息。这种情况下，SSD将继续保留那些区块，直到OS将那些LBA用于新的写操作。<ref name="Mehling_TRIM"/>

实际可从TRIM命令中得到的益处取决于SSD上的空闲用户容量。如果SSD用户容量为100 GB，用户实际在驱动器上存储了95 GB数据，任何TRIM操作为垃圾回收和耗损均衡增加的可用空间都不会超过5 GB。在这种情况下，增加5 GB的预留空间将使SSD的性能更加稳定一致，因为可用空间总会有额外的5 GB，而不必等待OS发来TRIM命令。<ref name="Mehling_TRIM"/>

== 空闲用户容量 ==
SSD控制器将使用SSD上的任何空闲块以进行垃圾回收和耗损均衡。无用户数据的用户容量部分（或已TRIM，或从未写入）就如同预留空间（直至用户向SSD保存新数据）。如果用户保存的数据仅占驱动器总用户容量的一半，用户容量的另一半看起来就如同额外的预留空间（只要系统支持TRIM命令）。<ref name="Mehling_TRIM"/><ref name="AnandTech_Anthology_9">{{cite web |url=http://www.anandtech.com/print/2738 |title=The SSD Anthology: Understanding SSDs and New Drives from OCZ |author=Shimpi, Anand Lal |publisher=AnandTech.com |page=9 |date=2009-03-18 |accessdate=2010-06-20 |archive-url=https://web.archive.org/web/20100612184952/http://www.anandtech.com/print/2738 |archive-date=2010-06-12 |dead-url=no }}</ref>

== 安全擦除 ==
{{details|数据残留|安全擦除}}

ATA安全擦除命令旨在从驱动器中删除所有用户数据。对于没有内置加密功能的固态硬盘，此命令将会把驱动器恢复至其出厂状态。刚开始，它的性能将恢复至可能的最高水平及最佳的（最低）写入放大，但只要驱动器再次开始垃圾收集，性能和写入放大就会逐渐降至先前水平<ref name="AnandTech_Anthology_11">{{cite web |url=http://www.anandtech.com/print/2738 |title=The SSD Anthology: Understanding SSDs and New Drives from OCZ |author=Shimpi, Anand Lal |publisher=AnandTech.com |page=11 |date=2009-03-18 |accessdate=2010-06-20 |archive-url=https://web.archive.org/web/20100612184952/http://www.anandtech.com/print/2738 |archive-date=2010-06-12 |dead-url=no }}</ref><ref name="Malventano">{{cite web |url=http://www.pcper.com/article.php?aid=669&type=expert&pid=6 |title=Long-term performance analysis of Intel Mainstream SSDs |author=Malventano, Allyn |publisher=PC Perspective |date=2009-02-13 |accessdate=2010-06-20 |archive-url=https://web.archive.org/web/20100221171556/http://www.pcper.com/article.php?aid=669&type=expert&pid=6 |archive-date=2010-02-21 |dead-url=yes }}</ref>。许多工具能使用ATA安全擦除命令重置驱动器，而且有用户界面。在行业中经常提到的一个免费工具是[[HDDErase|HDDErase]]<ref name="Malventano"/><ref name="HDDERASE">{{cite web |url=http://cmrr.ucsd.edu/people/Hughes/SecureErase.shtml |title=CMRR - Secure Erase |publisher=CMRR |accessdate=2010-06-21 |deadurl=yes |archiveurl=https://web.archive.org/web/20100610233931/http://cmrr.ucsd.edu/people/Hughes/SecureErase.shtml |archivedate=2010-06-10 }}</ref>。[[Gparted|Gparted]]和[[Ubuntu|Ubuntu]] live CD提供可启动的Linux系统，上有包含安全擦除的磁盘实用程序<ref>{{cite web 
 |author=OCZ Technology 
 |title=How to Secure Erase Your OCZ SSD Using a Bootable Linux CD 
 |url=http://www.ocztechnology.com/blog/?p=367 
 |accessdate=2014-12-13 
 |archiveurl=https://web.archive.org/web/20120107194502/http://www.ocztechnology.com/blog/?p=367 
 |archivedate=2012-01-07 
 |date=2011-09-07 
 |deadurl=yes 
 }}</ref>。

实时加密所有写入数据的驱动器可以以另一种方式实现ATA安全擦除。方法是简单地向其[[补零|补零]]，并在每次完成安全擦除后产生一个新的随机加密密钥。这样就无法再读取旧数据，因为无法解密<ref>{{cite web |url=http://www.anandtech.com/show/4244/intel-ssd-320-review/2 |title=The Intel SSD 320 Review: 25nm G3 is Finally Here |publisher=anandtech |accessdate=2011-06-29 |archive-url=https://web.archive.org/web/20110705124108/http://www.anandtech.com/show/4244/intel-ssd-320-review/2 |archive-date=2011-07-05 |dead-url=no }}</ref>。内置加密的驱动器可能需要发送TRIM命令，以将其设为出厂状态<ref>{{cite web |url=http://www.thomas-krenn.com/de/wiki/SSD_Secure_Erase#Ziele_eines_Secure_Erase |title=SSD Secure Erase - Ziele eines Secure Erase |publisher=Thomas-Krenn.AG |accessdate=2011-09-28 |archive-url=https://web.archive.org/web/20111027180434/http://www.thomas-krenn.com/de/wiki/SSD_Secure_Erase#Ziele_eines_Secure_Erase |archive-date=2011-10-27 |dead-url=no }}</ref>。

== 耗损均衡 ==
{{details|耗损平衡}}

如果反复地编程和擦写某區块，而其他區块却没有写入，该區块会早于其他的區块而磨损——从而过早地结束了SSD的寿命。由于这个原因，SSD控制器使用称为[[耗损平衡|耗损均衡]]的技术，以尽可能均匀地将写入分配到SSD的所有闪存區块上。

理想情况下，每一區块都能写入到最大次数，这样它们都能同时失效。不幸的是，[[耗损平衡|耗损均衡]]操作會要求移动之前写入後就未改变的数据（冷数据），以使频繁变动的数据（热数据）可以写入到冷數據的區块中，讓冷數據的區塊達到均衡。数据被重定位，而主控却并没有修改它们，这增加了写入放大，而降低了闪存的寿命。关键是要找到最优算法以使两者同时达到最佳化。<ref name="Li-Pin Chang">{{cite web |url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.103.4903 |title=On Efficient Wear Leveling for Large Scale Flash Memory Storage Systems |author=Chang, Li-Pin |date=2007-03-11 |work= |publisher=National ChiaoTung University, HsinChu, Taiwan |id={{citeseerx|10.1.1.103.4903}} |accessdate=2010-05-31 |archive-url=https://web.archive.org/web/20130801021807/http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.103.4903 |archive-date=2013-08-01 |dead-url=no }}</ref>
{{clear}}

== 静动数据分离 ==
对SSD控制器来说，静动数据分离并不是一件简单的事。该方法需要SSD控制器将数据不断变化、需要重写（动态数据）的与数据很少改变、且不需要任何重写（静态数据）的LBA分离开来。如果数据混于同一区块，正如目前几乎所有系统所做的那样，SSD控制器在重写时，就需要垃圾回收动态数据（引起重写的原因）和静态数据（不需要任何重写）。任何对操作中未涉及数据的垃圾回收都会增加写入放大。因此分离数据将使静态数据留在原地，如果它永远不会改写，写入放大就能达到最低。<ref name="IBM_WA"/>

== {{Anchor|REMF}}顺序写入 ==
当顺序向固态硬盘写入数据时，写入放大等于1，意为没有写入放大。这是因为在数据写入时，依次用来自同一文件的数据填充区块。如果OS确认该文件将被替换或删除，可以标记整个块为无效，也不需要读取它以将垃圾收集到的数据重写入另一个块。它只需要擦除，比随机数据写入所需的“读取-擦除-修改-写入”的垃圾收集过程更易、更快。<ref name="IBM_Hu_Haas"/>

== 随机写入 ==
在完全垃圾回收、安全擦除、100％TRIM、或新安装之后，SSD有大量的空闲区块，随机写入性能达到峰值。最大速度将取决于连接到SSD控制器的并行闪存通道数、固件效率及闪存写入页面的速度。在此阶段，写入放大之于随机写入达到最佳，接近1。一旦区块都写入了一次，垃圾收集过程将启动，性能将会被此过程的速度和效率所限制。此阶段的写入放大将增至驱动器经历过的最高水平。<ref name="IBM_Hu_Haas"/>

== 对性能的影响 ==
SSD的总体性能取决于许多因素，其中包括写入放大。向闪存设备写入比从它读取所需的时间更长<ref name="Conley">{{cite web |url=http://blog.corsair.com/?p=3044 |title=Corsair Force Series SSDs: Putting a Damper on Write Amplification |author=Conley, Kevin |publisher=Corsair.com |date=2010-05-27 |accessdate=2010-06-18 |deadurl=yes |archiveurl=https://web.archive.org/web/20110812142213/http://blog.corsair.com/?p=3044 |archivedate=2011-08-12 }}</ref>。SSD通常并联使用多个闪存组件，以提高性能。如果SSD的写入放大高，控制器将不得不多次向闪存写入。主控将需要更多的时间写入数据。低写入放大的SSD不需要写那么多的数据，因此能比高写入放大的驱动器更早写入完毕<ref name="IBM_WA"/><ref name="IBM_Perf"/>。

== 产品声明 ==
2008年9月，[[英特尔|英特尔]]宣布了X25-M SATA SSD，声称WA能低至1.1<ref name="Anand_WA"/><ref>{{cite web |url=http://www.intel.com/pressroom/archive/releases/2008/20080908comp.htm |title=Intel Introduces Solid-State Drives for Notebook and Desktop Computers |author= |date=2008-09-08 |work= |publisher=Intel |accessdate=2010-05-31 |archive-url=https://web.archive.org/web/20100802024028/http://www.intel.com/pressroom/archive/releases/2008/20080908comp.htm |archive-date=2010-08-02 |dead-url=no }}</ref>。2009年4月，[[SandForce|SandForce]]宣布了SF-1000 SSD处理器系列，报称其WA为0.5，似乎是借由某种形式的数据压缩而达到<ref name="Anand_WA"/><ref>{{cite web |url=http://www.sandforce.com/userfiles/file/downloads/SFI_Launch_PR_Final.pdf |title=SandForce SSD Processors Transform Mainstream Data Storage |author= |date=2008-09-08 |work= |publisher=SandForce |accessdate=2010-05-31 |archive-url=https://web.archive.org/web/20110716003152/http://www.sandforce.com/userfiles/file/downloads/SFI_Launch_PR_Final.pdf |archive-date=2011-07-16 |dead-url=no }}</ref>。在此次发布前，曾认为1.0的写入放大是SSD可以达到的最低水平<ref name="Conley"/>。目前，只有[[SandForce|SandForce]]的SSD控制器使用了压缩。

== 参见 ==
* [[闪存文件系统|闪存文件系统]]
* [[分区对齐|分区对齐]]
* [[耗损平衡|耗损平衡]]

== 注释 ==
{{notelist|iger=}}

== 参考 ==
{{Reflist|30em}}

== 外部链接 ==
* {{commonscat-inline}}

{{固态硬盘}}
{{Good article}}

[[Category:固态计算机存储|Category:固态计算机存储]]