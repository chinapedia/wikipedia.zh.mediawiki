{{multiple issues|
{{cleanup-jargon|time=2015-01-09T13:08:07+00:00}}
{{expert|time=2015-01-09T13:08:07+00:00}}
{{Refimprove|time=2020-03-08T06:28:55+00:00}} 
}}
'''无符号数'''（{{lang|en|unsigned}}）是[[计算机编程|计算机编程]]中的一种[[数值|数值]][[数据类型|資料型別]]。[[有符号数|有符号数]]（{{lang|en|signed}}）可以表示特定类型规定范围内的整数（包括负数），而无符号数只能表示[[非负数|非负数]]（0及[[正数|正数]]）。

有符号数能够表示负数的代价是能够表示的正数范围的缩小，因为其约一半的数值范围要用来表示负数（如8位有符号整数中，对应8位无符号整数表示128~255的部分被用于表示-127~-1）。无符号数可以利用其所占有的所有[[位|位]]来表示较大的数。

例如，16位有符号整数可表示 -32768~32767 之间的任意整数，而16位无符号整数可表示 0~65535 之间的数。若将有符号数转换为[[二进制|二进制]]，则其数值类型允许的最左一位用于表示符号（1为负数，0为正数和0），但在无符号数中，最左一位与其右各位一样用于表示数值。

大多数[[架构|架构]]的[[机器语言|机器语言]]不区分有符号数及无符号数。然而算术指令通常设定进位标志等[[CPU|CPU]]标志，为无符号算术及[[溢出|溢出]]标志设定。这些标志能够被带入随后的分支及算术指令中。

[[C语言|C语言]]及大部分C的派生语言为其所有有符号数类型及char类型提供了对应的无符号类型<ref>{{Cite web|url=https://www.iso.org/standard/57853.html|title=ISO/IEC 9899:2011|publisher=International Organization for Standardization|accessdate=2020-03-08|language=en|archiveurl=https://web.archive.org/web/20200328063511/https://www.iso.org/standard/57853.html|archivedate=2020-03-28|quote=§6.2.5/6: For each of the signed integer types, there is a corresponding (but different) unsigned integer type (designated with the keyword unsigned) that uses the same amount of storage (including sign information) and has the same alignment requirements.|dead-url=no}}</ref>。在这些语言中，若存在显式的unsigned标识符，则将此数标识为无符号，否则为有符号（[[字元|char]]类型除外），对应地存在signed标识符用于标识有符号数。为数值添加U后缀也可将此数值标识为无符号数。例如，在32位数中，0xFFFFFFFF表示-1，但0xFFFFFFFFU表示4294967295。

编译器在遇到有符号数与无符号数间的比较、算术等操作时常会发出警告，因为可能因其范围不同而导致溢出。C/C++语言规定无符号整数运算不存在溢出，如果结果超出了无符号类型能表示的最大数，则做模运算取余数。<ref>{{Cite web|url=https://www.iso.org/standard/57853.html|title=ISO/IEC 9899:2011|publisher=International Organization for Standardization|accessdate=2020-03-08|language=en|archiveurl=https://web.archive.org/web/20200328063511/https://www.iso.org/standard/57853.html|archivedate=2020-03-28|quote=§6.2.5/9: A computation involving unsigned operands can never overflow,because a result that cannot be represented by the resulting unsigned integer type is reduced modulo the number that is one greater than the largest value that can be represented by the resulting type.|dead-url=no}}</ref>例如，对于uint32的 2-3， 其结果对0x10000模运算取余数，最终结果为0xFFFF。

==参考文献==
{{reflist}}

{{数据类型}}
[[Category:计算机编程|Category:计算机编程]]
[[Category:計算機算術|Category:計算機算術]]
[[Category:程式設計小作品|Category:程式設計小作品]]
[[Category:数据类型|Category:数据类型]]