'''附标文法'''是描述[[附标语言|附标语言]]的[[形式文法|形式文法]]。它们有三个无交集的符号集合: 普通终结符、非终结符和只出现在中间推导中的附标(index)的集合。产生式可以如上下文无关文法那样把一个非终结符替代为终结符和非终结符的字符串，但是它还把非终结符替代为跟随着一个附标的非终结符，把跟随着一个附标的非终结符替代为非终结符。

附标只可以出现在非终结符之后或其他附标之后，所以所有非终结符都可以被看作跟随它之后的这些附标的所有者，它们形成了一个[[堆栈|栈]](产生式在非终结符之后增加或去除附标)。

实际上，附标的栈可以计数并记住应用了和以何种次序应用了什么规则。例如，附标文法可以描述非上下无关语言:
:<math> L = \{a^n b^n c^n | n \geq 1 \} </math> <ref name=Hopcroft_and_Ullman> {{cite book | last = [[約翰·霍普克洛夫特|Hopcroft]] | first = John | coauthors = {{en-link|Jeffrey Ullman}} | title = {{en-link|Introduction to Automata Theory, Languages, and Computation}} | year = 1979 | publisher = Addison-Wesley | pages = 390 | isbn = 020102988X}} </ref>

通过如下规则(f 和 g 是附标): 

<math>S\to aAfc</math>

<math>A\to aAgc ~|~ B</math>

<math>Bf\to b</math>

<math>Bg\to bB</math>

在中间增长的 g 的栈计数 A 已经被展开来增加一个 a 和一个 c 的次数 (<math>n-1</math>)；在结束时所有 g 变成终结符 b。

判定一个附标文法是否识别一个字符串是[[NP完全|NP-完全]]的。 <ref name=Hopcroft_and_Ullman/>

==线性附标文法==
Gerald Gazdar 已经定义次级类'''线性下标文法'''，通过要求在每个产生式中最多一个非终结符可以被指定为收到这个栈；在普通附标文法中，所有非终结符都收到这个栈的一个复本。他证明了这个新的文法类定义严格更小的语言类[[适度上下文有关语言|适度上下文有关语言]]。在线性附标文法中成员关系可以在多项式时间内判定。<ref name="gazdar1998">{{cite book | chapter=Applicability of Indexed Grammars to Natural Languages | year=1988 | last=Gazdar | first=Gerald | title=Natural Language Parsing and Linguistic Theories | url=https://archive.org/details/naturallanguagep00reyl | editor=U. Reyle and C. Rohrer | pages=[https://archive.org/details/naturallanguagep00reyl/page/69 69]-94}}</ref>

==参见==
* [[乔姆斯基谱系|乔姆斯基层级]]
* [[附标语言|附标语言]]

==引用==
<references/>

==外部链接==
* [https://web.archive.org/web/20070311042935/http://www.cogs.susx.ac.uk/research/nlp/gazdar/nlp-in-prolog/ch04/chapter-04-sh-1.6.3.html#sh-1.6.3 "NLP in Prolog" chapter on indexed grammars and languages]

{{形式语言与形式文法}}
[[Category:形式语言|F]]