{{NoteTA
|G1 = IT
|1 = zh-cn:类型; zh-tw:型別;
|2 = zh-cn:宏; zh-tw:巨集;
|3 = zh-cn:库; zh-tw:函式庫; zh-hk:函數庫;
|T = zh-tw:布林 (資料類型);zh-cn:布尔 (数据类型);
}}
{{各地中文名
|name = 布林
|hk = 布爾
|cn = 布尔
|tw = 布林
}}
{{Redirect|布爾值||布尔}}
'''布林'''（{{lang-en|'''Boolean'''}}）是[[计算机科学|计算机科学]]中的[[逻辑代数|逻辑数据类型]]，以發明[[布林代數|布林代數]]的數學家[[乔治·布尔|喬治·布-{}-爾]]為名。它是只有两种值的[[原始類型|原始類型]]，通常是[[真|真]]和[[假|假]]。布爾數據類型主要與條件語句相關聯，條件語句通過根據開發人員指定的條件式，更改程序控制流來允許評估語句的運算值為真或假(即條件成立或不成立)。這是一種更廣泛的邏輯數據類型的特殊情況（參見概率邏輯）－邏輯並不總是只屬於布爾類型的。

在一些语言中，布尔数据类型被定义为可代表多于两个真值。例如，ISO SQL:1999标准定义了一个SQL布尔型可以储存三个可能的值：真、假、未知（SQL [[空值_(SQL)|null]]被当作未知真值来处理，但仅仅在布尔型中使用）。在此情況下，未知先於真及假，因為布爾型一開始是未有實際值，其值是unknown(也有機會是隨機值)而非真。

== Ada ==
[[Ada|Ada]]在标准包中定义<code>Boolean</code>为一种枚举类型，有两种值<code>False</code>和<code>True</code>，并且<code>False</code> < <code>True</code>。

<syntaxhighlight lang="ada">
type Boolean is (False, True);
 
p : Boolean := True;
...
if p then
  ...
end if;
</syntaxhighlight>

相关的操作（<code>=</code>, <code>/=</code>, <code><</code>, <code><=</code>, <code>></code>, <code>>=</code>）使用语所有的枚举类型，包括<code>Boolean</code>。布尔运算<code>and</code>, <code>or</code>, <code>xor</code>和<code>not</code>由<code>Boolean</code>及任意声明的子类型定义。布尔运算也适用于<code>Boolean</code>值数组。

== Algol ==
[[ALGOL|Algol 60]]有<code>Boolean</code>数据类型和相关的操作，定义在Algol 60报告中。这在[[ALGOL|ALGOL 68]]中被简化为<code><u>bool</u></code>。<ref>{{cite web | title=Report on the Algorithmic Language ALGOL 68, Section 10.2.2. | url=http://www.fh-jena.de/~kleine/history/languages/Algol68-Report.pdf | accessdate=2007 Apr | date=Aug 1968 | archive-date=2012-07-17 | archive-url=https://web.archive.org/web/20120717020610/http://www.fh-jena.de/~kleine/history/languages/Algol68-Report.pdf | dead-url=no }}</ref>

'''ALGOL 68'''语言详细说明（177页）中关于布尔操作定义的原文：

10.2.2. 布尔操作数的运算
# '''op''' ? = ('''bool''' a, b) '''bool''':( a | '''true''' | b );
# '''op''' ? = ('''bool''' a, b) '''bool''': ( a | b | '''false''' );
# '''op''' ? = ('''bool''' a) '''bool''': ( a | '''false''' | '''true''' );
# '''op''' = = ('''bool''' a, b) '''bool''':( a?b ) ? ( ?b??a );
# '''op''' ≠ = ('''bool''' a, b) '''bool''': ?(a=b);
# '''op''' '''abs''' = ('''bool''' a)'''int''': ( a | 1 | 0 );

== C ==
在[[C语言#C99|C99]]之前，[[C语言|C语言]]的标准没有提供布尔类型，但是这不意味着C90不能表示布尔值的概念。C中的所有布尔运算（&&, ||）以及条件声明（if, while）都以非零值代表'''真'''，零值代表'''假'''。这样，在其他类型如一个整数或一个枚举中保存布尔值就变得很平常。为了方便，常常为布尔类型创建一个[[typedef|typedef]]来和一些已存在的数据类型相关联。[[C语言#C99|C99]]标准也提供了一个内置的布尔类型。

为了说明C中的布尔型，注意以下C代码：
<syntaxhighlight lang="c">
if (my_variable) {
  printf("True!\n");
} else {
  printf("False!\n");
}
</syntaxhighlight>

等价于：
<syntaxhighlight lang="c">
if (my_variable != 0) {
  printf("True!\n");
} else {
  printf("False!\n");
}
</syntaxhighlight>

简单来说这就是一个[[整数|整数]]类型。由于C标准要求<code>0</code>用在指针上下文中时要代表[[空指针|空指针]]，上面的概念也可以用来检查一个指针是否为空，虽然一些[[程序风格|程序风格]]不建议这样用。这种情况同样适用于[[浮点数|浮点]]值，当比较它们的时候要特别小心，因为它们通常包含四舍五入的结果。通常，整型用来包含布尔变量。

虽然为了测试一个变量的真假值时没必要来命名真或假，但是在给它们分配值的时候却是需要的。（一种方法是使用零值和一，这样做的好处是语言独立。）其他方法，<code>[[enum|enum]]</code>关键字允许在语言中根据你的选择来命名元素，例如：
<syntaxhighlight lang="c">
typedef enum { FALSE, TRUE } boolean;
...
boolean b;
</syntaxhighlight>

如下典型的[[C预处理|预处理]]宏经常被使用。

<syntaxhighlight lang="c">
#define FALSE 0
#define TRUE 1
...
int f = FALSE;
</syntaxhighlight>

有时<code>TRUE</code>可能被定义为-1或~0（位运算0的补）。这意味着在现在常见的[[二补数|二补数]]计算机架构的整型中所有的位都被设置为1。

但是，在C中'''任意'''非零值都代表真就带来了问题，因为<code>TRUE</code>由一个'''特定'''的值来表示，因此在其他语言中<code>if (foo == TRUE) ...</code>只不过是多余的，而在C中，就是'''错误的'''代码。

=== [[C99|C99]] ===
C99中有<code>bool</code>类型，取值为<code>true</code>和<code>false</code>，定义在<code><[[stdbool.h|stdbool.h]]></code>头文件中：

<syntaxhighlight lang="c">
#include <stdbool.h>
bool b = false;
...
b = true;
</syntaxhighlight>

== C++ ==
[[C++|C++]][[编程语言|编程语言]]在其标准化过程中引入了<code>bool</code>、<code>true</code>和<code>false</code>关键字，增加了原生数据类型来支持布尔数据，其大小被实现定义。<ref>{{cite web | title=Working Paper for Draft Proposed International Standard for Information Systems-- Programming Language C++ | url=http://www.bond.id.au/~gnb/wp/cd2/index.html | accessdate=2007 May | date=Dec 1996 | archive-date=2016-03-04 | archive-url=https://web.archive.org/web/20160304073857/http://www.bond.id.au/~gnb/wp/cd2/index.html | dead-url=yes }}</ref> <code>bool</code>在1993年被引入。<ref>{{cite web |title=Evolving a language in and for the real world: C++ 1991-2006 |url=http://www.research.att.com/~bs/hopl-almost-final.pdf |accessdate=2008 March |year=2007 |archive-date=2007-11-20 |archive-url=https://web.archive.org/web/20071120015600/http://www.research.att.com/~bs/hopl-almost-final.pdf |dead-url=no }}</ref>.

1998年的C++标准库定义了一个<code>vector<bool></code>-{zh-cn:类; zh-tw:類別;}-的特例。为了优化空间，其中的元素被打包，使得每一个布尔变量只使用一位内存。这被认为是一个错误。<code>vector<bool></code>不符合STL容器的需要。例如一个<code>container<T>::reference</code>必须为<code>T</code>类型的一个真值[[左值|左值]]。这和<code>vector<bool></code>的情况不同。类似地，<code>vector<bool>::iterator</code>在解除引用时不产生一个<code>bool&</code>。在C++标准委员会和库工作组之间有个共识，就是<code>vector<bool></code>应该被反对或完全从下一个标准中被移除。<ref>{{cite web | title=vector<bool>: More Problems, Better Solutions | url=http://www.gotw.ca/publications/N1211.pdf | accessdate=2007 May | date=Aug 1999 | archive-date=2012-08-31 | archive-url=https://www.webcitation.org/6AKqUQkyo?url=http://www.gotw.ca/publications/N1211.pdf | dead-url=no }}</ref><ref>{{cite web | title=A Specification to deprecate vector<bool> | url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2204.html | accessdate=2007 May | date=Mar 2007 | archive-date=2012-08-31 | archive-url=https://www.webcitation.org/6AKqUqAFP?url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2204.html | dead-url=no }}</ref>

== C# ==

在[[C_Sharp|C#]]中，布尔变量通过保留字<code>bool</code>来识别，这个保留字是预定义结构类型<code>System.Boolean</code>的别名，占一[[字节|字节]]。在<code>bool</code>和其他类型之间不存在标准的转换。此语言还提供了一个布尔类型<code>DBbool</code>，可以表示三种值：<code>true</code>、<code>false</code>和<code>null</code>。这和[[SQL|SQL]]中布尔表达式的用法类似。<ref name="csharplang">{{cite web|title=C# Language Specifications: Database boolean type|url=http://msdn.microsoft.com/en-us/library/aa664483(VS.71).aspx|accessdate=2014-02-24|language=en|publisher=Microsoft Development Network|archive-date=2016-05-09|archive-url=https://web.archive.org/web/20160509033151/https://msdn.microsoft.com/en-us/library/aa664483(VS.71).aspx|dead-url=no}}</ref>

输出一个布尔型的代码如下：

<syntaxhighlight lang="csharp">
bool myBool = (i == 5);
System.Console.WriteLine(myBool ? "I = 5" : "I != 5");
</syntaxhighlight>

== Fortran ==
在[[Fortran|Fortran]]被标准化之前，于1950年代引入了<code>LOGICAL</code>关键字和相关的操作<code>.NOT.</code>、<code>.AND.</code>、<code>.OR.</code>等等。
<syntaxhighlight lang="fortran">
logical :: bool        ! 宣告一個布林變數名稱為bool
bool=.true.            ! 將變數bool存入值.true.
if (bool) then         ! 由於條件為.true.所以進入內部執行
  print*,"bool=",bool  ! 顯示 bool=T
  bool=1==2            ! 1==2的運算結果是.false.，將.false.存入變數bool
  print*,"bool=",bool  ! 再次顯示，這時候變成 bool=F
end if
</syntaxhighlight>

== Java ==
在[[Java|Java]]语言中，布尔变量由原始类型<code>boolean</code>表示。[[Java虚拟机|Java虚拟机]]将实际在内存中的表现抽象，这样JVM开发者可以使用尽可能方便的方式来代表布尔量（例如，一个字节或者一个[[字_(计算机)|字]]）。

Java语言规范不允许任何显式或隐式的从<code>boolean</code>的[[类型转换|转换]]。这样就需要编译器拒绝如下代码：

<syntaxhighlight lang="java">
int i = 1;
if (i)
  System.out.println("i is not zero.");
else
  System.out.println("i is zero.");
</syntaxhighlight>

因为整型变量<code>i</code>不能转换为一个布尔型并且<code>if</code>语句需要一个<code>boolean</code>条件。<ref name="jls">{{cite web|title=Java Language and Virtual Machine Specifications|url=http://java.sun.com/docs/books/jls/|accessdate=2014-02-24|language=en|publisher=ORACLE|archive-date=2009-02-26|archive-url=https://web.archive.org/web/20090226152425/http://java.sun.com/docs/books/jls/|dead-url=no}}</ref>

在Java中，<code>boolean</code>值（和其他原始类型相同）可以被附加到字符串。这个特性提供了一个默认的布尔型的可视化表现（<code>true</code>被显示为"true"，<code>false</code>被显示为"false"）。<ref name="jls"/>

== JavaScript ==
[[JavaScript|JavaScript]]有两个关键字，<code>true</code>和<code>false</code>，两者都为小写。JavaScript是一种弱类型的语言，没有明确的布尔数据类型供其变量使用。但是许多值用在逻辑上下文时可以被当成<code>false</code>，包括[[零|零]]（<code>0</code>）、<code>null</code>、零长度字符串（<code>""</code>）、<code>NaN</code>以及<code>undefined</code>。所有其他变量值，包括[[一|一]]（<code>1</code>）、空[[数组|数组]]和空对象，都被认为是<code>true</code>。[[JavaScript|JavaScript]] 提供了一个<code>Boolean</code> 对象，可以被用作控制布尔值的容包装。

<syntaxhighlight lang="javascript">
var boolean = true;    //設boolean為true

if(boolean && 1){
    console.log("This is true.");    //將會顯示這個，因為boolean是true和1亦是true
}else{
    console.log("This is false.");
}
</syntaxhighlight>

但如果使用<code>Boolean</code>物件的話，它总是會被当成<code>true</code>，尽管其包含<code>false</code>值。

<syntaxhighlight lang="javascript">
var boolean = new Boolean(false);    //設boolean為一個Boolean物件，並設定其內容為false

if(boolean){
    console.log("This is true.");    //將會顯示這個，因為Boolean物件不是null
}else{
    console.log("This is false.");
}
</syntaxhighlight>

若僅使用 <code>Boolean()</code> function，則視同將參數轉為布林值
<syntaxhighlight lang="javascript">
var boolean = Boolean(false);    //等同於將 boolean 設為 false

if(boolean){
    console.log("This is true.");    
}else{
    console.log("This is false."); //將會顯示這個，因為 boolean 的值為 false
}
</syntaxhighlight>

由于JavaScript的历史兼容性和隐性类型转换，空数组（<code>[]</code>）、字符“0”的字符串（<code>"0"</code>）、水平制表字符的字符串（<code>"\t"</code>）互为不宽松等同（<code>!=</code>），但都宽松等同（<code>==</code>）于数字0（<code>0</code>），被形容为“JavaScript的[[三位一体|三位一体]]”的迷因。

== λ演算 ==
在[[λ演算|λ演算]]计算模型中，布尔型由[[Church数|Church数]]表示。

== Lisp ==
[[LISP|LISP]]有两个特殊的符号<code>T</code>和<code>NIL</code>，分别代表了逻辑值真和假。但是，任意非<code>NIL</code>值都由LISP系统翻译成真。特殊的符号<code>NIL</code>也用空列表<code>()</code>表示。因此空列表为假，但是任何有数据的列表都为真。这样，什么都没有为假，其他所有都为真。

== ML ==
和Ocaml类似，[[ML语言|ML语言]]拥有<code>bool</code>类型，包含<code>true</code>和<code>false</code>值，例如：

<pre>
- fun isittrue x = if x then "YES" else "NO" ;
> val isittrue = fn : bool -> string
- isittrue true;
> val it = "YES" : string
- isittrue false;
> val it = "NO" : string
- isittrue (8=8);
> val it = "YES" : string
- isittrue (7=5);
> val it = "NO" : string
</pre>

== Objective-C ==
[[Objective-C|Objective-C]]提供了<code>BOOL</code>类型，以及宏<code>YES</code>和<code>NO</code>。由于Objective-C是[[C语言|C语言]]的超集，因此C语言的布尔语义也适用。

== Swift ==
[[Swift_(程式語言)|Swift]]的布林型別是 <code>Bool</code>，主要用於 if 和 while 的條件判斷，值只能是真<code>true</code>或假<code>false</code>。
<syntaxhighlight lang="swift">
let isSuccess = true
let isOpenDoor = false
</syntaxhighlight>

== Ocaml ==
[[OCaml|Ocaml]] 擁有一個 <code>bool</code> 值，為 <code>true</code> 或 <code>false</code>。

<syntaxhighlight lang="ocaml">
# 1 = 1 ;;
- : bool = true
</syntaxhighlight>

和很多其它的[[電腦語言|語言]]一樣，Ocaml使用 <code>true</code> 或 <code>false</code>關鍵字來表示布林值。

== Pascal ==
<code>Boolean</code>是[[Pascal|Pascal]]提供的基本数据类型，定义和用法如下：

<syntaxhighlight lang="pascal">
(* 系统或标准声明 *)
Type 
   Boolean = (False,True);

(* 用法 *)
var
  value: Boolean;
 
...
 
value := True;
value := False;
 
if value then
begin
  ...
end;
</syntaxhighlight>

枚举外的值没有被定义。某些编译器实现（如[[Delphi|Delphi]]）为了接口目的拥有特殊的扩展布尔类型，并将其映射到C数值类型上，例如bytebool、wordbool、longbool等。

==參考文獻==
<div class="references-small">
<references />
</div>

{{数据类型}}
[[Category:数据类型|Category:数据类型]]