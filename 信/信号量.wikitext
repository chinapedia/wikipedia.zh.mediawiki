{{NoteTA
|T = zh-cn:信号量; zh-tw:號誌 (程式設計); zh-hk:訊號量;
|1=zh-cn:计算机; zh-tw:電腦; zh-hk:電腦;
|2=zh-cn:线程; zh-tw:執行緒;
|3=zh-cn:程序; zh-tw:程式;
|4=zh-cn:进程; zh-tw:行程;
|G1 = IT
}}
'''信号量'''（{{lang-en|'''semaphore'''}}）又稱為'''-{zh-cn:信号标; zh-tw:旗號; zh-hk:訊號標;}-'''，是一个同步对象，用于保持在0至指定最大值之间的一个计数值。当线程完成一次对该{{lang|en|semaphore}}对象的等待（{{lang|en|wait}}）时，该计数值减一；当线程完成一次对{{lang|en|semaphore}}对象的释放（{{lang|en|release}}）时，计数值加一。当计数值为0，则线程等待该{{lang|en|semaphore}}对象不再能成功直至该{{lang|en|semaphore}}对象变成{{lang|en|signaled}}状态。{{lang|en|semaphore}}对象的计数值大于0，为{{lang|en|signaled}}状态；计数值等于0，为{{lang|en|nonsignaled}}状态。

信号量的概念是由[[荷兰|荷兰]]计算机科学家[[艾兹赫尔·戴克斯特拉|艾兹赫尔·戴克斯特拉]]（{{lang|nl|Edsger W. Dijkstra}}）发明的<ref>{{Cite EWD|74|Over de sequentialiteit van procesbeschrijvingen}}</ref>，广泛的应用于不同的[[操作系统|操作系统]]中。在系統中，給予每一個[[行程|行程]]一個信号量，代表每個行程目前的狀態，未得到控制權的行程會在特定地方被強迫停下來，等待可以繼續進行的訊號到來。如果信號量是一個任意的整數，通常被稱為計數訊號量（{{lang|en|Counting semaphore}}），或一般訊號量（{{lang|en|general semaphore}}）；如果信號量只有二進位的0或1，稱為二進位訊號量（{{lang|en|binary semaphore}}）。

==語法==
計數訊號量具備兩種操作動作，稱為V（<code>signal()</code>）與P（<code>wait()</code>）（即部分参考书常称的“PV操作”）。V操作會增加信號標S的數值，P操作會減少它。

運作方式：
#初始化，給與它一個非負數的整數值。
#執行P（<code>wait()</code>），信號標S的值將被減少。企圖進入[[臨界區段|臨界區段]]的行程，需要先執行P（<code>wait()</code>）。當信號標S減為負值時，行程會被擋住，不能繼續；當信號標S不為負值時，行程可以獲准進入臨界區段。
#執行V（<code>signal()</code>），信號標S的值會被增加。結束離開[[臨界區段|臨界區段]]的行程，將會執行V（<code>signal()</code>）。當信號標S不為負值時，先前被擋住的其他行程，將可獲准進入[[臨界區段|臨界區段]]。

=={{lang|en|Windows API}}提供的{{lang|en|semaphore}}==
线程使用{{lang|en|CreateSemaphore}}或{{lang|en|CreateSemaphoreEx}}函数创建一个{{lang|en|semaphore}}对象<ref>{{Cite web |url=https://msdn.microsoft.com/en-us/library/aa909242.aspx |title=MSDN:Semaphore Objects |accessdate=2016-09-05 |archive-date=2016-09-16 |archive-url=https://web.archive.org/web/20160916075835/https://msdn.microsoft.com/en-us/library/aa909242.aspx |dead-url=no }}</ref>。此时可以指定{{lang|en|semaphore}}的当前计数值与计数值上限；也可指定{{lang|en|semaphore}}对象的名字。其他进程中的线程可以指出已存在的{{lang|en|semaphore}}对象的名字通过调用{{lang|en|OpenSemaphore}}函数打开它。

如果多个线程在等待一个{{lang|en|semaphore}}对象，不保证按照先进先出（{{lang|en|FIFO}}）顺序调度这些等待线程。外部事件，如内核模式的[[异步过程调用|异步过程调用]]可改变等待顺序。

在{{lang|en|semaphore}}对象为{{lang|en|signaled}}状态时，等待函数返回会把该{{lang|en|semaphore}}对象计数值减1。函数{{lang|en|ReleaseSemaphore}}把{{lang|en|semaphore}}对象的计数值增加指定的值。任何线程，哪怕它没有等待完成过该{{lang|en|semaphore}}对象，也可以使用{{lang|en|ReleaseSemaphore}}来增加{{lang|en|semaphore}}对象的计数。如果{{lang|en|ReleaseSemaphore}}导致对象计数值超过上限，则该函数调用失败，返回298号错误：“{{lang|en|Too many posts were made to a semaphore}}”。

一个线程多次等待同一个{{lang|en|semaphore}}对象，每次等待操作完成都会降低{{lang|en|semaphore}}对象计数值（直至计数值为0时该线程阻塞）。然而，通过{{lang|en|multiple-object}}等待函数使用一个数组包含着同一个{{lang|en|semaphore}}对象的多个句柄，不能实现对这个{{lang|en|semaphore}}对象计数值的多次下降。

用完{{lang|en|semaphore}}对象后，调用{{lang|en|CloseHandle}}函数关闭它。{{lang|en|semaphore}}对象的最后一个句柄被关闭后，操作系统会摧毁它。关闭{{lang|en|semaphore}}并不影响它的计数值。因此，关闭{{lang|en|semaphore}}前或者进程终止前，要确保已经正确调用过{{lang|en|ReleaseSemaphore}}。否则，挂起等待该{{lang|en|semaphore}}对象的线程会永久阻塞或超时返回。

==参见==
*[[哲学家就餐问题|哲学家就餐问题]]

==参考资料==
{{reflist}}

==外部連結==
* [http://www.opengroup.org/onlinepubs/009695399/basedefs/semaphore.h.html semaphore.h]{{Wayback|url=http://www.opengroup.org/onlinepubs/009695399/basedefs/semaphore.h.html |date=20101205144031 }} programming interface - The Open Group Base Specifications Issue 6, IEEE Std 1003.1
* [http://greenteapress.com/semaphores/ ''The Little Book of Semaphores'']{{Wayback|url=http://greenteapress.com/semaphores/ |date=20160614065933 }} Allen B. Downey
* [http://www.enseignement.polytechnique.fr/informatique/INF431/X09-2010-2011/AmphiTHC/SynchronizationPrimitives.pdf ''A pragmatic, historically oriented survey on the universality of synchronization primitives''] {{Wayback|url=http://www.enseignement.polytechnique.fr/informatique/INF431/X09-2010-2011/AmphiTHC/SynchronizationPrimitives.pdf |date=20170830062719 }}, Jouni Leppäjärvi


[[category:電腦術語|category:電腦術語]]
[[Category:協同控制|Category:協同控制]]
[[Category:荷兰发明|Category:荷兰发明]]