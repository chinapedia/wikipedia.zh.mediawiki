'''协议'''（Protocol）是特定[[面向对象编程|面向对象编程]]语言使用的术语，具有各种特殊含义，在其他语言中可能称为[[介面_(資訊科技)|接口]]或[[Traits_(计算机科学)|trait]]。

==概述==
协议指示着在调用者和对象之间的交互链，在其他方面都类同于[[通信协议|通信协议]]。使用术语“协议”的语言包括：
{{div col|colwidth=15em}}
* [[Clojure|Clojure]]
* [[Elixir|Elixir]]
* [[Java|Java 8]] 
* {{en-link|Logtalk}}
* [[Objective-C|Objective-C]]<ref>{{cite web|url=https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithProtocols/WorkingwithProtocols.html|title=The Objective-C programming Language:Protocols|publisher=Apple Inc|access-date=7 October 2012|archive-date=2016-04-16|archive-url=https://web.archive.org/web/20160416065318/https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithProtocols/WorkingwithProtocols.html|dead-url=no}}</ref> 
* [[Smalltalk|Smalltalk-80]]
* [[Swift_(程式語言)|Swift]]
* [[Python|Python]]<ref>{{Cite web |url=https://docs.python.org/3/c-api/abstract.html |title=Official Python 3 Documentation, ''Abstract Object Layer'' |access-date=2021-03-28 |archive-date=2021-05-18 |archive-url=https://web.archive.org/web/20210518090348/https://docs.python.org/3/c-api/abstract.html |dead-url=no }}</ref>
{{div col end}}

在这些语言中，协议是离散的[[对象_(计算机科学)|对象]]相互通信的常用方式。为了进行协作，将这些对象一致认可的[[方法_(计算机科学)|方法]]和值的定义，作为[[应用编程接口|API]]的一部份。协议/接口描述了：
# 对象所理解的消息。
# 这些消息可提供的实际参数。
# 这些消息返回的结果的类型。
# {{en-link|类不变量|Class invariant|不变量}}，即使对象状态被修改了而仍然保持。
# 异常情况，要求这个对象的客户处理。
# （只针对通信风格用途：）方法的调用序列和决定点，这些都会表示在UML交互图中：{{en-link|通信图|Communication diagram}}、[[时序图|时序图]]、[[交互概述图|交互概述图]]/[[活动图|活动图]]、[[计时图|计时图]]。

如果对象是完全[[封装_(面向对象编程)|封装]]的，则协议将只描述对象能被其他对象访问的方式。例如[[Java|Java]]中的[[接口_(Java)|接口]]，<code>Comparable</code>接口指定了一个方法<code>compareTo()</code>，实现类必须实现它。这意味着比如有一个独立的排序方法，可以排序实现了这个可比较接口的任何对象，而不用知道关于这个类的内部性质的任何事情（除了两个这种对象可以通过<code>compareTo()</code>方式进行比较之外）。

一些[[编程语言|编程语言]]提供对协议/接口的显式的语言支持：[[Ada|Ada]]、[[C♯|C#]]、[[D语言|D]]、[[Dart|Dart]]、[[Delphi|Delphi]]、[[Go|Go]]、[[Java|Java]]、{{en-link|Logtalk}}、[[Object_Pascal|Object Pascal]]、[[Objective-C|Objective-C]]、[[PHP|PHP]]、[[Racket|Racket]]、{{en-link|Seed7}}、[[Swift_(程式語言)|Swift]]。在[[C++|C++]]中接口叫做抽象基础类，并被使用[[虚函数|纯虚函数]]实现。[[Perl|Perl]]中的面向对象特征也支持接口。

== 非面向对象语言 ==

尽管[[Go|Go]]编程语言一般不被认为是面向对象语言，它允许在用户定义类型上定义方法。Go有“接口”类型，兼容于支持给定方法集合的任何类型（这个类型不需要显式的实现这个接口）。空接口<code>interface{}</code>兼容于所有类型。

注意[[函数式编程|函数式编程]]和[[分布式计算|分布式编程]]语言使用术语协议类似于通信用法（比如允许消息交换的规定强调了交换而非消息）。特别是在这些语言中如下这些被认为是协议的一部份：

# 允许的消息序列，
# 对通信任一参与者施加的限制，
# 处理消息时将会发生的预期效果。

在语言如[[Haskell|Haskell]]中的[[类型类|类型类]]被用来干协议所作的很多事情。

==参见==
* {{en-link|概念 (泛型编程)|Concept (generic programming)}}
* [[委托_(面向对象编程)|委托 (面向对象编程)]]
* [[Objective-C#协议|Objective-C中的协议]]
* {{en-link|公开接口|Public interface}}
* [[应用编程接口|应用编程接口]]

==引用==
{{reflist}}
{{数据类型}}

{{DEFAULTSORT:Protocol (Object-priented programming)}}
[[Category:面向对象的程序设计|Category:面向对象的程序设计]]