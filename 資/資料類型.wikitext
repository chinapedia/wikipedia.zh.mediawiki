{{no footnotes|time=2019-08-24T14:08:46+00:00}}
{{NoteTA
|G1 = IT
}}
在[[程式設計|程式設計]]的[[型別系統|型別系統]]中，'''数据类型'''（{{lang-en|Data type}}），又稱'''資料型-{}-態'''、'''資料型-{}-別'''，是用來約束[[数据_(计算机)|数据]]的解釋。在程式語言中，常見的数据类型包括原始类型（如：[[整數|整數]]、[[浮點數|浮點數]]或[[字元|字元]]）、[[多元組|多元組]]、記錄單元、[[代數資料類型|代數資料類型]]、[[抽象資料類型|抽象数据类型]]、[[參考_(電腦科學)|參考型別]]、[[类_(電腦科學)|-{zh-cn:类; zh-tw:類別;}-]]以及[[函式物件|函式型別]]。資料類型描述了[[數值|數值]]的表示法、解釋和結構，並以[[演算法|演算法]]操作，或是[[物件_(電腦科學)|物件]]在記憶體中的儲存區，或者其它儲存裝置。

==機器中的資料類型==
所有在電腦中，基於數位電子學的底層資料，都是以[[位元|位元]]（0 或 1）表示。其中資料的最小的定址單位，稱為[[位元組|位元組]]（通常是[[八位元組|八位元]]，以八個位元為一組）。[[機器碼|機器碼]]指令處理的單位，稱作[[字长|字長]]（至 2007 年止，一般為 32 或 64 位元）大部分對字長的指令解譯，主要以[[二進制|二進制]]為主，如一個 32 位元的字長，可以表示從 0 至 <math>2^{32}-1</math> 的無符號整數值，或者表示從 <math>-2^{31}</math> 至 <math>2^{31}-1</math> 的有符號整數值。由於有了[[二的補數|二的補數]]，機器語言和機器大多不需要區分無符號和有符號資料類型。存在著特殊的算術指令，對字長中的位元使用不同的解釋，以此作為[[浮點數|浮點數]]。

==原始資料類型==
{{main|原始类型}}
程式語言提供若干'''原始数据型別'''，以作為程式以及專用化[[複合類型|複合類型]]的建立基礎。典型的原始資料類型包含各種整數、浮點數以及字串型別。儘管這些建立基礎：[[陣列|陣列]]、[[物件組成|記錄單元]]以及[[參考_(電腦科學)|參考]]所聯繫的資料，可能未包括在基本型別，但仍可將其視為若干原始值的聚集。

==複合型別==
{{main|複合類型}}
這部分可包括以下內容（最終仍取決於程式語言）：
* RECORD
:一組變數型別，例子：資料庫表格中的一行
* TABLE
:資料庫中的索引欄位
* NESTED TABLE
:任意的單一複合型別的一維陣列
* VARRAY
:同一型別變數、且固定大小的收集處

==數值範圍==
每一個資料類型都有一個數值上的最大和最小值，稱作[[數值範圍|數值範圍]]。了解數值的範圍是很重要的，尤其是當使用較小的型別時，你就只能儲存範圍之內的數值。試圖儲存一個超出其範圍的數值，可能會導致編譯或執行錯誤，或者不正確的計算結果（因為被[[截斷|截斷]]）。

一個變數的範圍，是基於用以保存數值的位元組數目，而且整數資料類型通常{{NoteTag|有一個情況將一個或多個[[位元|位元]]保留作其它用途，例如：[[奇偶校驗|奇偶校驗]]。}}能夠儲存 <math>2^n</math> 數值（此處的 <math>n</math> 是指[[位元|位元]]）。對於其它的資料類型（例如，[[浮點數|浮點數]]），其數值範圍更為複雜，且幾乎取決於所使用的儲存方法。還有一些不用完全部的位元，例如，布林只需一個[[位元|位元]]，且表示一個[[二進制|二進制]]值（雖然在實踐中，通常會用完剩餘的 7 個位元）。某些程式語言{{NoteTag|例如：[[Ada|Ada]]、[[Pascal|Pascal]]}}也允許反向決定，程式設計者定義解決問題所需的範圍和精度，然後由編譯器自動選擇合適的整數或浮點數。

下表列出常見的資料類型，及其數值範圍：{{NoteTag|注意，在平台和語言之間，資料類型的大小可能有所變化。表中列出的數值，是目前所使用且最常見的大小。}}

{| class="wikitable"
|-
! 資料類型
! 大小
! 範圍
|-
! colspan="3" | 整數型別
|-
| [[布爾_(數據類型)|布尔型]]（Boolean）
| 1 [[位元|bit]]
| 0 至 1
|-
| [[位元組|字节]]（Byte）
| 8 bit
| 0 至 255 
|-
| [[字_(计算机)|字]]（Word）
| 2 [[字节|字节]]
| 0 至 65535
|-
| 双字（Double Word）
| 4 字节，32bit
| 0 至 4,294,967,295
|-
| [[整數_(計算機科學)|整数]]（Integer）
| 4 字节，32bit
| –2,147,483,648 至 2,147,483,647
|-
| [[64位整数|长整数]]（Long Integer）
| 8 字节，64bit
| –9,223,372,036,854,775,808 至 9,223,372,036,854,775,807
|-
! colspan="3" | 浮點數型別
|-
| [[浮点数|浮点数]]（Float）
| 4 位元組
| 1E-37 至 1E+37 (6 個小數位數)
|-
| [[雙倍精確浮點數|双精度浮点数]]（Double Float）
| 8 位元組
| 1E-307 至 1E+308 (15 個小數位數)
|}

==資料結構==
{{main|資料結構}}

==抽象類型==
{{main|抽象型別}}

== 註釋 ==
{{NoteFoot}}

== 参考文献 ==
{{Reflist}}
* Luca Cardelli, Peter Wegner. ''On Understanding Types, Data Abstraction, and Polymorphism,'' [http://citeseer.ist.psu.edu/cardelli85understanding.html] {{Wayback|url=http://citeseer.ist.psu.edu/cardelli85understanding.html |date=20060619072646 }} from ''[[Computing_Surveys|Computing Surveys]]'' (December, 1985).

== 参见 ==
{{Portal box|计算机科学}}
* [[类型理論|类型理論]]，關於[[类型|类型]]的[[數學模型|數學模型]]。
* [[型別系統|型別系統]]，關於在[[程式語言|程式語言]][[型別|型別]]中的選擇差異。

{{-}}
{{数据类型}}

{{Authority control}}

[[Category:数据类型|]]