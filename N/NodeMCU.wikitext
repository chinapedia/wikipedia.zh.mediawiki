{{howto|time=2015-04-02T09:53:12+00:00}}
{{expert|time=2015-04-02T01:37:54+00:00}}
{{NoteTA|G1=IT}}
{{Infobox computer
| name        = NodeMCU
| logo        = 
| image       = NodeMCU DEVKIT 1.0 BETA.JPG
| caption     = NodeMCU DEVKIT 1.0 BETA
| developer   = ESP8266开源社区
| releasedate = 
| type        = [[片上系统|片上系统]]
| price       = 
| cpu         = ESP8266<ref>Kumar, Abhijeet, and Apoorva Sharma. "Internet of Life (IOL)." (2015). ISBN 978-93-5156-328-0</ref>(LX106<ref name=8266sdk>{{cite web|last1=Brian Benchoff|title=An SDK for the ESP8266 Wi-Fi chip|website=Hackaday|accessdate=2 April 2015}}</ref>)
| graphics    = 
| storage     = 4MBytes<ref>{{cite web|last1=Vowstar|title=NodeMCU Devkit|url=https://github.com/nodemcu/nodemcu-devkit|website=Github|publisher=NodeMCU Team|accessdate=2 April 2015|archive-date=2015-08-15|archive-url=https://web.archive.org/web/20150815044219/https://github.com/nodemcu/nodemcu-devkit|dead-url=no}}</ref>
| memory      = 20kBytes
| os          = XTOS
| power       = USB
| website     = http://www.nodemcu.com
}}
[[File:NodeMCU_DEVKIT_1.0_BETA_back.JPG|thumb]]
'''NodeMCU'''是一个开源<ref name='NodeMCU Github'>{{Cite web |url=https://github.com/nodemcu/ |title=存档副本 |accessdate=2015-04-01 |archive-date=2015-08-12 |archive-url=https://web.archive.org/web/20150812091816/https://github.com/nodemcu |dead-url=no }}</ref>的[[物联网|物联网]]平台。 它使用[[Lua|Lua]]脚本语言编程<ref name='NodeMCU Github' />。该平台基于[[eLua|eLua]] <ref name = 'elua'>{{Cite web |url=http://www.eluaproject.net/ |title=存档副本 |accessdate=2015-04-01 |archive-date=2010-12-27 |archive-url=https://web.archive.org/web/20101227065731/http://www.eluaproject.net/ |dead-url=yes }}</ref>开源项目,底层使用ESP8266 sdk 0.9.5版本。该平台使用了很多开源项目, 例如 lua-cjson<ref name='lua-cjson'>{{Cite web |url=https://github.com/mpx/lua-cjson/ |title=存档副本 |accessdate=2015-04-01 |archive-date=2015-12-31 |archive-url=https://web.archive.org/web/20151231223413/https://github.com/mpx/lua-cjson |dead-url=no }}</ref>, spiffs<ref name='spiffs'>{{Cite web |url=https://github.com/pellepl/spiffs |title=存档副本 |accessdate=2015-04-01 |archive-date=2015-11-03 |archive-url=https://web.archive.org/web/20151103063952/https://github.com/pellepl/spiffs |dead-url=no }}</ref>. NodeMCU包含了可以运行在 [[esp8266|esp8266]] [[Wi-Fi|Wi-Fi]] [[SoC|SoC]]芯片之上的固件,以及基于ESP-12模组的硬件。

{{transH}}
== History ==
NodeMCU is started after ESP8266 come out. In December 30, 2013, Espressif systems begin production of ESP8266.<ref>{{cite news|last1=Espressif system|title=IoT Wi-Fi 802.11b/g/n integrated SoC implementation of volume production|url=http://article.liepin.com/20140701/365564.shtml|accessdate=2 April 2015|publisher=中国上海讯|date=December 30, 2013|archive-url=https://web.archive.org/web/20150402133249/http://article.liepin.com/20140701/365564.shtml|archive-date=2015-04-02|dead-url=yes}}</ref> ESP8266 is an Wi-Fi SoC and integrated with LX106 core, widely used in IoT applications(See related projects<ref name="the button" /><ref name = "node usb" /><ref name="ijwatch" />). In 13 Oct 2014, Hong committed first file of nodemcu-firmware to github,<ref>{{cite web|last1=Hong|title=First commit of NodeMCU Firmware|url=https://github.com/nodemcu/nodemcu-firmware/commit/9c98808289d0863a41c695e03d4067424fc1cdec|website=Github|accessdate=2 April 2015|archive-date=2021-08-15|archive-url=https://web.archive.org/web/20210815231329/https://github.com/nodemcu/nodemcu-firmware/commit/9c98808289d0863a41c695e03d4067424fc1cdec|dead-url=no}}</ref> NodeMCU project started. And then more and more developers from ESP8266 opensource community join in NodeMCU developer team. On 1 Dec 2014, Huang R commit the [[gerber|gerber]] file of an ESP8266 board, then NodeMCU project have the first open-hardware which named devkit 1.0,<ref name="init devkit">{{cite web|last1=Huang R.|title=Initial design of NodeMCU devkit|url=https://github.com/nodemcu/nodemcu-devkit/commit/3c155e5a9f24aa8463aef8c7b011c69e94fcd9c7|website=Github|accessdate=2 April 2015|archive-date=2021-08-15|archive-url=https://web.archive.org/web/20210815231915/https://github.com/nodemcu/nodemcu-devkit/commit/3c155e5a9f24aa8463aef8c7b011c69e94fcd9c7|dead-url=no}}</ref> thus NodeMCU is not only a firmware, it becomes a platform. In 31 Dec 2014, Tuan PM port MQTT client library from [[Contiki|Contiki]] to ESP8266 SoC platform,<ref name="mqtt client">{{cite web|last1=Tuan PM|title=MQTT client library for ESP8266|url=https://github.com/tuanpmt/esp_mqtt|website=Github|accessdate=2 April 2015|archive-date=2017-01-02|archive-url=https://web.archive.org/web/20170102213009/https://github.com/tuanpmt/esp_mqtt|dead-url=no}}</ref> and commit to NodeMCU project, then NodeMCU can support MQTT IoT protocol, using Lua access MQTT broker, it is an important update of firmware. Another important update is in 30 Jan 2015, Devsaurus port u8glib<ref name=u8g>{{cite web|last1=Olikraus|last2=Daniel Sittig|title=Universal Graphics Library for 8 Bit Embedded Systems|url=https://code.google.com/p/u8glib/|website=Google code|accessdate=2 April 2015|archive-date=2015-04-06|archive-url=https://web.archive.org/web/20150406215024/http://code.google.com/p/u8glib/|dead-url=no}}</ref> to NodeMCU project,<ref name=u8glib>{{cite web|last1=Devsaurus|title=U8glib for esp8266|url=https://github.com/devsaurus/nodemcu-firmware/commit/33601462efdcea189f1f20f2cece66581ee57951|website=Github|accessdate=2 April 2015|archive-date=2021-08-15|archive-url=https://web.archive.org/web/20210815232715/https://github.com/devsaurus/nodemcu-firmware/commit/33601462efdcea189f1f20f2cece66581ee57951|dead-url=no}}</ref> and NodeMCU can drive LCD, Screen, OLED, even VGA display module easily.
{{transF}}

== 固件烧写 ==
nodemcu_latest.bin: 0x00000<br /> 对于大多数 esp8266 模块, 直接拉低 GPIO0 引脚的电平，并且重新上电或重启。<br /> 可以使用 [https://github.com/nodemcu/nodemcu-flasher nodemcu-flasher]{{Wayback|url=https://github.com/nodemcu/nodemcu-flasher |date=20160101001705 }} 烧写固件<ref name='dev board'>{{Cite web |url=http://www.electrodragon.com/w/ESP8266_NodeMCU_Dev_Board |title=存档副本 |accessdate=2015-04-01 |archive-date=2015-04-02 |archive-url=https://web.archive.org/web/20150402132100/http://www.electrodragon.com/w/ESP8266_NodeMCU_Dev_Board |dead-url=no }}</ref>。

特别的，如果你想编译/构建自己的固件，需要注意以下烧写地址：<br /> 0x00000.bin: 0x00000<br /> 0x10000.bin: 0x10000<br />

注意，''在烧写之后，最好执行 file.format() ''

== 硬體連接 ==
如果使用 NodeMCU devkit, 只需要安裝 CH340G 驅動程式<ref name='dev board' />, 並且將開發模組使用micro-usb 線連接到電腦。 然後，將鮑率設為9600, 並打開序列埠。若使用普通的esp8266模组, 則必須準備usb-ttl 轉接器。

== 程式举例 ==
=== 连接Wi-Fi热点 ===

<syntaxhighlight lang="lua">    ip = wifi.sta.getip()
    print(ip)
    --nil
    wifi.setmode(wifi.STATION)
    wifi.sta.config("SSID","password")
    ip = wifi.sta.getip()
    print(ip)
    --192.168.18.110</syntaxhighlight>
=== 如同[[arduino|arduino]]般操作硬体 ===

<syntaxhighlight lang="lua">    pin = 1
    gpio.mode(pin,gpio.OUTPUT)
    gpio.write(pin,gpio.HIGH)
    print(gpio.read(pin))</syntaxhighlight>
=== 使用 nodejs 风格网络编程 ===

<syntaxhighlight lang="lua">    -- A simple http client
    conn=net.createConnection(net.TCP, 0)
    conn:on("receive", function(conn, payload) print(payload) end )
    conn:connect(80,"115.239.210.27")
    conn:send("GET / HTTP/1.1\r\nHost: www.baidu.com\r\n"
        .."Connection: keep-alive\r\nAccept: */*\r\n\r\n")</syntaxhighlight>
=== 简易的HTTP伺服器 ===

<syntaxhighlight lang="lua">    -- A simple http server
    srv=net.createServer(net.TCP)
    srv:listen(80,function(conn)
      conn:on("receive",function(conn,payload)
        print(payload)
        conn:send("<h1> Hello, NodeMcu.</h1>")
      end)
      conn:on("sent",function(conn) conn:close() end)
    end)</syntaxhighlight>
=== 连接 MQTT Broker ===

<syntaxhighlight lang="lua">-- init mqtt client with keepalive timer 120sec
m = mqtt.Client("clientid", 120, "user", "password")

-- setup Last Will and Testament (optional)
-- Broker will publish a message with qos = 0, retain = 0, data = "offline"
-- to topic "/lwt" if client don't send keepalive packet
m:lwt("/lwt", "offline", 0, 0)

m:on("connect", function(con) print ("connected") end)
m:on("offline", function(con) print ("offline") end)

-- on publish message receive event
m:on("message", function(conn, topic, data)
  print(topic .. ":" )
  if data ~= nil then
    print(data)
  end
end)

-- for secure: m:connect("192.168.11.118", 1880, 1)
m:connect("192.168.11.118", 1880, 0, function(conn) print("connected") end)

-- subscribe topic with qos = 0
m:subscribe("/topic",0, function(conn) print("subscribe success") end)
-- or subscribe multiple topic (topic/0, qos = 0; topic/1, qos = 1; topic2 , qos = 2)
-- m:subscribe({["topic/0"]=0,["topic/1"]=1,topic2=2}, function(conn) print("subscribe success") end)
-- publish a message with data = hello, QoS = 0, retain = 0
m:publish("/topic","hello",0,0, function(conn) print("sent") end)

m:close();
-- you can call m:connect again
</syntaxhighlight>
=== UDP 客户端与伺服器 ===

<syntaxhighlight lang="lua">-- a udp server
s=net.createServer(net.UDP)
s:on("receive",function(s,c) print(c) end)
s:listen(5683)

-- a udp client
cu=net.createConnection(net.UDP)
cu:on("receive",function(cu,c) print(c) end)
cu:connect(5683,"192.168.18.101")
cu:send("hello")</syntaxhighlight>

== 引用文献 ==
{{Reflist}}

{{环境智能}}

[[Category:开源硬件|Category:开源硬件]]
[[Category:微控制器|Category:微控制器]]
[[Category:物联网|Category:物联网]]