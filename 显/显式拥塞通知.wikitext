{{NoteTA
|G1=IT
}}
{{校对翻译}}
{{专家}}
{{IPstack}}

'''显式拥塞通知'''（{{lang-en|'''Explicit Congestion Notification'''}}，简称'''ECN'''）是一个对[[网际协议|网际协议]]和[[传输控制协议|传输控制协议]]（TCP）的扩展，定义于[[rfc:3168|RFC 3168]]（2001）。ECN允许[[拥塞控制|拥塞控制]]的端对端通知而避免[[丢包|丢包]]。ECN为一项可选功能，如果底层网络设施支持，则可能被启用ECN的两个端点使用。

通常来说，TCP/IP网络通过丢弃数据包来表明信道阻塞。在ECN成功协商的情况下，ECN感知路由器可以在IP头中设置一个标记来代替丢弃数据包，以标明阻塞即将发生。数据包的接收端回应发送端的表示，降低其传输速率，就如同在往常中检测到包丢失那样。

相比于正确响应或忽略位标记，一些过时或存在故障的网络设备会丢弃或改动数据包中的ECN位。<ref>{{cite web|url=http://conferences.sigcomm.org/imc/2011/docs/p171.pdf|title=Measuring the State of ECN Readiness in Servers, Clients, and Routers|date=2011|publisher=Internet Measurement Conference 2011|author1=Steven Bauer|author2=Robert Beverly|author3=Arthur Berger|accessdate=2016-12-17|archive-date=2014-03-22|archive-url=https://web.archive.org/web/20140322043254/http://conferences.sigcomm.org/imc/2011/docs/p171.pdf|dead-url=no}}</ref><ref>{{cite web|url=http://conferences.sigcomm.org/imc/2004/papers/p336-medina.pdf|title=Measuring Interactions Between Transport Protocols and Middleboxes|publisher=Internet Measurement Conference 2004|author1=Alberto Medina|author2=Mark Allman|author3=Sally Floyd|accessdate=2016-12-17|archive-date=2016-03-04|archive-url=https://web.archive.org/web/20160304084141/http://conferences.sigcomm.org/imc/2004/papers/p336-medina.pdf|dead-url=no}}</ref><ref>{{cite web|url=http://www.icir.org/tbit/ecn-tbit.html|title=TBIT, the TCP Behavior Inference Tool: ECN|accessdate=2014-03-22|date=|publisher=Icir.org|archive-date=2013-03-11|archive-url=https://web.archive.org/web/20130311202346/http://www.icir.org/tbit/ecn-tbit.html|dead-url=no}}</ref>{{As of|2015}}，测量显示，公共互联网上的[[網頁伺服器|網頁伺服器]]中设置而阻止ECN的网络连接已减少到少于1%。<ref>{{cite web|url=http://ecn.ethz.ch/ecn-pam15.pdf|title=Enabling Internet-Wide Deployment of Explicit Congestion Notification|accessdate=14 June 2015|date=2015|publisher=Proceedings of the Passive and Active Measurement Conference 2015|author1=Brian Trammell|author2=Mirja Kühlewind|author3=Damiano Boppart|author4=Iain Learmonth|author5=Gorry Fairhurst|author6=Richard Scheffenegger|deadurl=yes|archiveurl=https://web.archive.org/web/20150615083912/http://ecn.ethz.ch/ecn-pam15.pdf|archivedate=2015年6月15日}}</ref>

2015年5月，[[蘋果公司|蘋果公司]]宣布ECN将在其支持的及未来的产品中默认启用，以帮助推送ECN信号在整个行业中的应用。<ref name="apple-wwdc-719">{{cite web|url=https://developer.apple.com/videos/wwdc/2015/?id=719|title=Your App and Next Generation Networks|date=2015|publisher=Apple Inc.|accessdate=2016-12-17|archive-date=2015-06-15|archive-url=https://web.archive.org/web/20150615162041/https://developer.apple.com/videos/wwdc/2015/?id=719|dead-url=no}}</ref>

== 操作 ==
由于下列原因，ECN需要互联网层和[[传输层|传输层]]提供特定支持：
* 在TCP/IP中，路由器在互联网层操作，而传输速率由传输层处的端点处理。
* 拥塞可能仅由发送端处理，但由于它是在数据包发送后发生，所以接收端必须向发送端回传拥塞指示。

在无ECN时，拥塞指示回传是通过检测分组丢失来间接实现。在有ECN时，拥塞通过设置IP分组内的ECN字段为CE并由接收端通过在传输协议的报头中设置适当的位来回传给发送端。例如，当使用TCP时，拥塞指示通过设置ECE位来回传。

=== IP 中的 ECN 操作 ===
ECN 使用 IPv4 首部或 IPv6 首部中 ToS (Type of Service，位于首部第 9 到 16 比特位) 字段的两个[[Least_significant_bit|最低有效位]]（最右侧的位编码）来表示四个状态码：
* <code>00</code> – 不支持 ECN 的传输，非 ECT(Non ECN-Capable Transport)
* <code>10</code> – 支持 ECN 的传输，ECT(0)
* <code>01</code> – 支持 ECN 的传输，ECT(1)
* <code>11</code> – 发生拥塞，CE(Congestion Encountered)。
当两端支持 ECN 时，它将数据包标为 ECT(0) 或 ECT(1)。如果分组穿过一个遇到阻塞并且相应[[路由器|路由器]]支持 ECN 的{{tsl|en|active queue management|活动队列管理}}（AQM）队列（例如一个使用{{tsl|en|random early detection|随机早期检测}}，即 RED 的队列），它可以将代码点更改为<code>CE</code>而非[[丢包|丢包]]。这种行为就是“标记”，其目的是通知接收端即将发生[[拥塞控制|拥塞]]。在接收端，该拥塞指示由上层协议（[[传输层|传输层]]协议）处理，并且需要将信号回传给发送端，以通知其降低传输速率。

因为 CE 指示只能由支持它的上层协议有效处理，ECN 只能配合上层协议使用。例如 [[传输控制协议|TCP]] 协议，它支持阻塞控制并且有方法将 CE 指示回传给发送端。

=== TCP中的ECN ===

TCP支持使用TCP头中的三个标记（flag）来支持ECN。第一个标记是随机和（Nonce Sum，简称NS），用于防止TCP发送者的数据包标记被意外或恶意改动。<ref>[[rfc:3540|''RFC 3540 - Robust Explicit Congestion Notification.'']]</ref>另两位用于回传拥塞指示（即指示发送者应减少信息发送量）和确认接收到了拥塞指示回应。这即是ECN-Echo（ECE）和Congestion Window Reduced（CWR）位。

在TCP连接上使用ECN是可选的；当ECN被使用时，它必须在连接建立时通过SYN和SYN-ACK段中包含适当选项来协商。

当在一个TCP连接上协商ECN后，发送方指示连接上的TCP段携带IP分组传输流量，将支持ECN的传输用ECT码点标记。这使支持ECN的中间路由器可以标记具有CE码点的IP分组而不是丢弃它们，以指示即将发生的阻塞。

当接收到具有'''遇到阻塞'''码点时，TCP接收者使用TCP头中的ECE标记回传这个阻塞指示。当一个端点收到TCP带有ECE位的段时，它减少其拥塞窗口来代替丢包。然后，它设置段的CWR位来确认阻塞指示。

节点保持传输设置有ECE位的TCP段，直到它接收到设置有CWR的段。

要使用[[tcpdump|tcpdump]]查看受影响的数据包，使用过滤方法 <code>(tcp[13] & 0xc0 != 0)</code>。

==== ECN与TCP控制包 ====
由于[[传输控制协议|传输控制协议]]（TCP）不对控制分组（纯ACKs、SYN、FIN段）进行拥塞控制，控制分组通常不被标记为可进行ECN。

一份2009年的提议<ref>[[rfc:5562|''RFC 5562 - Adding Explicit Congestion Notification  Capability to TCP's SYN/ACK  Packets.'']] </ref>建议将SYN-ACK标记为支持ECN。这种改进被称为ECN+，已经显示出对短寿命TCP连接的性能提供了显著改善<ref name="kuzmanovic">Aleksandar Kuzmanovic.  </ref>。

ECN也在其他执行拥塞控制的传输层协议中被定义，尤其是[[数据拥塞控制协议|数据拥塞控制协议]]（DCCP）和[[流控制传输协议|流控制传输协议]]（SCTP）。其一般原理类似于TCP，尽管编码细节有所不同。

在原则上可以在[[用户数据报协议|用户数据报协议]]（UDP）之上的协议层实行ECN。但是，UDP需要应用程序实行拥塞控制，并且当前的网络API未提供访问ECN位的方法。

== 对性能的影响 ==
由于ECN仅在配合活动队列管理（AQM）策略时有效，因此ECN的益处依赖于所用的AQM的精确度。

如预期那样，ECN减少TCP连接中被丢弃的数据包数量，以避免重传、减少等待时间，尤其是网络抖动。当TCP连接有单个未完成段时，这种效果最为明显<ref>Jamal Hadi Salim and Uvaiz Ahmed. </ref>，它可以避免[[传输控制协议|传输控制协议]]（RTO）超时；这通常发生在交互式连接时，例如远程登录，以及事务协议，例如HTTP请求、SMTP的会话阶段、SQL请求。

ECN对批量吞吐的效果不太明确<ref>Marek Malowidzki, Simulation-based Study of ECN Performance in RED Networks, In ''Proc. ''</ref>，因为现代的TCP实现在发送方的窗口足够大时对于及时处理段丢失相当友好。

ECN的使用已被发现在高度拥塞的网络上是有害的，AQM算法使数据包不会被丢弃。<ref name="kuzmanovic" />现代的AQM实现在极高负载下会丢包而非标记包来避免这个陷阱。

== 实现 ==
许多现代产品中的TCP/IP协议已部分支持ECN；但是，大多数产品默认禁用ECN。{{Fact|date=June 2014}}

=== 主机支持的TCP中的ECN ===

==== Microsoft Windows ====
Windows自Windows Server 2008和Windows Vista开始支持TCP中的ECN。<ref name="win">{{cite web|url=http://technet.microsoft.com/en-us/library/bb726965.aspx|title=New Networking Features in Windows Server 2008 and Windows Vista|accessdate=2016-12-17|archive-date=2012-04-15|archive-url=https://www.webcitation.org/66wTdbkv2?url=http://technet.microsoft.com/en-us/library/bb726965.aspx|dead-url=no}}</ref>因为[[数据中心传输控制协议|数据中心传输控制协议]]（DCTCP）被使用，从Windows Server 2012开始在Windows Server版本中默认启用。<ref>{{cite web|url=http://technet.microsoft.com/en-us/library/hh997028.aspx|title=Data Center Transmission Control Protocol (DCTCP) (Windows Server 2012)|access-date=2016-12-17|archive-date=2017-08-26|archive-url=https://web.archive.org/web/20170826132305/https://technet.microsoft.com/en-us/library/hh997028.aspx|dead-url=no}}</ref>在更早的Windows版本以及非Server版本中，它被默认禁用。

ECN支持可以用命令启用，例如{{Mono|netsh interface tcp set global ecncapability{{=}}enabled}}。

==== 类Unix ====

===== BSD =====
[[FreeBSD|FreeBSD]] 8.0和[[NetBSD|NetBSD]] 4.0为TCP实现了ECN支持，可以通过sysctl接口将{{Mono|net.inet.tcp.ecn.enable}}参数设为1来激活。与此相同，[[OpenBSD|OpenBSD]]中可以设置{{Mono|sysctl net.inet.tcp.ecn}}。<ref>{{cite book|url=https://books.google.com/books?id=PN6Xy9zWAbsC&pg=PA347|title=Absolute OpenBSD: UNIX for the Practical Paranoid|date=|publisher=Books.google.com|accessdate=2014-03-22|author=Michael Lucas}}</ref><ref>{{cite web|url=http://netbsd.org/releases/formal-4/NetBSD-4.0.html|title=Announcing NetBSD 4.0|accessdate=2014-10-13|date=2007-12-19|archive-date=2014-10-31|archive-url=https://web.archive.org/web/20141031073922/http://netbsd.org/releases/formal-4/NetBSD-4.0.html|dead-url=no}}</ref>

===== Linux =====
从发布于2002年11月的[[Linux内核|Linux内核]]2.4.20版本开始<ref>{{cite web|url=https://datatag.web.cern.ch/datatag/papers/tr-datatag-2004-1.pdf|title=A Map of the Networking Code in Linux Kernel 2.4.20, Technical Report DataTAG-2004-1, FP5/IST DataTAG Project|accessdate=1 September 2015|date=March 2004|format=PDF|website=datatag.web.cern.ch|archive-date=2015-10-27|archive-url=https://web.archive.org/web/20151027124019/http://datatag.web.cern.ch/datatag/papers/tr-datatag-2004-1.pdf|dead-url=no}}</ref>，Linux支持TCP中的ECN的三种工作模式，以及通过[[sysctl|sysctl]]接口设置{{Mono|/proc/sys/net/ipv4/tcp_ecn}}参数为下列值：<ref name="linux">{{cite web|url=https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt|title=Documentation/networking/ip-sysctl.txt: /proc/sys/net/ipv4/* Variables|accessdate=2016-02-15|publisher=[[kernel.org|kernel.org]]|archive-date=2016-03-05|archive-url=https://web.archive.org/web/20160305080444/https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt|dead-url=no}}</ref>
* {{Mono|0}}{{Spaced en dash}} 禁用ECN，不发起也不接受
* {{Mono|1}}{{Spaced en dash}} 启用ECN，当传入连接请求时，并也在传出连接时尝试请求ECN
* {{Mono|2}}{{Spaced en dash}}（默认）传入连接请求时启用ECN，但不在传出连接上请求ECN

从2015年6月发布的Linux内核4.1开始，{{Mono|tcp_ecn_fallback}}机制按RFC 3168中的规定<ref>{{cite web
 | url = https://tools.ietf.org/html/rfc3168
 | title = RFC 3168 - The Addition of Explicit Congestion Notification (ECN) to IP
 | date = September 2001
 | accessdate = 2016-02-15
 | website = ietf.org
 | archive-date = 2019-04-26
 | archive-url = https://web.archive.org/web/20190426235256/https://tools.ietf.org/html/rfc3168
 | dead-url = no
 }}</ref><ref>{{cite web
 | url = http://man7.org/linux/man-pages/man7/tcp.7.html
 | title = Linux man pages
 | date = 2015-12-05
 | accessdate = 2016-02-15
 | website = man7.org
 | archive-date = 2016-02-16
 | archive-url = https://web.archive.org/web/20160216231741/http://man7.org/linux/man-pages/man7/tcp.7.html
 | dead-url = no
 }}</ref>，在ECN被启用（值为1）时默认启用。该回退机制在传出连接的初始设置时尝试ECN连接，对没有ECN能力的传输实行良好回退，缓解不支持ECN的主机或防火墙问题。

===== Mac OS X =====
[[MacOS|Mac OS X]] 10.5和10.6为TCP实现了ECN支持。它采用sysctl的布尔变量{{Mono|net.inet.tcp.ecn_negotiate_in}}和{{Mono|net.inet.tcp.ecn_initiate_out}}控制。<ref name="mac">{{cite web|url=http://www.icir.org/floyd/ecn.html#implementations|title=ECN (Explicit Congestion Notification) in TCP/IP|accessdate=2016-12-17|archive-date=2012-04-15|archive-url=https://www.webcitation.org/66wTeI9O4?url=http://www.icir.org/floyd/ecn.html#implementations|dead-url=yes}}</ref>第一个变量在已经设置ECN标记的传入连接上使用ECN；第二个则尝试在传出连接上启用ECN。两个变量均默认为{{Mono|0}}，但可以设置为{{Mono|1}}以实现相应的行为。

2015年6月，[[蘋果公司|蘋果公司]]宣布将在年内发布的[[OS_X_El_Capitan|OS X 10.11]]将默认启用ECN。<ref name="apple-wwdc-719"/>

===== iOS =====
2015年6月，[[蘋果公司|蘋果公司]]宣布iOS的下一版本——[[iOS_9|iOS 9]]，将支持ECN并默认启用。<ref name="apple-wwdc-719"/>

===== Solaris =====
[[Solaris|Solaris]]内核支持对TCP支持ECN的三种状态：{{Fact|date=December 2013}}
* {{Mono|never}}{{snd}} 无ECN
* {{Mono|active}}{{snd}} 使用ECN
* {{Mono|passive}}{{snd}} 仅在被询问时宣告ECN支持。
默认行为是{{Mono|passive}}。从Solaris 11开始，可以通过{{Mono|ipadm set-prop -p ecn{{=}}active tcp}}激活完整的ECN功能。{{Fact|date=2013年12月}}

=== 路由器支持的IP中的ECN ===
由于在路由器中标记ECN依赖于某些形式的{{tsl|en|active queue management|活动队列管理}}，路由器必须配置合适的队列规则才能实行ECN标记。

Cisco IOS路由器从12.2(8)T版本开始，如果已配置{{tsl|en|Weighted random early detection|加权随机早期检测|WRED}}排队规则，则实行ECN标记。

Linux路由器实行ECN标记，如果{{tsl|en|Random Early Detection|随机早期检测|RED}}或GRED队列显式配置了''ecn''参数，通过使用{{tsl|en|Stochastic Fair Blue|sfb}}规则，或使用[[CoDel|CoDel]]公平排队（fq_codel）规则。

现代的BSD实现，例如[[FreeBSD|FreeBSD]]、[[NetBSD|NetBSD]]和[[OpenBSD|OpenBSD]]支持ECN标记，在许多{{tsl|en|Queuing discipline|排队规则}}的{{tsl|en|ALTQ}}队列实现，尤其是{{tsl|en|Random Early Detection|随机早期检测|RED}}和{{tsl|en|Blue (queue management algorithm)|Blue (队列管理算法)|Blue}}。[[FreeBSD|FreeBSD]] 11在具有ECN标记能力的[[Ipfirewall|ipfw]]/dummynet框架中包括[[CoDel|CoDel]]、PIE、FQ-CoDel和FQ-PIE {{tsl|en|Queuing discipline|排队规则}}的实现。<ref>{{cite web|url=https://svnweb.freebsd.org/base?view=revision&revision=300779|title=Import Dummynet AQM version 0.2.1 (CoDel, FQ-CoDel, PIE and FQ-PIE) to FreeBSD 11|accessdate=5 August 2016|website=The FreeBSD Project, FreeBSD r300779|archive-date=2021-02-25|archive-url=https://web.archive.org/web/20210225072959/https://svnweb.freebsd.org/base?view=revision&revision=300779|dead-url=no}}</ref>

=== {{Anchor|DCTCP}}数据中心TCP ===
'''数据中心传输控制协议'''（也称'''数据中心TCP'''或'''DCTCP'''）是利用ECN来增强[[传输控制协议|传输控制协议]]的拥塞控制算法，其用于[[数据中心|数据中心]]网络。标准的[[TCP拥塞控制算法|TCP拥塞控制算法]]只能检测拥塞的'''存在'''，而使用ECN的DCTCP可以测量拥塞的'''程度'''。<ref>{{cite web|url=http://simula.stanford.edu/~alizade/Site/DCTCP.html|title=Data Center TCP|accessdate=2011-08-23|archive-date=2016-12-05|archive-url=https://web.archive.org/web/20161205041517/http://simula.stanford.edu/~alizade/Site/DCTCP.html|dead-url=yes}}</ref>

DCTCP修改了TCP的接收端以始终中继传入连接的精确ECN标记，代价是忽略一个保持信令可靠性的功能。这使DCTCP的发送端易受到接受ACK丢失的影响，因为它没有检测或应对的机制。<ref>{{Cite web |url = https://tools.ietf.org/html/draft-ietf-tcpm-accecn-reqs-08 |title = Requirements for a More Accurate ECN Feedback |date = March 9, 2015 |accessdate = May 2, 2015 |website = tools.ietf.org |publisher = IETF |archive-date = 2015-11-19 |archive-url = https://web.archive.org/web/20151119061959/https://tools.ietf.org/html/draft-ietf-tcpm-accecn-reqs-08 |dead-url = no }}</ref>{{As of|2014|7}}，以更可靠的方法提供等效或更好的接收器反馈的算法是一个活跃的研究课题，并有一个被称为“More accurate ECN feedback in TCP”（“TCP中更准确的ECN反馈”）（Accurate ECN，精准ECN）的实验建议<ref>{{Cite web |url = https://tools.ietf.org/html/rfc7560 |title = RFC 7560: Problem Statement and Requirements for Increased Accuracy in Explicit Congestion Notification (ECN) Feedback |date = August 26, 2015 |accessdate = May 12, 2016 |website = tools.ietf.org |publisher = IETF |archive-date = 2016-04-29 |archive-url = https://web.archive.org/web/20160429225306/https://tools.ietf.org/html/rfc7560 |dead-url = no }}</ref>。

== 参见 ==
* [[拥塞控制|拥塞控制]]
* [[反向显式拥塞通知|反向显式拥塞通知]]（BECN）
* {{tsl|en|Type of service|服务类型}}（ToS）

== 参考资料 ==
{{Reflist|30em}}

== 外部链接 ==
* [http://www.icir.org/floyd/ecn.html ECN web page by Sally Floyd] {{WebCite|url=https://www.webcitation.org/66wTeI9O4?url=http://www.icir.org/floyd/ecn.html |date=20120415121138 |dateformat=iso }}
* RFC 4774 (BCP), ''Specifying Alternate Semantics for the Explicit Congestion Notification (ECN) Field'', S. Floyd, (November 2006)
* [https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=81164413ad096bafe8ad1068f3f095a7dd081d8b Linux kernel support for defining a per-route/destination congestion control algorithm] (merged in Linux kernel 4.0)

[[Category:传输层协议|Category:传输层协议]]
[[Category:数据流控制|Category:数据流控制]]
[[Category:网络性能|Category:网络性能]]