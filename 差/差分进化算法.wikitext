{{NoteTA
|G1 = IT
}}
'''差分进化算法'''（{{lang-en|differential evolution}}）又称'''微分进化算法'''，是一种求解[[最佳化问题|最佳化问题]]的[[进化算法|进化算法]]。因為[[进化算法|进化算法]]對於[[最佳化问题|最佳化问题]]的要求極少，所以被視為一種{{link-en|後設启发式算法|metaheuristic}}。雖然後設启发式算法適用於多種[[最佳化问题|最佳化问题]]，但是並不保證可以找到[[全局最優解|全局最優解]]。

差分进化算法被使用在多[[維度|維度]][[實數|實數]]編碼的[[最佳化问题|最佳化问题]]。因為此算法不使用問題的[[梯度|梯度]]資訊，故可解不[[可微分|可微分]]的[[最佳化问题|最佳化问题]]。也因此，差分进化算法可用於[[不連續|不連續]]的，[[雜訊|雜訊]]的，隨著時間改變的[[最佳化问题|最佳化问题]]。

差分进化算法類似[[遗传算法|遗传算法]]，包含变异，交叉操作，淘汰机制。本质上说，它是一种基于实数编码的具有保优思想的贪婪[[遗传算法|遗传算法]]<ref name=liubo>刘波，王凌，金以慧差分进化算法研究进展，控制与决策，第22卷第7期,721-729</ref>。而差分进化算法与[[遗传算法|遗传算法]]不同之處，在於变异的部分是隨選兩個解成員變數的差異，經過伸縮後加入當前解成員的變數上，因此差分进化算法無須使用[[機率分佈|機率分佈]]產生下一代解成員
<ref name="das11surveyde">{{cite journal |author1=S. Das |author2=P. N. Suganthan |title=Differential Evolution: A Survey of the State-of-the-Art |journal=IEEE Transactions on Evolutionary Computation |date=Feb. 2011 |volume=15 |issue=1 |pages=4-31 |doi=10.1109/TEVC.2010.2059031 |url=https://ieeexplore.ieee.org/document/5601760 |accessdate=2019-02-12 |archive-date=2021-03-08 |archive-url=https://web.archive.org/web/20210308072026/https://ieeexplore.ieee.org/document/5601760/ |dead-url=no }}</ref>。

算法的原理采用对个体进行方向扰动，以达到对个体的函数值进行下降的目的，同其他进化算法一样，差分进化算法不利用函数的梯度信息，因此对函数的可导性甚至连续性没有要求，适用性很强。同时，算法与[[粒子群优化|粒子群优化]]有相通之处，但因为差分进化算法在一定程度上考虑了多变量间的[[相关性|相关性]]，因此相较于[[粒子群优化|粒子群优化]]在变量[[耦合|耦合]]问题上有很大的优势。由于差分进化算法在连续域优化问题的优势已获得广泛应用，并引发[[进化算法|进化算法]]研究领域的热潮。算法的实现参考实现代码部分<ref name=rongekuta>代码编写及提供者：rongekuta@gmail.com </ref>

==歷史==
* 1995年3月，Storn與Price所撰寫的差分進化演算法技術報告，是差分進化演算法的起源<ref name="stornpub">{{cite web
|author1=R. Storn
|author2=K. Price
|title=Differential Evolution - a Simple and Efficient Adaptive Scheme for Global Optimization over Continuous Spaces
|url=http://www1.icsi.berkeley.edu/~storn/litera.html
|website=Technical Report TR-95-012, ICSI, March 1995
|accessdate=2019-02-12
|archive-date=2020-06-09
|archive-url=https://web.archive.org/web/20200609041755/http://www1.icsi.berkeley.edu/~storn/litera.html
|dead-url=yes
}}</ref>。
* 1996年5月，Storn與Price在國際[[電機電子工程師學會|電機電子工程師學會]]演化計算研討會公開發表差分进化算法<ref name="storn96de">{{cite conference
|author=R. Storn
|coauthors=K. Price
|title=Minimizing the real functions of the ICEC'96 contest by differential evolution
|conference=Proceedings of IEEE International Conference on Evolutionary Computation
|conferenceurl=https://ieeexplore.ieee.org/xpl/mostRecentIssue.jsp?punumber=3838
|date=20-22 May 1996
|location=Nagoya, Japan
|pages=842-844
|doi=10.1109/ICEC.1996.542711
|url=https://ieeexplore.ieee.org/document/542711
|accessdate=2019-02-12
|archive-date=2019-02-13
|archive-url=https://web.archive.org/web/20190213005525/https://ieeexplore.ieee.org/document/542711
|dead-url=no
}}</ref>。
* 1997年12月，在全局最佳化國際學術期刊上刊出Storn與Price所著之差分进化算法論文<ref name="storn97de">{{cite journal
|author1=R. Storn
|author2=K. Price
|title=Differential Evolution – A Simple and Efficient Heuristic for global Optimization over Continuous Spaces
|journal=Journal of Global Optimization
|date=Dec. 1997
|volume=11
|issue=4
|pages=341–359
|doi=10.1023/A:1008202821328
|url=https://link.springer.com/article/10.1023/A:1008202821328
|accessdate=2019-02-12
|archive-date=2021-03-08
|archive-url=https://web.archive.org/web/20210308002424/https://link.springer.com/article/10.1023/A:1008202821328
|dead-url=no
}}</ref>。
* 2005年，[https://www.springer.com/ Springer] {{Wayback|url=https://www.springer.com/ |date=19981206004656 }}出版Storn與Price所著之差分进化算法專書<ref name=price05differential>
{{cite book
|title=Differential Evolution: A Practical Approach to Global Optimization
|url=https://www.springer.com/computer/theoretical+computer+science/foundations+of+computations/book/978-3-540-20950-8
|last1=Price
|first1=K.
|last2=Storn
|first2=R.M.
|last3=Lampinen
|first3=J.A.
|year=2005
|publisher=Springer
|isbn=978-3-540-20950-8
}}</ref>。

==演算法原理==
差分進化演算法之目的為求解[[最佳化問題|最佳化問題]]，使用突變、交叉、選擇計算以演化多個可能的解。首先，產生足量的[[隨機|隨機]]變數，做為初始的可能解。接著，依序進行突變、交叉、選擇計算，做完一輪後，檢查某個終止條件。若終止條件尚未滿足，則回到突變、交叉、選擇計算，否則終止差分進化演算法，輸出最後一輪的最佳解。

===突變===
在[[進化計算|進化計算]]中，突變是用於產生隨機解的計算方法。

===交叉===
在突變之後，差分進化演算法使用交叉計算以增強隨機解的多樣性。

===選擇===
在交叉之後，差分進化演算法對隨機解做選擇，移除演化失敗的解，留下演化成功的解。選擇之後，進行突變計算，直到滿足某個終止條件。

== 实现代码（MATLAB） ==
<syntaxhighlight lang="matlab">
tic
F = 0.9;
CR = .1;
n = 2; %问题维数，以简单的球函数为目标函数
NP = 30;
lu = [-10,-10 ;10 ,10]; %求解空间的上下界
LB = repmat(lu(1,:),NP,1);
UB = repmat(lu(2,:),NP,1);
%用于生成随机选择个体的表
tab = 1:NP; tab = tab(ones(1,NP),:)';
dig = 1:NP; D =(dig-1)*NP +(1:NP);
tab (D) = [];
tab = reshape(tab,NP-1,[])';
TAB = tab;
%测试次数
TIMES = 10;
Solve = zeros(1,TIMES);
numOfevol = zeros(1,TIMES);
for time = 1:TIMES
%
Result = []; %记录结果
rand('seed',sum(100*clock));
%
X = LB+rand(NP,n).*(UB-LB);
U = X;
%% 
fit = fitness (X); %首次评价
FES = NP;
while FES<n*10000
    %产生随机个体参与变异
    tab = TAB;
    rand1 = floor(rand(NP,1)*(NP-1))+1;
    rand2 = floor(rand(NP,1)*(NP-2))+2;
    rand3 = floor(rand(NP,1)*(NP-3))+3;
    RND1 =(rand1-1)*NP+(1:NP)';
    RND2 =(rand2-1)*NP+(1:NP)';
    RND3 =(rand3-1)*NP+(1:NP)';
    r1 = tab (RND1); tab (RND1)=tab(:,1);
    r2 = tab (RND2); tab (RND2)=tab(:,2);
    r3 = tab (RND3);
    % rand/one/变异模式
    V = X(r1,:) + F.*(X(r2,:)-X(r3,:)); 
    %越界检验
    BL = V<LB ; V(BL) = 2*LB(BL) - V(BL); 
    BLU = V(BL)>UB(BL); BL (BL) = BLU ; V(BL) = UB (BL);
    BU = V>UB;  V (BU) = 2*UB(BU) - V(BU);
    BUL = V(BU)<LB(BU); BU (BU) = BUL ; V(BU) = LB (BU);
    %交叉操作
    J_= mod(floor(rand(NP,1)*n),n)+1;
    J =(J_-1)*NP+(1:NP)';
    C = rand(NP,n)<CR;
    U (J) = V(J);
    U (C) = V(C);
    %评价子代
    fit_ = fitness (U);
    %比较并竞争
    S = fit_<fit;
    X(S,:) = U(S,:);
    fit(S) = fit_(S);
    %记录函数评价次数
    FES = FES + NP;
    %记录结果（用于绘图，并不是算法必要环节）
    Result = [Result ,min (fit)];
end
Solve (time) = min (fit);
%试验次数
plot(log10(Result),'b');hold on;
end
disp(['求解结果:',num2str(Solve)]);
toc
%附上球函数代码（新建一个M文件即可）
function Y = fitness (X)
Y = sum(X.^2 ,2); 
</syntaxhighlight>

== 参看 ==
* [[遗传算法|遗传算法]]
* [[粒子群优化|粒子群优化]]

==参考文献==
<references />
==外部链接==
* [https://web.archive.org/web/20051201024739/http://www.icsi.berkeley.edu/~storn/code.html Storn's Homepage on DE] featuring source-code for several programming languages.
* [https://web.archive.org/web/20110607065758/http://www.hvass-labs.org/projects/swarmops/ SwarmOps] Parameter tuning / calibration of DE and other optimization methods using a Meta-Optimization approach. Source-code library is for the C and C# programming languages.
* [https://web.archive.org/web/20100510200245/http://www1.webng.com/economics/globopt.html Global Optimization by Differential Evolution and Particle Swarm Methods: Evaluation on Some Benchmark Functions（webng.com）]– FORTRAN 77 Codes for DE optimization with a large number of benchmark problems 
* [https://web.archive.org/web/20101029234341/http://www1.webng.com/economics/de-rps.htm Differential Evolution and Particle Swarm Optimization（webng.com）]– Performance Evaluation on Benchmark functions
*[http://www.cs.cinvestav.mx/~constraint/ List of References on Constraint-Handling Techniques used with Evolutionary Algorithms（cs.cinvestav.mx）] {{Wayback|url=http://www.cs.cinvestav.mx/~constraint/ |date=20210213215511 }}– Comprehensive bibliography of constraint methods for evolutionary optimization 
* [http://mathworld.wolfram.com/DifferentialEvolution.html Differential Evolution（MathWorld.wolfram.com）] {{Wayback|url=http://mathworld.wolfram.com/DifferentialEvolution.html |date=20190831221627 }}
* [http://asco.sourceforge.net/downloads_DE.html A SPICE Circuit Optimizer（sourceforge.net）] {{Wayback|url=http://asco.sourceforge.net/downloads_DE.html |date=20170829125147 }}– Parallel version of the Differential Evolution
* [http://swagatamdas19.googlepages.com/specialissueofieeeteconde A forthcoming special issue on DE organized by IEEE Transactions on Evolutionary Computation] {{Wayback|url=http://swagatamdas19.googlepages.com/specialissueofieeeteconde |date=20090711160641 }}
* [http://www.zaita.com/?page_id=30 GenerationZ] {{Wayback|url=http://www.zaita.com/?page_id=30 |date=20100314213512 }} – A multi-threaded differential evolution library
* [http://www.sciencedirect.com/science/article/pii/S0957417410010493  A Fast Differential Evolution Algorithm using k-Nearest Neighbour Predictor]

[[Category:數學最佳化|Category:數學最佳化]]
[[Category:进化算法|Category:进化算法]]