{{refimprove|time=2015-06-04T20:29:34+00:00}}
{{noteTA
|G1=IT
|1=zh-cn:编程;zh-hk:編程;zh-tw:程式設計;
}}
{{编程范式}}
'''結構化程式設計'''（{{lang-en|Structured programming}}），一種[[編程典範|編程典範]]。它採用[[子程序|子程序]]、[[块结构|块结构]]、[[for迴圈|for迴圈]]以及[[while迴圈|while迴圈]]等結構，來取代傳統的 [[goto|goto]]。希望藉此來改善[[计算机程序|计算机程序]]的明晰性、品質以及開發時間，並且避免寫出[[麵條式代碼|麵條式代碼]]。

結構化程式設計在1960年代開始發展，{{link-en|科拉多·伯姆|Corrado Böhm}}及[[朱塞佩·賈可皮尼|朱塞佩·賈可皮尼]]（Giuseppe Jacopini）於1966年5月在《Communications of the ACM》期刊發表論文<ref>Böhm, Jacopini. "Flow diagrams, turing machines and languages with only two formation rules" Comm. ACM, 9(5):366-371, May 1966.</ref>，說明任何一個有goto指令的程式，可以改為完全不使用goto指令的程式，後來[[艾兹赫尔·戴克斯特拉|艾兹赫尔·戴克斯特拉]]在1968年也提出著名的論文《GOTO陳述有害論》（Go To Statement Considered Harmful）<ref name="dijkstra1968">{{cite journal 
| author = Edsger Dijkstra 
| format=PDF
| title = Go To Statement Considered Harmful 
| journal = Communications of the ACM 
| volume = 11 
| issue = 3 
| pages = 147–148 
| doi = 10.1145/362929.362947 
| quote=The unbridled use of the go to statement has as an immediate consequence that it becomes terribly hard to find a meaningful set of coordinates in which to describe the process progress.  ... The go to statement as it stands is just too primitive, it is too much an invitation to make a mess of one's program.|date=March 1968}}</ref>，因此結構化程式設計開始盛行，此概念理論上可以由[[結構化程式理論|結構化程式理論]]所證明，而在實務上，當時也有像[[ALGOL|ALGOL]]一樣，有豐富控制結構的程式語言來實現結構化程式設計。

==底層的結構化程式設計==
結構化的程式是以一些簡單、有層次的程式流程架構所組成，可分為循序（sequence）、選擇（selection）及重複（repetition）。

* 循序是指程式正常的執行方式，執行完一個指令後，執行後面的指令。

* 選擇是依程式的狀態，選擇數段程式中的一個來執行，一般會使用[[條件判斷|<code>if..then..else..endif</code>]]或[[switch指令|<code>switch</code>]]、<code>case</code>等關係字來識別。

* 重複是指一直執行某一段程式，直到滿足特定條件，或是一集合體中的所有元素均已處理過，一般會使用[[while迴圈|<code>while</code>]]、[[do_while迴圈|<code>repeat</code>]]、[[for迴圈|<code>for</code>]]、<code>do..until</code>或<code>do...while</code>等關鍵字識別。一般會建議每個迴圈只能有一個進入點（戴克斯特拉的結構化程式設計要求每個迴圈只能有一個進入點及一個結束點，有些程式語言仍有此規定）。

若一個程式語言的語法允許用成對的關鍵字包圍一段程式，形成一個結構，這種程式語言稱為有「[[塊結構|塊結構]]」，這類的結構包括用[[ALGOL_68|ALGOL 68]]的<code>if..fi</code>包圍的程式，或是在[[PL/I|PL/I]]中用<code>BEGIN..END</code>包圍的一段程式，或是在[[C語言|C語言]]中用大括號<code>{...}</code>包圍的一段程式。

==結構化程式語言==
用任何語言都可以進行結構化程式設計，不過一般較常使用[[过程式编程|过程式]]的[[程式語言|程式語言]]。早期的結構化程式語言包括[[ALGOL|ALGOL]]、 [[Pascal_(程式語言)|Pascal]]、[[PL/I|PL/I]]及[[Ada|Ada]]，不過後來大部份的程序式程式語言都鼓勵使用結構化程式設計，有時也會特意的省去一些特性（例如不支援goto指令）使得非結構化的程式設計更加困難。

==歷史==
===理論基礎===
[[結構化程式理論|結構化程式理論]]可做為结构化编程的理論基礎，結構化程式理論中提到利用循序、選擇及重複這三種組合程式的方式，可以表示所有[[可计算函数|可计算函数]]。上述的三種結構已足以表示[[CPU|CPU]]中的[[指令周期|指令周期]]，也可以表示[[圖靈機|圖靈機]]的運作，以此觀點來看，處理器所執行的指令可視為是某種「結構化程式」，雖然整個程式可能不是一個結構化程式。一般都認為結構化程式理論是歸功於伯姆和賈可皮尼於1966年發表的論文，其中一個原因可能是[[艾茲赫爾·戴克斯特拉|戴克斯特拉]]引用過此論文。結構化程式理論未提及如何撰寫結構化程式，也沒有提到結構化程式的分析，後來1960至1970年代時，戴克斯特拉、[[羅伯特·弗洛伊德|羅伯特·弗洛伊德]]、[[東尼·霍爾|東尼·霍爾]]等計算機科學家在此領域有許多的貢獻。

===爭議===
结构化编程中一項重要的原則是減少甚至禁止goto指令的使用，不過不是所有計算機科學家都贊成禁止使用goto指令。[[高德納|高德納]]贊成程式設計時需考慮可讀性，但他不贊成禁用goto指令。在其1974年發表的論文《使用goto指令的結構化編程》（Structured Programming with Goto Statements）中，他提出了一些程式，使用goto指令可以使得程式更清楚而有效率，也不會犧牲程式的可讀性。高德納提出了一個較鬆的結構限制要求：將程式以[[流程圖|流程圖]]表示，前進的分支在流程圖的左側，倒退的分支在流程圖的右側，所有分支均不得交叉。

结构化编程在1970年有很大的進展，[[IBM|IBM]]的研究員{{link-en|哈倫·米爾斯|Harlan Mills}}將结构化编程應用在[[紐約時報|紐約時報]]研究檔案索引系統的開發，此計劃相當成功，因此許多公司開始使用结构化编程，不過戴克斯特拉評論米爾斯使用的方式和一些已發表論文中的方式不同。

到1987年時在計算機科學領域仍有針對结构化编程的爭論，弗蘭克·魯賓發表了一篇論文《「goto有害論」是有害的》（"GOTO considered harmful" considered harmful），引發許多的反對，戴克斯特拉本人也批評魯賓及其追隨者的論點。

===影響===
在二十世紀末時絕大多數的計算機科學學者均已同意使用結構化程式設計的好處，原來缺乏程式結構的高階程式語言（如[[FORTRAN|FORTRAN]]、[[COBOL|COBOL]]及[[BASIC|BASIC]]）也都已加入此特性。

==例外情形==
===异常处理===
{{main|异常处理}}
子程式很少會有一個以上的進入點，相對的，有時子程式會有一個以上的結束點，表示剩下的程式不需執行，或因為一些原因，造成無法執行後續的程式。

以下是是一個由檔案中讀取資料並處理的程式範例：
<syntaxhighlight lang="text">open file;
 while (reading not finished) {
   read some data;
   if (error) {
     stop the subprogram and inform rest of the program about the error;
   }
 }
 process read data;
 finish the subprogram;
</syntaxhighlight>
其中「stop and inform」的步驟可以利用多種方式達成，包括產生一個異常（exception）、利用<code>return</code>指令回到上一層的程式、使用配合標記的<code>break</code>指令，或是使用<code>goto</code>。當子程式有二個結束點時，就違背了戴克斯特拉的结构化编程原則。但此情形下若強制要撰寫只有一個結束點的子程式又相當麻煩，而且若有幾個不同的錯誤處理，錯誤產生後有不同的清除方式，單一結束點的程式會相當難以閱讀及理解，甚至比未結構化使用<code>goto</code>的程式相當。

許多程式語言就提供了在结构化编程中產生多個結束點的方式。[[C語言|C語言]]允許使用<code>continue</code>、<code>break</code>及<code>return</code>指令來產生結構的多個結束點，[[C++|C++]]還可以用<code>throw</code>產生異常，在結構外再用<code>catch</code>進行異常的處理，有些語言則有配合標記的<code>break</code>指令（類似一般的<code>break</code>指令，但可以跳出不只一層的結構）。

===狀態機===
有些程式（例如[[語法分析器|語法分析器]]或是處理[[通訊協定|通訊協定]]的程式）有許多的{{link-en|狀態 (計算機科學)|state (computer science)|狀態}}，因此程式進行的過程會在各狀態中切換，此架構不容易簡化成基本的控制結構。可以將此架構各狀態下的程式分別獨立為子程序，再用一個變數表示目前的狀態，（可參考{{link-en|trampoline (計算機科學)|trampoline (computers)|trampoline}}），另一種作法是用<code>goto</code>的方式切換到新狀態對應的程式。

==相關條目==
{{div col|colwidth=30em}}
* [[控制流程|控制流程]]
* [[短路求值|短路求值]]
* [[面向对象程序设计|面向对象程序设计]]
* [[Nassi-Shneiderman圖|Nassi-Shneiderman圖]]
* [[编程范型|编程范型]]
* [[异常处理|异常处理]]
* {{link-en|結構圖|Structure chart}}
* {{link-en|switch指令|Switch statement}}，可視為許多goto的組合
* [[非結構化程式設計|非結構化程式設計]]
*[[组合子逻辑|组合子逻辑]]
*[[柯里化|柯里化]]
*[[λ演算|λ演算]]
*[[极小化求值|极小化求值]]
*[[求值策略|求值策略]]
{{div col end}}

== 参考文献 ==
{{Reflist}}

{{-}}
{{编程语言类别}}

[[Category:編程典範|Category:編程典範]]
[[Category:软件开发|Category:软件开发]]
[[Category:軟體工程|Category:軟體工程]]