{{Rough translation|time=2020-07-27T01:53:56+00:00}}
{{NoteTA|G1=IT}}
在[[计算机科学|计算机科学]]里面，'''加权平衡树'''（{{lang|en|'''WBTs'''}}）是一种可以用来实现[[集合|集合]]、[[字典|字典]]（映射）和序列的[[平衡树|平衡树]]。<ref>{{Cite journal | doi = 10.1007/BF00289142| title = Maintaining order in a generalized linked list| url = https://archive.org/details/sim_acta-informatica_1984-05_21_1/page/101| journal = Acta Informatica| volume = 21| pages = 101| year = 1984| last1 = Tsakalidis | first1 = A. K. }}</ref>这些树结构在20世纪70年代被Nievergelt和Reingold作为'''有界限的自平衡树'''或'''BB[α]树'''提出。<ref>{{Cite journal | doi = 10.1137/0202005| title = Binary Search Trees of Bounded Balance| journal = SIAM Journal on Computing| volume = 2| pages = 33| year = 1973| last1 = Nievergelt | first1 = J.| last2 = Reingold | first2 = E. M.}}</ref><ref>{{DADS|BB(α)tree|bbalphatree}}</ref>让这些结构普及的是[[高德纳|高德纳]]。<ref name="Hirai">{{Cite journal | doi = 10.1017/S0956796811000104| title = Balancing weight-balanced trees| journal = Journal of Functional Programming| volume = 21| issue = 3| pages = 287| year = 2011| last1 = Hirai | first1 = Y. | last2 = Yamamoto | first2 = K. }}</ref>

就像其他自平衡树一样，加权平衡树储存的账簿信息可以在树结构被插入和删除操作打乱时，通过平衡结点和操作[[树旋转|树旋转]]来使树结构重新达到平衡。特别的地方是，加权平衡树的每个结点储存这个结点下子树的大小，并且这个结点左右子树的大小保持着某种内在联系。不同于[[AVL树|AVL树]]（储存子树的高度）和[[红黑树|红黑树]]（储存虚构的“颜色”位），加权平衡树储存记账信息的方式是对应用真正有用的属性：一棵树下元素的数量等于它的根的大小，然而这个根的大小是一个用来实现[[顺序统计树|顺序统计树]]操作的有用数据，也就是说，可以得到一个大小为{{mvar|n}}的集合下的最大元素或者决定一个顺序结构下一个元素的索引。<ref>{{Cite conference| doi = 10.1007/3-540-48224-5_39| title = A new method for balancing binary search trees| conference = [[ICALP|ICALP]]| volume = 2076| pages = 469–480| series = Lecture Notes in Computer Science| year = 2001| last1 = Roura | first1 = Salvador| isbn = 978-3-540-42287-7}}</ref>

加权平衡树在[[函数程式语言|函数程式语言]]社区下面非常受欢迎以及被用来实现[[Scheme|MIT Scheme]]的集合和映射结构还有[[Haskell|Haskell语言]]的实现。<ref>{{Cite journal| doi = 10.1017/S956796800000885| title = Functional Pearls: Efficient sets—a balancing act| journal = Journal of Functional Programming| volume = 3| issue = 4| pages = 553–561| year = 1993| last1 = Adams | first1 = Stephen}}</ref><ref name="Hirai"/>

==描述==
加权平衡树是一种储存子树大小的[[二叉搜索树|二叉搜索树]]。那就是说，一个结点包含以下字段：

* 键（''key''），任何可排序的类型
* 值（''value''，可选，只作映射作用）
* 左子树（''left''），右子树（''right''），结点的指针
* 大小（''size''），整数类型

从定义上来说，树上叶子（没有子结点的元素）的大小（典型地用一个空指针表示）是0。一个内部结点的大小是它的两棵子树的大小，再加一
（{{mono|size[n] {{=}} size[n.left] + size[n.right] + 1}}）。一个结点的权重取决于它的大小或者等于它的大小，或{{mono|weight[n] {{=}} size[n] + 1}}。

[[File:BinaryTreeRotations.svg|thumb]]]]
修改树的操作必须使用与[[AVL树|AVL树]]中相同的操作来保证左子树和右子树的大小相互存在某种内在因子{{mvar|α}}，也就是旋转和两次选择。形式上来说，结点平衡操作如下定义：

:如果一个结点满足{{mono|weight[n.left] ≥ α·weight[n]}}以及{{mono|weight[n.right] ≥ α·weight[n]}}，那么就说这个结点是{{mvar|α}}加权平衡的。<ref name="brass">{{cite book |first=Peter |last=Brass |title=Advanced Data Structures |url=https://archive.org/details/advanceddatastru00bras_251 |year=2008 |publisher=Cambridge University Press |pages=[https://archive.org/details/advanceddatastru00bras_251/page/n71 61]–71}}</ref>

在这里，{{mvar|α}}是一个在实现加权平衡树是用来做决定的数值参数。{{mvar|α}}的值越小，意味着这棵树“更加平衡”，但不是所有的{{mvar|α}}值都是合适的；Nievergelt和Reingold曾经证明过满足

:<math>\alpha < 1 - \frac{1}{\sqrt{2}}</math>

是一个平衡算法成功工作的重要状态。他们往后的工作展示了{{mvar|α}}的一个下界是{{frac|2|11}}，但如果使用一个自定义（更加复杂的）的再平衡算法，下界还可以更小。{{r|brass}}

若平衡被正确实现，一棵含有{{mvar|n}}个元素的加权平衡树的高度{{mvar|h}}满足{{r|brass}}

:<math>h \le \log_{\frac{1}{1-\alpha}} n = \frac{\log_2 n}{\log_2 \left( \frac{1}{1-\alpha} \right)} = O(\log n)</math>

加权平衡树{{mvar|n}}次插入和删除操作中，平衡的次数是线性的，为{{mvar|n}}。也就是说，加权平衡树的平衡操作[[平摊分析|均摊开销]]是恒定的。<ref>{{Cite journal| doi = 10.1016/0304-3975(80)90018-3| title = On the average number of rebalancing operations in weight-balanced trees| journal = Theoretical Computer Science| volume = 11| issue = 3| pages = 303–320| year = 1980| last1 = Blum| first1 = Norbert| last2 = Mehlhorn| first2 = Kurt| url = http://scidok.sulb.uni-saarland.de/volltexte/2011/4019/pdf/fb14_1978_06.pdf| access-date = 2015-12-08| archive-date = 2016-03-04| archive-url = https://web.archive.org/web/20160304203451/http://scidok.sulb.uni-saarland.de/volltexte/2011/4019/pdf/fb14_1978_06.pdf| dead-url = no}}</ref>

==引用==
{{reflist|30em}}

{{计算机科学中的树}}