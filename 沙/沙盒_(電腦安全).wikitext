{{About||其他用法|沙盒}}
{{Nottest}}
{{NoteTA
|G1 = IT
|1  = zh-hans:通过; zh-hant:通過; zh-tw:透過; 
}}

'''沙盒'''（{{lang-en|sandbox}}，又譯為'''沙箱'''）是一種安全機制，為執行中的程式提供的隔離環境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用<ref>{{cite web|url=http://www.usenix.org/publications/library/proceedings/sec96/full_papers/goldberg/goldberg.pdf|title=A Secure Environment for Untrusted Helper Applications (Confining the Wily Hacker)|author=Ian Goldberg, David Wagner, Randi Thomas, and Eric Brewer|work=Proceedings of the Sixth USENIX UNIX Security Symposium|year=1996|accessdate=25 October 2011|archive-date=2010-06-15|archive-url=https://web.archive.org/web/20100615152311/http://usenix.org/publications/library/proceedings/sec96/full_papers/goldberg/goldberg.pdf|dead-url=no}}</ref>。

沙盒通常严格控制其中的程序所能访问的资源，比如，沙盒可以提供[[塗銷空間|用后即回收]]的磁盘及内存空间。在沙盒中，网络访问、对真实系统的访问、对输入设备的读取通常被禁止或是严格限制。从这个角度来说，沙盒属于[[虚拟化|虚拟化]]的一种。

沙盒中的所有改动对[[操作系统|操作系统]]不会造成任何损失。通常，这种技术被[[计算机|计算机]]技术人员广泛用于测试可能[[计算机病毒|带毒]]的程序或是其他的[[恶意软件|恶意代码]]<ref>{{cite web |last=Geier |first=Eric |url=http://www.techhive.com/article/247416/how_to_keep_your_pc_safe_with_sandboxing.html |title=How to Keep Your PC Safe With Sandboxing |publisher=TechHive |date=2012-01-16 |accessdate=2014-07-03 |archive-date=2014-07-12 |archive-url=https://web.archive.org/web/20140712130329/http://www.techhive.com/article/247416/how_to_keep_your_pc_safe_with_sandboxing.html |dead-url=no }}</ref>。

現在的整合式防火牆常含有雲端沙盒，當本地靜態分析無法辦別時，就會去雲端比對hash值，查看是否有相關情資，若為未發現過的可疑程式，則送入沙盒測試，並記錄其行為模式。

== 具体实现 ==
沙盒将软件运行于一个受限的系统环境中，控制程序可使用的资源（如[[文件描述符|文件描述符]]、内存、[[磁盘空间|磁盘空间]]等）<ref>{{cite web|url=http://www.dmst.aueb.gr/dds/pubs/conf/2001-Freenix-Sandbox/html/sandbox32final.pdf|title=Sandboxing Applications|year=2001|accessdate=7 May 2013|archive-date=2015-09-23|archive-url=https://web.archive.org/web/20150923215446/http://www.dmst.aueb.gr/dds/pubs/conf/2001-Freenix-Sandbox/html/sandbox32final.pdf|dead-url=no}}</ref>。

以下是一些沙盒的具体实现：

* [[FreeBSD_jail|软件监狱（Jail）]]：限制网络访问、受限的文件系统命名空间。软件监狱最常用于[[虚拟主机|虚拟主机]]上<ref>{{cite web |url=https://enterprise.comodo.com/security-solutions/endpoint-protection/auto-sandboxing.php |title=Auto-Sandboxing secure system |accessdate=2015-01-30 |archive-date=2015-02-12 |archive-url=https://web.archive.org/web/20150212200052/https://enterprise.comodo.com/security-solutions/endpoint-protection/auto-sandboxing.php |dead-url=no }}</ref>。
* 基于规则的执行：通过系统安全机制，按照一系列预设规则给用户及程序分配一定的访问权限，完全控制程序的启动、代码注入及网络访问<ref>{{cite web | url=http://oreilly.com/catalog/csb/chapter/ch03.html | title=Computer System Security and Access Controls | year=1991 | accessdate=17 May 2013 | deadurl=yes | archiveurl=https://web.archive.org/web/20130528005443/http://oreilly.com/catalog/csb/chapter/ch03.html | archivedate=2013年5月28日 }}</ref>。也可控制程序对于文件、注册表的访问。在这样的环境中，病毒木马感染系统的几率将会减小。[[Linux|Linux]]中，[[安全增强式Linux|安全增强式Linux]]和[[AppArmor|AppArmor]]正使用了这种策略。
* [[虚拟机|虚拟机]]：[[模拟器|模拟]]一个完整的宿主系统，可以如运行于真实硬件一般运行虚拟的操作系统（客户系统）。客户系统只能通过模拟器访问宿主的资源，因此可算作一种沙盒。
* 主机本地沙盒：安全研究人员十分依赖沙盒技术来分析恶意软件的行为。通过创建一个模拟真实桌面的环境，研究人员就能够观察恶意软件是如何感染一台主机的。若干恶意软件分析服务使用了沙盒技术<ref>{{cite web |url=http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/34913.pdf |title=Native Client Sandbox{{Spaced ndash}} Untrusted x86 Native Code |accessdate=2015-01-03 |archive-date=2015-02-12 |archive-url=https://web.archive.org/web/20150212192440/http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/34913.pdf |dead-url=no }}</ref>。
* [[在线判题系统|在线判题系统]]：用于编程竞赛中的程序测试。
* {{link-en|seccomp|seccomp|安全计算模式（seccomp）}}：Linux内核内置的一个沙盒。启用后，seccomp仅允许<tt>write()</tt>、<tt>read()</tt>、<tt>exit()</tt>和<tt>sigreturn()</tt>这几个系统调用。

== 參見 ==
* [[chroot|chroot]]
* [[虛擬系統|虛擬系統]]
* [[Sandboxie|Sandboxie]]

== 参考来源 ==
{{reflist}}

{{DEFAULTSORT:沙盒}}
[[Category:操作系统安全|Category:操作系统安全]]