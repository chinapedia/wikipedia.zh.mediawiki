{{noteTA
|G1=IT
}}
在[[计算机|计算机]]领域，'''父进程'''（{{lang-en|Parent Process}}）指已创建一个或多个[[子进程|子进程]]的[[进程|进程]]。

==UNIX==
在[[UNIX|UNIX]]里，除了[[Linux启动进程|进程0]]（即PID=0的交换进程，''Swapper Process''）以外的所有进程都是由其他进程使用[[系统调用|系统调用]][[Fork_(操作系统)|fork]]创建的，这里调用fork创建新进程的进程即为父进程，而相对应的为其创建出的进程则为子进程，因而除了进程0以外的进程都只有一个父进程，但一个进程可以有多个子进程。

[[核心|操作系统内核]]以[[进程标识符|进程标识符]]（''Process Identifier''，即PID）来识别进程。进程0是系统[[引导|引导]]时创建的一个特殊进程，在其调用fork创建出一个子进程（即PID=1的进程1，又称[[init|init]]）后，进程0就转为[[调度|交换进程]]（有时也被称为{{Tsl|en|Idle (CPU)|Idle (CPU)|空闲进程}}），而进程1（init进程）就是系统里其他所有进程的祖先。

==僵尸进程与孤儿进程==
当一个子进程结束运行（一般是调用{{Tsl|en|exit (operating system)|exit (操作系统)|exit}}、运行时发生[[致命错误|致命错误]]或收到终止[[信号_(计算机科学)|信号]]所导致）时，子进程的[[退出状态|退出状态]]（返回值）会回报给操作系统，系统则以[[SIGCHLD|SIGCHLD]]信号将子进程被结束的事件告知父进程，此时子进程的[[进程控制块|进程控制块]]（PCB）仍驻留在内存中。一般来说，收到SIGCHLD后，父进程会使用[[Wait_(系统调用)|wait]]系统调用以取得子进程的退出状态，然后内核就可以从内存中释放已结束的子进程的PCB；而如若父进程没有这么做的话，子进程的PCB就会一直驻留在内存中，也即成为[[僵尸进程|僵尸进程]]。

[[孤儿进程|孤儿进程]]则是指父进程结束后仍在运行的子进程。在[[类UNIX系统|类UNIX系统]]中，孤儿进程一般会被init进程所“收养”，成为init的子进程。

为避免产生僵尸进程，实际应用中一般采取的方式是：
#将父进程中对SIGCHLD信号的处理函数设为SIG_IGN（忽略信号）；
#fork两次并杀死一级子进程，令二级子进程成为孤儿进程而被init所“收养”、清理<ref>[[UNIX环境高级编程|UNIX环境高级编程]]（''Advanced Programming in the UNIX Environment''），[[理查德·史蒂文斯|理查德·史蒂文斯]]著，1992，ISBN 0-201-56317-7</ref>。

==Linux==

在[[Linux内核|Linux内核]]中，进程和[[POSIX线程|POSIX线程]]有着相当微小的区别，父进程的定义也与UNIX不尽相同。Linux有两种父进程，分别称为（形式）父进程与实际父进程，对于一个子进程来说，其父进程是在子进程结束时收取SIGCHLD信号的进程，而实际父进程则是在[[线程|多线程]]环境里实际创建该子进程的进程。对于普通进程来说，父进程与实际父进程是同一个进程，但对于一个以进程形式存在的POSIX线程，父进程和实际父进程可能是不一样的<ref>{{Cite web |url=http://sunnyeves.blogspot.com/2010/09/sneak-peek-into-linux-kernel-chapter-2.html |title=存档副本 |accessdate=2011-11-26 |archive-date=2012-02-15 |archive-url=https://web.archive.org/web/20120215060749/http://sunnyeves.blogspot.com/2010/09/sneak-peek-into-linux-kernel-chapter-2.html |dead-url=no }}</ref>。

==参考资料==
{{reflist}}

==参见==

{{FOLDOC}}

[[Category:操作系统|Category:操作系统]]
[[Category:进程|Category:进程]]
[[Category:计算机科学|Category:计算机科学]]