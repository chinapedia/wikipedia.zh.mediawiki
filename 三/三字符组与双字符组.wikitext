{{unreferenced|time=2017-03-20T08:22:42+00:00}}
'''三字符组'''（trigraph）与'''双字符组'''（Digraph）是程序设计语言（如[[C语言|C语言]]）中3个或者2个字符的序列，在[[编译器|编译器]]预扫描源程序时被替换为单个字符。以解决某些键盘不能输入某些编程必须的字符问题。

==缘起==
C语言的源程序的最低必须的字符集是基于7位[[ASCII码|ASCII码]]字符集，是[[ISO/IEC_646|ISO 646-1983 Invariant Code Set]]的一个超集。ISO 646最初是1972年颁布的一项国际化的7位ASCII标准，规定了12个字符所对应的[[码位|码位]]保持对各国标准开放：<code># $ @ [ \ ] ^ ` { | } ~ </code> 。

因为法国标准AFNOR NF Z 62010-1982把码位0x7c（ASCII码的 | ）定义为ù，用法文键盘就难以输入C语言的''位或运算符'' | ；码位0x7e（ASCII码的 ～）定义为 ¨ （即[[分音符|分音符]]），法文键盘就难以输入C语言的''位非运算符'' ～ 。

加拿大法语标准CSA Z243.4-1985中把码位0x5e（ASCII码的 ^ ）在定义为É，导致难以输入C语言的''异或运算符'' ^ 。

==三字符组==
为解决上述的C语言源代码输入问题，C语言标准规定预处理器（C preprocessor）在扫描处理C语言源文件时，替换下述的3字符出现为1个字符

{|class="wikitable"
|-
! 三字符组 !! 替换为
|-
| <code>??=</code> || <code>#</code>
|-
| <code>??/</code> || <code>\</code>
|-
| <code>??'</code> || <code>^</code>
|-
| <code>??(</code> || <code><nowiki>[</nowiki></code>
|-
| <code>??)</code> || <code><nowiki>]</nowiki></code>
|-
| <code>??!</code> || <code><nowiki>|</nowiki></code>
|-
| <code>??<</code> || <code>{</code>
|-
| <code>??></code> || <code>}</code>
|-
| <code>??-</code> || <code>~</code>
|}

如果希望在源程序中有两个连续的问号，且不希望被预处理器替换，这种情况出现在字符常量、字符串字面值或者是程序注释中，可选办法是用字符串的自动连接：<code>"...?""?..."</code>或者[[转义序列|转义序列]]：<code>"...?\?..."</code>。
   
从[[Microsoft_Visual_C++|Microsoft Visual C++]] 2010版开始，该编译器默认不再自动替换三字符组。如果需要使用三字符组替换（如为了兼容古老的软件代码），需要设置编译器命令行选项/Zc:trigraphs

[[g++|g++]]仍默认支持三字符组，但会给出编译警告。

==双字符组==
1994年公布了一项C语言标准的修正案，引入了更具有可读性的5个双字符组。这也包括进了[[C99|C99]]标准。

{|class="wikitable"
|-
! 双字符组 !! 替换为
|-
| <code><:</code> || <code>[</code>
|-
| <code>:></code> || <code>]</code>
|-
| <code><%</code> || <code>{</code>
|-
| <code>%></code> || <code>}</code>
|-
| <code>%:</code> || <code>#</code>
|}

不同于三字符组在源文件的任何出现都会被预处理器替换，双字符如果出现在字符串字面值（quoted string）、字符常量、程序注释中将不被替换。双字符组的替换发生在编译器对源程序的tokenization阶段（即识别出关键字、标识符等，类似于自然语言的“断词”），仅当双字符组作为一个token或者token的组成部分时（如<code>%:%:</code>被替换为预处理运算符<code>##</code>），双字符组才被替换为单字符。

g++支持上述双字符组替换。但[[Microsoft_Visual_C++|Microsoft Visual C++]]不支持双字符组替换。
==C++== 
C++标准支持C语言的三字符组与双字符组（包括C99中的增补）。C++自身还提供了下述内置的关键字：
{|class="wikitable"
|-
! 关键字 !! 等价于
|-
| <syntaxhighlight lang="c++">and</syntaxhighlight> || <syntaxhighlight lang="c++">&&</syntaxhighlight>
|-
| <syntaxhighlight lang="c++">bitor</syntaxhighlight> || <syntaxhighlight lang="c++">|</syntaxhighlight>
|-
| <syntaxhighlight lang="c++">or</syntaxhighlight> || <syntaxhighlight lang="c++">||</syntaxhighlight>
|-
| <syntaxhighlight lang="c++">xor</syntaxhighlight> || <syntaxhighlight lang="c++">^</syntaxhighlight>
|-
| <syntaxhighlight lang="c++">compl</syntaxhighlight> || <syntaxhighlight lang="c++">~</syntaxhighlight>
|-
| <syntaxhighlight lang="c++">bitand</syntaxhighlight>|| <syntaxhighlight lang="c++">&</syntaxhighlight>
|-
| <syntaxhighlight lang="c++">and_eq</syntaxhighlight> || <syntaxhighlight lang="c++">&=</syntaxhighlight>
|-
| <syntaxhighlight lang="c++">or_eq</syntaxhighlight> || <syntaxhighlight lang="c++">|=</syntaxhighlight>
|-
| <syntaxhighlight lang="c++">xor_eq</syntaxhighlight> || <syntaxhighlight lang="c++">^=</syntaxhighlight>
|-
| <syntaxhighlight lang="c++">not</syntaxhighlight> || <syntaxhighlight lang="c++">!</syntaxhighlight>
|-
| <syntaxhighlight lang="c++">not_eq</syntaxhighlight> || <syntaxhighlight lang="c++">!=</syntaxhighlight>
|} 

[[Microsoft_Visual_C++|Microsoft Visual C++]]编译器要求如果使用上述关键字，必须包含头文件[[ciso646|ciso646]]，否则编译报错。如“ error C2065: 'not' : undeclared identifier”。而[[g++|g++]]编译器就不要求包含头文件[[ciso646|ciso646]]。
[[Category:C语言|Category:C语言]]
[[Category:C++|Category:C++]]