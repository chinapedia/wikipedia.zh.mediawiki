{{noteTA
| G1= IT
| 1= zh-tw:設定運算子; zh-cn:赋值运算符; zh-hk:設定運算子; zh-mo:赋值运算符; zh-sg:赋值运算符;
| 2= zh-tw:運算子; zh-cn:运算符; zh-hk:運算子; zh-mo:运算符; zh-sg:运算符;
| 3= zh-tw:建構子; zh-cn:构造函数; zh-hk:建構子; zh-mo:构造函数; zh-sg:构造函数;
| 4= zh-tw:解構子; zh-cn:析构函数; zh-hk:解構子; zh-mo:析构函数; zh-sg:析构函数;
| 5= zh-tw:類別 (電腦科學); zh-cn:类 (计算机科学); zh-hk:類別 (電腦科學); zh-mo:类 (计算机科学); zh-sg:类 (计算机科学);
| 6= zh-tw:類別; zh-cn:类; zh-hk:類別; zh-mo:类; zh-sg:类;
| 7= zh-tw:程式設計師; zh-cn:程序员; zh-hk:程式設計師; zh-mo:程序员; zh-sg:程序员;
| 8= zh-tw:隱性產生; zh-cn:隐式生成; zh-hk:隱性產生; zh-mo:隐式生成; zh-sg:隐式生成;
| 9= zh-tw:顯性; zh-cn:显式; zh-hk:顯性; zh-mo:显式; zh-sg:显式;
|10= zh-cn:参见; zh-hk:相關條目; zh-mo:相關條目; zh-my:参见; zh-sg:参见; zh-tw:相關條目;
}}
'''三法則'''（{{Lang-en|Rule of Three}}）在[[C++|C++]]裡，它是一個以設計的基本原則而制定的定律。它的要求是，假如[[类_(计算机科学)|类]]有明顯{{translink|en|Declaration (computer programming)|宣告 (電腦科學)|定義}}下列其中一個成員函式，那麼[[程序员|程序员]]必須寫入其他兩個[[方法_(電腦科學)|成員函式]]到類別內，也就是說下列三個成員函式缺一不可{{notetag|三法則，{{lang-en|Rule of Three}}；三大定律，{{lang-en|the Law of The Big Three}}；大三律，{{lang-en|The Big Three}}}}
<ref name=stroustrup>{{cite book
| last = Stroustrup
| first = Bjarne
| authorlink = 比雅尼·斯特劳斯特鲁普
| title = The C++ Programming Language
| edition = 3
| publisher = Addison-Wesley
| date = 2000
| pages = 283–4
| isbn = 978-0201700732
| ref = stroustrup }}</ref>。
*[[解構子|解構子]]
*[[複製建構子|複製建構子]]
*[[設定運算子_(C++)|設定運算子 (C++)]]
上述三個函式是{{translink|en|Special member functions|特別的成員函式}}，假如程式設計師沒有自行定義或宣告這三個函式，編譯器會自動地建立他們並且編譯到應用程式內。然而，如果程式設計師僅定義其中一個，其餘兩個函式仍然會由編譯器自動產生，這種混雜的情況非常容易產生程式設計師難以預期的錯誤。三法則的存在，正是提醒程式設計師避免那樣的陷阱。
三法則這個專有名詞是由馬歇爾·克來恩於1991年創立的{{notetag|馬歇爾·克來恩，{{lang-en|Marshall Cline}}}}<ref name="ddj_koenig">{{cite web|url=http://www.ddj.com/cpp/184401400|title=C++ Made Easier: The Rule of Three|last=Koenig|first=Andrew|coauthors=Barbara E. Moo|date=2001-06-01|publisher=''[[Dr._Dobb's_Journal|Dr. Dobb's Journal]]''|accessdate=2009-09-08}}</ref>。

它的修正版本是，假如類別有用到[[RAII|RAII]]，可以不必定義解構子，也就是所謂的二大定律{{notetag|二大定律，{{lang-en|The Law of The Big Two}}}}<ref>{{cite web
| last = Karlsson
| first = Bjorn
| coauthors = Wilson, Matthew
| title = The Law of the Big Two
| work = The C++ Source
| publisher = Artima
| date = 2004-10-01
| url = http://www.artima.com/cppsource/bigtwo.html
| accessdate = 2008-01-22
| archive-date = 2012-03-17
| archive-url = https://www.webcitation.org/66EhTDAwk?url=http://www.artima.com/cppsource/bigtwo.html
| dead-url = no
}}</ref>。
因為隱性產生的建構子與設定運算子可以很容易地複製類別內所有的資料成員<ref>{{cite book
| title = The C++ Programming Language
| author = [[比雅尼·史特勞斯特魯普|比雅尼·史特勞斯特魯普]]
| pages = 第 271 頁 }}</ref>，當資料成員是指標型態時，指標位址會隨著類別而跟著被複製{{notetag|隱性產生，{{lang-en|implicitly-generated}}，由編譯器自動產生}}。要注意的是，直接地複製指標位址是一項非常危險的動作，所以只要類別有封裝指標型態的資料結構，或是類別有封裝外部參照的資料成員，例如指標型態的資料成員，程式設計師應該為此而定義顯性的複製建構子與設定運算子{{notetag|顯性，{{lang-en|explicit}}，由程式設計師來編寫清楚明確的定義}}。

== 五法則 ==
[[C++11|C++11]]新增兩個法則，稱為'''五法则'''：{{notetag|五法则，{{lang-en|Rule of Five}}}}
*解構子
*複製建構子
*設定運算子
*移動建構子{{notetag|移動建構子，{{lang-en|move constructor}}}}
*移動复制运算符{{notetag|移動指定運算子，{{lang-en|move assignment operator}}}}

== 範例 ==
{| class="wikitable" border="1"
|+ C/C++ 原始碼三法則範例
! [[头文件|头文件]] header.h !! [[主函式|主函式]] main.cpp
|- valign = "top"
| <syntaxhighlight lang="cpp">
#ifndef _HEADER_H_
#define _HEADER_H_
//
// 判斷是否為微軟編譯器
#ifndef _MSC_VER
#undef NULL
#define NULL 0
#endif
//
#include <iostream>
#include <limits>
//
using std::cin;
using std::cout;
using std::endl;
//
// 類別：方塊
class CCube
{
public:
	// 建構子
	CCube();
	// 含有參數的建構子
	CCube(double length, double width, double height);
	// 三法則：解構子
	~CCube();
	// 三法則：複製建構子
	CCube(const CCube &sample);
	// 三法則：設定運算子
	CCube& operator=(const CCube &sample);
	// 設定長寬高
 	void setLength(double length);
 	void setWidth(double width);
 	void setHeight(double height);
	// 取得長寬高
	double getLength() const;
	double getWidth() const;
	double getHeight() const;
	// 計算體積
	double getVolume() const;
protected:
private:
	// 長寬高
	double m_Length;
	double m_Width;
	double m_Height;
};
//
void PAUSE(void);
//
#endif
</syntaxhighlight>
|| <syntaxhighlight lang="cpp">
#include"header.h"
//
// 判斷是否為微軟編譯器
#ifndef _MSC_VER
int
#else
void
#endif
main(int argc, char* argv[])
{
	// 方塊零
	CCube cube0(4.3, 5.2, 6.1);
	// 第一個方塊
	{
		cout << "=== No.1 cube ===" << endl;
		CCube cube1 = cube0;
		cout << "Volume of cube = " << cube1.getVolume() << endl;
	}
	// 第二個方塊
	{
		cout << "=== No.2 cube ===" << endl;
		CCube cube2;
		cube2 = cube0;
		cout << "Volume of cube = " << cube2.getVolume() << endl;
	}
	PAUSE();
	return
#ifndef _MSC_VER
		EXIT_SUCCESS
#endif
		;
}
</syntaxhighlight>
|-
! [[头文件|头文件]]實作 header.cpp !!
|- valign = "top"
| <syntaxhighlight lang="cpp">
#include "header.h"
//
void PAUSE(void)
{
	cin.clear();
	cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
	cout << "press any key to continue...";
	cin.get();
}
CCube::CCube()
{
	cout << "Constructor: CCube()" << endl;
	this->m_Length = 0.0;
	this->m_Width = 0.0;
	this->m_Height = 0.0;
}
CCube::CCube(double length, double width, double height)
{
	cout << "Constructor: CCube(length, width, height)" << endl;
	this->m_Length = length;
	this->m_Width = width;
	this->m_Height = height;
}
CCube::~CCube()
{
	cout << "Destructor: ~CCube()" << endl;
	this->m_Length = 0.0;
	this->m_Width = 0.0;
	this->m_Height = 0.0;
}
CCube::CCube(const CCube &sample)
{
	cout << "Copy constructor: CCube(const CCube &sample)" << endl;
	//
	// 保護：禁止設值給自己
	if (this != &sample)
	{
		this->m_Length = sample.m_Length;
		this->m_Width = sample.m_Width;
		this->m_Height = sample.m_Height;
	}
}
CCube& CCube::operator=(const CCube &sample)
{
	cout << "Assignment operator: operator=(const CCube &sample)" << endl;
	//
	// 保護：禁止設值給自己
	if (this != &sample)
	{
		this->m_Length = sample.m_Length;
		this->m_Width = sample.m_Width;
		this->m_Height = sample.m_Height;
	}
	return *this;
}
double CCube::getVolume() const
{
	return (this->m_Length * this->m_Width * this->m_Height);
}
</syntaxhighlight>
|
|}

== 注釋 ==
{{ReflistH|2}}
{{NoteFoot}}
{{ReflistF}}

== 參考資料 ==
{{Reflist|2}}

== 相關條目 ==
*[[C++類|C++類]]
*[[类_(计算机科学)|类 (计算机科学)]]

{{DEFAULTSORT:rule of three}}
[[Category:C++|Category:C++]]
[[Category:带有C++代码示例的条目|Category:带有C++代码示例的条目]]