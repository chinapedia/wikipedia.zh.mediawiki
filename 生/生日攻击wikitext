{{copyedit|time=2018-08-10T03:41:46+00:00}}
{{roughtranslation|time=2018-08-10T03:41:46+00:00}}
{{NoteTA
|G1 = IT
}}
'''生日攻击'''是一种[[密码学|密码学]][[密码分析|攻击手段]]，所利用的是[[概率论|概率论]]中[[生日問題|生日問題]]的[[数学|数学]]原理。这种攻击手段可用于滥用两个或多个集团之间的通信。此攻击依赖于在随机攻击中的高[[碰撞_(计算机科学)|碰撞]]概率和固定置换次数（[[鴿巢原理|鴿巢原理]]）。使用生日攻击，攻击者可在<math display="inline">\sqrt{2^n} = 2^{n / 2}</math>中找到[[散列函數|散列函數]]碰撞，<math display="inline">2^n</math>为{{tsl|en|preimage resistance|原像抗性|原像抗性}}安全性。然而，[[量子计算机|量子计算机]]可在<math display="inline">\sqrt[3]{2^n} = 2^{n / 3}</math>内进行生日攻击（虽然饱受争论<ref>{{cite web|url=http://cr.yp.to/hash/collisioncost-20090823.pdf|title=Cost analysis of hash collisions : Will quantum computers make SHARCS obsolete?|author=Daniel J. Bernstein|format=PDF|website=Cr.yp.to|accessdate=29 October 2017|archive-date=2017-08-25|archive-url=https://web.archive.org/web/20170825091116/https://cr.yp.to/hash/collisioncost-20090823.pdf|dead-url=no}}</ref>）。<ref>{{cite web|url=https://link.springer.com/chapter/10.1007/BFb0054319|title=Quantum cryptanalysis of hash and claw-free functions|first1=Gilles|last1=Brassard|first2=Peter|last2=HØyer|first3=Alain|last3=Tapp|date=20 April 1998|publisher=Springer, Berlin, Heidelberg|pages=163–169|accessdate=29 October 2017|doi=10.1007/BFb0054319|archive-date=2020-08-08|archive-url=https://web.archive.org/web/20200808160437/https://link.springer.com/chapter/10.1007/BFb0054319|dead-url=no}}</ref>


==理解问题==
{{Main article|生日問題}}
举个例子，想象一位老师问一个有30名学生的班级（n = 30）每个人的生日在哪一天（为简便，此处省略[[闰年|闰年]]）以确定是否有两个学生同一天生日（对应[[碰撞_(计算机科学)|碰撞]]	）。从直觉角度考虑，機率看起来很小。若老师选择特定日期（例如9月16日），则至少有一名学生在那天出生的概率是<math>1 - (364/365)^{30}</math>，约为7.9%。但是，与我们的直觉相反的是，至少一名学生和另外''任意''一名学生有着相同生日的概率大约为70.63%（n = 30时），从方程 <math>1-\frac{365!}{(365-n)!\cdot 365^n}</math>中可看出。<ref>{{cite web|title=Math Forum: Ask Dr. Math FAQ: The Birthday Problem|url=http://mathforum.org/dr.math/faq/faq.birthdayprob.html|website=Mathforum.org|accessdate=29 October 2017|archive-date=2013-07-22|archive-url=https://www.webcitation.org/6IIFYlSEY?url=http://mathforum.org/dr.math/faq/faq.birthdayprob.html|dead-url=no}}</ref>

==数学==
给定函数<math>f</math>，攻击目标是找到符合<math>f(x_{1}) = f(x_{2})</math>的两个不同输入<math>x_{1}, x_{2}</math>。这一对<math>x_{1}, x_{2}</math>被称之为[[碰撞_(计算机科学)|碰撞]]。用于找到一对碰撞的方法仅需要评估函数<math>f</math>的随机或伪随机选择的不同输入值，直到攻击者找到相同的结果至少两次为止。由于生日问题，这种方法的效率不高。明确的说，若[[函数|函数]]<math>f(x)</math>所拥有的<math>H</math>的不同输出有着相同可能性且<math>H</math>足够大的话，我们将期望在评估函数平均大约<math>1.25\sqrt{H}</math>个不同个自变量后才能得到符合<math>f(x_{1}) = f(x_{2})</math>的不同一对自变量<math>x_{1}</math>和<math>x_{2}</math>。

思考下面一个实验。从下列的''H''数集中我们将随机均匀地选择''n''个值，因此将允许重复。使''p''（''n''; ''H''）成为此实验中至少一个值被选择多于一次的概率。则概率可估计为

: <math> p(n;H) \approx 1 - e^{-n(n-1)/(2H)} \approx 1-e^{-n^2/(2H)}</math>

使''n''（''p''; ''H''）为我们将选择的最小数值，这种情况下找到碰撞的概率至少为 ''p''。通过颠倒上方的表达式，我们得到了下列估计公式：

: <math>n(p;H)\approx \sqrt{2H\ln\frac{1}{1-p}}</math>

将碰撞概率设为0.5我们将得到

: <math>n(0.5;H) \approx 1.1774 \sqrt H</math>

使''Q''（''H''）成为我们在寻找首次碰撞前所期望的值的数量。此数量可通过下列公式进行估计：

: <math>Q(H)\approx \sqrt{\frac{\pi}{2}H}</math>

举个例子，若使用64位哈希，则估计将有1.8 × 10<sup>19</sup>个不同的输出。若这些输出均可能发生（理想情况下），则攻击者“仅仅”需要约50亿次尝试（5.38 × 10<sup>9</sup>）就能通过暴力攻击生成碰撞。此值被称为 '''生日界限'''（birthday bound）<ref>请参阅[[上界和下界|上界和下界]]。</ref>而对于''n''位密码则需要2<sup>''n''/2</sup>次。<ref>{{Cite journal
  | author = Jacques Patarin, Audrey Montreuil
  | title = Benes and Butterfly schemes revisited
  | version = 
  | publisher = Université de Versailles
  | year = 2005
  | url = http://eprint.iacr.org/2005/004
  | format = [[PostScript|PostScript]], [[可移植文档格式|可移植文档格式]]
  | accessdate = 2007-03-15
  | archive-date = 2007-09-29
  | archive-url = https://web.archive.org/web/20070929092142/http://eprint.iacr.org/2005/004
  | dead-url = no
  }}
<!-- Replace with a better definition of the birthday bound if you find some please. --></ref>下列举出其他例子
<!-- If this table is made any bigger it will cause horizontal scroll on 1024x768 screens -->
:{| class="wikitable" style="white-space:nowrap; text-align:center;"
|-
! rowspan="2"  style="background:lightgrey;" | 位数
! rowspan="2"  style="background:lightgrey;" | 可能输出（H）
! colspan="10" style="background:lightgrey;" | 期望的随机碰撞可能性<br>（2安全系数）（p）
|- style="background:lightgrey;"
! 10<sup>−18</sup>
! 10<sup>−15</sup>
! 10<sup>−12</sup>
! 10<sup>−9</sup>
! 10<sup>−6</sup>
! 0.1%
! 1%
! 25%
! 50%
! 75%
|-
| style="background:lightgrey;" | 16
| style="background:lightgrey;" | 2<sup>16</sup> (~6.5 x 10<sup>4</sup>)
| <2
| <2
| <2
| <2
| <2
| 11
| 36
| 190
| 300
| 430
|-
| style="background:lightgrey;" | 32
| style="background:lightgrey;" | 2<sup>32</sup> （~4.3 × 10<sup>9</sup>）
| <2
| <2
| <2
| 3
| 93
| 2900
| 9300
| 50,000
| 77,000
| 110,000
|-
| style="background:lightgrey;" | 64
| style="background:lightgrey;" | 2<sup>64</sup> （~1.8 × 10<sup>19</sup>）
| 6
| 190
| 6100
| 190,000
| 6,100,000
| 1.9 × 10<sup>8</sup>
| 6.1 × 10<sup>8</sup>
| 3.3 × 10<sup>9</sup>
| 5.1 × 10<sup>9</sup>
| 7.2 × 10<sup>9</sup>
|-
| style="background:lightgrey;" | 128
| style="background:lightgrey;" | 2<sup>128</sup> （~3.4 × 10<sup>38</sup>）
| 2.6 × 10<sup>10</sup>
| 8.2 × 10<sup>11</sup>
| 2.6 × 10<sup>13</sup>
| 8.2 × 10<sup>14</sup>
| 2.6 × 10<sup>16</sup>
| 8.3 × 10<sup>17</sup>
| 2.6 × 10<sup>18</sup>
| 1.4 × 10<sup>19</sup>
| 2.2 × 10<sup>19</sup>
| 3.1 × 10<sup>19</sup>
|-
| style="background:lightgrey;" | 256
| style="background:lightgrey;" | 2<sup>256</sup> （~1.2 × 10<sup>77</sup>）
| 4.8 × 10<sup>29</sup>
| 1.5 × 10<sup>31</sup>
| 4.8 × 10<sup>32</sup>
| 1.5 × 10<sup>34</sup>
| 4.8 × 10<sup>35</sup>
| 1.5 × 10<sup>37</sup>
| 4.8 × 10<sup>37</sup>
| 2.6 × 10<sup>38</sup>
| 4.0 × 10<sup>38</sup>
| 5.7 × 10<sup>38</sup>
|-
| style="background:lightgrey;" | 384
| style="background:lightgrey;" | 2<sup>384</sup> （~3.9 × 10<sup>115</sup>）
| 8.9 × 10<sup>48</sup>
| 2.8 × 10<sup>50</sup>
| 8.9 × 10<sup>51</sup>
| 2.8 × 10<sup>53</sup>
| 8.9 × 10<sup>54</sup>
| 2.8 × 10<sup>56</sup>
| 8.9 × 10<sup>56</sup>
| 4.8 × 10<sup>57</sup>
| 7.4 × 10<sup>57</sup>
| 1.0 × 10<sup>58</sup>
|-
| style="background:lightgrey;" | 512
| style="background:lightgrey;" | 2<sup>512</sup> （~1.3 × 10<sup>154</sup>）
| 1.6 × 10<sup>68</sup>
| 5.2 × 10<sup>69</sup>
| 1.6 × 10<sup>71</sup>
| 5.2 × 10<sup>72</sup>
| 1.6 × 10<sup>74</sup>
| 5.2 × 10<sup>75</sup>
| 1.6 × 10<sup>76</sup>
| 8.8 × 10<sup>76</sup>
| 1.4 × 10<sup>77</sup>
| 1.9 × 10<sup>77</sup>
|}
:表格展示了需要达到给定成功可能性的哈希数量''n''(''p'')，且假设所有哈希均有相同概率。为了比较，通常一块硬盘的不可修正比特错误率为10<sup>−18</sup>至10<sup>−15</sup>。<ref>{{cite arxiv|title=Empirical Measurements of Disk Failure Rates and Error Rates|first1=Jim|last1=Gray|first2=Catharine|last2=van Ingen|date=25 January 2007|eprint=cs/0701166}}</ref>理论上说，使用128位的[[MD5|MD5]]哈希或[[通用唯一识别码|通用唯一识别码]]将在8200亿份文档时得到破解，即使它们的可能输出还要更多。''

显而易见，若函数的输出不平均分布，碰撞则可能将被更快找到。哈希函数的“平衡”概念量化了其能抵御生日攻击（攻击平均的密钥分布）的次数。然而，确定哈希函数的平衡将需要计算所有输入，因此这种方法对于诸如MD及SHA系的流行哈希函数是不切实际的。<ref>{{Cite web |url=http://citeseer.ist.psu.edu/bellare02hash.html |title=Archived copy |access-date=2006-05-02 |archive-url=https://web.archive.org/web/20080223163847/http://citeseer.ist.psu.edu/bellare02hash.html |archive-date=2008-02-23 |dead-url=yes |df= }}</ref>
当计算<math>n(p;H)</math>中的子表达式<math>\ln\frac{1}{1-p}</math>翻译到常见的编程语言如<code>log(1/(1-p))</code>下，公式由于{{tsl|en|loss of significance|有效位丢失|有效位丢失}}对较小的<math>p</math>的计算精度不高。例如，当<code>log1p</code>（如[[C99|C99]]中一样）可用时，应直接使用可达到相同效果的表达式<code>-log1p(-p)</code>。<ref>{{cite web|title=Compute log(1+x) accurately for small values of x|url=http://www.mathworks.com/help/techdoc/ref/log1p.html|website=Mathworks.com|accessdate=29 October 2017|archive-date=2012-08-30|archive-url=https://web.archive.org/web/20120830094325/http://www.mathworks.com/help/techdoc/ref/log1p.html|dead-url=no}}</ref>  If this is not done, the first column of the above table is computed as zero, and several items in the second column do not have even one correct significant digit.

===源码示例===
下列是能准确生成上方表格中大多数数值的[[Python|Python]]函数：
<syntaxhighlight lang="python">
from math import log1p, sqrt

def birthday(probability_exponent, bits):
    probability = 10.0**probability_exponent
    outputs = 2.0**bits
    return sqrt(2.0*outputs*-log1p(-probability))
</syntaxhighlight>
若代码保存在命名为<code>birthday.py</code>的文件中，您可和下面的例子一样交互运行此程序：
<syntaxhighlight lang="console">
$ python -i birthday.py
>>> birthday(-15, 128)
824963474247.1193
>>> birthday(-6, 32)
92.68192319417072
</syntaxhighlight>

===简单估计===
一项[[經驗法則|經驗法則]]可适用于此关系中的[[心算|心算]]流程

:<math>p(n) \approx {n^2 \over 2H}</math>

可改写为

:<math>H \approx {n^2 \over 2p(n)}</math>.

或

:<math>n \approx \sqrt { 2H \times p(n)}</math>.

此公式在概率小于等于0.5时有效。

此近似方案在使用指数时可轻易使用。例如，假设您正构建32位哈希（<math>H = 2^{32}</math>）且希望碰撞概率为100万分之一（<math> p \approx 2^{-20} </math>），则最多我们需要多少份文档？

:<math>n \approx \sqrt { 2 \times 2^{32} \times 2^{-20}} = \sqrt { 2^{1+32-20} } = \sqrt { 2^{13} } = 2^{6.5} \approx 90.5 </math>

即与正确答案93次近似。

==数字签名敏感度==
[[數位簽章|數位簽章]]可对生日攻击十分敏感。设想一条被首次计算<math>f(m)</math>（<math>f</math>为[[密碼雜湊函數|密碼雜湊函數]]）所签名的信息，且随后又使用了一些密钥来签名<math>f(m)</math>。假设[[愛麗絲與鮑伯|愛麗絲與鮑伯]]牵涉到签名[[詐騙|詐騙]]合同。马洛里准备了一份正常合同<math>m</math>和一份伪造合同<math>m'</math>。馬洛里随后发现<math>m</math>所在的位置数可在不改变原意的情况下（如插入逗号、清空行、在句后增加一两个空格、替换同义词等等）被更改。通过结合这些更改，她可新建诸多<math>m</math>的变体且均为正常合同。

相似情况下，马洛里也为伪造合同<math>m'</math>新建了诸多变体。她随后应用哈希函数到所有变体直到她找到与正常合同有着相同哈希值<math>f(m) = f(m')</math>的伪造合同位置。她随后将正常合同带给鲍勃签名。在鲍勃签名完后，马洛里将签名取下并依附到伪造签名上。此签名“证实了”鲍勃签署了伪造合同。

此例中，攻击概率与原始的生日问题稍有不同，因为马洛里将在寻找两份具有相同哈希的正常合同与伪造合同时将一无所获。马洛里的策略是生成一份伪造和一份正常的合同。生日问题公式适用于<math>n</math>为合同对数的情况下。但马洛里所生成的哈希数实际上为<math>2n</math>。

为避免这种攻击，用于签名方案的哈希函数的输出长度应够大以从计算角度防止生日攻击。换言之，位数应为防止普通[[暴力破解法|暴力破解]]所需位数的两倍。

除了使用更大的位数长度外，签名者（鲍勃）可以在签名前做出一些随机且无害的更改，并且在自己的手上留下一份合同副本以在法庭上展示出他的签名与正常合同上的匹配，而不匹配伪造合同。

[[离散对数的波拉德ρ算法|离散对数的波拉德ρ算法]]是使用生日攻击以计算[[离散对数|离散对数]]的算法。

==另请参阅==
* {{tsl|en|Collision attack||碰撞攻击}}
* [[中途相遇攻擊|中途相遇攻擊]]

==脚注==
{{Reflist}}

==参考文献==
* {{tsl|en|Mihir Bellare||米希尔·贝拉尔}}，《等一下：哈希函数平衡及其对生日攻击的影响》（Tadayoshi Kohno: Hash Function Balance and Its Impact on Birthday Attacks） {{tsl|en|EUROCRYPT||EUROCRYPT}} 2004: pp401–418
* 《应用密码学》, 第二版。（Applied Cryptography, 2nd ed.） [[布魯斯·施奈爾|布魯斯·施奈爾]]所著

==外部链接==
* [https://web.archive.org/web/20040913080209/http://www.rsasecurity.com/rsalabs/node.asp?id=2182 "What is a digital signature and what is authentication?"] 来自{{tsl|en|RSA (security firm)||RSA安全}}加密的[[常見問題集|常見問題集]]。
* [http://x5.net/faqs/crypto/q95.html "Birthday Attack"] {{Wayback|url=http://x5.net/faqs/crypto/q95.html |date=20210421105641 }} X5网络加密问答

{{cryptography navbox | hash}}

[[Category:密码分析|Category:密码分析]]

[[de:Kollisionsangriff#Geburtstagsangriff|de:Kollisionsangriff#Geburtstagsangriff]]