{{citation style|time=2018-06-10T08:52:43+00:00}}
{{Expand language|en}}
{{noteTA
|G1=IT
|T=zh-cn:跨域资源共享; zh-tw:跨來源資源共享; zh-hk:跨來源資源共享;
|1=zh-cn:跨域资源共享; zh-tw:跨來源資源共享; zh-hk:跨來源資源共享;
}}
'''跨域资源共享'''（{{lang-en|Cross-origin resource sharing}}，缩写：{{Abbr|CORS|Cross-origin resource sharing}}），用于让网页的受限资源能够被其他[[域名|域名]]的页面访问的一种机制。<ref name="mozhacks_cors2">{{cite web|title=cross-site xmlhttprequest with CORS ✩ Mozilla Hacks – the Web developer blog|url=https://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/|accessdate=2012-07-05|author=on July 6, 2009 by Arun Ranganathan|date=2009-07-06|publisher=Hacks.mozilla.org|archive-date=2019-09-11|archive-url=https://web.archive.org/web/20190911051748/https://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/|dead-url=no}}</ref>

通过该机制，页面能够自由地使用不同源（{{Lang-en|cross-origin}}）的图片、样式、脚本、iframes以及视频。<ref>{{cite web|title=Same-origin policy / Cross-origin network access|url=https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Cross-origin_network_access|publisher=MDN|accessdate=2020-01-17|archive-date=2017-03-12|archive-url=https://web.archive.org/web/20170312160714/https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Cross-origin_network_access|dead-url=yes}}</ref>一些跨'''域'''的请求（特别是Ajax）常常会被同源策略（{{Lang-en|Same-origin policy}}）所禁止。跨源资源共享定义了一种方式，为的是浏览器和服务器之间能互相确认是否足够安全以至于能使用跨源请求（{{Lang-en|cross-origin requests}}）。<ref name="nczonline1">{{cite web|title=Cross-domain Ajax with Cross-Origin Resource Sharing|url=http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/|accessdate=2012-07-05|date=|publisher=NCZOnline|archive-date=2016-04-29|archive-url=https://web.archive.org/web/20160429013208/https://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/|dead-url=no}}</ref>比起纯粹的同源请求，这将更为自由和功能性的（functionality），但比纯粹的跨源请求更为安全。

跨域资源共享是一份瀏覽器技術的規範，提供了 Web 服務從不同網域傳來[[沙盒_(電腦安全)|沙盒]]腳本的方法，以避開瀏覽器的[[同源策略|同源策略]]<ref name="mozhacks_cors" />。

== 工作原理 ==
跨域资源共享标准描述了，新的HTTP头部在浏览器有权限的时候，应该以如何的形式发送请求到远程URLs。虽然服务器会有一些校验和认证，但是浏览器有责任去支持这些头部以及增加相关的限制。

对于能够修改数据的Ajax和HTTP请求方法（特别是 <code>GET</code> 以外的 HTTP 请求，或者搭配某些 MIME 类型的 <code>POST</code> 请求），浏览器必须首先使用 <code>OPTIONS</code> 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨源请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。<ref>{{Cite web|title=HTTP访问控制（CORS）|url=https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS|accessdate=2020-01-17|work=MDN Web 文档|language=zh|archive-date=2020-01-14|archive-url=https://web.archive.org/web/20200114095236/https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS|dead-url=no}}</ref>

== 瀏覽器支援 ==

擁有以下渲染引擎的瀏覽器都支援 CORS：
* [[Gecko|Gecko]] 1.9.1（Firefox 3.5<ref name='mozhacks_cors'>{{cite web|url=https://developer.mozilla.org/En/HTTP_access_control|title=HTTP access control (CORS)|work=Mozilla Developer Network|access-date=2011-06-28|archive-url=https://web.archive.org/web/20100527153021/https://developer.mozilla.org/En/HTTP_access_control|archive-date=2010-05-27|dead-url=yes}}</ref>、SeaMonkey 2.0<ref name='gecko_vers'>{{cite web|url=https://developer.mozilla.org/en/Gecko|title=Gecko|work=Mozilla Developer Network|accessdate=2011-06-28|archive-date=2012-08-03|archive-url=https://web.archive.org/web/20120803092112/https://developer.mozilla.org/en/Gecko|dead-url=no}}</ref>）以上
* [[WebKit|WebKit]]（未確認最早版本，Safari 4 以上、Chrome 3 以上，可能早些）
* [[Trident|MSHTML/Trident 4.0]]（Internet Explorer 8）由 XDomainRequest 物件提供部份支援<ref name='mozhacks_cors' />

已知以下瀏覽器不支援 CORS：
* 至 [[Opera|Opera]] 10.61 為止 Opera 未實作 CORS<ref>{{cite web |url=http://dev.opera.com/forums/topic/693452 |title=存档副本 |accessdate=2011-06-28 |deadurl=yes |archiveurl=https://web.archive.org/web/20110717055845/http://dev.opera.com/forums/topic/693452 |archivedate=2011-07-17 }}</ref>。
* [[Carmino|Carmino]] 2.0.x 系列未實作 CORS，因為這些版本建構在 Gecko 1.9.0 之上<ref>{{cite web|url=http://forums-test.mozillazine.org/viewtopic.php?f=12&t=1579855|title=HTTP Access Control in Camino • mozillaZine Forums|publisher=|accessdate=2011-06-28|archive-date=2016-03-03|archive-url=https://web.archive.org/web/20160303184907/http://forums-test.mozillazine.org/viewtopic.php?f=12&t=1579855|dead-url=no}}</ref>。
* [[Arora|Arora]] 0.10.2 有 WebKit 的 CORS 相關 API，但是若使用跨來源要求會失敗<ref>{{cite web |url=http://code.google.com/p/arora/issues/detail?id=904 |title=存档副本 |accessdate=2011-06-28 |deadurl=yes |archiveurl=https://web.archive.org/web/20121109035746/http://code.google.com/p/arora/issues/detail?id=904 |archivedate=2012-11-09 }}</ref>。

== 歷史 ==

[[Tellme_Networks|Tellme Networks]] 的馬特·奧什里（Matt Oshry）、布拉德·波特（Brad Porter）與麥克·波德爾（Michael Bodell）於 2004 年 3 月提案將跨來源支援加入 [[VoiceXML|VoiceXML]] 2.1<ref>{{cite web|url=http://www.w3.org/TR/2004/WD-voicexml21-20040323/|title=Voice Extensible Markup Language (VoiceXML) 2.1|publisher=|accessdate=2011-06-28|archive-date=2016-09-23|archive-url=https://web.archive.org/web/20160923144412/http://www.w3.org/TR/2004/WD-voicexml21-20040323/|dead-url=no}}</ref> 以支援 VoiceXML 瀏覽器的跨來源資料請求。W3C 認為這不應該限制在 VoiceXML 而是一般的機制，因此將提案移到另一份實作備忘錄<ref>{{Cite web |url=https://www.w3.org/TR/2005/NOTE-access-control-20050613/ |title=Authorizing Read Access to XML Content Using the <?access-control?> Processing Instruction 1.0 |accessdate=2018-06-10 |archive-date=2018-09-24 |archive-url=https://web.archive.org/web/20180924003036/http://www.w3.org/TR/2005/NOTE-access-control-20050613/ |dead-url=no }}</ref>。幾個主要的瀏覽器廠商透過 W3C 的 Web 應用程式工作小組正式的將該備忘錄改寫為 [[W3C推薦標準#工作草案（WD）|W3C 工作草案]]並以推動成為 [[W3C推薦標準#W3C推荐标准（REC）|W3C 推薦標準]]為目標。

== CORS vs JSONP ==
'''跨域资源共享'''（CORS）是 [[JSONP|JSONP]] 模式的現代版。與 JSONP 不同，CORS 除了 GET 请求方法以外也支援其他的 HTTP 请求。用 CORS 可以讓網頁設計師用一般的 [[XMLHttpRequest|XMLHttpRequest]]，這種方式的錯誤處理比 JSONP 要來的好。另一方面，JSONP 可以在不支援 CORS 的老舊浏览器上運作。現代的瀏覽器都支援 CORS<ref>{{cite web|title=Cross-domain Ajax with Cross-Origin Resource Sharing|url=http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/|publisher=|accessdate=2011-06-28|archive-date=2016-04-29|archive-url=https://web.archive.org/web/20160429013208/https://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/|dead-url=no}}</ref>。

== 參見 ==
* [[容許任何來源存取的Web服務列表|容許任何來源存取的Web服務列表]]
*[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS HTTP访问控制（CORS）] {{Wayback|url=https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS |date=20200114095236 }}

== 参考文献 ==
{{Reflist}}

== 外部連結 ==
*{{en}}[http://www.w3.org/TR/cors/ W3C 工作草案] {{Wayback|url=http://www.w3.org/TR/cors/ |date=20170306094742 }}
*{{en}}[https://web.archive.org/web/20100527153021/https://developer.mozilla.org/En/HTTP_access_control 使用指引]
*{{en}}[http://enable-cors.org/ 推廣 CORS 的網站] {{Wayback|url=http://enable-cors.org/ |date=20110628084124 }}

[[Category:AJAX|Category:AJAX]]
[[Category:W3C標準|Category:W3C標準]]