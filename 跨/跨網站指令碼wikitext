{{noteTA
|G1=IT
|T=zh-cn:跨站脚本; zh-tw:跨網站指令碼
|1=zh-cn:跨站脚本; zh-tw:跨網站指令碼
}}
{{各地中文名
|tw=跨網站指令碼
|cn=跨站脚本
}}
{{Expand English|Cross-site scripting}}
'''跨網站指令碼'''（{{lang-en|Cross-site scripting}}，通常簡稱為：XSS）是一種網站應用程式的安全漏洞攻擊，是[[代码注入|代码注入]]的一种。它允許惡意使用者將程式碼注入到網頁上，其他使用者在觀看網頁時就會受到影響。這類攻擊通常包含了[[HTML|HTML]]以及使用者端[[腳本語言|腳本語言]]。

'''XSS'''攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是[[JavaScript|JavaScript]]，但实际上也可以包括[[Java|Java]]，[[VBScript|VBScript]]，[[ActiveX|ActiveX]]，[[Flash|Flash]]或者甚至是普通的[[HTML|HTML]]。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、[[会话|会话]]和[[cookie|cookie]]等各种内容。

== 背景和现状 ==
當[[網景|網景]]（Netscape）最初推出[[JavaScript|JavaScript]]語言時，他們也察覺到准許[[網頁伺服器|網頁伺服器]]傳送可執行的程式碼給一個[[瀏覽器|瀏覽器]]的安全風險（即使僅是在一個瀏覽器的[[沙盒_(計算機安全)|沙盒]]裡）。它所造成的一個關鍵的問題在於使用者同時開啟多個瀏覽器[[視窗|視窗]]時，在某些例子裡，[[網頁|網頁]]裡的片斷程式碼被允許從另一個網頁或[[物件_(计算机科学)|物件]]取出資料，而因為惡意的[[網站|網站]]可以用這個方法來嘗試竊取機密資訊，所以在某些情形，這應是完全被禁止的。為了解決這個問題，瀏覽器採用了同源决策——僅允許來自相同網域名稱系統和使用相同協定的物件與網頁之間的任何互動。這樣一來，惡意的網站便無法藉由JavaScript在另一個瀏覽器竊取機密資料。此後，為了保護使用者免受惡意的危害，其他的瀏覽器與伺服端指令語言採用了類似的[[存取控制|存取控制]]決策。

'''XSS'''漏洞可以追溯到1990年代。大量的网站曾遭受'''XSS'''漏洞攻击或被发现此类漏洞，如[[Twitter|Twitter]]<ref>{{cite news|author=Arthur, Charles|title=Twitter users including Sarah Brown hit by malicious hacker attack|url=http://www.guardian.co.uk/technology/blog/2010/sep/21/twitter-bug-malicious-exploit-xss|date=September 21, 2010|publisher=The Guardian|accessdate=September 21, 2010|archive-date=2011-01-20|archive-url=https://web.archive.org/web/20110120125348/http://www.guardian.co.uk/technology/blog/2010/sep/21/twitter-bug-malicious-exploit-xss|dead-url=no}}</ref>，[[Facebook|Facebook]]<ref>{{cite news|author=Leyden, John|title=Facebook poked by XSS flaw|url=http://www.theregister.co.uk/2008/05/23/facebook_xss_flaw/|date=May 23, 2008|publisher=The Register|accessdate=May 28, 2008|archive-date=2011-10-11|archive-url=https://web.archive.org/web/20111011203659/http://www.theregister.co.uk/2008/05/23/facebook_xss_flaw/|dead-url=no}}</ref>，[[MySpace|MySpace]]，[[Orkut|Orkut]]<ref>{{cite web|title=Full List of Incidents|url=http://projects.webappsec.org/Web-Hacking-Incident-Database|date=February 17, 2008|publisher=Web Application Security Consortium|accessdate=May 28, 2008|archive-date=2010-10-21|archive-url=https://web.archive.org/web/20101021010342/http://projects.webappsec.org/Web-Hacking-Incident-Database|dead-url=no}}</ref><ref>{{cite web|title=Obama site hacked; Redirected to Hillary Clinton|url=http://www.zdnet.com/blog/security/obama-site-hacked-redirected-to-hillary-clinton/1042|date=April 21, 2008|publisher=ZDNet|accessdate=May 28, 2008|archive-date=2014-03-27|archive-url=https://web.archive.org/web/20140327225814/http://www.zdnet.com/blog/security/obama-site-hacked-redirected-to-hillary-clinton/1042|dead-url=no}}</ref>
,[[新浪微博|新浪微博]]<ref>{{cite web|title=新浪微博病毒事件分析|url=http://it.sohu.com/20110628/n311945225.shtml|date=2011-06-28|publisher=SOHU|accessdate=2011-10-18|archive-date=2011-09-05|archive-url=https://web.archive.org/web/20110905174519/http://it.sohu.com/20110628/n311945225.shtml|dead-url=no}}</ref>和[[百度贴吧|百度贴吧]]
。研究表明<ref>{{cite news|author=Berinato, Scott|title=Software Vulnerability Disclosure: The Chilling Effect|url=http://www.csoonline.com/article/221113|archiveurl=https://web.archive.org/web/20080418072230/http://www.csoonline.com/article/221113|archivedate=2008-04-18|work=CSO|page=7|publisher=CXO Media|date=January 1, 2007|accessdate=June 7, 2008|deadurl=yes}}</ref>，最近几年'''XSS'''已经超过[[缓冲区溢出|缓冲区溢出]]成为最流行的攻击方式，有68%的网站可能遭受此类攻击。根据开放网页应用安全计划（Open Web Application Security Project）公布的2010年统计数据，在Web安全威胁前10位中，XSS排名第2，仅次于[[代码注入|代码注入]]（Injection）。<ref>{{cite web
 |title       = OWASP Top 10 - 2010 Document
 |url         = http://owasptop10.googlecode.com/files/OWASP%20Top%2010%20-%202010.pdf
 |date        = April 19, 2010
 |publisher   = OWASP
 |accessdate  = Jan 2, 2013
 |deadurl     = yes
 |archiveurl  = https://web.archive.org/web/20121204000414/http://owasptop10.googlecode.com/files/OWASP%20Top%2010%20-%202010.pdf
 |archivedate = 2012年12月4日
}}</ref>

== 縮寫 ==
{{lang|en|Cross-site scripting}}的英文首字母縮寫本應為'''CSS'''，但因為[[CSS_(消歧义)|CSS]]在[[網頁設計|網頁設計]]領域已經被廣泛指[[層疊樣式表|層疊樣式表]]（Cascading Style Sheets），所以將Cross（意为“交叉”）改以交叉形的'''X'''做為縮寫。但早期的文件還是會使用CSS表示Cross-site scripting。

== 检测方法 ==
通常有一些方式可以測試網站是否有正確處理特殊字元：
* <code>><script>alert(document.cookie)</script></code>
* <code>='><script>alert(document.cookie)</script></code>
* <code>"><script>alert(document.cookie)</script></code>
* <code><script>alert(document.cookie)</script></code>
* <code><script>alert('vulnerable')</script></code>
* <code>%3Cscript%3Ealert('XSS')%3C/script%3E</code>
* <code><script>alert('XSS')</script></code>
* <code><img src="javascript:alert('XSS')"></code>
* <code><nowiki><img src="http://888.888.com/999.png" onerror="alert('XSS')"></nowiki></code>
* <code><nowiki><div style="height:expression(alert('XSS'),1)"></div></nowiki></code>（這個僅於IE7或以前有效）

== 攻击手段和目的 ==
攻击者使被攻击者在浏览器中执行脚本后，如果需要收集来自被攻击者的数据（如cookie或其他敏感信息），可以自行架设一个网站，让被攻击者通过JavaScript等方式把收集好的数据作为参数提交，随后以[[数据库|数据库]]等形式记录在攻击者自己的服务器上。

常用的'''XSS'''攻击手段和目的有：
* 盗用cookie，获取敏感信息。
* 利用植入Flash，通过[[crossdomain|crossdomain]]权限设置进一步获取更高权限；或者利用Java等得到类似的操作。
* 利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发[[微博|微博]]、加好友、发私信等操作。
* 利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。
* 在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现[[DoS|DoS]]攻击的效果。

== 漏洞的防御和利用 ==
=== 过滤特殊字符 ===
避免XSS的方法之一主要是將使用者所提供的內容進行過濾，許多語言都有提供對[[HTML|HTML]]的過濾：
* [[PHP|PHP]]的<code>htmlentities()或是htmlspecialchars()</code>。
* [[Python|Python]]的<code>cgi.escape()</code>。
* [[Active_Server_Pages|ASP]]的<code>Server.HTMLEncode()</code>。
* [[ASP.NET|ASP.NET]]的<code>Server.HtmlEncode()</code>或功能更強的[http://msdn.microsoft.com/en-us/library/aa973813.aspx Microsoft Anti-Cross Site Scripting Library] {{Wayback|url=http://msdn.microsoft.com/en-us/library/aa973813.aspx |date=20080912180951 }}
* [[Java|Java]]的[http://code.google.com/p/xssprotect/ xssprotect (Open Source Library)] {{Wayback|url=http://code.google.com/p/xssprotect/ |date=20120227202458 }}。
* [[Node.js|Node.js]]的node-validator。

=== 使用[[HTTP头字段|HTTP头]]指定类型 ===
很多时候可以使用[[HTTP头字段|HTTP头]]指定内容的类型，使得输出的内容避免被作为HTML解析。如在[[PHP|PHP]]语言中使用以下代码：
<pre><?php
   header('Content-Type: text/javascript; charset=utf-8');
?>
</pre>
即可强行指定输出内容为文本/JavaScript脚本（顺便指定了内容编码），而非可以引发攻击的HTML。

=== 使用者方面 ===
包括[[Internet_Explorer|Internet Explorer]]、[[Mozilla_Firefox|Mozilla Firefox]]在內的大多数瀏覽器皆有關閉JavaScript的选项，但關閉功能并非是最好的方法，因為許多網站都需要使用JavaScript語言才能正常运作。通常来说，一個經常有安全更新推出的瀏覽器，在使用上會比很久都没有更新的浏览器更为安全。

== 参阅 ==
* [[苍月浏览器|苍月浏览器]]—过滤跨網站指令碼（XSS）的网络浏览器
* [[SGML实体|SGML实体]]
* [[Metasploit|Metasploit]]—一个包含XSS测试的开源渗透测试工具

== 外部連結 ==
* [http://www.cert.org/advisories/CA-2000-02.html CERT® Advisory CA-2000-02 Malicious HTML Tags Embedded in Client Web Requests] {{Wayback|url=http://www.cert.org/advisories/CA-2000-02.html |date=20070812013813 }} {{en}}
* [http://httpd.apache.org/info/css-security/ Cross Site Scripting Info] {{Wayback|url=http://httpd.apache.org/info/css-security/ |date=20070822024833 }} {{en}}
* [http://www.mozilla.org/projects/security/components/same-origin.html The Same Origin Policy] {{Wayback|url=http://www.mozilla.org/projects/security/components/same-origin.html |date=20070711035540 }} {{en}}
* [https://web.archive.org/web/20120911044754/http://ha.ckers.org/xss.html XSS (Cross Site Scripting) Cheat Sheet] {{en}}

=== 脚注 ===
<references />

{{Hacking}}

[[Category:网络安全|Category:网络安全]]
[[Category:注入漏洞|Category:注入漏洞]]
[[Category:Web安全漏洞|Category:Web安全漏洞]]