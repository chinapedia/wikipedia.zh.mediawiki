'''古特曼演算法'''（'''{{lang-en|Gutmann method}}'''）是一種將電腦[[硬碟|硬碟]]中的內容，如[[電腦檔案|檔案]]，進行安全抹除的[[演算法|演算法]]。該演算法由[[彼得·古特曼|彼得·古特曼]]與[[科林·普拉姆|科林·普拉姆]]設計，主要特色是在要被抹除的區段中重複寫入35個片段。

而片段的選擇，是在假定使用者不知道使用在硬碟的編碼機制為何，因此該演算法特別為3種不同型別的硬碟，設計不同的片段。如果使用者知道硬碟所使用的編碼模式，就可以為這個硬碟選用專屬的片段模式。一個硬碟當中不同的編碼機制，會需要不同的片段模式。

在古特曼演算法當中，大多數的片段模式多是設計給較老舊的MFM/RLL編碼硬碟。較為近代的硬碟類型技術上都不是使用這種較老舊的編碼模式，造成這些由古特曼設計的片段模式成為累贅<ref name="Gutman">Gutmann, Peter. (July 22–25, 1996)''[http://www.cs.auckland.ac.nz/~pgut001/pubs/secure_del.html Secure Deletion of Data from Magnetic and Solid-State Memory.] {{Wayback|url=http://www.cs.auckland.ac.nz/~pgut001/pubs/secure_del.html |date=20071209152858 }}'' University of Auckland Department of Computer Science. Epilogue section. (writing, "In fact performing the full 35-pass overwrite is pointless for any drive since it targets a blend of scenarios involving all types of (normally-used) encoding technology, which covers everything back to 30+-year-old MFM methods (if you don't understand that statement, re-read the paper). If you're using a drive which uses encoding technology X, you only need to perform the passes specific to X, and you never need to perform all 35 passes. For any modern PRML/EPRML drive, a few passes of random scrubbing is the best you can do. As the paper says, "A good scrubbing with random data will do about as well as can be expected". This was true in 1996, and is still true now.").</ref>。因此，從約2001年開始，ATA IDE與SATA硬碟製造商，針對[https://web.archive.org/web/20100610233931/http://cmrr.ucsd.edu/people/Hughes/SecureErase.shtml 「安全抹除」標準]進行支援設計，避免了使用古特曼演算法抹除整個硬碟的需求<ref>Communications Security Establishment. July 2006. ''[http://www.cse-cst.gc.ca/documents/publications/itsg-csti/itsg06-eng.pdf Clearing and Declassifying Electronic Data Storage Devices''] {{Wayback|url=http://www.cse-cst.gc.ca/documents/publications/itsg-csti/itsg06-eng.pdf |date=20140303210956 }}, page 7.</ref>。

該演算法最早出現於1996年6月的期刊文章《Secure Deletion of Data from Magnetic and Solid-State Memory》。

==參考文獻==
{{Reflist}}

[[Category:資訊安全|Category:資訊安全]]