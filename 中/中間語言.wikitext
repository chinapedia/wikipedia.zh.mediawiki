{{Program execution}}
'''中間語言'''（{{lang-en|Intermediate language}}），在[[計算機科學|計算機科學]]中，是指一種應用於[[抽象機器|抽象機器]]（abstract machine）的程式語言，它設計的目的，是用來幫助我們分析[[计算机程序|计算机程序]]。這個術語源自於[[編譯器|編譯器]]，在編譯器將[[原始碼|原始碼]]編譯為[[目的碼|目的碼]]的過程中，會先將原始碼轉換為一個或多個的中間表述，以方便編譯器進行最佳化，並產生出目的機器的[[机器语言|机器语言]]。通常，中間語言的設計與一般的[[机器语言|机器语言]]有三個不同之處：

* 每個指令代表僅有一個基本的操作。舉例來說，在[[微处理器|微处理器]]中出現的''shift-add''定址模式在中間語言不會出現。
* 指令集內可能不會包含[[控制流程|控制流程]]的資訊。
* 暫存器可用的數量可能會很大，甚至沒有限制。

最常見的中間語言表述形式，是[[三位址碼|三位址碼]]（Three address code）。

這個術語也同時用來代稱一些作為中間層的語言，有些[[高级语言|高级语言]]不會輸出為機器語言，它們僅會輸出這種中間語言，而這些中間語言則會像一般語言一樣，提交給編譯器，編譯為機器語言。這通常被用於讓[[Optimization_(computer_science)|最佳化]]的過程更簡單，也用於增進[[移植_(軟體)|可移植性]]的能力，改進移植的方式則是利用中間語言的編譯器，可以編譯出許多[[中央处理器|中央处理器]]及[[操作系统|操作系统]]可使用的機器碼，例如[[C语言|C语言]]。中間語言的複雜度，通常介於高階語言及[[低级语言|-{zh-cn:低级语言;zh-tw:低階語言}-]]之間，例如[[汇编语言|-{zh-cn:汇编语言;zh-tw:組合語言}-]]。

==中介碼==
中介碼（IR，intermediate representation）是一種[[数据结构|数据结构]]，可將輸入的資料建構為一個[[计算机程序|计算机程序]]，也可以將一部份或是所有輸出的程式反推回輸入資料。這意味著中介碼將會保留一些輸入資料的資訊，同時擁有更進一步註釋或是快速查詢的功能。

舉一個典型的例子，它是現代許多[[編譯器|編譯器]]所擁有的功能，它可將一段程式轉換成一個中間層的Graph資料結構，Graph可進行[[数据流分析|数据流分析]]，而且可在建立實際運行的CPU指令列表之前進行重組（re-arrangement），這種中間層的使用方式，允許像是[[LLVM|LLVM]]的編譯系統可以同時擁有許多不同的前端語言編譯器，而且可以產生許多不同架構系統的機器碼。

==語言==
[[C语言|C语言]]雖然並沒有明確設計為中間語言，但它天生就是[[汇编语言|-{zh-cn:汇编语言;zh-tw:組合語言}-]]的抽象形態，它同時作為[[类Unix系统|类Unix系统]]及其他作業系統中的系統程式語言（System programming language），這令它成為最熱門的中間語言，使用它的包含[[Eiffel|Eiffel]]、[[Sather|Sather]]、[[Esterel|Esterel]]、一些[[Lisp|Lisp]]的方言（[[Lush|Lush]], [[Gambit_(Scheme_implementation)|Gambit]]）、[[Haskell|Haskell]]（[[Glasgow_Haskell_Compiler|Glasgow Haskell Compiler]]）、[[Squeak|Squeak]]的Smalltalk子集Slang、[[Cython|Cython]]、[[Seed7|Seed7]]、[[Vala|Vala]]等等。C的變形已經被用作可攜版的[[汇编语言|-{zh-cn:汇编语言;zh-tw:組合語言}-]]同時包含C的功能，包含[[C--|C--]]及[[C中間語言|C中間語言]]（C Intermediate Language）。

微軟的[[通用中间语言|通用中间语言]]，在動態或是靜態編譯為機器語言之前，可用作[[.NET框架|.NET框架]]底下所有編譯器共享的中間語言。

[[GCC|GCC]]使用不同的中間語言來達到簡化行動性及[[交叉編譯器|跨平台]]，包含：
* 較有歷史的[[暫存器傳遞語言|暫存器傳遞語言]]（RTL，Register Transfer Language）
* 使用語法樹（tree language）的[[GCC#.E5.89.8D.E7.AB.AF.E4.BB.8B.E9.9D.A2|GENERIC]]
* [[静态单赋值形式|静态单赋值形式]]（SSA）為基礎的[[GIMPLE|GIMPLE]].

多數的中間語言用作支援靜態類型的語言，[[Parrot_intermediate_representation|Parrot intermediate representation]]則是設計用作支援動態類型的語言，最初有Perl及Python。

ILOC中間語言<ref>[http://www.engr.sjsu.edu/wbarrett/Parser/simManual.htm "An ILOC Simulator"] {{Wayback|url=http://www.engr.sjsu.edu/wbarrett/Parser/simManual.htm|date=20090507084132}}
by W. A. Barrett 2007, paraphrasing Keith Cooper and Linda Torczon, "Engineering a Compiler", [[Morgan_Kaufmann|Morgan Kaufmann]], 2004. ISBN 1-55860-698-X.</ref>在編譯器的設計中，它是用作簡單的目標語言<ref>[http://www.cis.udel.edu/~pollock/471/project2spec.pdf "CISC 471 Compiler Design"] {{Wayback|url=http://www.cis.udel.edu/~pollock/471/project2spec.pdf |date=20110720085233 }} by Uli Kremer</ref>

== 相關條目 ==
* [[抽象語法樹|抽象語法樹]]
* [[字节码|字节码]]
* [[符号表|符号表]]
* [[Source-to-source_compiler|Source-to-source compiler]]

==參考文件==
{{reflist}}

==外部連結==
* [http://suif.stanford.edu/ The Stanford SUIF Group]{{Wayback|url=http://suif.stanford.edu/ |date=20061022071450 }}

{{DEFAULTSORT:Intermediate language}}

[[Category:编译原理|Category:编译原理]]
[[Category:编程语言分类|Category:编程语言分类]]