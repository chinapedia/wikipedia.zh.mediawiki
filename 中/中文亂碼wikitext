{{noteTA|G1=IT}}
{{多個問題|
{{unreferenced|time=2014-04-26T05:37:28+00:00}}
{{Globalize|area=[[台湾地区|台湾地区]]}}
{{Copy edit|time=2022-02-27T09:18:02+00:00}}
}}
'''中文亂碼'''是電子資訊系統的中文無法正確顯示文字符號的一種現象，在中文[[內碼|內碼]]未有標準時情況尤其嚴重。

== 萬碼奔騰的年代 ==

在過去，由於繁體中文使用者缺乏一個具有號召力的內碼標準，不同使用者都會使用各自的標準。比較普遍的是銀行由於主要使用[[IBM|IBM]]的商業電腦，很自然地亦選擇了[[IBM5550|IBM5550]]作為其內碼標準。這些用5550內碼的文件，一旦下載到微機上，若要轉寄與其他人使用，就要透過轉碼換成Big5，其他人才可以閱讀。

另一方面，在會計界有不少人都直接使用外國的專門軟體，而為免衝碼問題使畫面凌亂，不少的IT部門都把公司電腦的內碼換成[[倚天碼|倚天碼]]。本來會計人員過去只是把計算結果列印而提交報告，並未有任何問題。到後來隨着電子表格的興起，用戶才發覺到當公司與外界使用的內碼不同，會引起不少問題，才開始有人正視這問題。

== 中文Big5碼被誤認為EASCII ==

歐洲生產的某些電腦並無法辨識[[Big5|Big5]]雙位元字碼的中文字元，相反的，他會把位於00到7F間的字碼視為[[ASCII|ASCII]]，而80到FF間的字碼則視為[[EASCII|EASCII]]，例如：

{|class=wikitable
!中文字
|colspan=2|-{維}-
|colspan=2|-{基}-
|colspan=2|-{百}-
|colspan=2|-{科}-
|colspan=2|-{中}-
|colspan=2|-{文}-
|colspan=2|-{大}-
|colspan=2|-{五}-
|colspan=2|-{碼}-
|-
!Big5碼的高位/低位位元
|BA||FB||B0||F2||A6||CA||AC||EC||A4||A4||A4||E5||A4||6A||A4||AD||BD||58
|-
!對應的ASCII/EASCII字元
|º||û||°||ò||¦||Ê||¬||ì||¤||¤||¤||å||¤||j||¤||­||½||X
|}

也因此，中文字串「-{維基百科中文大五碼}-」會顯示為亂碼「ºû°ò¦Ê¬ì¤¤¤å¤j¤	½X」。

== UTF-8与Big5的相互转换 ==

隨著[[UTF-8|UTF-8]]的普及化，許多[[繁體中文|繁體中文]]的[[IRC|IRC]]頻道也逐漸從[[大五碼|Big5]]轉變成[[UTF-8|UTF-8]]；然而在這種過渡時期中，仍然有不少[[IRC|IRC]]頻道是採用[[大五碼|Big5]]的，所以使用者參與了新的頻道時，通常會想要先確定自己的字元編碼有沒有設錯，人們最常用的測試字眼不外乎：

<center>

{| class="wikitable" style="text-align:center"
!編碼
! colspan="3" |內容
|-
|UTF-8
| -{中文}-
| -{測試}-
| -{導航}-
|-
|Big5
| -{銝剜��}-
| -{皜祈岫}-
| -{撠舘⏛}-
|}

</center>

=== <nowiki>嚙踝蕭</nowiki>乱码问题 ===

当一段[[大五码|大五码]]文本被错误地以[[UTF-8|UTF-8]]解码再编码再以大五码解码，由于在被以UTF-8解码时的无效字符被以Unicode的“未识别字符（U+FFFD）”作为内码记录，而那替代字符的UTF-8编码的十六进制为“<code>EF BF BD</code>”。当那替代字符因为按UTF-8解码会出现大比例的无效字符而令其大片大片地出现，进而在被UTF-8再编码再以大五码解码后读码框取到UTF-8替代字符的编码的第一个字节和第二个字节的十六进制“<code>EF BF</code>”解码得到“<nowiki>嚙</nowiki>”字，接下来的读码框横跨两个UTF-8替代字符取到第一个UTF-8替代字符的第三个字节和第二个UTF-8替代字符的第一个字节的十六进制“<code>BD EF</code>”解码得到“<nowiki>踝</nowiki>”字，再接下来的读码框取到第二个UTF-8替代字符的第二个字节和第三个字节的十六进制“<code>BF BD</code>”解码得到“<nowiki>蕭</nowiki>”字，连起来就是“<nowiki>嚙踝蕭</nowiki>”。这样的情况反复出现就令其中出现大量“<nowiki>嚙踝蕭</nowiki>”字样。并且由于在被以UTF-8解码时所出现的各种无效字符与有效字符的各种组合，再以大五码解码后其中会有许多不是出现在“<nowiki>嚙踝蕭</nowiki>”子序列中的“<nowiki>嚙</nowiki>”、“<nowiki>蕭</nowiki>”字样。

另外其他编码的非UTF-8文本或非文本二进制数据被错误地以UTF-8解码再编码再以大五码解码也会如上产生<nowiki>嚙踝蕭</nowiki>乱码，然而由于原字节序列的特征会部分地传递至以UTF-8解码后所产生的中间阶段乱码，这样因此由这些方式产生的乱码跟大五码文本被错误地以UTF-8解码再编码再以大五码解码所产生的乱码便具有不同的特征。

==简体中文编码体系与Unicode及UTF-8的相互转换==
在Unicode编码与简体中文编码系统（例如[[GB2312|GB2312]]、[[GBK|GBK]]、[[GB18030|GB18030]]、[[CP936|CP936]]）转换时，部分简体中文编码的文字在Unicode编码中并不存在，Unicode会以“未识别字符（U+FFFD）”作为内码记录，而对外以UTF-8表现为“0xEF0xBF0xBD”，当多个“0xEF0xBF0xBD”连续出现，而且以简体中文编码去解释的话，就会被解析为多个“-{锟斤拷}-”。（-{锟}-(0xEFBF)、-{斤}-（0xBDEF）、-{拷}-（0xBFBD））

== 產生的問題 ==

過往，亂碼所產生的問題，往往只是閱讀上的不方便，因為文字變成了亂碼，使用戶看不到文字的內容。然而，現時由於電腦軟件保安設計的問題，亂碼隨時可能會使應用程式不正常關閉。

==參看==
*[[亂碼|亂碼]]
[[Category:中文信息处理|Category:中文信息处理]]