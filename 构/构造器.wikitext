{{NoteTA
| G1 = IT
| T = zh-tw:建構子; zh-cn:构造器; zh-hk:建構子; zh-sg:构造器;
| 1 = zh-tw:建構子; zh-cn:构造器; zh-hk:建構子; zh-sg:构造器;
| 2 = zh-tw:回傳型別; zh-cn:返回类型;
| 3 = zh-tw:堆積; zh-cn:堆;
| 4 = zh-tw:堆疊; zh-cn:栈;
| 5 = zh-hant:裡; zh-cn:里;
| 6 = zh-tw:程式碼; zh-cn:代码;
| 7 = zh-tw:建構式; zh-cn:构造函数;
| 8 = zh-tw:基底類別; zh-cn:基类;
| 9 = zh-tw:函式; zh-cn:函数;
}}
在[[類別基礎編程|类别基础的]][[面向对象程序设计|面向对象程序设计]]中，'''构造器'''（英语： '''Constructor'''，有時簡稱 ctor），别称：'''构造方法'''、'''构造函数'''、'''建构子、建構式'''）是一个[[类_(计算机科学)|-{zh-hans:类;zh-hant:類別;}-]]-{zh-hans:里;zh-hant:裡}-用于建立对象的特殊[[子程序|子程序]]。它能初始化一个新建的[[对象_(计算机科学)|对象]]，并时常会接受[[逻辑论证|参数]]用以设定{{le|实例变量|Instance (computer science)|实例}}[[变量_(程序设计)|变量]]。

构造器跟一般的[[方法_(電腦科學)|实例方法]]十分相似；但是与其它方法不同，构造器没有{{le|返回类型|Return type}}，不会被[[继承_(计算机科学)|继承]]，且不会有范围修饰符。构造器的函数名称一般与它所属的[[类_(计算机科学)|-{zh-hans:类;zh-hant:類別;}-]]的名称相同。 它承担着[[初始化|初始化]]对象数据成员并建立类不变象的任务；在-{zh-hans:类;zh-hant:類別;}-不变象无效的时候它会失败。一个正确编写的构造器会使它生成的[[对象_(计算机科学)|对象]]保持在一个''有效''状态。[[不可變物件|不可变物件]]必须在构造器内完成所有初始化。

多数编程语言允许[[函数重载|构造器重载]] - 一个-{zh-hans:类;zh-hant:類別;}-被允许拥有多个接受不同{{le|参数（计算机科学）|Parameter (computer programming)|参数}}种类的构造器同时存在。一些编程语言允许某些特殊种类的构造器。使用单个-{zh-hans:类;zh-hant:類別;}-来具体地建立和返回新[[实例|实例]]的构造器，时常被抽象为[[工厂方法#工厂|工厂方法]] - 一种同样用来建立新对象，但会同时使用多个-{zh-hans:类;zh-hant:類別;}-，或者一些诸如[[对象池模式|对象池]]的分配方案来完成这一过程的子程序。

== 种类 ==

=== 参数化构造器 ===
接收参数的构造器被称为'''参数化构造器'''。参数的数量可以大于或等于一。例如，在C++中：<syntaxhighlight lang="cpp">
class Example
{
     int x, y;
   public:
     Example();
     Example(int a, int b); // Parameterized constructor
};
Example :: Example()
{
}
Example :: Example(int a, int b)
{
     x = a;
     y = b;
}
</syntaxhighlight>使用参数化构造器声明对象时，必须传入初始值作为构造器的参数。在这种情况下，一般的声明对象的方法可能不再适用。

构造器函数的调用方式可以分为显式和隐式两种。<syntaxhighlight lang="cpp">
    Example e = Example(0, 50); // Explicit call

    Example e(0, 50);           // Implicit call
</syntaxhighlight>

=== 缺省构造器 ===
如果在编写一个可实例化的类时没有专门编写构造器，多数编程语言会自动生成<span>[[缺省构造函数|缺省构造器]]。</span>

缺省构造器的特性依不同语言而定。某些情况下它会将所有的实例变量同时初始化到0，或者任何其他别的值；某些缺省构造器什么也不会做。

某些语言 (Java, C#, VB .NET) 会缺省构造由该类类型定义的数组，使其充满[[Null_(編程)|空值]]引用。没有空值引用的语言一般会禁止缺省构造包含不可缺省构造对象的数组，或者要求在建立时专门初始化这些数值 (C++):<syntaxhighlight lang="cpp">
#include <iostream>

class student{
             public:
                   int a,b;
                  student(a=0,b=0)   //default constructor

};

int main() {
	
}
</syntaxhighlight>

=== 轉換建構子 ===
轉換建構子可定義從使用者定義或內建類型轉換成使用者定義類型的作業。<ref>{{Cite web |url=https://msdn.microsoft.com/zh-tw/library/wwywka61.aspx |title=MSDN 類別和結構 (C++) |access-date=2016-05-11 |archive-date=2016-06-16 |archive-url=https://web.archive.org/web/20160616220752/https://msdn.microsoft.com/zh-tw/library/wwywka61.aspx |dead-url=no }}</ref>
=== 複製建構子 ===
複製建構子（英語：Copy constructor）是C++程式語言中的一種特別的建構子，習慣上用來建立一個全新的物件，這個全新的物件相當於已存在物件的副本。這個建構子只有一個參數（引數）：就是用來複製物件的參照（常用const修飾）。建構子也可以有更多的參數，但除了最左第一個參數是該類別的參照類別型外，其它參數必須有預設值。
=== 移動建構子 ===
移动构造函数（英语：Move constructor）是 C++11 中新增的一种构造函数，用来避免多余的分配新内存——复制——销毁旧内存的操作。参见 [[C++11|C++11]] 条目内的介绍。
== 语法 ==
* [[Java|Java]], [[C++|C++]], [[C♯|C#]], [[ActionScript|ActionScript]] 和 {{Nowrap|[[PHP|PHP]] 4}} 中的命名规范会要求构造器函数的名称与它所在类的名称相同。
* PHP 5 建议的构造器函数名称为 <code>__construct</code>。为了保证向下兼容，<code>__construct</code> 方法无法找到时会调用任何跟类名同名的方法作为构造器。从 PHP 5.3.3 起，这种途径只对非命名空间的类有效。<ref name="php5cpnstructor">[http://www.php.net/manual/en/language.oop5.decon.php Constructors and Destructors] {{Wayback|url=http://www.php.net/manual/en/language.oop5.decon.php |date=20180118235507 }}, from PHP online documentation</ref>
* 在 [[Perl|Perl]] 里，构造器被约定俗成地命名为 "new"，并且会完成建立对象的大量工作。
* 在 Perl 的 Moose 对象系统中，构造函数（叫做 ''new''）是自动生成的，程序员可以通过指定一个 ''BUILD'' 方法来对其进行扩充。
* 在 [[Visual_Basic_.NET|Visual Basic .NET]] 里，构造器被命名为 <code>New</code>，是个 <code>Sub</code>。
* [[Python|Python]] 里构造器的被分为 <code>__new__</code> 和 <code>__init__</code> 两个方法。<code>__new__</code> 方法负责为实例分配内储存空间，并接受自身的类作为参数（一般命名为 <code>cls</code>）。<code>__init__</code> 方法接受被新建的实例作为参数（一般称为 <code>self</code><ref>[https://docs.python.org/3/reference/datamodel.html#basic-customization Data model] {{Wayback|url=https://docs.python.org/3/reference/datamodel.html#basic-customization |date=20121026063834 }}, from Python online documentation</ref>）。
* [[Object_Pascal|Object Pascal]] 的构造函数用关键字 <code>constructor</code> 标识，并且可以起任意名字（但一般来说会被起名为 <code>Create</code>）。
* [[Objective-C|Objective-C]] 的构造函数分成两个方法，<code>alloc</code> 和 <code>init</code>。<code>alloc</code> 方法分配内存，<code>init</code> 负责初始化。<code>new</code> 方法会调用 <code>alloc</code> 和 <code>init</code> 两者。

== 内存机制 ==
在 Java, C# 和 VB .NET -{zh-hant:裡;zh-hans:里;}-，构造器会在一种叫做[[堆_(数据结构)|-{zh-cn:堆;zh-tw:堆積}-]]的特殊数据结构里建立作为引用类型的实例。數值类型（例如 int, double 等等）则会建立在叫做[[栈|-{zh-cn:栈;zh-tw:堆疊}-]]的有序数据结构-{zh-hant:裡;zh-hans:里;}-。VB .NET and C# 会允许用 ''new'' 来建立值类型的实例。然而在这些语言-{zh-hant:裡;zh-hans:里;}，即使使用这种方法建立的对象依然只会在栈-{zh-hant:裡;zh-hans:里;}-。

在 C++ -{zh-hant:裡;zh-hans:里;}-，不用 new 建立的对象会保存在栈-{zh-hant:裡;zh-hans:里;}-，使用 new 建立时则会在-{zh-cn:堆;zh-tw:堆積}--{zh-hant:裡;zh-hans:里;}。它们必须分别使用[[析构函数|析构函数]]或者 delete 操作才能被删除。

== 语言细节 ==

=== Java ===
在Java里，构造器和其他方法的主要差别在于：
* 构造器不具有任何显性返回类型。
* 构造器无法直接被“<code>new</code>”啟動。
* 构造器无法被標示為''synchronized'', ''final'', ''abstract'', ''native'', 或者 ''static''。
Java 里的构造器会按照以下顺序完成下列工作：
# 将类变量初始到缺省值。（byte, short, int, long, float, 和 double 变量会默认设为它们相应的0值，booleans 会被设为 false, chars 会被设为空字符('\u0000')，对象引用会被设为 null）
# 引用父类的构造器，如果没有定义任何构造器。
# 将实例变量初始化到指定值。
# 执行构造器内的代码。
在 Java 中可以通过关键词 <code>super</code> 访问父类的构造器。<syntaxhighlight lang="java">
public class Example
{
    // Definition of the constructor.
    public Example()
    {
        this(1);
    }

    // Overloading a constructor
    public Example(int input)
    {
        data = input; // This is an assignment
    }

    // Declaration of instance variable(s).
    private int data;
}
</syntaxhighlight><syntaxhighlight lang="java">
// Code somewhere else
// Instantiating an object with the above constructor
Example e = new Example(42);
</syntaxhighlight>不接收任何参数的构造器被称作“无参数构造器”。<ref>{{Cite web|url=http://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html|title=Providing Constructors for Your Classes|accessdate=2013-12-20|author=|date=2013|publisher=Oracle Corporation|archive-date=2021-12-03|archive-url=https://web.archive.org/web/20211203180339/https://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html|dead-url=no}}</ref>

=== Visual Basic .NET ===
在[[Visual_Basic_.NET|Visual Basic .NET]]中, 建構子以"<code>New</code>"為定義方法，并且必须是个 Sub。<syntaxhighlight lang="vbnet">
Class Foobar
    Private strData As String

    ' Constructor
    Public Sub New(ByVal someParam As String)
        strData = someParam
    End Sub
End Class
</syntaxhighlight><syntaxhighlight lang="vbnet">
' code somewhere else
' instantiating an object with the above constructor
Dim foo As New Foobar(".NET")
</syntaxhighlight>

=== C# ===
<syntaxhighlight lang="csharp">
public class MyClass
{
    private int a;
    private string b;

    // Constructor
    public MyClass() : this(42, "string")
    {
    }

    // Overloading a constructor
    public MyClass(int a, string b)
    {
        this.a = a;
        this.b = b;
    }
}
</syntaxhighlight><syntaxhighlight lang="csharp">
// Code somewhere
// Instantiating an object with the constructor above
MyClass c = new MyClass(42, "string");
</syntaxhighlight>

==== C# 靜態建構子 ====
在[[C♯|C#]]中,''靜態建構子''是用來初始化任何靜態資料。静态构造函数也称为“类构造函数”，由于类构造函数在生成的 MSIL 里名为“.cctor”，因此也被称为“cctor”。<ref>{{Cite web|url=http://ericlippert.com/2013/02/06/static-constructors-part-one/|title=Fabulous Adventures in Coding|accessdate=2014-04-05|date=2013-02-06|publisher=Eric Lippert|archive-date=2017-07-07|archive-url=https://web.archive.org/web/20170707151218/https://ericlippert.com/2013/02/06/static-constructors-part-one/|dead-url=no}}</ref><ref>{{Cite book|url=http://books.google.com/books?id=oAcCRKd6EZgC&pg=PA222&lpg=PA222&dq=ctor+cctor&source=bl&ots=KAYfbDu_ay&sig=gLj6X9SpWXz86GHMvljkfb-D8Oc&hl=en&sa=X&ei=fUFAU--WJOewsASQ54GQAw&ved=0CGoQ6AEwCQ#v=onepage&q=ctor%20cctor&f=false|title=Expert .NET 2.0 IL Assembler|date=2006-01-01|publisher=APress|accessdate=2014-04-05|archive-date=2015-04-14|archive-url=https://web.archive.org/web/20150414025501/http://books.google.com/books?id=oAcCRKd6EZgC&pg=PA222&lpg=PA222&dq=ctor+cctor&source=bl&ots=KAYfbDu_ay&sig=gLj6X9SpWXz86GHMvljkfb-D8Oc&hl=en&sa=X&ei=fUFAU--WJOewsASQ54GQAw&ved=0CGoQ6AEwCQ#v=onepage&q=ctor%20cctor&f=false|dead-url=no}}</ref>

静态构造函数允许复杂的静态变量初始化。<ref>{{Cite web |url=http://msdn.microsoft.com/en-us/library/k9x6w0hc%28VS.80%29.aspx |title=Static Constructor in C# on MSDN |access-date=2016-03-30 |archive-date=2016-10-30 |archive-url=https://web.archive.org/web/20161030140202/https://msdn.microsoft.com/en-us/library/k9x6w0hc(VS.80).aspx |dead-url=no }}</ref>
静态构造函数在该类第一次被访问时调用，任何使用该类的操作（无论是调用静态函数、属性还是访问静态变量，还是构造类的实例）都会引发静态构造函数的执行。静态构造函数是[[线程安全|线程安全]]的，并且是[[单例模式|单例]]的。当用在泛型类中时，静态构造函数对于泛型的每个实例化都调用一次。静态变量也同样如此。<syntaxhighlight lang="csharp">
public class MyClass
{
    private static int _A;

    // Normal constructor
    static MyClass()
    {
        _A = 32;
    }

    // Standard default constructor
    public MyClass()
    {

    }
}
</syntaxhighlight><syntaxhighlight lang="csharp">
// Code somewhere
// Instantiating an object with the constructor above
// right before the instantiation
// The variable static constructor is executed and _A is 32
MyClass c = new MyClass();
</syntaxhighlight>

=== C++ ===
C++ 的构造函数以该-{zh-cn:类;zh-tw:類別}-的名稱为标识，且不須写-{zh-cn:返回值类型;zh-tw:回傳值型別;}-也无法-{zh-cn:返回值;zh-tw:回傳數值}-：
<syntaxhighlight lang="cpp">
class C{
public:
  C(void){
    ...
  }
};
</syntaxhighlight>
构造函数的函数体执行是在各个成员构造完'''之后'''才开始，因此要想更改成员的-{zh-tw:建構;zh-cn:构造;}--{zh-cn:方式;zh-tw:方法}-需要使用成员初始化列表：
<syntaxhighlight lang="cpp">
class B{
public:
  std::string str;
  B(const char *psz): str(psz){
    ...
  }
};
</syntaxhighlight>
基类的方式与成员相同，是在初始化列表中写基类名、接构造函数参数表：
<syntaxhighlight lang="cpp">
class D: public B{
public:
  D(void): B("Hello, world!"){
    ...
  }
};
</syntaxhighlight>
复制构造函数接受同类对象的左值引用（一般为 const T &）、移动构造函数接受右值引用（一般为 T&&）：
<syntaxhighlight lang="cpp">
class E{
public:
  E(const E &e){...}//Copy constructor
  E(E &&e){...}//Move constructor
};
</syntaxhighlight>
C++ 中，程序员若未对某类定义构造函数（以及赋值函数、析构函数），编译器在满足条件时会定义相应的函数，参见 <ref>{{cite web|title=Default constructors|url=http://en.cppreference.com/w/cpp/language/default_constructor|publisher=cppreference|accessdate=2016-10-29|archive-date=2020-12-30|archive-url=https://web.archive.org/web/20201230212206/https://en.cppreference.com/w/cpp/language/default_constructor|dead-url=no}}</ref><ref>{{cite web|title=Copy constructors|url=http://en.cppreference.com/w/cpp/language/copy_constructor|publisher=cppreference|accessdate=2016-10-29|archive-date=2020-11-12|archive-url=https://web.archive.org/web/20201112033908/https://en.cppreference.com/w/cpp/language/copy_constructor|dead-url=no}}</ref><ref>{{cite web|title=Move constructors|url=http://en.cppreference.com/w/cpp/language/move_constructor|publisher=cppreference|accessdate=2016-10-29|archive-date=2021-03-05|archive-url=https://web.archive.org/web/20210305160623/https://en.cppreference.com/w/cpp/language/move_constructor|dead-url=no}}</ref><ref>{{cite web|title=Copy assignment operator|url=http://en.cppreference.com/w/cpp/language/copy_assignment|publisher=cppreference|accessdate=2016-10-29|archive-date=2021-01-16|archive-url=https://web.archive.org/web/20210116151119/https://en.cppreference.com/w/cpp/language/copy_assignment|dead-url=no}}</ref><ref>{{cite web|title=Move assignment operator|url=http://en.cppreference.com/w/cpp/language/move_assignment|publisher=cppreference|accessdate=2016-10-29|archive-date=2020-11-12|archive-url=https://web.archive.org/web/20201112041455/https://en.cppreference.com/w/cpp/language/move_assignment|dead-url=no}}</ref><ref>{{cite web|title=Destructors|url=http://en.cppreference.com/w/cpp/language/destructor|publisher=cppreference|accessdate=2016-10-29|archive-date=2021-03-02|archive-url=https://web.archive.org/web/20210302112043/https://en.cppreference.com/w/cpp/language/destructor|dead-url=no}}</ref> 等页面。

=== F# ===

=== Eiffel ===

=== CFML ===
<syntaxhighlight lang="javascript">
component initmethod="Cheese" {
   // properties
   property name="cheeseName";

   // constructor
   function Cheese Cheese( required string cheeseName ) {
      variables.cheeseName = arguments.cheeseName;
      return this;
   }
}
</syntaxhighlight>

=== Object Pascal ===
<syntaxhighlight lang="delphi">
program OopProgram;

type
  TPerson = class
  private
    FName: string;
  public
    property Name: string read FName;
    constructor Create(AName: string);
  end;

constructor TPerson.Create(AName: string);
begin
  FName := AName;
end;

var
  Person: TPerson;
begin
  Person := TPerson.Create('Peter'); // allocates an instance of TPerson and then calls TPerson.Create with the parameter AName = 'Peter'
end.
</syntaxhighlight>

=== Perl ===
<syntaxhighlight lang="perl">
package Person;
# In Perl constructors are named 'new' by convention.
sub new {
    # Class name is implicitly passed in as 0th argument.
    my $class = shift;

    # Default attribute values, if you have any.
    my %defaults = ( foo => "bar" );

    # Initialize attributes as a combination of default values and arguments passed.
    my $self = { %defaults, @_ };

    # Check for required arguments, class invariant, etc.
    if ( not defined $self->{first_name} ) {
        die "Mandatory attribute missing in Person->new(): first_name";
    }
    if ( not defined $self->{last_name} ) {
        die "Mandatory attribute missing in Person->new(): last_name";
    }
    if ( defined $self->{age} and $self->{age} < 18 ) {
        die "Invalid attribute value in Person->new(): age < 18";
    }

    # Perl makes an object belong to a class by 'bless'.
    bless $self, $class;
    return $self;
}
1;
</syntaxhighlight>

=== Perl with Moose ===
<syntaxhighlight lang="perl">
package Person;
# enable Moose-style object construction
use Moose;

# first name ( a string) can only be set at construction time ('ro')
has first_name => (is => 'ro', isa => 'Str', required => 1);
# last name ( a string) can only be set at construction time ('ro')
has last_name  => (is => 'ro', isa => 'Str', required => 1);
# age (Integer) can be modified after construction ('rw'), and is not required
# to be passed to be constructor.  Also creates a 'has_age' method which returns
# true if age has been set
has age        => (is => 'rw', isa => 'Int', predicate => 'has_age');

# Check custom requirements
sub BUILD {
      my $self = shift;
      if ($self->has_age && $self->age < 18) { # no under 18s
           die "No under-18 Persons";
      }
}
1;
</syntaxhighlight>

=== PHP ===
<syntaxhighlight lang="php">
class Person
{
    private $name;

    public function __construct($name)
    {
        $this->name = $name;
    }

    public function getName()
    {
        return $this->name;
    }
}
</syntaxhighlight>

=== Python ===
<syntaxhighlight lang="pycon">
>>> class ExampleClass(object):
...     def __new__(cls, value):
...         print("Creating new instance...")
...         # Call the superclass constructor to create the instance.
...         instance = super(ExampleClass, cls).__new__(cls)
...         return instance
...     def __init__(self, value):
...         print("Initialising instance...")
...         self.payload = value
>>> exampleInstance = ExampleClass(42)
Creating new instance...
Initialising instance...
>>> print(exampleInstance.payload)
42
</syntaxhighlight>

=== Ruby ===
<syntaxhighlight lang="rbcon">
irb(main):001:0> class ExampleClass
irb(main):002:1>   def initialize
irb(main):003:2>     puts "Hello there"
irb(main):004:2>   end
irb(main):005:1> end
=> nil
irb(main):006:0> ExampleClass.new
Hello there
=> #<ExampleClass:0x007fb3f4299118>
</syntaxhighlight>

== 注釋 ==
{{Notelist}}

== 參見 ==
* [[缺省构造函数|缺省构造函数]]
*[[複製建構子|複製建構子]]

== 參考來源 ==
{{Reflist|30em}}
[[Category:方法_(電腦科學)|Category:方法 (電腦科學)]]
[[Category:编程语言比较|Category:编程语言比较]]