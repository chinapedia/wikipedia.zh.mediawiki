{{NoteTA
|G1 = IT
}}
{{图搜索算法}}
'''回溯法'''（{{lang-en|backtracking}}）是[[暴力搜尋法|暴力搜尋法]]中的一种。

对于某些计算问题而言，回溯法是一种可以找出所有（或一部分）解的一般性算法，尤其适用于[[約束滿足問題|約束滿足問題]]（在解决约束满足问题时，我们逐步构造更多的候选解，并且在确定某一部分候选解不可能补全成正确解之后放弃继续搜索这个部分候选解本身及其可以拓展出的子候选解，转而测试其他的部分候选解）。

在经典的教科书中，'''[[八皇后问题|八皇后问题]]'''展示了回溯法的用例。（八皇后问题是在标准国际象棋棋盘中寻找八个皇后的所有分布，使得没有一个皇后能攻击到另外一个。）

回溯法采用[[试错|试错]]的思想，它尝试分步的去解决一个问题。在分步解决问题的过程中，当它通过尝试发现，现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。回溯法通常用最简单的[[递归|递归]]方法来实现，在反复重复上述的步骤后可能出现两种情况：

* 找到一个可能存在的正确的答案
* 在尝试了所有可能的分步方法后宣告该问题没有答案

在最坏的情况下，回溯法会导致一次[[计算复杂性理论|复杂度]]为[[指数时间|指数时间]]的计算。

== 典型应用 == 
[[八皇后问题|八皇后问题]]是应用回溯法求解的典型案例。

== 相关链接 ==
* [https://web.archive.org/web/20071218075305/http://www.datastructures.info/the-backtracking-algorithmmethod/ Example code of Backtracking, traversal coloring of a graph, in C++]

[[Category:搜尋演算法|Category:搜尋演算法]]