{{noteTA|G1=IT}}
[[File:Callback-notitle.svg|thumb]]
在[[计算机程序设计|计算机程序设计]]中，'''回调函数'''，或简称'''回调'''（Callback 即call then back 被主函数调用运算后会返回主函数），是指通过[[參數_(程式設計)|參數]]將[[子程序|函式]]传递到其它代码的，某一块[[可执行文件|可执行代码]]的[[引用_(程序设计)|引用]]。这一设计允许了[[抽象层|底层]]代码调用在高层定义的[[子程序|子程序]]。

== 使用 ==
回调的用途十分广泛。例如，假设有一个函数，其功能为读取配置文件并由文件内容设置对应的选项。若这些选项由[[散列函数|散列值]]所标记，则让这个函数接受一个回调会使得程序设计更加灵活：函数的调用者可以使用所希望的散列算法，该算法由一个将选项名转变为散列值的回调函数实现；因此，回调允许函数调用者在运行时调整原始函数的行为。

回调的另一种用途在于处理信号或者类似物。例如一个[[POSIX|POSIX]]程序可能在收到[[SIGTERM|SIGTERM]]信号时不愿立即终止；为了保证一切运行良好，该程序可以将清理函数注册为SIGTERM信号对应的回调。

回调亦可以用于控制一个函数是否作为：[[Xlib|Xlib]]允许自定义的[[谓词|谓词]]用于决定程序是否希望处理特定的事件。

== 例子 ==
下列[[C语言|C语言]]代码描述了利用回调处理[[POSIX|POSIX]]风格的信号（在本示例中为[[SIGUSR1和SIGUSR2|SIGUSR1]]）的过程。值得注意的是，在处理信号的过程中，调用<code>[[printf|printf(3)]]</code>是[[信号_(计算机科学)#风险|不安全的]]。
<syntaxhighlight lang="c">
#include <stdio.h>
#include <signal.h>
#include <unistd.h>

void sig(int signum)
{
        printf("Received signal number %d!\n", signum);
}

int main(int argc, char *argv[])
{
        signal(SIGUSR1, sig);

        pause();
        
        return 0;
}
</syntaxhighlight>

系统调用<code>pause(3)</code>会导致这个例子不做任何有意义的事，但这样做可以给你充分的时间来给这个进程发送信号。（在类Unix系统上，可以调用<code>kill -USR1 '''<pid>'''</code>，其中<code>'''<pid>'''</code>代表该程序的进程号。运行之后，该程序应当会有反应。）

== 实现 ==
回调的形式因[[程序设计语言|程序设计语言]]而有差别。

* [[C语言|C]]、[[C++|C++]]和[[Pascal_(程式語言)|Pascal]]允许将[[函数指针|函数指针]]作为参数传递给其它函数。其它语言，例如[[JavaScript|JavaScript]]，[[Python|Python]]，[[Perl|Perl]]<ref>{{cite web|url=http://www.unix.org.ua/orelly/perl/cookbook/ch11_05.htm|title=Perl Cookbook - 11.4. Taking References to Functions|accessdate=2008-03-03|archive-date=2008-04-10|archive-url=https://web.archive.org/web/20080410194357/http://www.unix.org.ua/orelly/perl/cookbook/ch11_05.htm|dead-url=no}}</ref><ref>{{cite web |url=http://www.unix.org.ua/orelly/perl/advprog/ch04_02.htm |title=Advanced Perl Programming - 4.2 Using Subroutine References |accessdate=2008-03-03 |archive-date=2008-07-05 |archive-url=https://web.archive.org/web/20080705153834/http://www.unix.org.ua/orelly/perl/advprog/ch04_02.htm |dead-url=no }}</ref>和[[PHP|PHP]]，允许简单的将函数名作为参数传递。

* [[Objective-C|Objective-C]]中允许利用@selector关键字传递SEL类型的函数名。在实现中，SEL类型被定义为函数名字符串。

* 在类似于[[C_Sharp|C#]]与[[VB.NET|VB.NET]]的运用[[.NET_Framework|.NET Framework]]的语言中，提供了一种[[型别安全|型别安全]]的引用封装，所谓的'[[委托_(.NET)|委托]]'，用来定义包含类型的[[函数指针|函数指针]]，可以用于实现回调。

* .NET语言中用到的事件与事件处理函数提供了用于回调的通用语法。

* [[函数式编程语言|函数式编程语言]]通常支持[[第一级函数|第一级函数]]，可以作为回调传递给其它函数，也可以作为数据类型存储或是返回给其它函数。

* 某些语言，比如[[ALGOL|Algol 68]]，[[Perl|Perl]]，新版本的.NET语言以及多数[[函数式编程语言|函数式编程语言]]中，允许使用[[闭包_(计算机科学)|匿名的代码块]]（[[lambda表达式|lambda表达式]]），用以代替在别处定义的独立的回调函数。

* 在[[苹果公司|Apple]]或是[[LLVM|LLVM]]的C语言扩展中，包含称为[[块_(C语言扩展)|块]]的语言特性，可以作为函数的参数传递，作为回调的一种实现。

* 在缺少函数类型的参数的[[面向对象程序设计|面向对象]]的程序语言中，例如[[Java|Java]]，回调可以用传递抽象类或接口来模拟。回调的接收者会调用抽象类或接口的方法，这些方法由调用者提供实现。这样的对象通常是一些回调函数的集合，同时可能包含它所需要的数据。这种方法在实现某些[[设计模式_(计算机)|设计模式]]时比较有用，例如[[访问者模式|访问者模式]]，[[观察者模式|观察者模式]]与[[策略模式|策略模式]]。

* C++允许对象提供其自己的函数调用操作的实现，即重载operator()。[[标准模板库|标准模板库]]和函数指针一样接受这类对象（称为''[[函数对象|函数对象]]''）作为各种算法的参数。
<!-- Please clarify before you put this back in: *Some systems have built-in programming languages to support extension and adaptation. These languages provide callbacks without the need for separate software development tools. -->

== 参见 ==
* {{le|續延傳遞風格|Continuation-passing style|}}
* {{le|信號和槽|Signals and slots}}
* [[事件驱动程式设计|事件驱动程式设计]]
* {{tsl|en|libsigc++|}}, C++的回调库
* [[控制反转|控制反转]]

== 外部链接 ==
* [http://gotw.ca/gotw/083.htm Style Case Study #2: Generic Callbacks]{{Wayback|url=http://gotw.ca/gotw/083.htm |date=20101006183157 }}
* [http://partow.net/programming/templatecallback/index.html C++ Callback Solution]{{Wayback|url=http://partow.net/programming/templatecallback/index.html |date=20100824224216 }}
* [https://web.archive.org/web/20071009224137/http://msdn.microsoft.com/msdnmag/issues/02/12/BasicInstincts/ Basic Instincts: Implementing Callback Notifications Using Delegates]
* [https://web.archive.org/web/20041111063702/http://www.codeproject.com/aspnet/ScriptCallbackFramework.asp Implement Script Callback Framework in ASP.NET]
* [https://web.archive.org/web/20080916192721/http://www.javaworld.com/javaworld/javatips/jw-javatip10.html Implement callback routines in Java]
* [https://web.archive.org/web/20110706132209/http://www.comp.ua.ac.be/publications/files/Adapter-Para04.pdf Interfacing C++ member functions with C libraries]

== 参考资料 ==
{{reflist|2}}

[[Category:带有C代码示例的条目|Category:带有C代码示例的条目]]
[[Category:计算机编程|Category:计算机编程]]