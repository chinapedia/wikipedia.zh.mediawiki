{{noteTA
|G1 = IT
}}
{{Expand|time=2009-9-14}}

'''Unix哲学'''是一套基于[[Unix|Unix操作系统]]顶级开发者们的经验提出的[[软件开发|软件开发]]的准则和哲学。

== 來源 ==
UNIX 哲學由 [[Doug_McIlroy|Doug McIlroy]] 在1978年的《Bell System Technical Journal 》中發表:<ref>{{cite web|url=http://emulator.pdp-11.org.ru/misc/1978.07_-_Bell_System_Technical_Journal.pdf|title=Unix Time-Sharing System: Foreword|author=[[Doug_McIlroy|Doug McIlroy]], E. N. Pinson, B. A. Tague|publisher=Bell Laboratories|journal=The Bell System Technical Journal|date=8 July 1978|pages=1902–1903|access-date=2019-10-06|archive-date=2022-04-27|archive-url=https://web.archive.org/web/20220427134233/https://emulator.pdp-11.org.ru/misc/1978.07_-_Bell_System_Technical_Journal.pdf}}</ref>

<br />
== McIlroy：A Quarter Century of Unix ==
[[道格拉斯·麥克羅伊|道格拉斯·麥克羅伊]]是Unix系统上[[管道_(Unix)|管道机制]]的发明者，也是Unix文化的缔造者之一。他归纳的Unix哲学如下：
{{quote|程序应该只关注一个目标，并尽可能把它做好。让程序能够互相协同工作。应该让程序处理[[文本数据流|文本数据流]]，因为这是一个通用的[[接口|接口]]。}}
更加简化的版本是：做一件事，做好它。虽然只有第三条是特指Unix系统的，但Unix开发者们常常同时强调这三个信条。

== Pike：Notes on Programming in C ==
[[羅勃·派克|羅勃·派克]]在他的《[http://www.lysator.liu.se/c/pikestyle.html Notes on Programming in C] {{Wayback|url=http://www.lysator.liu.se/c/pikestyle.html |date=20220424164652 }}》中提到了以下格言。虽然这些规则是关于[[程序设计|程序设计]]的，但作为Unix哲学丝毫不为过：
# 你永远不会知道你的程序会在什么地方耗费时间。程序的[[瓶颈|瓶颈]]常常出现在意想不到的地方，因此在你确信找到瓶颈后再动手{{tsl|en|Optimization (computer science)|优化 (计算机科学)|优化}}代码吧。
# 测试代码。只有在你详细测试了代码，并且发现一部分代码耗费了绝大部分的运行时间时再对程序作速度优化。
# 功能全面的[[算法|算法]]（fancy algorithm）在处理小[[计算复杂性理论|规模]]问题时效率很低，这是因为算法时间效率中的常量很大，而问题往往规模很小。除非你知道你遇到的常常是复杂的情况，否则就让代码丑陋但是简单而高效吧。（即使问题规模确实很大，也首先尝试第二条规则。）
# 功能全面的算法比简单的算法更容易产生bug，更难实现。尽量使用简单的算法和[[数据结构|数据结构]]。
# 数据决定一切。如果选择的数据结构能很好的管理数据，算法部分往往不言自明。记住，数据结构，而非算法，才是编程的关键。
# 没有第六条规则。
Pike的第一、二条规则重申了[[高德纳|高德纳]]的著名格言：“过早的优化是一切罪恶的根源。”<ref>[[Knuth,_Donald|Knuth, Donald]]: [http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf Structured Programming with Goto Statements] {{Wayback|url=http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf |date=20090824073244 }}. ''Computing Surveys'' '''6''':4 (1974), 261–301.</ref> Pike的第三、四条规则被[[肯·汤普逊|肯·汤普逊]]改述成：“疑惑不定之时最适合穷举。”事实上，这两条规则也是[[KISS原则|KISS原则]]的具体表现。规则五在之前[[Fred_Brooks|Fred Brooks]]的[[人月神话|人月神话]]中也被提及。{{tsl|en|Jon Bentley|Jon Bentley}}的《{{tsl|en|Programming Pearls|Programming Pearls}}》中也有一章阐述了相同的设计哲学。此规则作为“如果你的数据结构很好，那么控制它的算法就无关痛痒了”的例子常常被简化成“简约地写代码，聪明地用数据”。第六条规则当然只是Pike针对[[蒙提·派森|蒙提·派森]]之小品{{tsl|en|Bruces sketch|Bruces sketch}}的幽默发挥而已了。

== Mike Gancarz的《UNIX哲学》==
1994年，[[X_Window系统|X Window系统]]开发组的成员Mike Gancarz根据他自己的Unix系统经验以及和其他领域使用Unix系统的资深程序员们的讨论结果，写成了''The UNIX Philosophy''，提出了9条训格之言：
# 小即是美。
# 让程序只做好一件事。
# 尽可能早地建立原型。
# 可移植性比效率更重要。
# 数据应该保存为[[文本文件|文本文件]]。
# 尽可能地榨取软件的全部价值。
# 使用[[Unix_shell|shell]][[脚本语言|脚本]]来提高效率和可移植性。
# 避免使用可定制性低下的用户界面。
# 所有程序都是数据的过滤器。

此外还有十条原则则并不为所有人认同，甚至还是争论的焦点（如[[宏内核|宏内核]]和[[微内核|微内核]]之争）：
# 应该允许用户定制操作环境。
# 让操作系统核心小而轻。
# 使用小写字母并尽量简短。
# 节约纸张，保护树林。
# 沉默是金。
# 并行地思考。
# 部分加部分大于整体。
# 寻找问题的[[帕雷托法则|帕雷托法则]]。
# 程序随需求而增长（[[更糟就是更好|更糟就是更好]]）。
# 层级地思考。

== 糟糕的更好 ==
{{tsl|en|Richard P. Gabriel|Richard P. Gabriel}} 提议Unix的一个关键优势是他称作“糟糕的更好”的设计哲学。在“糟糕的更好”的设计风格下，接口和实现的简单性比系统的任何其他属性都更重要，包括准确性、一致性和完整性。Gabriel主张这种设计风格拥有关键的进化优势，尽管他也怀疑一些结果的质量。


== 参考文献 ==
=== 引用 ===
{{Reflist}}

=== 来源 ===
{{refbegin}}
* ''The Unix Programming Environment'' by [[Brian_Kernighan|Brian Kernighan]] and [[Rob_Pike|Rob Pike]]，1984
* [http://www.lysator.liu.se/c/pikestyle.html ''Notes on Programming in C''] {{Wayback|url=http://www.lysator.liu.se/c/pikestyle.html |date=20220424164652 }}，Rob Pike, September 21, 1989
* ''A Quarter Century of Unix'', Peter H. Salus, Addison-Wesley, May 31, 1994 (ISBN 0-201-54777-5)
* [https://web.archive.org/web/20080512141528/http://www.faqs.org/docs/artu/philosophychapter.html ''Philosophy''] — from [http://www.catb.org/~esr/writings/taoup ''The Art of Unix Programming''] {{Wayback|url=http://www.catb.org/~esr/writings/taoup |date=20210228211849 }}，Eric S. Raymond, Addison-Wesley, September 17, 2003 (ISBN 0-13-142901-9)
* [http://citeseer.ist.psu.edu/schroeder77final.html Final Report of the Multics Kernel Design Project]{{Wayback|url=http://citeseer.ist.psu.edu/schroeder77final.html |date=20080624014330 }} by M. D. Schroeder, D. D. Clark, J. H. Saltzer, and D. H. Wells, 1977.
* ''The UNIX Philosophy'', Mike Gancarz, ISBN 1-55558-123-4
* [https://web.archive.org/web/20100715152821/http://www.faqs.org/docs/artu/ch01s06.html Basics of the Unix Philosophy]
{{refend}}

== 外部链接 ==
* [http://dreamsongs.com/WorseIsBetter.html Worse is Better]{{Wayback|url=http://dreamsongs.com/WorseIsBetter.html |date=20170911185026 }}，Richard P. Gabriel
* [http://www.jwz.org/doc/worse-is-better.html The Rise of "Worse is Better"] {{Wayback|url=http://www.jwz.org/doc/worse-is-better.html |date=20220503161720 }}，Richard P. Gabriel

== 参见 ==
{{Portal box|软件|信息技术|计算机科学}}
* {{tsl|en|Unix architecture|Unix体系}}
* [[更糟就是更好|更糟就是更好]]
* [[Plan_9_from_Bell_Labs|Plan 9 from Bell Labs]]
* [[英文写作指南|英文写作指南]]（The Elements of Style）
* {{tsl|en|The UNIX-HATERS Handbook|The UNIX-HATERS Handbook}}
* [[软件工程|软件工程]]

[[Category:Unix|Category:Unix]]
[[Category:软件开发|Category:软件开发]]