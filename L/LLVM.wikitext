{{noteTA|G1=IT|G2=FL}}
{{Infobox software
| name = LLVM
| logo = LLVM Logo.svg
| logo size = 200px
| developer = LLVM開發團隊
| released = 2003
| latest release version = {{wikidata|property|preferred|references|edit|Q223490|P348|P548=Q2804309}}
| latest release date    = {{wikidata|qualifier|preferred|single|Q223490|P348|P548=Q2804309|P577}}
| latest preview version = {{wikidata|property|preferred|references|edit|Q223490|P348|P548=Q51930650}}
| latest preview date    = {{wikidata|qualifier|preferred|single|Q223490|P348|P548=Q51930650|P577}}
| operating system = [[跨平台|跨平台]]
| genre = [[編譯器|編譯器]]
| programming language = [[C++|C++]]
| license = [https://releases.llvm.org/9.0.0/LICENSE.TXT 帶有LLVM例外的[[Apache许可证|Apache许可证]]2.0]<br />
| website = {{URL|https://www.llvm.org}}
}}

{{lang|en|'''LLVM'''}}是一套[[编译器|编译器]]基础设施项目，为[[自由软件|自由软件]]，以[[C++|C++]]寫成，包含一系列模块化的编译器组件和[[工具链|工具链]]，用来开发编译器[[前端|前端]]和[[后端|后端]]。它是為了任意一種[[程式語言|程式語言]]而寫成的程式，利用[[虛擬技術|虛擬技術]]創造出[[編譯器|編譯時期]]、[[链接器|鏈結時期]]、[[執行時期|執行時期]]以及“閒置時期”的最佳化。

它最早以[[C语言|C]]/[[C++|C++]]為實作對象，而目前它已支援包括[[ActionScript|ActionScript]]、[[Ada|Ada]]、[[D語言|D語言]]、[[Fortran|Fortran]]、[[GLSL|GLSL]]、[[Haskell|Haskell]]、[[Java|Java]]字节码、[[Objective-C|Objective-C]]、[[Swift語言|Swift]]、[[Python|Python]]、[[Ruby|Ruby]]、[[Crystal|Crystal]]、[[Rust|Rust]]、[[Scala|Scala]]<ref>{{Cite paper| last = Reedy| first = Geoff| title = Compiling Scala to LLVM| location = St. Louis, Missouri, United States| accessdate = 2013-02-19| date = 2012-09-24| url = http://www.infoq.com/presentations/Scala-LLVM| journal = | archive-date = 2020-11-29| archive-url = https://web.archive.org/web/20201129174635/https://www.infoq.com/presentations/Scala-LLVM/| dead-url = no}}</ref>以及[[C♯|C#]]<ref>{{citation| title = Mono LLVM| accessdate = 2013-03-10| url = http://www.mono-project.com/Mono_LLVM| archive-date = 2020-06-15| archive-url = https://web.archive.org/web/20200615062051/https://www.mono-project.com/Mono_LLVM/| dead-url = no}}</ref>等语言。

== 历史 ==

LLVM專案的發展起源於2000年[[伊利诺伊大学厄巴纳-香槟分校|伊利诺伊大学厄巴纳-香槟分校]][[維克拉姆·艾夫|維克拉姆·艾夫]]（Vikram Adve）與[[克里斯·拉特納|克里斯·拉特納]]（Chris Lattner）的研究，他們想要為所有靜態及[[動態語言|動態語言]]創造出動態的編譯技術。LLVM是以[[BSD授權|BSD授權]]來發展的[[开源|开源]]軟體。2005年，[[蘋果電腦|蘋果電腦]]雇用了克里斯·拉特納及他的團隊為蘋果電腦開發應用程式系統<ref>Adam Treat, ''[http://lists.trolltech.com/qt4-preview-feedback/2005-02/msg00691.html mkspecs and patches for LLVM compile of Qt4] {{Wayback|url=http://lists.trolltech.com/qt4-preview-feedback/2005-02/msg00691.html |date=20111004073001 }}</ref>，LLVM為現今[[macOS|macOS]]及[[iOS|iOS]]開發工具的一部分。

LLVM的命名最早源自於'''底層虛擬機器'''（{{lang|en|'''L'''ow '''L'''evel '''V'''irtual '''M'''achine}}）的[[首字母縮寫|首字母縮寫]]<ref>{{cite web |url=http://lists.cs.uiuc.edu/pipermail/llvmdev/2011-December/046443.html |title=存档副本 |accessdate=2011-12-22 |deadurl=yes |archiveurl=https://web.archive.org/web/20120117140118/http://lists.cs.uiuc.edu/pipermail/llvmdev/2011-December/046443.html |archivedate=2012-01-17 }}</ref>，由於這個專案的範圍並不侷限於建立一個虛擬機器，這個縮寫導致了廣泛的疑惑。LLVM開始成長之後，成為眾多編譯工具及低階工具技術的統稱，使得這個名字變得更不貼切，開發者因而決定放棄這個縮寫的意涵<ref>{{cite web |title=Chris Lattner discusses the name LLVM |url=http://lists.cs.uiuc.edu/pipermail/llvmdev/2011-December/046440.html |accessdate=22 December 2011 |deadurl=yes |archiveurl=https://web.archive.org/web/20120112000323/http://lists.cs.uiuc.edu/pipermail/llvmdev/2011-December/046440.html |archivedate=2012年1月12日 }}</ref>，現今LLVM已單純成為一個品牌，適用於LLVM下的所有專案，包含LLVM中介碼（LLVM IR）、LLVM除錯工具、LLVM C++標準函式庫等。

因LLVM對產業的貢獻，[[计算机协会|计算机协会]]於2012年将[[ACM软件系统奖|ACM软件系统奖]]授與維克拉姆·艾夫、克里斯·拉特納及[[Evan_Cheng|Evan Cheng]]<ref>{{cite web |url=http://awards.acm.org/homepage.cfm?srt=all&awd=149 |title=ACM Awards |publisher=ACM |deadurl=yes |archiveurl=https://web.archive.org/web/20120402203501/http://awards.acm.org/homepage.cfm?srt=all&awd=149 |archivedate=2012-04-02 |accessdate=2013-04-28 }}</ref>。

自9.0.0版本开始，LLVM使用带有LLVM额外条款的[[Apache许可证|Apache许可证]]2.0进行授权<ref>{{cite web |url=https://releases.llvm.org/9.0.0/LICENSE.TXT |title=LLVM 9.0.0 License |accessdate=2020-11-14 |archive-date=2020-11-11 |archive-url=https://web.archive.org/web/20201111220059/https://releases.llvm.org/9.0.0/LICENSE.TXT |dead-url=no }}</ref>。而从2019年10月开始，LLVM项目的代码托管正式迁移到了[[GitHub|GitHub]]<ref>{{cite web |url=https://llvm.org/docs/Proposals/GitHubMove.html |title=Migration Proposal |accessdate=2020-11-14 |archive-date=2020-11-25 |archive-url=https://web.archive.org/web/20201125162040/https://llvm.org/docs/Proposals/GitHubMove.html |dead-url=no }}</ref>。

{{Program execution}}
== 描述 ==
LLVM提供了一套适合编译器系统的[[中间语言|中间语言]]（{{lang|en|Intermediate Representation}}，IR），有大量变换和优化都围绕其实现。经过变换和优化后的中间语言，可以转换为目标平台相关的[[汇编语言|汇编语言]]代码。LLVM可以和[[GCC|GCC]]工具链一起工作，允许它与为该项目编写的大量现有编译器一起使用。LLVM还可以在编译、链接时生成[[可重新定位的程式碼|可重新定位的程式碼]]（Relocatable Code），甚至在运行时生成二进制机器码。

LLVM的中间语言与具体的语言、指令集、类型系统无关，其中每条指令都是[[静态单赋值形式|静态单赋值形式]]（SSA）， 即每个变量只能被赋值一次。这有助于简化变量之间的依赖分析。LLVM允许静态编译代码，或者通过[[实时编译|实时编译]]（JIT）机制将中间表示转换为机器码（类似Java）。

LLVM支援與語言無關的[[指令集架構|指令集架構]]及[[類型系統|類型系統]]<ref>{{cite web
 | url=http://llvm.org/docs/LangRef.html
 | title=LLVM Language Reference Manual
 | accessdate=16 April 2012
 | archive-date=2012-06-11
 | archive-url=https://web.archive.org/web/20120611064155/http://www.llvm.org/docs/LangRef.html
 | dead-url=no
 }}</ref>。每個在[[静态单赋值形式|静态单赋值形式]]（SSA）的指令集代表著，每個[[变量_(程序设计)|變數]]（被稱為具有型別的暫存器）僅被賦值一次，這簡化了變數間相依性的分析。LLVM允許程式碼被靜態的編譯，包含在傳統的GCC系統底下，或是類似[[JAVA|JAVA]]等後期編譯才將IF編譯成機器碼所使用的[[即時編譯|即時編譯]]（JIT）技術。它的型別系統包含基本型別（[[整数_(计算机科学)|整數]]或是[[浮点数|浮点数]]）及五個[[複合型別|複合型別]]（[[指针_(信息学)|指標]]、[[数组|数组]]、向量、結構及[[子程序|函數]]），在LLVM具體語言的型別建制可以以結合基本型別來表示，舉例來說，C++所使用的class可以被表示為結構、函式及[[函数指针|函数指针]]的陣列所組成。

LLVM JIT編譯器可以最佳化在執行時期時程式所不需要的靜態分支，這在一些[[部份求值|部份求值]]（Partial Evaluation）的案例中相當有效，即當程式有許多選項，而在特定環境下其中多數可被判斷為是不需要。這個特色被使用在[[Mac_OS_X_Leopard|Mac OS X Leopard]]（v10.5）底下[[OpenGL|OpenGL]]的管線，當硬體不支援某個功能時依然可以被成功地運作<ref>{{cite web
 |url         = http://lists.cs.uiuc.edu/pipermail/llvmdev/2006-August/006492.html
 |title       = A cool use of LLVM at Apple: the OpenGL stack
 |author      = Chris Lattner
 |date        = 15 August 2006
 |work        = LLVMdev mailing list
 |accessdate  = 26 October 2008
 |deadurl     = yes
 |archiveurl  = https://web.archive.org/web/20061104170413/http://lists.cs.uiuc.edu/pipermail/llvmdev/2006-August/006492.html
 |archivedate = 2006年11月4日
}}</ref>。OpenGL堆栈下的繪圖程式被編譯為IR，接著在機器上執行時被編譯，當系統擁有高階[[GPU|GPU]]時，這段程式會進行極少的修改並將傳遞指令給GPU，當系統擁有低階的GPU時，LLVM將會編譯更多的程序，使這段GPU無法執行的指令在本地端的[[中央处理器|中央处理器]]執行。LLVM增進了使用[[Intel_GMA|Intel GMA]]晶片等低端機器的效能。一個類似的系統發展於Gallium3D LLVMpipe，它已被合併到[[GNOME|GNOME]]，使其可運行在沒有GPU的環境<ref>Michael Larabel, [http://www.phoronix.com/scan.php?page=news_item&px=MTAxMjI "GNOME Shell Works Without GPU Driver Support"] {{Wayback|url=http://www.phoronix.com/scan.php?page=news_item&px=MTAxMjI |date=20201128173315 }}, ''phoronix'', 6 November 2011</ref>。

根據2011年的一项測試，GCC在執行時期的性能平均比LLVM高10%<ref>{{cite web
 | url=http://vmakarov.fedorapeople.org/spec/2011/llvmgcc32.html
 | author=V. Makarov
 | title=SPEC2000: Comparison of LLVM-2.9 and GCC4.6.1 on x86
 | accessdate=3 October 2011
 | archive-date=2020-08-03
 | archive-url=https://web.archive.org/web/20200803134158/https://vmakarov.fedorapeople.org/spec/2011/llvmgcc32.html
 | dead-url=no
 }}</ref><ref>{{cite web
 | url=http://vmakarov.fedorapeople.org/spec/2011/llvmgcc64.html
 | author=V. Makarov
 | title=SPEC2000: Comparison of LLVM-2.9 and GCC4.6.1 on x86_64
 | accessdate=3 October 2011
 | archive-date=2020-08-03
 | archive-url=https://web.archive.org/web/20200803141309/https://vmakarov.fedorapeople.org/spec/2011/llvmgcc64.html
 | dead-url=no
 }}</ref>。而2013年測試显示，LLVM可以編譯出接近[[GCC|GCC]]相同效能的執行碼<ref>{{cite web
 | url=http://www.phoronix.com/scan.php?page=article&item=llvm_clang32_final
 | author=Michael Larabel
 | title=LLVM/Clang 3.2 Compiler Competing With GCC
 | date=27 December 2012
 | accessdate=31 March 2013
 | archive-date=2020-11-30
 | archive-url=https://web.archive.org/web/20201130200821/https://www.phoronix.com/scan.php?page=article&item=llvm_clang32_final
 | dead-url=no
 }}</ref>。

== 編譯器 ==
LLVM已经成为多个编译器和代码生成相关子项目的母项目。
=== 前端 ===
LLVM最初被用來取代GCC中的程式碼產生器<ref>{{cite conference
 | first=Chris
 | last=Lattner
 | authorlink=Chris Lattner
 | coauthors=Vikram Adve
 | title=Architecture For a Next-Generation GCC
 | url=http://llvm.org/pubs/2003-05-01-GCCSummit2003.html
 | conference=First Annual GCC Developers' Summit
 | date=May 2003
 | accessdate=6 September 2009
 | archive-date=2020-07-07
 | archive-url=https://web.archive.org/web/20200707190703/http://llvm.org/pubs/2003-05-01-GCCSummit2003.html
 | dead-url=no
 }}</ref>，許多GCC的前端已經可以與其運行，LLVM目前支援[[Ada|Ada]]、[[C语言|C语言]]、[[C++|C++]]、[[D語言|D語言]]、[[Fortran|Fortran]]、[[Haskell|Haskell]]、[[Julia_(编程语言)|Julia]]、[[Objective-C|Objective-C]]、[[Rust|Rust]]及[[Swift_(程式语言)|Swift]]的編譯，它使用許多的編譯器，有些來自4.0.1及4.2的[[GCC|GCC]]。

LLVM引發一些人來為許多語言開發新的編譯器，其中一個最引發注意的就是[[Clang|Clang]]，它是一個新的編譯器，同時支援C、Objective-C以及C++。主要來自蘋果電腦的支持，Clang的目的用以取代GCC系統底下的C/Objective-C編譯器，在當代的系統，他較為容易與[[集成开发环境|集成开发环境]]（IDE）整合，而且對於[[线程|线程]]有更好的支援。Clang从3.8版本开始已经支持[[OpenMP|OpenMP]]<ref>{{cite web
 | url=http://llvm.org/releases/3.8.0/tools/clang/docs/ReleaseNotes.html#openmp-support-in-clan
 | title=Clang 3.8 Release Notes
 | accessdate=August 24, 2016
 | archive-date=2016-10-31
 | archive-url=https://web.archive.org/web/20161031144458/http://llvm.org/releases/3.8.0/tools/clang/docs/ReleaseNotes.html#openmp-support-in-clan
 | dead-url=no
 }}</ref>。GCC底下Objective-C的開發已經停滯，而蘋果電腦已經將其支援移至其他的維護分支。

Utrecht [[Haskell|Haskell]]編譯器可以產生LLVM使用的程式碼，但它還在初期的開發階段，並且在許多案例，展示他比起C程式碼產生器擁有更好的效率<ref>{{cite web
 | url=https://llvm.org/pubs/2008-06-CompilingHaskelltoLLVM.pdf
 | title=Compiling Haskell To LLVM
 | accessdate=26 June 2008
 | archive-date=2016-08-06
 | archive-url=https://web.archive.org/web/20160806054908/http://llvm.org/pubs/2008-06-CompilingHaskelltoLLVM.pdf
 | dead-url=no
 }}</ref>
[[Glasgow_Haskell_Compiler|Glasgow Haskell Compiler]]（GHC）擁有一個可以運作的LLVM後端，程式執行效能對比起原先的編譯器可以達到30%的加速，它僅比一個由GHC所實現，並擁有多項最佳化技術的編譯器還慢<ref>{{cite web
 | url=http://blog.llvm.org/2010/05/glasgow-haskell-compiler-and-llvm.html
 | title=LLVM Project Blog: The Glasgow Haskell Compiler and LLVM
 | accessdate=13 August 2010
 | archive-date=2011-06-25
 | archive-url=https://web.archive.org/web/20110625103122/http://blog.llvm.org/2010/05/glasgow-haskell-compiler-and-llvm.html
 | dead-url=yes
 }}</ref>

還有其他的元件在不同的開發階段，包含（但不限於）[[Java_bytecode|Java bytecode]]<ref name=vmkit>{{cite web|author=Gaël Thomas, et al.|title=VMKit: a substrate for virtual machines|url=http://vmkit.llvm.org/|publisher=LLVM.org|accessdate=2014-09-17|archive-date=2020-11-09|archive-url=https://web.archive.org/web/20201109033249/http://vmkit.llvm.org/|dead-url=no}} VMKit 目前的开发已经停滞，并且只支持和 LLVM 3.3 协同编译。对更高版本的 LLVM，需要对源码做一些修改。VMKit 在编译时需要 LLVM 源码中的<code>lib, include</code>。</ref>、[[通用中间语言|通用中间语言]]（CIL）、[[MacRuby|MacRuby]]（實現Ruby 1.9）、[[Standard_ML|Standard ML]]及新的[[graph_coloring|graph coloring]]暫存器配置. {{citation needed|date=June 2012}}

=== 中间端 ===

LLVM的核心是中间端表达式（{{lang|en|Intermediate Representation}}，IR），一种类似汇编的底层语言。IR是一种[[强类型|强类型]]的[[精简指令集|精简指令集]]（{{lang|en|Reduced Instruction Set Computing}}，RISC），并对目标指令集进行了抽象。例如，目标指令集的函数调用惯例被抽象为''call''和''ret''指令加上明确的参数。另外，IR采用无限个数的暂存器，使用如%0，%1等形式表达。LLVM支持三种表达形式：人类可读的汇编，在C++中对象形式和序列化后的bitcode形式。

例如，一个简单的[[Hello_World|Hello World]]程序可以表达为如下的汇编形式。对IR语言的完整描述请参考LLVM官方文档<ref>{{URL|http://llvm.org/docs/LangRef.html}}.</ref>：

<syntaxhighlight lang="llvm">
@.str = internal constant [14 x i8] c"hello, world\0A\00"

declare i32 @printf(i8*, ...)

define i32 @main(i32 %argc, i8** %argv) nounwind {
entry:
    %tmp1 = getelementptr [14 x i8], [14 x i8]* @.str, i32 0, i32 0
    %tmp2 = call i32 (i8*, ...) @printf( i8* %tmp1 ) nounwind
    ret i32 0
}
</syntaxhighlight>

=== 后端 ===

至11.0版本，LLVM已经支持多种后端指令集，包括[[ARM|ARM]]、{{link-en|Qualcomm Hexagon}}、[[MIPS|MIPS]]、[[Nvidia并行指令集|Nvidia并行指令集]]（LLVM中称为NVPTX），[[IBM_POWER微处理器|PowerPC]]、[[AMD_TeraScale|AMD TeraScale]]<ref>{{cite mailing list |url=http://lists.llvm.org/pipermail/llvm-dev/2012-March/048409.html |title=[LLVMdev] RFC: R600, a new backend for AMD GPUs |mailinglist=llvm-dev |first=Tom |last=Stellard |date=March 26, 2012 |access-date=2019-02-18 |archive-date=2020-12-01 |archive-url=https://web.archive.org/web/20201201201932/http://lists.llvm.org/pipermail/llvm-dev/2012-March/048409.html |dead-url=no }}</ref>、{{link-en|AMDGPU}}、[[SPARC|SPARC]]、[[IBM_Z|SystemZ]]、[[RISC-V|RISC-V]]、[[WebAssembly|WebAssembly]]、[[x86|x86]]、[[x86-64|x86-64]]和[[XCore|XCore]]。

LLVM包含一个专门的MC模块，将机器指令在文字形式和机器码形式间相互转换。在之前LLVM依靠系统或是平台专门的工具链将汇编翻译为机器码。LLVM机器码的集成汇编器已经支持绝大多数LLVM的目标平台。

=== 链接器 ===

lld链接器子项目旨在为LLVM开发一个内置的，平台独立的链接器<ref name="lld-home-page">{{cite web|title=lld - The LLVM Linker|url=http://lld.llvm.org/|publisher=The LLVM Project|accessdate=May 10, 2017|archive-date=2020-12-29|archive-url=https://web.archive.org/web/20201229144517/http://lld.llvm.org/|dead-url=no}}</ref>，去除对所有第三方链接器的依赖。在2017年5月，lld已经支持[[ELF|ELF]]、[[PE/COFF|PE/COFF]]、 和[[Mach-O|Mach-O]]。在lld支持不完全的情况下，用户可以使用其他项目，如[[GNU_ld|GNU ld]]链接器。
lld支持链接时优化。当LLVM链接时优化被启用时，LLVM可以输出bitcode而不是本机代码，而本机代码生成由链接器优化处理。

=== C++标准库 ===

LLVM项目包含一个C++标准库的实现（libcxx），具有[[MIT许可证|MIT许可证]]和[[UIUC许可证|UIUC许可证]]的双许可协议。<ref>{{cite web|url=http://libcxx.llvm.org|title="libc++" C++ Standard Library|accessdate=2020-09-26|archive-date=2017-04-29|archive-url=https://web.archive.org/web/20170429202134/http://libcxx.llvm.org/|dead-url=yes}}</ref>

== 另見 ==
{{Portal|自由軟體}}
* [[clang|Clang C/C++編譯器]]
* [[GNU_lightning|GNU lightning]]
* [[GCC|GNU Compiler Collection]]（GCC）
* [[OpenGL|OpenGL]]

== 參考文獻 ==
{{Reflist|2}}

== 外部連結 ==
* [http://llvm.org/ LLVM計劃官方網站]{{Wayback|url=http://llvm.org/ |date=20040503004454 }}
* [http://blog.llvm.org/ LLVM Project Blog]{{Wayback|url=http://blog.llvm.org/ |date=20110714212755 }}
* [http://llvm.org/pubs/2004-01-30-CGO-LLVM.pdf LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation] {{Wayback|url=http://llvm.org/pubs/2004-01-30-CGO-LLVM.pdf |date=20120511180649 }}—a published paper by [[Chris_Lattner|Chris Lattner]] and Vikram Adve.
* [http://llvm.org/docs/LangRef.html LLVM Language Reference Manual] {{Wayback|url=http://llvm.org/docs/LangRef.html |date=20120611064155 }}—describes the LLVM intermediate representation.
* [http://video.google.com/videoplay?docid=6189170937161128523 LLVM 2.0 Presentation] {{Wayback|url=http://video.google.com/videoplay?docid=6189170937161128523 |date=20071230225848 }}—Google Tech Talk Presentation on LLVM 2.0
* [http://arstechnica.com/apple/reviews/2009/08/mac-os-x-10-6.ars/9 Discussion of LLVM] {{Wayback|url=http://arstechnica.com/apple/reviews/2009/08/mac-os-x-10-6.ars/9 |date=20120509075930 }} by [[John_Siracusa|John Siracusa]] at [[Ars_Technica|Ars Technica]]
* [http://www.aosabook.org/en/llvm.html LLVM內部結構]{{Wayback|url=http://www.aosabook.org/en/llvm.html |date=20161202070941 }}（The Architecture of Open Source Applications, Volume II - ISBN 9781105571817）
* [https://web.archive.org/web/20151101151141/http://llvm.linuxfoundation.org/index.php/Main_Page LLVMLinux專案]

[[Category:编译器软件|L]]
[[Category:程序设计工具|L]]
[[Category:虛擬化軟體|L]]
[[Category:C語言家族|L]]