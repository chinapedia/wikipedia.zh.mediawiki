在[[计算机科学|计算机科学]]与[[数值分析|数值分析]]中，'''最后一位上的单位值'''或称'''最小精度单位'''，缩写为'''ULP'''，是毗邻的浮点数值之间的距离，也即浮点数在保持指数部分的时候最低有效数字为1所对应的值。ULP用于度量数值计算的精度。<ref>David Goldberg: What Every Computer Scientist Should Know About Floating-Point Arithmetic, section 1.2 Relative Error and Ulps, ACM Computing Surveys, Vol 23, No 1, pp.8, March 1991.</ref>

例如：圆周率位于毗邻的双精度浮点数3.1415926535897927与3.1415926535897936之间。
==定义==
设[[底数_(对数)|底数]]为''b''，如果''x''的指数为''E''，那么ULP(''x'') = [[机器精度|机器精度]]·''b''<sup>''E''</sup>。<ref>{{cite book|first=Nicholas | last=Higham |title=Accuracy and Stability of Numerical Algorithms (2 ed)|publisher=SIAM|year=2002}}</ref>但在计算机与数值计算的文献中，对''ULP''，''指数''与''机器精度''也可用其它方式定义。如John Harrison给出的定义: ULP(''x'')是两个最近的跨（''straddling''）''x''的浮点数''a''与''b''的距离，即''a'' ≤ ''x'' ≤ ''b''且''a'' ≠ ''b''，并且在指数无上限的情形。<ref>{{cite web|last=Harrison|first=John|title=A Machine-Checked Theory of Floating Point Arithmetic|url=http://www.cl.cam.ac.uk/~jrh13/papers/fparith.html|accessdate=2013-07-17|archive-date=2021-02-24|archive-url=https://web.archive.org/web/20210224172244/http://www.cl.cam.ac.uk/~jrh13/papers/fparith.html|dead-url=no}}</ref><ref>Muller, Jean-Michel (2005-11). "On the definition of ulp(x)". INRIA Technical Report 5504. ACM Transactions on Mathematical Software, Vol. V, No. N, November 2005. Retrieved in 2012-03 from http://ljk.imag.fr/membres/Carine.Lucas/TPScilab/JMMuller/ulp-toms.pdf {{Wayback|url=http://ljk.imag.fr/membres/Carine.Lucas/TPScilab/JMMuller/ulp-toms.pdf |date=20201125213852 }}.</ref>这两个定义基本等价。

被所有现代浮点硬件遵从[[IEEE_754|IEEE 754]]标准要求基本算术运算（1985年起的加法、减法、乘法、除法、求平方根，以及2008年起的“[[积和熔加运算|积和熔加运算（FMA）]]”）的结果近似到最近的浮点数且与数学确切结果的距离在0.5 ULP范围内。这性质意味着近似结果与数学确切结果的距离是最小的（但对于居中情形，有两个毗邻的浮点数都满足上述要求）。有美誉的数值库（numeric library）计算基本[[超越函数|超越函数]]的误差在0.5至大约1 ULP间。仅有少数库在计算超越函数时的误差小于0.5 ULP，这一问题相当复杂，归因于{{tsl|en|Table-maker's dilemma|Table-Maker's Dilemma}}。<ref>{{cite web |last=Kahan |first=William |title=A Logarithm Too Clever by Half |url=http://www.cs.berkeley.edu/~wkahan/LOG10HAF.TXT |accessdate=2008-11-14 |archive-date=2015-07-27 |archive-url=https://web.archive.org/web/20150727192941/http://www.cs.berkeley.edu/~wkahan/LOG10HAF.TXT |dead-url=no }}</ref>

==例子==
找到最接近圆周率的双精度浮点数：
<syntaxhighlight lang="cpp">
#include <cmath> 
#include <cstdio> 
#define PI 3.14159265358979323846264338327950288419716939937510582097494459230 

int main() 
{
    printf("%.17g (%a)\n", PI, PI); 
    printf("%.17g (%a)\n", std::nextafter(PI, 0.0), std::nextafter(PI, 0.0)); 
    printf("%.17g (%a)\n", std::nextafter(PI, 4.0), std::nextafter(PI, 4.0)); 
}
/* Output:
3.1415926535897931 (0x1.921fb54442d18p+1)
3.1415926535897927 (0x1.921fb54442d17p+1)
3.1415926535897936 (0x1.921fb54442d19p+1)
*/
</syntaxhighlight> 

设''x''用[[IEEE_754|IEEE 754]]表示时四舍五入且舍入到偶数的操作记为RN。如果ULP(''x'')的值小于等于1，那么{{mono|1=RN(''x'' + 1) > ''x''}}；否则，{{mono|1=RN(''x'' + 1) = ''x''}}或{{mono|1=RN(''x'' + 1) = ''x'' + ULP(x)}}，取决于最低有效位（least significant digit）与x的指数部分。下面的[[Python|Python]]程序展示了这个例子：
<syntaxhighlight lang="pycon">
>>> x = 1.0
>>> p = 0
>>> while x != x + 1:
...   x = x * 2
...   p = p + 1
... 
>>> x
9007199254740992.0
>>> p
53
>>> x + 2 + 1
9007199254740996.0
</syntaxhighlight>
这个例子中，从{{mono|1=''x'' = 1}}开始，反复地翻倍直至{{mono|1=''x'' = ''x'' + 1}}。结果是2<sup>53</sup>，因为[[双精度|双精度]]浮点数格式使用了53位有效数字，从而ulp(2<sup>53</sup>)=2<sup>53</sup>*2<sup>-52</sup>=2 > 1 。即，在这里双精度浮点数可表示的最小精度间隔已经是2了。 

==语言支持==
从Java 1.5, [[Java|Java]]语言的标准库包含了函数：
<tt>{{Javadoc:SE|java/lang|Math|ulp(double)}}</tt>与
<tt>{{Javadoc:SE|java/lang|Math|ulp(float)}}</tt>。

[[C语言|C语言]]标准库从[[C99|C99]]开始提供了计算给定方向的下一个浮点数的函数：
<code>nextafterf</code>与<code>nexttowardf</code>用于<code>float</code>, <code>nextafter</code>与<code>nexttoward</code>用于<code>double</code>, <code>nextafterl</code>与<code>nexttowardl</code>用于<code>long double</code>, 都在<code><math.h></code>中声明。<ref name=c99>{{cite book  | url=http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf  | title=ISO/IEC 9899:1999 specification  | at=p. 237, §7.12.11.3 ''The nextafter functions'' and §7.12.11.4 ''The nexttoward functions''  | access-date=2016-04-08  | archive-date=2018-01-11  | archive-url=https://web.archive.org/web/20180111210637/http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf  | dead-url=no  }}</ref>

[[Boost_C++_Libraries|Boost C++ Libraries]]提供了<tt>boost::math::float_next</tt>, <tt>boost::math::float_prior</tt>, <tt>boost::math::nextafter</tt>与<tt>boost::math::float_advance</tt>等函数获取邻近的浮点数。
<ref name="Boost advance">{{cite book | url=http://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/next_float/float_advance.html | title=Boost float_advance}}</ref>。<tt>boost::math::float_distance(a, b)</tt>计算两个double值之间的浮点距离。
<ref name="Boost float_distance">{{cite book | url=http://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/next_float/float_distance.html | title=Boost float_distance}}</ref>

==参见==
* [[IEEE_754|IEEE 754]]
* [[最低有效位|最低有效位]] (LSB)
* [[机器精度|机器精度]]

==参考文献==
{{Reflist}}

* Goldberg, David (1991-03). "Rounding Error" in "What Every Computer Scientist Should Know About Floating-Point Arithmetic". Computing Surveys, ACM, March 1991. Retrieved from https://web.archive.org/web/20160406101256/http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html#689.

[[Category:计算机算术|Category:计算机算术]]