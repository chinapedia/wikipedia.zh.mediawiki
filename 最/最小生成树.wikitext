{{TA
|G1=IT
|G2=Math
}}
[[File:Minimum_spanning_tree.svg|thumb]]和它的最小生成树。在该图中，边的长度正比于权值A。]]
'''最小生成树'''是一副[[连通图|连通]][[图_(数学)|加权无向图]]中一棵权值最小的[[生成树|生成树]]。

在一給定的[[無向圖|無向圖]] G = (V, E) 中，(u, v) 代表連接頂點 u 與頂點 v 的邊（即 <math>(u, v)\in E</math>），而 w(u, v) 代表此[[邊_(幾何)|邊]]的權重，若存在 T 為 E 的[[子集|子集]]（即 <math>T\subseteq E</math>）且 (V, T) 為[[樹_(圖論)|樹]]，使得

:<math>w(T) = \sum_{(u,v)\in T} w(u,v)</math>

的 w(T) 最小，則此 T 為 G 的'''最小生成樹'''。

最小生成樹其實是'''最小權重生成樹'''的簡稱。

一个连通图可能有多个生成树。当图中的边具有权值时，总会有一个生成树的边的权值之和小于或者等于其它生成树的边的权值之和。广义上而言，对于非连通无向图来说，它的每一[[图论术语|连通分量]]同样有最小生成树，它们的并被称为'''最小生成森林'''。

以有線電視電纜的架設為例，若只能沿著街道佈線，則以街道為邊，而路口為頂點，其中必然有一最小生成樹能使佈線成本最低。

==相关性质==
===存在个数===
[[File:Multiple_minimum_spanning_trees.svg|thumb]]
最小生成树在一些情况下可能会有多个。例如，当图的每一条边的权值都相同时，该图的所有生成树都是最小生成树。

====唯一性====
如果图的每一条边的权值都互不相同，那么最小生成树将只有一个<ref>{{cite web |url=http://algs4.cs.princeton.edu/43mst/ |language=en |title=Minimum Spanning Trees |publisher=princeton.edu |date=2015-09-13 |accessdate=2016-02-08 |archive-date=2020-09-27 |archive-url=https://web.archive.org/web/20200927025156/https://algs4.cs.princeton.edu/43mst/ |dead-url=no }}</ref>。这一定理同样适用于最小生成森林。

证明：
<blockquote>
假设图<math>G</math>为每条边权值互不相同的连通图，且有两个不同的最小生成树<math>T</math>和<math>T'</math>。

则<math>T</math>中必然存在一些在<math>T'</math>中并不存在的边，取其中一条这样的边<math>e_0</math>。

因为<math>T'</math>是最小生成树，所以若往<math>T'</math>中添加边<math>e_0</math>，则将会出现环路。（因为有<math>m</math>个顶点的树有且仅有<math>m-1</math>条边）

同时可知，如果从<math>T</math>中删除边<math>e_0</math>，则<math>T</math>将分为互不连通的两个连通分量。因为<math>e_0 \notin T'</math>，所以<math>T'</math>中必然有其他的边连接这两个连通分量。且将<math>e_0</math>加入<math>T'</math>后形成的环路中，除了<math>e_0</math>外至少有另一条连接<math>T</math>中删除<math>e_0</math>后的这两个连通分量的边。取其中一条这样的边，记作<math>{e_0}'</math>。此时若将<math>{e_0}'</math>加入<math>T</math>，则可连接从<math>T</math>中删除<math>e_0</math>后得到的两个连通分量，并形成一棵不同的生成树。

因为<math>G</math>中所有边的权值互不相同，所以关于<math>e_0</math>和<math>{e_0}'</math>的权重大小关系，可能有以下两种情况之一：
# 若<math>e_0 < {e_0}'</math>，则可从<math>T'</math>中删除<math>{e_0}'</math>并加入<math>e_0</math>，从而得到一棵总权值更小的生成树。这和<math>T'</math>是最小生成树相矛盾。
# 若<math>e_0 > {e_0}'</math>，则可从<math>T</math>中删除<math>e_0</math>并加入<math>{e_0}'</math>，从而得到一棵总权值更小的生成树。同样，这和<math>T</math>是最小生成树相矛盾。

综上，若<math>G</math>各边权重互不相等，则不可能存在两棵互不相同的最小生成树。即<math>G</math>的最小生成树是唯一的。
</blockquote>

===边的权值之和最低的子图===
如果图的边的权值都为正数，那么最小生成树就是该图的所有包含所有[[顶点_(图论)|顶点]]的子图中权值最低的连通子图。

===环定理===
对于连通图中的任意一个环<math>C</math>：如果<math>C</math>中有边<math>e</math>的权值大于该环中任意一个其它的边的权值，那么这个边不会是最小生成树中的边

证明：<br>
假设<math>e</math>属于最小生成树<math>T1</math>，那么将<math>e</math>删去将会使得<math>T1</math>变为两个树。因为环<math>C</math>必然还存在另一横切边ｆ可以连接两个子树形成生成树<math>T2</math>，且由于<math>f</math>＜<math>e</math>，生成树<math>T2</math>权值更小，与<math>T1</math>是最小生成树矛盾。

===切分定理===
[[File:Msp-the-cut-correct.svg|thumb]]

在一幅连通加权无向图中，给定任意的{{link-en|切分|Cut (graph theory)}}，如有一条横切边的权值严格小于所有其他横切边，则这条边必然属于图的最小生成树。

证明：<br>
令<math>e</math>为权重最小的横切边，假设<math>T</math>为图的最小生成树，且<math>T</math>不包含<math>e</math>。那么如果将<math>e</math>加入<math>T</math>，得到的图必然含有一条经过<math>e</math>的环，且这个环也含有另一条横切边--设为<math>e'</math>，<math>e'</math>的权重必然大于<math>e</math>，那么用<math>e</math>替换<math>e'</math>可以形成一个权值小于<math>T</math>的生成树，与<math>T</math>为最小生成树矛盾。所以假设不成立<ref>{{cite book|author=Robert Sedgewick, Kevin Wayne |coauthors=|title=算法 |year= |publisher=人民邮电出版社|location=北京 |isbn=978-7-115-29380-0|date=2012年10月|accessdate=2016-02-03 }}，p391--p392</ref>。

===最小权值边===
如果图的具有最小权值的边只有一条，那么这条边包含在任意一个最小生成树中。

证明：<br>
假设该边<math>e</math>没有在最小生成树<math>T</math>中，那么将<math>e</math>加入<math>T</math>中会形成环，用<math>e</math>替换环中的任意一条权值更大的边，将会形成权值更小的生成树，与题设矛盾。

==相关算法==
===历史简介===
计算稠密图的最小生成树最早是由{{link-en|罗伯特·普里姆|Robert C. Prim}}在1957年发明的<ref>{{citation
 | last = Prim | first = R. C. | authorlink = Robert C. Prim
 | date = November 1957
 | doi = 10.1002/j.1538-7305.1957.tb01515.x
 | issue = 6
 | journal = [[Bell_System_Technical_Journal|Bell System Technical Journal]]
 | pages = 1389–1401
 | title = Shortest connection networks And some generalizations
 | volume = 36}}.</ref>，即Prim算法。之后[[艾兹赫尔·戴克斯特拉|艾兹赫尔·戴克斯特拉]]也独自发明了它<ref>{{citation
 | last = Dijkstra
 | first = E. W.
 | authorlink = Edsger W. Dijkstra
 | doi = 10.1007/BF01386390
 | journal = Numerische Mathematik
 | pages = 269–271
 | title = A note on two problems in connexion with graphs
 | url = http://www-m3.ma.tum.de/twiki/pub/MN0506/WebHome/dijkstra.pdf
 | volume = 1
 | year = 1959
 | accessdate = 2016-02-06
 | archive-date = 2020-01-23
 | archive-url = https://web.archive.org/web/20200123110037/http://www-m3.ma.tum.de/foswiki/pub/MN0506/WebHome/dijkstra.pdf
 | dead-url = no
 }}.</ref>。但该算法的基本思想是由{{link-en|沃伊捷赫·亚尔尼克|Vojtěch Jarník}}于1930年发明的<ref>{{citation
 | last = Jarník
 | first = V.
 | author-link = Vojtěch Jarník
 | journal = Práce Moravské Přírodovědecké Společnosti
 | language = cs
 | pages = 57–63
 | title = O jistém problému minimálním
 | trans_title = About a certain minimal problem
 | url = http://dml.cz/dmlcz/500726
 | volume = 6
 | year = 1930
 | accessdate = 2016-02-06
 | archive-date = 2017-06-17
 | archive-url = https://web.archive.org/web/20170617135923/http://dml.cz/dmlcz/500726
 | dead-url = no
 }}.</ref>。所以该算法有时候也被称为Jarník算法或者Prim-Jarník算法。20世纪70年代，优先队列发明之后很快被用在了寻找稀疏图中的最小生成树上。1984年，[[迈克尔·弗里德曼|迈克尔·弗里德曼]]和[[罗伯特·塔扬|罗伯特·塔扬]]发明了[[斐波那契堆|斐波那契堆]]，Prim算法所需要的运行时间在理论上由<math>E \log E</math>提升到了<math>E+V \log V</math>。{{link-en|约瑟夫·克鲁斯卡尔|Joseph Kruskal}}在1956年发表了他的算法，在他的论文中提到了Prim算法的一个变种，而{{link-en|奥塔卡尔·布卢瓦卡|Otakar Borůvka}}在20世纪20年代的论文中就已经提到了该变种。M.Sollin在1961年重新发现了该算法，该算法后成为实现较好渐进性能的最小生成树算法和并行最小生成树算法的基础<ref>{{cite book|author=Robert Sedgewick, Kevin Wayne |coauthors=|title=算法 |year= |publisher=人民邮电出版社|location=北京 |isbn=978-7-115-29380-0|date=2012年10月|accessdate=2016-02-03 }}，p407--p408</ref>。

以下各算法介绍中，<math>E</math>表示图的边数，<math>V</math>表示图的[[顶点_(图论)|顶点]]数。　

===Borůvka算法===
第一个用于寻找最小生成树的算法由捷克科学家{{link-en|奥塔卡尔·布卢瓦卡|Otakar Borůvka}}提出，即{{link-en|Borůvka算法|Borůvka's algorithm}}。

===Prim算法===
{{main|普里姆算法}}
Prim算法的每一步都会为一棵生长中的树添加一条边，该树最开始只有一个[[顶点_(图论)|顶点]]，然后会添加<math>V - 1</math>个边。每次总是添加生长中的树和树中除该生长的树以外的部分形成的切分的具有最小权值的横切边。

Prim算法的时间复杂度为<math>O(E+V\log V)</math>。

===Kruskal算法===
{{main|克鲁斯克尔演算法}}

按照边的权重顺序（从小到大）将边加入生成树中，但是若加入该边会与生成树形成环则不加入该边。直到树中含有<math>V-1</math>条边为止。这些边组成的就是该图的最小生成树。

Kruskal算法的时间复杂度为<math>E \log E</math>。

===更快的算法===
一些研究者希望可以找出更为高效的算法，在这方面也有了一定的成果。
{{harvtxt|Karger|Klein|Tarjan|1995}}针对边的权值可以成对比较的特殊模型提出了一个基于Borůvka算法和翻转删除算法的可以在线性时间内解决最小生成树的算法<ref>{{citation
 | last1 = Karger | first1 = David R. | author1-link = David Karger
 | last2 = Klein | first2 = Philip N.
 | last3 = Tarjan | first3 = Robert E. | author3-link = Robert Tarjan
 | doi = 10.1145/201019.201022
 | mr = 1409738
 | issue = 2
 | journal = [[Journal_of_the_Association_for_Computing_Machinery|Journal of the Association for Computing Machinery]]
 | pages = 321–328
 | title = A randomized linear-time algorithm to find minimum spanning trees
 | volume = 42
 | year = 1995}}</ref><ref>{{citation
 | last1 = Pettie | first1 = Seth
 | last2 = Ramachandran | first2 = Vijaya
 | contribution = Minimizing randomness in minimum spanning tree, parallel connectivity, and set maxima algorithms
 | location = San Francisco, California
 | pages = 713–722
 | title = Proc. 13th ACM-SIAM Symposium on Discrete Algorithms (SODA '02)
 | url = http://portal.acm.org/citation.cfm?id=545477
 | year = 2002}}.</ref>。

最快的非随机比较算法是由{{link-en|伯纳德·沙泽勒|Bernard Chazelle}}提出的。该算法依赖于{{link-en|soft heap|soft heap}}这样一个类似于[[优先级队列|优先级队列]]的[[数据结构|数据结构]]<ref name=Chazelle2000>{{citation
 | last = Chazelle | first = Bernard | authorlink = Bernard Chazelle
 | doi = 10.1145/355541.355562
 | mr = 1866456
 | issue = 6
 | journal = [[Journal_of_the_Association_for_Computing_Machinery|Journal of the Association for Computing Machinery]]
 | pages = 1028–1047
 | title = A minimum spanning tree algorithm with inverse-Ackermann type complexity
 | volume = 47
 | year = 2000}}.</ref><ref>{{citation
 | last = Chazelle | first = Bernard | authorlink = Bernard Chazelle
 | doi = 10.1145/355541.355554
 | mr = 1866455
 | issue = 6
 | journal = [[Journal_of_the_Association_for_Computing_Machinery|Journal of the Association for Computing Machinery]]
 | pages = 1012–1027
 | title = The soft heap: an approximate priority queue with optimal error rate
 | volume = 47
 | year = 2000}}.</ref> 。该算法的时间复杂度为<math>O(E\alpha (E,V))</math>。<math>\alpha</math>就是[[阿克曼函数#反函數|阿克曼函数反函数]]，<math>\alpha</math>的增长速度非常慢，对于一般的数值来说，其值很难超过5，所以该算法的复杂度可以近似看成是线性时间。

===线性时间的最小生成树算法===
目前，既不能证明不存在能在线性时间内得到任意图的最小生成树的算法，也未能发明能够在线性时间内计算稀疏图的最小生成树的算法。

==相关问题==
{{link-en|k-最小生成树|k-minimum spanning tree}}：图中包含k个[[顶点_(图论)|顶点]]的所有子图的所有最小生成树中权值最小的生成树。

{{link-en|欧几里得最小生成树|Euclidean minimum spanning tree}}是一个用欧几里得距离来表示权值的连通加权图的最小生成树。

{{link-en|方格线最小生成树|rectilinear minimum spanning tree}}是一个用曼哈顿距离来表示权值的连通加权图的最小生成树。

{{link-en|容量最小生成树|capacitated minimum spanning tree}}是一棵树且其每个节点的子树的容量都不大于<math>C</math>。解决该问题是[[NP困难|NP困难]]的<ref>{{citation
 | last1 = Jothi | first1 = Raja
 | last2 = Raghavachari | first2 = Balaji
 | title = Approximation Algorithms for the Capacitated Minimum Spanning Tree Problem and Its Variants in Network Design
 | journal = ACM Trans. Algorithms
 | volume = 1
 | issue = 2
 | pages = 265–282
 | year = 2005
 | url = http://doi.acm.org/10.1145/1103963.1103967
 | doi=10.1145/1103963.1103967
}}</ref>。但是[[伊萨·威廉姆斯|伊萨·威廉姆斯]]和[[夏尔马|夏尔马]]以及提出了可以在接近多项式时间内解决该问题的[[启发法|启发式]]。

{{link-en|度受限最小生成树|degree-constrained spanning tree}}是一棵树，其每一个[[顶点_(图论)|顶点]]连接的顶点数都不超过d。对一些特定的d值，该问题类似于旅行推销员问题。该问题也是[[NP困难|NP困难]]的。

对有向图来说，其与最小生成树类似的图处理问题叫做[[树状图_(数据结构)|最小树形图问题]]。

'''最大生成树'''是一棵比其它所有生成树都要大或者相等的生成树。其解决方法类似于最小生成树算法。求解最大生成树的算法在[[自然语言处理|自然语言处理]]以及[[条件随机场|条件随机场]]这些问题上起到很大的作用<ref>{{cite conference
 | last1 = McDonald
 | first1 = Ryan
 | last2 = Pereira
 | first2 = Fernando
 | last3 = Ribarov
 | first3 = Kiril
 | last4 = Hajič
 | first4 = Jan
 | title = Non-projective dependency parsing using spanning tree algorithms
 | booktitle = Proc. HLT/EMNLP
 | year = 2005
 | url = http://www.seas.upenn.edu/~strctlrn/bib/PDF/nonprojectiveHLT-EMNLP2005.pdf
 | access-date = 2016-02-06
 | archive-date = 2020-10-01
 | archive-url = https://web.archive.org/web/20201001165843/https://www.seas.upenn.edu/~strctlrn/bib/PDF/nonprojectiveHLT-EMNLP2005.pdf
 | dead-url = no
 }}</ref>。

'''动态最小生成树'''是在已经计算完一个图的最小生成树后动态改变一些边的取值或删除/添加一些点或者边，求解新图的最小生成树<ref>{{citation
 | last1 = Spira | first1 = P. M.
 | last2 = Pan | first2 = A.
 | mr = 0378466
 | issue = 3
 | journal = SIAM Journal on Computing
 | pages = 375–380
 | title = On finding and updating spanning trees and shortest paths
 | volume = 4
 | year = 1975
 | doi=10.1137/0204032}}.</ref><ref>{{citation
 | last1 = Holm | first1 = Jacob
 | last2 = de Lichtenberg | first2 = Kristian
 | last3 = Thorup | first3 = Mikkel | author3-link = Mikkel Thorup
 | doi = 10.1145/502090.502095
 | mr = 2144928
 | issue = 4
 | journal = [[Journal_of_the_Association_for_Computing_Machinery|Journal of the Association for Computing Machinery]]
 | pages = 723–760
 | title = Poly-logarithmic deterministic fully dynamic algorithms for connectivity, minimum spanning tree, 2-edge, and biconnectivity
 | volume = 48
 | year = 2001}}.</ref><ref>{{citation
 | last1 = Chin | first1 = F.
 | last2 = Houck | first2 = D.
 | journal = [[Journal_of_Computer_and_System_Sciences|Journal of Computer and System Sciences]]
 | volume = 16
 | issue = 3
 | pages = 333–344
 | title = Algorithms for updating minimal spanning trees
 | year = 1978
 | doi=10.1016/0022-0000(78)90022-3}}.</ref>。

==注释==
{{note|d1|1}}：用一条边链接树中的任意两个顶点都会产生一个新的环。

==参考==
{{Reflist|3}}

==参考文献==
* [http://citeseer.ist.psu.edu/nesetril00otakar.html Otakar Boruvka on Minimum Spanning Tree Problem (translation of the both 1926 papers, comments, history) (2000)] {{Wayback|url=http://citeseer.ist.psu.edu/nesetril00otakar.html |date=20080504022457 }} [[Jaroslav_Nešetřil|Jaroslav Nešetřil]], Eva Milková, Helena Nesetrilová. (Section 7 gives his algorithm, which looks like a cross between Prim's and Kruskal's.)
* [[Thomas_H._Cormen|Thomas H. Cormen]], [[Charles_E._Leiserson|Charles E. Leiserson]], [[Ronald_L._Rivest|Ronald L. Rivest]], and [[Clifford_Stein|Clifford Stein]]. ''[[Introduction_to_Algorithms|Introduction to Algorithms]]'', Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Chapter 23: Minimum Spanning Trees, pp. 561–579.
* Eisner, Jason (1997). [http://www.cs.jhu.edu/~jason/papers/eisner.mst-tutorial.pdf State-of-the-art algorithms for minimum spanning trees: A tutorial discussion] {{Wayback|url=http://www.cs.jhu.edu/~jason/papers/eisner.mst-tutorial.pdf |date=20200215100901 }}. Manuscript, University of Pennsylvania, April. 78 pp.
* Kromkowski, John David. "Still Unmelted after All These Years", in Annual Editions, Race and Ethnic Relations, 17/e (2009 McGraw Hill) (Using minimum spanning tree as method of demographic analysis of ethnic diversity across the United States).

==外部链接==
* [http://www.boost.org/libs/graph/doc/table_of_contents.html Implemented in BGL, the Boost Graph Library] {{Wayback|url=http://www.boost.org/libs/graph/doc/table_of_contents.html |date=20080821220341 }}
* [http://www.cs.sunysb.edu/~algorith/files/minimum-spanning-tree.shtml The Stony Brook Algorithm Repository - Minimum Spanning Tree codes] {{Wayback|url=http://www.cs.sunysb.edu/~algorith/files/minimum-spanning-tree.shtml |date=20140724034250 }}
* [https://web.archive.org/web/20100317031339/http://www.codeplex.com/quickgraph Implemented in QuickGraph for .Net]
{{算法}}
[[Category:图算法|Category:图算法]]
[[Category:算法|Category:算法]]
[[Category:树结构|Category:树结构]]