{{noteTA
|T=zh-hans:文件描述符; zh-hant:檔案描述符;
|G1=IT
}}
'''文件描述符'''（{{lang|en|File descriptor}}）是计算机科学中的一个术语，是一个用于表述指向[[文件|文件]]的引用的抽象化概念。

==概要==
文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向[[内核|内核]]为每一个[[进程|进程]]所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在[[程序设计|程序设计]]中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于[[UNIX|UNIX]]、[[Linux|Linux]]这样的操作系统。

每个Unix进程（除了可能的[[守护进程|守护进程]]）应均有三个标准的[[POSIX|POSIX]]文件描述符，对应于三个标准流：
{| class="wikitable"
!整数值
!名称
!{{mono|<[[unistd.h|unistd.h]]>}}符号常量<ref>{{cite web
| url       = http://pubs.opengroup.org/onlinepubs/009695399/mindex.html
| title       = The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition
| access-date       = 2016-10-24
| archive-date       = 2021-03-13
| archive-url       = https://web.archive.org/web/20210313214954/https://pubs.opengroup.org/onlinepubs/009695399/mindex.html
| dead-url       = no
}}</ref>
!{{mono|<[[stdio.h|stdio.h]]>}}文件流<ref>{{cite web
| url     = http://pubs.opengroup.org/onlinepubs/009696799/basedefs/stdio.h.html
| title     = <stdio.h>
| series     = The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition
| author     = The IEEE and The Open Group
| accessdate     = May 31, 2014
| archive-date     = 2020-09-23
| archive-url     = https://web.archive.org/web/20200923011853/https://pubs.opengroup.org/onlinepubs/009696799/basedefs/stdio.h.html
| dead-url     = no
}}</ref>
|-
|0
|[[stdin|Standard input]]
|{{mono|STDIN_FILENO}}
|{{mono|stdin}}
|-
|1
|[[stdout|Standard output]]
|{{mono|STDOUT_FILENO}}
|{{mono|stdout}}
|-
|2
|[[stderr|Standard error]]
|{{mono|STDERR_FILENO}}
|{{mono|stderr}}
|}

===优点===
文件描述符的优点主要有两个：
* 基于文件描述符的[[I/O|I/O操作]]兼容[[POSIX|POSIX]]标准。
* 在UNIX、Linux的系统调用中，大量的系统调用都是依赖于文件描述符。

例如，下面的代码就示范了如何基于文件描述符来读取当前目录下的一个指定文件，并把文件内容打印至Console中。

<syntaxhighlight lang="c">
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

int main (void){
    int fd;
    int numbytes;
    char path[] = "file";
    char buf[256];

    /*
     * O_CREAT:如果文件不存在则创建
     * O_RDONLY:以只读模式打开文件
     */
    fd = open(path, O_CREAT | O_RDONLY, 0644);
    if(fd < 0){
        perror("open()");
        exit(EXIT_FAILURE);
    }

    memset(buf, 0x00, 256);
    while((numbytes = read(fd, buf, 255)) > 0){
        printf("%d bytes read: %s", numbytes, buf);
        memset(buf, 0x00, 256);
    }
    close (fd);
    exit(EXIT_SUCCESS);
}

</syntaxhighlight>

此外，在Linux系列的操作系统上，由于Linux的设计思想便是把一切设备都视作文件。因此，文件描述符为在该系列平台上进行设备相关的编程实际上提供了一个统一的方法。

===缺点===
文件描述符的概念存在两大缺点：
* 在非UNIX/Linux [[操作系统|操作系统]]上（如[[Windows|Windows]]），无法基于这一概念进行编程——事实上，Windows下的文件描述符和[[信号量|信号量]]、[[互斥锁|互斥锁]]等[[内核对象|内核对象]]一样都记作HANDLE。
* 由于文件描述符在形式上不过是个整数，当代码量增大时，会使编程者难以分清哪些整数意味着数据，哪些意味着文件描述符。因此，完成的代码可读性也就会变得很差，这一点一般通过使用名称有文字意义的[[魔术数字|魔术数字]]进行替换来解决。

===其他===
* 对于ANSI C规范中定义的标准库的文件I/O操作。ANSI C规范给出了一个解决方法，就是使用FILE[[结构体|结构体]]的指针。事实上，UNIX/Linux平台上的FILE[[结构体|结构体]]的实现中往往都是封装了文件描述符变量在其中。
* 在UNIX/Linux平台上，对于控制台（Console）的[[标准输入|标准输入]]，[[标准输出|标准输出]]，[[标准错误输出|标准错误输出]]也对应了三个文件描述符。它们分别是0,1,2。在实际编程中，如果要操作这三个文件描述符时，建议使用<unistd.h>[[头文件|头文件]]中定义的三个宏来表示：STDIN_FILENO, STDOUT_FILENO以及STDERR_FILENO.
* 对于一个进程而言，文件描述符的变化范围为0~OPEN_MAX{{NoteTag|OPEN_MAX定义在头文件<code>[[limits.h|limits.h]]</code>中。}}.

==与文件描述符相关的操作==

===文件描述符的生成===

* open(), open64(), creat(), creat64()
* socket()
* socketpair()
* pipe()

===与单一文件描述符相关的操作===

* read(), write()
* recv(), send()
* recvmsg(), sendmsg() 
* sendfile()
* lseek(), lseek64()
* fstat(), fstat64()
* fchmod()
* fchown()

===与复数文件描述符相关的操作===

* select(), pselect()
* poll(),epoll()

===与文件描述符表相关的操作===

* close()
* dup()
* dup2()
* fcntl (F_DUPFD)
* fcntl (F_GETFD and F_SETFD)

===改变进程状态的操作===

* fchdir()
* mmap()

===与文件加锁的操作===

* flock()
* fcntl (F_GETLK, F_SETLK and F_SETLKW)
* lockf()

===与套接字相关的操作===

* connect()
* bind()
* listen()
* accept()
* getsockname()
* getpeername()
* getsockopt(), setsockopt()
* shutdown()

===其他===

* ioctl()

== 注释 ==
{{NoteFoot}}

== 参考文献 ==
{{Reflist}}

[[Category:操作系統技術|Category:操作系統技術]]

[[de:Handle#Datei-Handle|de:Handle#Datei-Handle]]