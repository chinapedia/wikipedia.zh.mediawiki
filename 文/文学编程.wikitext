{{noteTA
|G1=IT
|1=zh-cn:编程;zh-hk:編程;zh-tw:程式設計;
}}

{{Translating|||time=2020-11-04T17:13:44+00:00}}

'''文学式编程'''（{{lang-en|literate programming}}）是由[[高德纳|高德纳]]提出的编程方法，希望能用來取代[[结构化编程|结构化编程]]范型。<ref name="TCJ_LP">{{note label|TCJ_LP||v}}{{note label|TCJ_LP||w}}{{note label|TCJ_LP||x}}{{note label|TCJ_LP||y}}{{note label|TCJ_LP||z}}{{cite journal
 |last=Knuth
 |first=Donald E.
 |author-link=Donald Knuth
 |title=Literate Programming
 |journal=[[The_Computer_Journal|The Computer Journal]]
 |publisher=[[英國電腦學會|British Computer Society]]
 |year=1984
 |url = http://www.literateprogramming.com/knuthweb.pdf
 |format=PDF
 |volume=27
 |issue=2
 |pages=97–111
 |doi=10.1093/comjnl/27.2.97
 |access-date=January 4, 2009
 |archive-date=2019-08-19
 |archive-url = https://web.archive.org/web/20190819211815/http://www.literateprogramming.com/knuthweb.pdf
 |dead-url=yes
 }}</ref> 

正如高德纳所构想的那样，文学编程范型不同于传统的由计算机强加的编写[[计算机程序|程序]]的方式和顺序，而代之以让[[程序员|程序员]]用他们自己思维内在的逻辑和流程所要求的顺序开发程序。<ref>{{Bquote
 |"我感觉自顶向下和自底向上是两种截然相反的方法论：一个更适合分析程序，一个更适合创建程序。但是，使用WEB编程后，我意识到不必在自顶向下和自底向上之间艰难抉择，因为我们最好把程序的结构看作网状而不是树状的。层级结构是存在的，但对于程序来说，最重要的是其结构的关系。一个复杂的软件由多个简单部分和它们之间的简单关系构成。程序员的任务是用人类最易理解的顺序，而不是用像自顶向下或自顶向上之类刻板僵硬的顺序，来描述清楚这些部分和关系。"
 |||[[高德纳|高德纳]]
 |Literate Programming{{ref label|TCJ_LP|1|v}}
}}</ref>文学编程自由地表达逻辑，而且它用人类日常使用的语言写出来，就好像一篇文章一样，文章里包括用来隐藏抽象的[[巨集|巨集]]和传统的[[源代码|源代码]]。文学编程工具用来从文学源文件中获得两种表达方式，一种用于计算机进一步的编译和执行，称作“绕出”（tangled）的代码，一种用于格式化文档，称作从文学源代码中“织出”（woven）。<ref name="ObliqueScottReference">如果有人记得该工具的第一个版本称作WEB，一段好玩的高德纳隐藏其中的文学作品引用不言自明：“啊，自从我们第一次撒谎，就开始编织（weave）一张错综复杂（tangled）的网” - [[沃尔特·司各特|沃尔特·司各特]], in Canto VI, Stanza 17 of ''[[Marmion_(poem)|Marmion]]'' (1808) 写于1513年的一部关于[[弗洛登战役|弗洛登战役]]的史诗。-- 该引文实际上出自1986年5月Jon Bentley和高德纳发表在"Communications of the ACM, vol 29 num 5 on p.365"的经典栏目“编程珠玑”上的一篇文章的引言中</ref>。虽然第一代文学编程工具特定于计算机语言，但后来的工具可以不依赖具体语言，并且存在于比编程语言更高的层次中。

== 概念 ==
文学程序是用[[自然语言|自然语言]]（比如英语）写出来的对程序逻辑的解释，程序中交织点缀着巨集和传统源代码段。在文学编程的源文件中，巨集很简单，它或与标题类似，或是解决编程问题时用人类语言描述抽象的解释性短语。它把代码段或更低层次的巨集隐藏了起来，且与[[计算机科学|计算机科学]]教学时经常用到的，用[[虛擬碼|虛擬碼]]写的[[算法|算法]]相似。这些任意解释的短语成为新的精确的操作符，操作符由程序员在运行过程中创建，组成了在基本编程语言之上的“元语言”。
[[预处理器|预处理器]]用于替换任意层级，说得更准确些是“在'网'和巨集之间建立联系”<ref>{{Bquote
 |"WEB的巨集至多允许带一个参数。同样地，我这么做是出于简单考虑，因为我注意到大多数带多参数的应用其实可归纳为单参数的情况。比如说，假如你想定义某个东西……换言之，一个巨集的名字可以作为另一个巨集的参数，这是很有用的。这个特殊的技巧使其成为可能……"
 |||[[高德纳|高德纳]]
 |Literate Programming{{ref label|TCJ_LP|1|w}}
}}</ref>，用命令"tangle"产生可编译源代码，用命令"weave"产生文档。预处理器还提供了写出巨集的内容的能力和在文学程序源文件中的任何地方增加已创建的巨集的能力，由此不必受传统编程语言强加的那些限制或是打断自己的思路。

=== 优点 ===
根据高德纳本人所说<ref>{{cite web
 |url=http://www.informit.com/articles/article.aspx?p=1193856
 |title=Interview with Donald Knuth
 |last=Knuth
 |first=Donald E.
 |author-link=高德纳
 |coauthors=Andrew Binstock
 |date=April 25, 2008
 |access-date=January 4, 2009
 |quote=然而对我来说，文学编程确实是由TeX项目衍生出来的最重要的东西。它不仅让我前所未有地更快地写和维护可靠性更高的程序，而且成为我自20世纪80年代以来的最大的快乐之源——它有时实际上是不可或缺的。我做的其它一些大程序，比如MMIX元模拟器，用我见过的任何一种其它的方法论是无法写出来的。其复杂性让我有限的智能望而却步。没有文学编程，我的整个事业规划就会轰然倒塌。……文学编程是你更上一层楼的必要工具。
 |archive-date=2021-02-23
 |archive-url=https://web.archive.org/web/20210223015337/https://www.informit.com/articles/article.aspx?p=1193856
 |dead-url=no
 }}</ref><ref>{{Bquote
 |"我使用WEB时学到的另一令人惊奇的事情是传统编程语言导致我写出了低劣的程序，尽管我还没意识到我在做什么。我原来的想法是WEB仅作为写文档的工具，但我后来发现用WEB写的程序比我用其它语言写的程序都要优秀。"
 |||[[高德纳|高德纳]]
 |Literate Programming{{ref label|TCJ_LP|1|x}}
}}</ref>，文学编程为高质量程序而生，因为它强迫程序员显式描述程序背后的思路，让不充分的设计决策无所遁形。高德纳还声称文学编程提供了一流的文档系统，它并非插件，而是随着编程思路的慢慢展现而不断自然发展的过程<ref>{{Bquote
 |"因此WEB语言允许人们用''"意识流"顺序''表达程序。TANGLE is able to scramble everything up into the arrangement that a PASCAL compiler demands. This feature of WEB is perhaps its greatest asset; it makes a WEB-written program much more readable than the same program written purely in PASCAL, even if the latter program is well commented. And the fact that there's no need to be hung up on the question of top-down versus bottom-up, since a programmer can now ''view a large program as a web, to be explored in a '''psychologically correct order''' is perhaps the greatest lesson'' I have learned from my recent experiences."
 |||[[高德纳|高德纳]]
 |Literate Programming{{ref label|TCJ_LP|1|y}}
}}</ref>。产生出来的文档使作者能在以后的任何时间重新找到自己的思路，也能使其他程序员更容易理解程序的建构过程。这与传统文档不同，那里程序员必须和编译器规定的代码顺序写在一起，还必须从代码和注释中重现当时的思路。文学编程的元语言能力也{{Who|据称|2016-5-12}}普遍利于思考，能从更高的层次统观代码，也能增加人的智能可成功保持和处理的概念数量。该概念适用于大规模编程，商业级程序的适用性被 TeX 代码版本证明为文学程序。

=== 误解 ===
文学编程常常被误解<ref name="MJD2000">{{cite web
 |last=Dominus
 |first=Mark-Jason
 |authorlink=Mark Jason Dominus
 |url=http://www.perl.com/pub/a/tchrist/litprog.html
 |title=POD is not Literate Programming
 |work=Perl.com
 |date=March 20, 2000
 |accessdate=January 3, 2009
 |archive-date=2009-01-02
 |archive-url=https://web.archive.org/web/20090102151452/http://www.perl.com/pub/a/tchrist/litprog.html
 |dead-url=no
 }}</ref>为不过是从有源代码和注释的文件中产生格式化文档，或是在代码里写大量的注释。这一误解导致那些文档析出工具，如[[Perl|Perl]]的[[Plain_Old_Documentation|Plain Old Documentation]]系统也被称为“文学编程工具”。尽管如此，因为这些工具没有实现隐藏在自然语言巨集系统背后的“抽象概念网”，或是提供把机器规定的源代码顺序变为人类思维更容易理解的顺序的能力，它们不能在高德纳提出的意义下被称作文学编程工具。<ref name="MJD2000"/><ref>{{Bquote
 |"我选择WEB作为名字，部分因为它是英语中很少的几个没有用于计算机的三字词语之一。但随着时间流逝，我越来越喜爱这个名字，因为我认为最好把一个复杂的软件确确实实地看成由简单材料以精巧的方式拼出来的一张网。我们通过理解复杂系统的各个简单部分和这些部分与其直接邻居的简单关系来理解复杂系统本身。如果我们用网的概念来表达程序，我们就能用一种自然且圆满地方式强调其结构上的属性。"
 |||[[高德纳|高德纳]]
 |Literate Programming{{ref label|TCJ_LP|1|z}}
}}</ref>

== 例子 ==

一个文学编程的经典例子是标准[[UNIX|Unix]]单词计数程序<code>[[Wc_(Unix)|wc]]</code>的文学实现。高德纳在他的《文学编程》书中的第12章展示了这个例子的[[CWEB|CWEB]]版本。后来它也为[[noweb|noweb]]文学编程工具而重写。<ref name="noweb-wc">{{cite web
 |url=http://www.cs.tufts.edu/~nr/noweb/examples/wc.html
 |title=An Example of noweb
 |first=Norman
 |last=Ramsey
 |date=May 13, 2008
 |accessdate=January 4, 2009
 |archive-date=2021-02-23
 |archive-url=https://web.archive.org/web/20210223015346/https://www.cs.tufts.edu/~nr/noweb/examples/wc.html
 |dead-url=no
 }}</ref>这一例子漂亮地阐释了文学编程的基本元素。

;创建巨集
下面这个<code>wc</code>的文学编程<ref name="noweb-wc"/>代码片断展示了在文学编程中用来创建巨集的自然语言的描述性词组有多随意，巨集作为文学编程语言中新的“操作符”，并且隐藏了代码块或其它的巨集。由两个尖括号组成("<code><<...>></code>")的标记符号表示巨集，"<code>@</code>"符号在noweb文件中表示一节代码的结束。"<code><<*>></code>"符号表示“根”，即最上层节点，文学编程工具要从这里展开巨集组成的网。实际上，扩展的源代码可通过任何节和小节（即标为"<code><<代码块名>>=</code>"的代码）写出来，所以一个文学程序文件可包括多个机器源代码文件。
<syntaxhighlight lang="c">
wc的目的是對多個文件中的行、單詞和字母計數。文件中的行數是......../更多解釋/

这里是由noweb程序wc.nw定义的文件wc.c的概述： 
    <<*>>=
    <<包含头文件>>
    <<定义>>
    <<全局变量>>
    <<函数>>
    <<主程序>>
    @
    
我们必须包含标准输入输出定义，因为我们想发送格式化的输出到stdout和stderr上。
    <<包含头文件>>=
    #include <stdio.h>
    @
</syntaxhighlight>
还要注意，块的分解可以在文字程序文本文件的任何地方进行，不一定按照它们在封闭块中的顺序，而是按照包含整个的解释性文本中反映的逻辑的要求 程序。

;作为网的程序 - 巨集不只是节的名字
巨集和标准文档中的“节名”不同。文学编程的巨集能隐藏任何代码块，并且被用于任何低层次的机器语言操作符内，常常在如"<code>if</code>", "<code>while</code>"或 "<code>case</code>"这样的逻辑操作符内。这会在下面这段文学程序<code>wc</code>的代码片断中解释。<ref name="noweb-wc"/>

<syntaxhighlight lang="c"> 
这里的代码块做了计数的工作，这正是wc存在的目的，实际上非常容易写。我们察看每一个字母并且如果它是一个单词的开始或结束，则会更改状态。

    <<扫描文件>>=
    while (1) {
      <<Fill buffer if it is empty; break at end of file>>
      c = *ptr++;
      if (c > ' ' && c < 0177) {
        /* visible ASCII codes */
        if (!in_word) {
          word_count++;
          in_word = 1;
        }
        continue;
      }
      if (c == '\n') line_count++;
      else if (c != ' ' && c != '\t') continue;
      in_word = 0;
        /* c is newline, space, or tab */
    }
    @
</syntaxhighlight>

实际上，巨集能代表任意的代码块和其它巨集，并且因此比自顶向下或自底向上的代码块或小节更通用。高德纳说当他意识到这一点后，他开始把程序想成不同部分组成的“网”。<ref name="TCJ_LP"/>

;人的逻辑顺序，而不是编译器的
在noweb文学程序中，除了可以任意顺序展现代码外，巨集背后的代码块，一旦由"<code><<...>>=</code>"引入，可以在文件后面的任何一个地方通过简单地写"<code><<代码块名>>=</code>"进行扩充并且往里添加更多的内容，如下面这个代码片断所示（"+"为了可读性而被文档格式化器所添加，它并不在代码中）。<ref name="noweb-wc"/>

<syntaxhighlight lang="c">
The grand totals must be initialized to zero at the beginning of the program. 
If we made these variables local to main, we would have to do this initialization 
explicitly; however, C globals are automatically zeroed. (Or rather,``statically 
zeroed.'' (Get it?) 

    <<Global variables>>+=
    long tot_word_count, tot_line_count, 
         tot_char_count;
      /* total number of words, lines, chars */
    @
</syntaxhighlight>

;记录思想碰撞的火花，创建出类拔萃的文档
文学编程的文档作为写程序的一部分而产生。Instead of comments provided as side notes to source code a literate program contains the explanation of concepts on each level, with lower level concepts deferred to their appropriate place, which allows for  better communication of thought. The snippets of the literate <code>wc</code> above show how an explanation of the program and its source code are interwoven. Such exposition of ideas creates the flow of thought that is like a literary work. Knuth famously wrote a "novel" which explains the code of the computer strategy game [[Colossal_Cave_Adventure|Colossal Cave Adventure]], perfectly readable.<ref>The game, also known as ''ADVENT'', was originally written by Crowther in about 700 lines of FORTRAN code; Knuth recast it into the WEB idiom. It is available at [http://www.literateprogramming.com/cweb_download.html literateprogramming.com] {{Wayback|url=http://www.literateprogramming.com/cweb_download.html |date=20210223015349 }} or on [http://sunburn.stanford.edu/~knuth/programs.html Knuth's website] {{webarchive|url=https://web.archive.org/web/20080820091137/http://sunburn.stanford.edu/~knuth/programs.html |date=2008-08-20 }}.</ref>

== 文学编程工具 ==

第一个发布的文学编程环境是[[WEB|WEB]]，由[[高德纳|高德纳]]于1981年为他的[[TeX|TeX]]排版系统而引入。它使用[[Pascal_(程式語言)|Pascal]]作为其基础编程语言，使用TeX作为文档排版工具。The complete commented TeX source code was published in Knuth's ''TeX: The program'', volume B of his 5-volume ''[[Computers_and_Typesetting|Computers and Typesetting]]''. Knuth had privately used a literate programming system called DOC as early as 1979. He was inspired by the ideas of [[Pierre-Arnoul_de_Marneffe|Pierre-Arnoul de Marneffe]]<ref>{{cite paper
 |first=Pierre Arnoul
 |last=de Marneffe
 |authorlink=Pierre-Arnoul de Marneffe
 |title=Holon Programming - Report PMAR 73-23
 |publisher=[[列日大学|University de Liège]], Service d'Informatique
 |date=December 1973}}</ref>. The free [[CWEB|CWEB]], written by Knuth and Silvio Levy, is WEB adapted for [[C语言|C]] and  [[C++|C++]], runs on most operating systems and can produce TeX and [[便携式文档格式|PDF]] documentation. 

其它的文学编程概念的实现有[[noweb|noweb]]和FunnelWeb，它们都是源代码独立的。Noweb以其简单而知名：just 2 text markup conventions and 2 tool invocations are needed to use it, and it allows for text formatting in HTML rather than going through the TeX system. FunnelWeb is another program without dependency on TeX which can produce HTML documentation output. It has more complicated markup (with "@" escaping any FunnelWeb command), but has many more flexible options. 

The [[Leo_(text_editor)|Leo text editor]] is an ''outlining'' editor which supports optional noweb and CWEB markup. The author of Leo actually mixes two different approaches: first, Leo is an outlining editor, which helps with management of large texts, second, Leo incorporates some of the ideas of literate programming, which in its pure form (i.e. the way it is used by Knuth Web tool and/or tools like "noweb") is possible only with some degree of inventiveness and the use of the editor in a way not exactly envisioned by its author (in modified @root nodes). However this and other extensions (@file nodes) make outline programming and text management successful and easy and in some ways similar to literate programming.<ref>{{cite web
 |url          = http://webpages.charter.net/edreamleo/front.html
 |accessdate   = January 4, 2009
 |title        = Leo's Home Page
 |date         = September 2, 2008
 |first        = Edward K.
 |last         = Ream
 |archive-date = 2006-01-28
 |archive-url  = https://web.archive.org/web/20060128235241/http://webpages.charter.net/edreamleo/front.html
 |dead-url     = yes
}}</ref>

[[Haskell|Haskell]]编程语言对半文学编程有原生支持，其来源于CWEB但用了较简单的实现。如果想要TeX输出，你可以写 a plain [[LaTeX|LaTeX]] file where source code is marked by a given surrounding environment; LaTeX can be set up to handle that environment, while the Haskell compiler looks for the right markers to identify Haskell statements to compile, removing the TeX documentation as if they were comments. However, as described above, this is not literate programming in the sense intended by Knuth. Haskell's functional, modular nature<ref>{{cite paper
 |title=Why Functional Programming Matters
 |first=John
 |last=Hughes
 |publisher=Institutionen för Datavetenskap, Chalmers Tekniska Högskola,
 |url=http://www.cs.chalmers.se/~rjmh/Papers/whyfp.pdf
 |date=January 9, 2002
 |accessdate=January 4, 2009
 |journal=
 |archive-date=2009-07-11
 |archive-url=https://web.archive.org/web/20090711020327/http://www.cs.chalmers.se/~rjmh/Papers/whyfp.pdf
 |dead-url=no
 }}</ref> makes literate programming directly in the language somewhat easier, but it is not nearly as powerful as one of the a WEB tools where "tangle" can reorganize in arbitrary ways.

== 参见 ==
* [[Sweave|Sweave]] - an example of use of the "noweb"-like Literate Programming tool inside the R language for creation of dynamic statistical reports

== 参考文献 ==
{{Reflist|2}}

== 延伸阅读 ==
*{{cite book | first=Donald E. |last=Knuth |author-link=Donald Knuth |title=Literate Programming |publisher=[[史丹佛大學|Stanford University]] Center for the Study of Language and Information |location= Stanford, California |year=1992 |isbn=978-0937073803}}
*{{cite book |first=Eitan M. |last=Guari |title=TeX & LaTeX: Drawing and Literate Programming |publisher=McGraw Hill |year=1994 |isbn=0-07-911616-7}} (includes software).
*{{cite web |first=Kurt |last=Nørmark |url=http://www.cs.aau.dk/~normark/litpro/issues-and-problems.html |title=Literate Programming - Issues and Problems |publisher=[[奥尔堡大学|University of Aalborg]] |date=August 13, 1998 |access-date=2010-01-03 |archive-date=2011-08-13 |archive-url=https://web.archive.org/web/20110813140512/http://www.cs.aau.dk/~normark/litpro/issues-and-problems.html |dead-url=no }}

==外部链接==
*[http://www.literateprogramming.com literateprogamming.com] {{Wayback|url=http://www.literateprogramming.com/ |date=20210126201751 }}
*[http://www.faqs.org/faqs/literate-programming-faq/index.html comp.programming.literate FAQ] {{Wayback|url=http://www.faqs.org/faqs/literate-programming-faq/index.html |date=20210223015419 }} at Internet FAQ Archives
*[http://groups.google.com/group/comp.programming.literate Literate Programming newsgroup]
*[http://en.literateprograms.org/ LiteratePrograms] {{Wayback|url=http://en.literateprograms.org/ |date=20080705193927 }} a literate programming wiki.
*[http://moonflare.com/code/select/index.php Select] {{Wayback|url=http://moonflare.com/code/select/index.php |date=20060104044644 }} A literate programming example using [[noweb|noweb]]
*[http://www.softpanorama.org/SE/literate_programming.shtml Softpanorama page] {{Wayback|url=http://www.softpanorama.org/SE/literate_programming.shtml |date=20210223015446 }} on literate programming
*[http://www.haskell.org/haskellwiki/Literate_programming Haskell] {{Wayback|url=http://www.haskell.org/haskellwiki/Literate_programming |date=20150105151148 }} literate programming
*[http://www.haskell.org/onlinereport/literate.html Specification of literate programming in the Haskell Report] {{Wayback|url=http://www.haskell.org/onlinereport/literate.html |date=20200915134534 }} the accepted Haskell standard
*[http://www.cs.tufts.edu/~nr/noweb/ Noweb — A Simple, Extensible Tool for Literate Programming] {{Wayback|url=http://www.cs.tufts.edu/~nr/noweb/ |date=20210228082349 }}
*[http://www.linux-france.org/~dmentre/lp4all/ Lp4all — A Simple Literate Programming Tool with a wiki-like markup syntax] {{Wayback|url=http://www.linux-france.org/~dmentre/lp4all/ |date=20210223015455 }}

[[Category:软件文档|Category:软件文档]]
[[Category:编程典范|Category:编程典范]]
[[Category:带有代码示例的条目|Category:带有代码示例的条目]]