在[[计算机程序设计|计算机程序设计]]中，'''弱引用'''与[[强引用|强引用]]相对，是指不能确保其引用的[[对象_(计算机科学)|对象]]不会被[[垃圾回收器|垃圾回收器]]回收的引用。一个对象若只被弱引用所引用，则被认为是[[不可访问内存|不可访问]]（或弱可访问）的，并因此可能在任何时刻被回收。一些配有垃圾回收机制的语言，如[[Java|Java]]、[[C♯|C#]]、[[Python|Python]]、[[Perl|Perl]]、[[Lisp|Lisp]]等都在不同程度上支持弱引用。

==垃圾回收==
{{main|垃圾回收 (计算机科学)}}
垃圾回收用来清理不会再使用的对象，从而降低[[内存泄露|内存泄露]]和数据损坏的可能性。垃圾回收主要有两种类型：[[追踪|追踪]]和[[引用计数|引用计数]]。引用计数会记录给定对象的引用个数，并在引用个数为零时收集该对象。由于一次仅能有一个对象被回收，引用计数无法回收循环引用的对象。一组相互引用的对象若没有被其它对象直接引用，并且不可访问，则会永久存活下来。一个应用程序如果持续地产生这种不可访问的对象群组，就会发生内存泄漏。在对象群组内部使用弱引用（即不会在引用计数中被计数的引用）有时能避免出现引用环，因此弱引用可用于解决循环引用的问题。如Apple的[[Cocoa|Cocoa]]框架就推荐使用这种方法，具体为，在父对子引用时使用强引用，子对父引用时使用弱引用，从而避免了循环引用。[https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html] {{Wayback|url=https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html |date=20160420200028 }}

程序对一些对象只进行弱引用，通过此法可以指明哪些对象是不重要的，因此弱引用也用于尽量减少内存中不必要的对象存在的数量。

==变种==
有些语言包含多种强度的弱引用。例如[[Java|Java]]，在java.lang.ref<ref>{{Cite web |url=http://docs.oracle.com/javase/7/docs/api/java/lang/ref/package-summary.html |title=java.lang.ref |access-date=2013-12-28 |archive-date=2022-06-06 |archive-url=https://web.archive.org/web/20220606155701/https://docs.oracle.com/javase/7/docs/api/java/lang/ref/package-summary.html }}</ref><ref>Nicholas, Ethan. [http://weblogs.java.net/blog/2006/05/04/understanding-weak-references "Understanding Weak References"] {{webarchive|url=https://web.archive.org/web/20100819115659/http://weblogs.java.net/blog/2006/05/04/understanding-weak-references |date=2010-08-19 }}. [http://www.java.net/about-javanet java.net] {{Wayback|url=http://www.java.net/about-javanet |date=20150905093642 }}. 发布于2006年5月4日. 访问于2010年10月1日</ref>包中定义了[[软引用|软引用]]、弱引用和[[虚引用|虚引用]]，引用强度依次递减。每种引用都有相对应的[https://web.archive.org/web/20111117022230/http://download.oracle.com/javase/1.4.2/docs/api/java/lang/ref/package-summary.html#reachability 可访问性]概念。垃圾回收器（GC）通过判断对象的可访问性类型来确定何时回收该对象。当一个对象是软可访问的，垃圾回收器就可以安全回收这个对象，但如果垃圾回收器认为JVM还能空出可用内存（比如JVM还有大量未使用的堆空间），则有可能不会立刻回收软可访问的对象。但对于弱可访问的对象，一旦被垃圾回收器注意到，就会被回收。和其他引用种类不同，虚引用无法跟踪。但另一方面，虚引用提供了一种机制，当一个对象被回收时程序可以得到通知（实现于ReferenceQueues<ref>{{Cite web |url=http://download.oracle.com/javase/6/docs/api/java/lang/ref/ReferenceQueue.html |title=ReferenceQueues |access-date=2013-12-28 |archive-date=2011-09-30 |archive-url=https://web.archive.org/web/20110930114002/http://download.oracle.com/javase/6/docs/api/java/lang/ref/ReferenceQueue.html }}</ref>）。  
一些未配有垃圾回收机制的语言，比如[[C++|C++]]，也提供强/弱引用的功能，以作为对垃圾回收库的支持。在C++中，普通指针可看做弱引用，[[智能指针|智能指针]]可看做强引用，尽管指针不能算"真正"的弱引用，因为弱引用应该能知道何时对象变成不可访问的了。

==示例==
弱引用可用于在应用程序中维护一个当前被引用的对象的列表。该列表必须弱引用到那些对象，否则一旦对象被添加到列表中，由于它们被列表引用了，在程序运行期间将永远不会被回收。

===Java===
Java是第一个将[[强引用|强引用]]作为默认对象引用的主流语言。之前的（ANSI）C语言只支持弱引用。而后David Hostettler Wain和Scott Alexander Nesmith注意到事件树无法正常释放的问题，结果在大约1998年，推出了分别会被计数和不会被计数的强、弱引用。  
如果创建了一个弱引用，然后在代码的其它地方用 <code>[http://download.oracle.com/javase/1,5.0/docs/api/java/lang/ref/Reference.html#get() get()]</code>获得真实对象，由于弱引用无法阻止垃圾回收，<code>get()</code>随时有可能开始返回 <code>null</code>（假如对象没有被强引用）。<ref>weblogs.java.net [http://weblogs.java.net/blog/2006/05/04/understanding-weak-references Java Examples ] {{webarchive|url=https://web.archive.org/web/20100819115659/http://weblogs.java.net/blog/2006/05/04/understanding-weak-references |date=2010-08-19 }}</ref>

<syntaxhighlight lang=java>
import java.lang.ref.WeakReference;
 
public class ReferenceTest {
	public static void main(String[] args) throws InterruptedException {
 
            WeakReference r = new WeakReference(new String("I'm here"));
            WeakReference sr = new WeakReference("I'm here");
            System.out.println("before gc: r=" + r.get() + ", static=" + sr.get());
            System.gc();
            Thread.sleep(100);
 
            //只有r.get()变为null
            System.out.println("after gc: r=" + r.get() + ", static=" + sr.get());
 
	}
}
</syntaxhighlight>
弱引用还可以用来实现[[缓存|缓存]]。例如用弱[[哈希表|哈希表]]，即通过弱引用来缓存各种引用对象的哈希表。当垃圾回收器运行时，假如应用程序的内存占用量高到一定程度，那些不再被其它对象所引用的缓存对象就会被自动释放。

===Smalltalk===
<syntaxhighlight lang=Smalltalk>
|a s1 s2|

s1 := 'hello' copy. "这是个强引用"
s2 := 'world' copy. "这是个强引用"
a := WeakArray with:s1 with:s2.
a printOn: Transcript. 
ObjectMemory collectGarbage.
a printOn: Transcript. "两个元素都还在"

s1 := nil. "移除强引用" 
ObjectMemory collectGarbage.
a printOn: Transcript. "第一个元素消失"

s2 := nil. "移除强引用" 
ObjectMemory collectGarbage.
a printOn: Transcript. "第二个元素消失" 
</syntaxhighlight>

===Lua===
<syntaxhighlight lang=lua>
weak_table = setmetatable({}, {__mode="v"})
weak_table.item = {}
print(weak_table.item)
collectgarbage()
print(weak_table.item)
</syntaxhighlight>

===Objective-C 2.0===
在Objective-C 2.0中，除了垃圾回收，自动[[引用计数|引用计数]]也会受弱引用的影响。下面这个例子中的所有变量和属性都是弱引用。
<syntaxhighlight lang=objc>
@interface WeakRef : NSObject
{
    __weak NSString *str1;
    __assign NSString *str2;
}
 
@property (nonatomic, weak) NSString *str3;
@property (nonatomic, assign) NSString *str4;
 
@end
</syntaxhighlight>
<code>weak</code>(<code>__weak</code>)和<code>assign</code>(<code>__assign</code>)的区别在于，当变量指向的对象被重新分配时，变量的值是否会跟着改变。<code>weak</code>声明的变量会变为[[空指针|<code>nil</code>]]，而<code>assign</code>声明的变量则会保持不变，成为一个[[迷途指针|悬摆指针]]。从Mac OX 10.7 “狮子”系统和iOS 5开始，随着Xcode 4.1版本的推出，<code>weak</code>引用被引入到Objective-C语言中（4.2版本开始支持iOS）。老版本的Mac OS X、iOS和GNUstep仅支持用<code>assign</code>声明弱引用。

===Vala===
<syntaxhighlight lang=vala>
class Node {
    public weak Node prev; //弱引用可避免列表中的节点之间出现循环引用
    public Node next;
}
</syntaxhighlight>

===Python===
<syntaxhighlight lang="pycon">
>>> import weakref
>>> import gc
>>> class Egg:
...     def spam(self):
...         print("I'm alive!")
...
>>> obj = Egg()
>>> weak_obj = weakref.ref(obj)
>>> weak_obj().spam()
I'm alive!
>>> obj = "Something else"
>>> gc.collect()
35
>>> weak_obj().spam()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'NoneType' object has no attribute 'spam'
</syntaxhighlight>

== 参考文献 ==
{{Reflist}}

{{-}}
{{内存管理}}

[[Category:数据类型|Category:数据类型]]
[[Category:記憶體管理|Category:記憶體管理]]