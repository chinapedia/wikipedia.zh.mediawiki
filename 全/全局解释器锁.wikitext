{{onesource|time=2014-05-07T09:34:22+00:00}}
'''全局解释器锁'''（{{lang-en|Global Interpreter Lock}}，缩写'''GIL'''），是[[计算机程序设计语言|计算机程序设计语言]][[解释器|解释器]]用于[[同步|同步]][[线程|线程]]的一种机制，它使得任何时刻仅有一个线程在执行。<ref>{{cite web|title=GlobalInterpreterLock - Python Wiki|url=https://wiki.python.org/moin/GlobalInterpreterLock|accessdate=2018-07-19|language=en|archive-date=2018-06-23|archive-url=https://web.archive.org/web/20180623205321/https://wiki.python.org/moin/GlobalInterpreterLock|dead-url=no}}</ref>即便在[[多核心处理器|多核心处理器]]上，使用 GIL 的解释器也只允许同一时间执行一个线程。常见的使用 GIL 的解释器有[[CPython|CPython]]与[[Ruby|Ruby MRI]]。

==Python的GIL==
*CPython的线程是[[操作系统|操作系统]]的原生线程。在[[Linux|Linux]]上为pthread，在[[Windows|Windows]]上为Win thread，完全由操作系统调度线程的执行。一个Python解释器进程内有一个主线程，以及多个用户程序的执行线程。即便使用[[多核心CPU|多核心CPU]]平台，由于GIL的存在，也将禁止多线程的并行执行。<ref>{{cite web | url=http://www.dabeaz.com/python/GIL.pdf | title=Inside the Python GIL | author=David Beazley | publisher=[http://chipy.org/ Chicago Python User Group] | date=2009-06-11 | location=Chicago | accessdate=2009-10-07 | archive-date=2010-12-24 | archive-url=https://web.archive.org/web/20101224201032/http://www.dabeaz.com/python/GIL.pdf | dead-url=no }}</ref>
*Python解释器进程内的多线程是以协作多任务方式执行。当一个线程遇到[[I/O|I/O]]任务时，将释放GIL。计算密集型（CPU-bound）的线程在执行大约100次解释器的计步（ticks）时，将释放GIL。计步（ticks）可粗略看作Python虚拟机的指令。计步实际上与时间片长度无关。可以通过sys.setcheckinterval()设置计步长度。
*在单核CPU上，数百次的间隔检查才会导致一次线程切换。在多核CPU上，存在严重的线程颠簸（thrashing）。
*Python 3.2开始使用新的GIL。新的GIL实现中用一个固定的超时时间来指示当前的线程放弃全局锁。在当前线程保持这个锁，且其他线程请求这个锁时，当前线程就会在5毫秒后被强制释放该锁。
*可以创建独立的进程来实现并行化。Python 2.6引进了多进程包multiprocessing。或者将关键组件用[[C语言|C]]/[[C++|C++]]编写为Python扩展，通过ctypes使Python程序直接调用C语言[[编译|编译]]的[[动态链接库|动态链接库]]的导出函数。

==参考文献==
{{reflist}}

[[Category:计算机编程|Category:计算机编程]]