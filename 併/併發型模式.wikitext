在[[软件工程|软件工程]]中，'''并发型模式'''是用来处理多线程编程范式的一类[[设计模式_(计算机)|设计模式]]。
== 举例 ==
* {{tsl|en|Active object|主动对象}}<ref>Douglas C. Schmidt, Michael Stal, Hans Rohnert, Frank Buschmann "Pattern-Oriented Software Architecture, Volume 2, Patterns for Concurrent and Networked Objects", Wiley, 2000 </ref><ref>{{cite web | url = http://www.cs.wustl.edu/~schmidt/PDF/Act-Obj.pdf | title = Active Object | author = R. Greg Lavender, Doublas C Scmidt | accessdate = 2010-06-17 | year = 1995 | archive-url = https://www.webcitation.org/6Av3crC4V?url=http://www.cs.wustl.edu/~schmidt/PDF/Act-Obj.pdf | archive-date = 2012-09-24 | dead-url = yes }}</ref>
* {{tsl|en|Balking pattern|阻止模式}}
* [[双重检查锁定模式|双重检查锁定模式]]
* [[Guarded_suspension|Guarded suspension]]
* [[Leaders/followers_pattern|Leaders/followers pattern]]
* [[管程|监视对象]]
* [[读写锁模式|读写锁模式]]
* [[调度者模式|调度者模式]]
* [[线程池|线程池]]
* [[线程本地存储|线程本地存储]]
* [[反应堆模式|反应堆模式]]

== 外部連結 ==
Software Engineering Radio 中關於併發型模式的資料：
*[http://www.se-radio.net/index.php?post_id=81083 Episode 12: Concurrency Pt. 1] {{Wayback|url=http://www.se-radio.net/index.php?post_id=81083 |date=20071030214321 }}
*[http://www.se-radio.net/index.php?post_id=99079 Episode 19: Concurrency Pt. 2] {{Wayback|url=http://www.se-radio.net/index.php?post_id=99079 |date=20071030214331 }}
*[https://web.archive.org/web/20100612100400/http://se-radio.net/podcast/2006-09/episode-29-concurrency-pt3 Episode 29: Concurrency Pt. 3]

== 參考 ==
<references/>


{{软件设计模式}}
[[Category:軟體設計模式|Category:軟體設計模式]]