{{Unreferenced|time=2022-01-26T01:04:23+00:00}}
-{H|zh-hans:代码; zh-tw:程式碼;}-
-{H|zh-hans:宏; zh-tw:巨集;}-
在[[電腦科學|電腦科學]]中，'''內聯函數'''（有時稱作'''在線函數'''或'''編譯時期展開函數'''）是一種[[編程語言|編程語言]]結構，用來建議[[編譯器|編譯器]]對一些特殊[[函數|函數]]進行[[內聯擴展|內聯擴展]]（有時稱作'''在線擴展'''）；也就是說建議編譯器將指定的函數體插入並取代每一處調用該函數的地方（[[上下文|上下文]]），從而節省了每次調用函數帶來的額外時間開支。但在選擇使用內聯函數時，必須在程序佔用空間和程序[[執行效率|執行效率]]之間進行權衡，因為過多的比較複雜的函數進行內聯擴展將帶來很大的存儲資源開支。另外還需要特别注意的是對[[遞歸函數|遞歸函數]]的內聯擴展可能引起部分編譯器的無窮編譯。

== 设计内联函数的动机 ==
内联扩展是一种特别的用于消除调用函数时所造成的固有的时间消耗方法。一般用于能够快速执行的函数，因为在这种情况下函数调用的时间消耗显得更为突出。这种方法对于很小的函数也有空间上的益处，并且它也使得一些其他的优化成为可能。

沒有了內聯函式，程式員難以控制哪些函数內聯哪些不內聯；由編譯器自行決定是否內聯。加上這種控制維度准許特定於應用的知識，諸如執行函式的頻繁程度，被利用於選擇哪些函數要內聯。

此外，在一些语言中，内联函数与[[编译模型|编译模型]]联系紧密：如在[[C++|C++]]中，有必要在每个使用它的模块中定义一个内联函数；与之相对应的，普通函数必须定义在单个模块中。这使得模块编译独立于其他的模块。

== 与[[宏|宏]]的比较 ==

通常，在[[C语言|C语言]]中，内联展开的功能由[[带参宏|带参宏]]（Macros）在源码级实现。内联提供了几个更好的方法：

* 宏调用并不执行[[类型检查|类型检查]]，甚至连正常参数也不检查，但是函数调用却要检查。
* C语言的宏使用的是文本替换，可能导致无法预料的后果，因为需要重新计算参数和[[操作顺序|操作顺序]]。
* 在宏中的编译错误很难发现，因为它们引用的是扩展的代码，而不是程序员键入的。
* 许多结构体使用宏或者使用不同的语法来表达很难理解。内联函数使用与普通函数相同的语言，可以随意的内联和不内联。
* 内联代码的调试信息通常比扩展的宏代码更有用。

== 语言支持 ==
[[C++|C++]]，[[C99|C99]]. [[C11|C11]]和[[GNU_C|GNU C]]都支持内联函数，然而1989 ANSI C，这个最被广泛使用的C标准却不支持。在[[Ada|Ada]]中，[[关键字|关键字]]“pragma”可以用来声明内联。其他的大部分编程语言，包括[[Java|Java]]和函数式语言，不支持内联函数，但他们的编译器常常进行强制性的内联扩展。不同的编译器在内联扩展上有处理不同复杂程度函数的能力。主流的C++编译器如[[Visual_C++|Visual C++]]和[[GCC|GCC]]提供了一个选项来自动内联任何一个合适的函数，即使它们没有被声明为内联函数。

对于C++，<code>inline</code>与<code>extern inline</code>同义：内联函数在各个编译单元都可能会生成一份，要求各处定义完全一致。内联函数在C++中的写法如下：
<syntaxhighlight lang="c++">
inline int max (int a, int b) {
    if (a > b) 
    return a; 
    else 
    return b; 
}
</syntaxhighlight> 
<syntaxhighlight lang="c++">
a = max (x, y); // 等价于 "a = (x > y ? x : y);"
</syntaxhighlight>
对于C99，<code>inline</code>为编译单元内部可见，<code>extern inline</code>为编译单元外部也可见。

== 内联函数的不足 ==
除了通常使用内联扩展可能带来的问题，作为一种编程语言特性的内联函数也可能并没有看起来那么有效，原因如下：
* 通常，编译器比程序设计者更清楚对于一个特定的函数是否合适进行内联扩展；一些情况下，对于程序员指定的某些内联函数，编译器可能更倾向于不使用内联甚至根本无法完成内联。
* 对于一些开发中的函数，它们可能从原来的不适合内联扩展变得适合或者倒过来。尽管内联函数或者非内联函数的转换易于宏的转换，但增加的维护开支还是使得它的优点显得更不突出了。
* 对于基于C的编译系统，内联函数的使用可能大大增加编译时间，因为每个调用该函数的地方都需要替换成函数体，代码量的增加也同时带来了潜在的编译时间的增加。

== 参见 ==
* [[内联扩展|内联扩展]]（[[在线扩展|在线扩展]]）

== 外部链接 ==
*[http://gcc.gnu.org/onlinedocs/gcc-4.1.1/gcc/Inline.html GCC内联函数说明] {{Wayback|url=http://gcc.gnu.org/onlinedocs/gcc-4.1.1/gcc/Inline.html |date=20160304113949 }}

[[Category:數學最佳化|Category:數學最佳化]]