{{NoteTA
|G1 = IT
|T = zh-cn:内核; zh-tw:核心; zh-hk:內核;
|1 = zh-cn:内核; zh-tw:核心; zh-hk:內核;
}}
{{Otheruses|subject=一種電腦程式|other=地球構造的一部份|內地核}}
[[File:Kernel_Layout.svg|thumb]]和计算机硬件的交互工作]]

'''内核'''（{{lang-en|'''Kernel'''}}，又稱'''-{zh-cn:核心; zh-tw:內核; zh-hk:核心;}-'''）在[[計算機科學|計算機科學]]中是一個用來管理[[軟體|軟體]]發出的資料[[I/O|I/O]]（輸入與輸出）要求的電腦[[计算机程序|程式]]，將這些要求轉譯為資料處理的指令并交由[[中央處理器|中央處理器]]（CPU）及[[電腦|電腦]]中其他[[電子元件|電子元件]]進行處理，是現代[[操作系统|操作系统]]中最基本的部分。它是为众多[[应用程序|应用程序]]提供对[[计算机|计算机]][[计算机硬件|硬件]]的安全访问的一部分[[软件|软件]]，这种访问是有限的，并由内核决定一个[[计算机程序|程序]]在什么时候对某部分硬件操作多长时间。直接对硬件操作是非常复杂的。所以内核通常提供一种[[硬件抽象|硬件抽象]]的方法，来完成这些操作。有了這個，通过[[进程间通信|进程间通信]]机制及[[系统调用|系统调用]]，应用进程可间接控制所需的硬件资源（特别是处理器及IO设备）。

严格地说，内核并不是计算机系统中必要的组成部分。有些程序可以直接地被调入计算机中执行；这样的设计，说明了设计者不希望提供任何硬件抽象和操作系统的支持；它常见于早期计算机系统的设计中。但隨著電腦技術的發展，最终，一些辅助性程序，例如程序加载器和调试器，被设计到机器核心当中，或者写入在只读记忆体里。这些变化发生时，操作系统内核的概念就渐渐明晰起来了。

==分類==
內核在設計上可以概分為[[宏內核|宏內核]]與[[微內核|微內核]]兩大架構。在宏內核與微內核之間，進行妥協的設計，這稱為[[混合內核|混合內核]]，但是混合內核能否被列為第三大架構，目前仍然有爭議。另外與微內核相似，有一種極端的設計方式，稱為[[外內核|外內核]]，仍还在研究阶段，没有任何一个流行的操作系统采用了这种设计。

=== 宏内核 ===
[[File:Kernel-monolithic-CN.png|thumb]]
{{main|宏内核}}

宏内核结构在硬件之上，定义了一个高阶的抽象接口，应用一组[[原语|原语]]（或者叫[[系统调用|系统调用]]（{{lang|en|System call}}））来实现操作系统的功能，例如[[进程管理|进程管理]]，[[文件系统|文件系统]]，和[[存储管理|存储管理]]等等，这些功能由多个运行在[[核心态|核心态]]的[[軟體模組|模块]]来完成。

尽管每一个模块都是单独地服务这些操作，内核代码是高度集成的，而且难以编写正确。因为所有的模块都在同一个内核空间上运行，一个很小的bug都会使整个系统崩溃。然而，如果开发顺利，宏内核结构就可以从运行效率上得到好处。

很多现代的宏内核结构内核，如[[Linux内核|Linux]]和[[FreeBSD|FreeBSD]]内核，能够在运行时将模块调入执行，这就可以使扩充内核的功能变得更简单，也可以使内核的核心部分变得更简洁。

宏内核结构的例子：

* 傳統[[UNIX|Unix]]核心
** [[BSD|BSD]]
** [[Solaris|Solaris]]
* [[类Unix系统|类Unix系统]]（Unix-like）的核心
** [[FreeBSD|FreeBSD]]
** [[OpenBSD|OpenBSD]]
** [[NetBSD|NetBSD]]
** [[Linux内核|Linux]]
** [[LynxOS|LynxOS]]
** [[Syllable_Desktop|Syllable Desktop]]
* [[DOS|DOS]]
** [[DR-DOS|DR-DOS]]
** [[MS-DOS|MS-DOS]]
*** Microsoft [[Windows_9x|Windows 9x]]系列（[[Windows_95|95]]、[[Windows_98|98]]、[[Windows_98|98SE]]、[[Windows_Me|Me]]）
* [[Mac_OS|Mac OS]]（從最初版到[[Mac_OS_8|Mac OS 8.6]]版）
* [[OpenVMS|OpenVMS]]
* [[XTS-400|XTS-400]]

=== 微内核 ===
[[File:Kernel-microkernel-CN.png|thumb]]
{{main|微内核}}
微内核结构由一个非常简单的硬件抽象层和一组比较关键的原语或系统调用组成；这些原语，仅仅包括了建立一个系统必需的几个部分；如[[线程管理|线程管理]]，[[地址空间|地址空间]]和[[行程間通訊|行程間通訊]]等。

微核的目标是将系统服务的实现和系统的基本操作规则分离开来。例如，进程的[[I/O|输入/输出]]锁定服务可以由运行在微核之外的一个服务组件来提供。这些非常模块化的用户态服务器用于完成操作系统中比较高级的操作，这样的设计使内核中最核心的部分的设计更简单。一个服务组件的失效并不会导致整个系统的崩溃，内核需要做的，仅仅是重新启动这个组件，而不必影响其它的部分。

微内核将许多OS服务放入分离的进程，如文件系统，设备驱动程序，而进程通过消息传递调用OS服务。微内核结构必然是多线程的，第一代微内核，在核心提供了较多的服务，因此被称为'胖微内核'，它的典型代表是[[Mach|Mach]]，它是[[Mac_OS_X|Mac OS X]]的核心，可以说，蒸蒸日上。第二代微内核只提供最基本的OS服务，典型的OS是[[QNX|QNX]]，QNX在[[黑莓手机|黑莓手机]][[BlackBerry_10|BlackBerry 10]]系统中被采用。

微内核结构的例子：
* [[AIX|AIX]]
* [[BeOS|BeOS]]
* [[L4微内核系列|L4微内核系列]]
* [[Mach|Mach]]（用于[[XNU|XNU]]、[[GNU_Hurd|GNU Hurd]]）
* [[Minix|Minix]]
* {{tsl|en|MorphOS|}}
* [[QNX|QNX]]
* [[RadiOS|RadiOS]]
* {{tsl|en|VSTa|}}

==== 宏内核与微内核的比较 ====

宏内核结构是非常有吸引力的一种设计，由于在同一个地址空间上实现所有复杂的低阶操作系统控制代码的效率会比在不同地址空间上实现更高些。

20世纪90年代初，宏内核结构被认为是过时的。把Linux设计成为宏内核结构而不是微内核，引起了无数的争议（参见[[塔能鲍姆-林纳斯辩论|塔能鲍姆-林纳斯辩论]]）。

现在，单核结构正倾向于设计不容易出错，所以它的发展会比微内核结构更迅速些。两个阵营中都有成功的案例。微核经常被用于机器人和医疗器械的嵌入式设计中，因为它的系统的关键部分都处在相互分开的，被保护的存储空间中。这对于单核设计来说是不可能的，就算它采用了运行时加载模块的方式。

尽管Mach是众所周知的多用途的微内核，人们还是开发了除此之外的几个微内核。[[L3微內核|L3]]是一个演示性的内核，只是为了证明微内核设计并不总是低运行速度。它的后续版本[[L4微内核系列|L4]]，甚至可以将Linux内核作为它的一个进程，运行在单独的地址空间。

QNX是一个从20世纪80年代，就开始设计的微内核系统。它比Mach更接近微内核的理念。它可以被用于一些特殊的领域；在这些情况下，由于软件错误，导致系统失效是不允许的。例如航天飞机上的机械手，还有研磨望远镜镜片的机器，一点点失误就会导致上千美元的损失。

很多人相信，由于Mach不能够解决一些提出微内核理论时针对的问题，所以微内核技术毫无用处。Mach的爱好者表明这是非常狭隘的观点，但遗憾的是似乎所有人都开始接受这种观点。

=== 混合内核 ===
[[File:Kernel-hybrid-CN.jpg|thumb]]
{{main|混合内核}}
混合内核的設計理念來自微内核，只不过它让一些微核结构运行在用户空间的代码运行在内核空间，这样让内核的运行效率更高些。这是一种妥协做法，[[微软|微软]][[Windows|视窗]]就是一个典型的例子。另外还有XNU，运行在[[苹果电脑|苹果]][[Mac_OS_X|Mac OS X]]上的内核，也是一个混合内核。[[林纳斯·托瓦兹|林纳斯·托瓦兹]]認為混合核心這種分類只是一種市場行銷手法，因為它的架構實作與運作方式接近於宏內核。

混合内核的例子：
* 自[[Windows_NT|Windows NT]]之后所有基于[[Windows_NT体系结构|NT技术]]的[[微软|微软]][[Windows|视窗]]操作系统
* [[Mac_OS_X|Mac OS X]]（使用Mach內核來實作）
* [[BeOS|BeOS]]内核
* [[DragonFly_BSD|DragonFly BSD]]
* [[ReactOS|ReactOS]]内核
* [[XNU|XNU]]（使用Mach內核）

=== 外内核 ===
{{main|外內核}}
[[外内核|外内核]]系统，也被称为纵向结构操作系统，是一种比较极端的设计方法。

它的设计理念是让用户程序的设计者来决定硬件接口的设计。外内核本身非常的小，它通常只负责系统保护和系统资源复用相关的服务。

传统的内核设计（包括单核和微核）都对硬件作了抽象，把硬件资源或设备驱动程序都隐藏在[[硬件抽象层|硬件抽象层]]下。比方说，在这些系统中，如果分配一段物理存储，应用程序并不知道它的实际位置。

而外核的目标就是让应用程序直接请求一块特定的物理空间，一块特定的磁盘块等等。系统本身只保证被请求的资源当前是空闲的，应用程序就允许直接存取它。既然外核系统只提供了比较低级的硬件操作，而没有像其他系统一样提供高级的硬件抽象，那么就需要增加额外的运行库支持。这些运行库运行在外核之上，给用户程序提供了完整的功能。

理论上，这种设计可以让各种操作系统运行在一个外核之上，如Windows和Unix。并且设计人员可以根据运行效率调整系统的各部分功能。

现在，外核设计还停留在研究阶段，没有任何一个商业系统采用了这种设计。几种概念上的操作系统正在被开发，如[[剑桥大学|剑桥大学]]的Nemesis，格拉斯哥大学的Citrix系统和瑞士计算机科学院的一套系统。[[麻省理工学院|麻省理工学院]]也在进行着这类研究。

== 参考文献 ==
{{Reflist}}

== 参见 ==
* [[操作系统|操作系统]]

{{-}}
{{操作系统}}

[[Category:操作系统内核|]]
[[Category:操作系统技术|Category:操作系统技术]]