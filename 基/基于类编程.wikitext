{{NoteTA
|G1 = IT
}}
{{编程范式}}

'''基于类编程'''（{{lang-en|class-based programming}}），又稱'''類別為基的程式設計'''、'''類別導向'''（{{lang|en|class-orientation}}），是[[物件導向程式設計|物件導向程式設計]]（OOP）的一種風格，在程式設計時，強調[[物件|物件]]（{{lang|en|object}}）的[[类_(计算机科学)|類別]]（{{lang|en|class}}）。

在這種編程範式中，一個物件必須基於類別，才能被創造出來；此乃它跟重視物件本身的[[基于原型编程|基于原型编程]]的差異。因此，用這種方式被創造出來的物件，被視為是類別的實例（{{lang|en|instance}}）。因為所有建立的物件都是類別的實例，實例間唯一允許的差異性只有狀態，因此用這種方式建立的程式，穩定性較高，安全性也較高。但由於類別的限制，實例除了狀態外不允許有其它差異性，因此在類別發布之後，要進行修改，更新類別的結構與行為就不是一件容易的事，引用舊有類別的程式，都會受到影響，需要同步修改，因此這種程式設計風格需要事前較細緻的規劃。

== 参考文献 ==
{{Reflist}}

== 外部链接 ==

== 参见 ==
* [[基于原型编程|基于原型编程]]

{{编程语言类别}}

{{DEFAULTSORT:Class-based programming}}
[[Category:面向对象的程序设计|Category:面向对象的程序设计]]