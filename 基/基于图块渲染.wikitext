{{NoteTA
|G1=IT
}}
{{多個問題|
{{校对翻译}}
{{专家}}
{{Refimprove|time=2017-03-16T10:44:08+00:00}}
}}
'''基于图块渲染'''（{{lang-en|'''Tiled rendering'''}}或{{lang|en|'''Tile-based rendering'''}}）也称'''基于瓦片渲染'''或'''基于小方块渲染'''，它是一种在{{tsl|en|Optical_space|光学空间}}中通过规则的{{tsl|en|Grid (spatial index)|网格 (空间索引)|网格}}细分[[计算机图形|计算机图形]]图像并分别渲染网格（grid）或图块（tile）各部分的过程。这种设计的优点在于，与立即绘制整个帧的立即模式渲染系统相比，它减少了对内存和带宽的消耗。这使图块渲染系统的使用特别常见于低功耗[[移动设备|硬件设备]]。图块渲染有时也被称为中置排序（sort middle）架构，因为它在[[繪圖管線|繪圖管線]]中间而不是接近结束时进行几何排序。<ref>{{cite web|url=http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15869-f11/www/readings/molnar94_sorting.pdf|title=A Sorting Classification of Parallel Rendering|accessdate=2012-08-24|date=1994-04-01|last=Molnar|first=Steven|publisher=[[IEEE|IEEE]]|archive-date=2014-09-12|archive-url=https://web.archive.org/web/20140912130015/http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15869-f11/www/readings/molnar94_sorting.pdf|dead-url=no}}</ref>

== 基本概念 ==
创建一个用于显示的3D图像包括一系列步骤。首先，将要显示的对象从各个模型加载到内存中。然后，系统应用数学函数将模型转换为公共坐标系统，即世界视图。从这个世界视图创建一系列多边形（通常为三角形），近似从特定视点（摄像机、视角）看到的近似原始模型。接下来，合成系统通过渲染三角形并将纹理应用于外缘来产生图像。纹理是绘制在三角形上以产生真实感的小图像。之后将所得到的图像与各种特殊效果组合，并移动到一个[[帧缓冲器|帧缓冲器]]，视频硬件最后扫描并输出到显示器。这种基本概念的布局称为显示管道（display pipeline）。

上述步骤的每一步都将得到图像并需保存，而增加了所需的内存容量。当它到达管道的结尾，图像会非常大，因此典型的[[显示卡|显卡]]设计经常使用专用的高速显存及极快的[[总线|总线]]以提供图像移动所需的带宽。这种支持在专用显卡上可能，但随着功耗和尺寸的预算变得更有限，提供足够的带宽在设计上愈加昂贵。

基于图块的渲染器通过将图像分解成称为图块或瓦片的部分并分别渲染各部分来解决此问题。这减少了中间步骤期间所需的内存量，以及在期间转移的数据量。为做到这点，系统将根据位置对构成几何的三角形进行排序，从而能快速找到哪些三角形与图块边界重叠。然后它只将这些三角形加载到渲染管线，在[[圖形處理器|GPU]]中执行各种渲染操作，及发送结果到[[帧缓冲器|帧缓冲器]]。使用的图块可能非常小，例如16×16和32×32像素是常见的图块大小，这使得内部所需的内存和带宽量较小。因为每个图块都是独立的，它也很适合简单的并行化。

在典型的基于图块的渲染器中，几何必须首先转换为屏幕空间并分配给屏幕空间图块。这需要一些存储每个图块几何列表的空间。在早期的图块系统中，这由[[中央处理器|CPU]]提供，但所有现代的硬件都包括采用硬件加速此步骤。几何的列表也可以从前到后排序，允许GPU使用{{tsl|en|Hidden surface removal|隐藏表面去除}}来避免处理被其他遮挡的像素，节省不必要的用于纹理查找的内存带宽。<ref>{{Cite web|url=http://www.imgtec.com/powervr/insider/powervr_presentations/GDC%20HardwareAndOptimisation.pdf|title=PowerVR: A Master Class in Graphics Technology and Optimization|accessdate=2014-01-11|date=2012-01-14|publisher=[[Imagination_Technologies|Imagination Technologies]]|archive-date=2013-10-03|archive-url=https://web.archive.org/web/20131003002919/http://www.imgtec.com/powervr/insider/powervr_presentations/GDC%20HardwareAndOptimisation.pdf|dead-url=yes}}</ref>

基于图块的方法有两个主要缺点。一是如果某些三角形叠加在数个图块，则需要绘制数次。这意味着总渲染时间将高于即时渲染模式。当图块需要拼接在一起以形成完整图像时还有一个问题，但这个问题已在很久前得到解决。更难解决的是，一些图像技术需要应用到整个帧，并且其模式很难在基于图块的渲染中实现。这些利弊是众所周知的，并且对于某些利用其优势的系统来说缺点是次要的，因而基于图块的渲染系统广泛存在于手持计算设备中。

基于图块的渲染不应与图块/非线性[[帧缓冲器|帧缓冲器]]寻址方案方案混淆，其是使相邻元素也在内存中相邻。<ref>{{Cite web|url=http://www.x.org/wiki/Development/Documentation/HowVideoCardsWork|title=How Video Cards Work|accessdate=2010-05-27|date=2008-05-16|last=Deucher|first=Alex|publisher=[[X.Org_Foundation|X.Org Foundation]]|archive-date=2010-05-21|archive-url=https://web.archive.org/web/20100521083733/http://www.x.org/wiki/Development/Documentation/HowVideoCardsWork|dead-url=yes}}</ref>这些寻址方案被各种架构使用，而不只是基于图块的渲染器。

== 早期成果 ==
很多基于图块渲染的早期成果是作为Pixel Planes 5架构（1989）的一部分完成。<ref>{{Cite web|url=http://www.cs.unc.edu/~pxfl/history.html|title=History|accessdate=2008-08-04|date=1998-06-22|last=Mahaney|first=Jim|work=Pixel-Planes|publisher=[[University_of_North_Carolina_at_Chapel_Hill|University of North Carolina at Chapel Hill]]|archive-date=2008-09-29|archive-url=https://web.archive.org/web/20080929160951/http://www.cs.unc.edu/~pxfl/history.html|dead-url=yes}}</ref><ref>{{Cite web|url=http://dl.acm.org/citation.cfm?id=74341|title=Pixel-planes 5: a heterogeneous multiprocessor graphics system using processor-enhanced memories|accessdate=2012-08-24|date=1989-07-01|last=Fuchs|first=Henry|work=Pixel-Planes|publisher=[[计算机协会|ACM]]|archive-date=2018-10-27|archive-url=https://web.archive.org/web/20181027045150/https://dl.acm.org/citation.cfm?id=74341|dead-url=no}}</ref>

Pixel Planes 5项目验证了基于图块的方法，并发明了很多现在被视为基于图块渲染器的标准的技术。这是该领域中被其他文章广泛引用的成果。

基于图块的方法在软件渲染的早期就已被了解。[[Reyes渲染架构|Reyes渲染架构]]的实现就将图像划分为图块桶（tile buckets）。

== 商业产品 - 桌面计算机和家用游戏机 ==
在开发桌面GPU的早期，几家公司开发了图块式架构。随着时间的推移，这主要被能快速定制外部内存系统的即时模式GPU取代。

主要的例子有：
* [[PowerVR|PowerVR]]渲染架构（1996）：[[光栅化器|光栅化器]]由32×32的图块组成，其中的[[多边形|多边形]]跨越多个[[像素|像素]]、多个图像被[[栅格化|栅格化]]。在早期的[[个人电脑|PC]]版本中，图块叠加在运行于[[中央处理器|CPU]]的{{tsl|en|Display driver|显示驱动程序}}中执行。在[[Dreamcast|Dreamcast]]控制台的应用程序中，图块叠加用一组硬件执行。这促进了[[延期着色|延期着色]]——只有可见像素被[[材质贴图|材质贴图]]，从而节省[[浓淡处理|阴影]]计算和纹理[[带宽_(计算机)|bandwidth]]。
* {{tsl|en|Microsoft Talisman}}（1996）
* [[Dreamcast|Dreamcast]]（由PowerVR芯片组支持）（1998）
* Gigapixel GP-1（1999）<ref>{{Cite web|url=http://www.theregister.co.uk/1999/10/06/gigapixel_takes_on_3dfx_s3/|title=GigaPixel takes on 3dfx, S3, Nvidia with... tiles|accessdate=2012-08-24|date=1999-10-06|last=Smith|first=Tony|work=Gigapixel|publisher=[[The_Register|The Register]]|archive-date=2019-06-22|archive-url=https://web.archive.org/web/20190622051333/https://www.theregister.co.uk/1999/10/06/gigapixel_takes_on_3dfx_s3/|dead-url=no}}</ref>
* [[Intel_Larrabee|Intel Larrabee GPU]]（2009）（已取消）
* [[PlayStation_Vita|PS Vita]]（由PowerVR芯片组支持）（2011）<ref>{{Cite web|url=http://3dsforums.com/lounge-2/develop-2011-ps-vita-most-developer-friendly-hardware-sony-has-ever-made-19841/|title=Develop 2011: PS Vita is the most developer friendly hardware Sony has ever made|accessdate=2011-07-21|date=2011-07-21|last=mestour|first=mestour|work=PS Vita|publisher=[[3dsforums|3dsforums]]}}{{dead link|date=2017年12月 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>
* [[英伟达|Nvidia]]基于{{tsl|en|Maxwell (microarchitecture)|Maxwell架构}}及之后架构的GPU（2014）<ref>{{Cite news|url=http://www.realworldtech.com/tile-based-rasterization-nvidia-gpus/|title=Tile-based Rasterization in Nvidia GPUs|last=Kanter|first=David|date=August 1, 2016|newspaper=Real World Technologies|accessdate=April 1, 2016|archive-date=2016-08-04|archive-url=https://web.archive.org/web/20160804205844/http://www.realworldtech.com/tile-based-rasterization-nvidia-gpus/|dead-url=yes}}</ref>
使用片上大缓冲器的非图块式架构的例子有：
* [[Xbox_360|Xbox 360]]（2005）：[[圖形處理器|GPU]]包含一个嵌入式10 [[Mebibyte|MiB]] [[eDRAM|eDRAM]]。这不足以保留一个配有4×{{tsl|en|Multisample anti-aliasing|多重采样抗锯齿}}（MSAA）的1280×720图像的光栅，因此运行在HD分辨率并启用4× MSAA时采用图块叠加。<ref>{{Cite web |url=http://msdn.microsoft.com/en-us/library/bb464139.aspx |title=存档副本 |accessdate=2017-03-16 |archive-date=2015-01-07 |archive-url=https://web.archive.org/web/20150107120850/http://msdn.microsoft.com/en-us/library/bb464139.aspx |dead-url=no }}</ref>
* [[Xbox_One|Xbox One]]（2013）：[[圖形處理器|GPU]]包含一个嵌入式32 [[Mebibyte|MiB]] [[静态随机存取存储器|eSRAM]]，这可以保存部分或整个图像。它不是一个基于图块的架构，但足够灵活，软件开发人员可以模拟基于图块的渲染。<ref>{{Cite web |url=http://www.neowin.net/news/xbox-one-developer-upcoming-sdk-improvements-will-allow-for-more-1080p-games |title=存档副本 |accessdate=2017-03-16 |archive-date=2020-08-21 |archive-url=https://web.archive.org/web/20200821000939/https://www.neowin.net/news/xbox-one-developer-upcoming-sdk-improvements-will-allow-for-more-1080p-games |dead-url=no }}</ref>{{Failed verification|date=June 2016}}

== 商业产品 - 嵌入式 ==
由于相对较低的外部内存带宽和片上内存容量的需求，图块渲染是常用于嵌入式GPU的技术。目前的例子有：

基于图块的即时模式渲染（TBIM）：
* [[安謀控股|ARM]] [[Mali_(GPU)|Mali]]系列。<ref>{{Cite web|url=http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0363d/CJAEEJCF.html|title=Mali rendering strategy|publisher=ARM|accessdate=2020-10-05|archive-date=2016-03-04|archive-url=https://web.archive.org/web/20160304051042/http://infocenter.arm.com/help/index.jsp?topic=%2Fcom.arm.doc.dui0363d%2FCJAEEJCF.html|dead-url=yes}}</ref>
* [[高通|高通]] [[Adreno|Adreno]]（系列中的300和更新版本可通过FlexRender动态切换为立即/直接模式渲染）。<ref>{{Cite web|url=https://lwn.net/Articles/638908/|title=An update on the freedreno graphics driver|publisher=lwn.net|accessdate=2017-03-16|archive-date=2015-09-05|archive-url=https://web.archive.org/web/20150905111118/https://lwn.net/Articles/638908/|dead-url=yes}}</ref><ref>{{Cite web|url=https://www.qualcomm.com/media/documents/files/the-rise-of-mobile-gaming-on-android-qualcomm-snapdragon-technology-leadership.pdf|title=The rise of mobile gaming on android|accessdate=17 September 2015|format=PDF|publisher=Qualcomm|archive-date=2014-11-09|archive-url=https://web.archive.org/web/20141109010801/https://www.qualcomm.com/media/documents/files/the-rise-of-mobile-gaming-on-android-qualcomm-snapdragon-technology-leadership.pdf|dead-url=yes}}</ref>
基于图块的延迟渲染（TBDR）：
* [[Imagination_Technologies|Imagination Technologies]] [[PowerVR|PowerVR]] 5/6/7系列。<ref>{{Cite web|url=http://blog.imgtec.com/powervr/a-look-at-the-powervr-graphics-architecture-tile-based-rendering|title=A look at the PowerVR graphics architecture: Tile-based rendering|publisher=Imagination Technologies|accessdate=2017-03-16|archive-date=2015-04-05|archive-url=https://web.archive.org/web/20150405010019/http://blog.imgtec.com/powervr/a-look-at-the-powervr-graphics-architecture-tile-based-rendering|dead-url=yes}}</ref>
* [[博通|博通]] [[VideoCore|VideoCore IV]]系列。<ref>{{Cite web|url=http://www.broadcom.com/docs/support/videocore/VideoCoreIV-AG100-R.pdf|title=VideoCoreIV-AG100|date=2013-09-18|publisher=Broadcom|access-date=2017-03-16|archive-url=https://web.archive.org/web/20150301043328/http://www.broadcom.com/docs/support/videocore/VideoCoreIV-AG100-R.pdf|archive-date=2015-03-01|dead-url=yes}}</ref>
[[Vivante_Corporation|Vivante]]生产具有紧密耦合的帧缓冲器内存的移动GPU（类似上面描述的Xbox 360 GPU）。虽然这可以用于渲染屏幕部分，但是所渲染的区域的大尺寸使它们通常不被描述为使用基于图块的架构。

== 参见 ==
* {{tsl|en|Tessellation (computer graphics)|镶嵌 (计算机图形)}}
* {{tsl|en|Texture atlas|纹理地图集}}
* [[扫描线渲染|扫描线渲染]]
* [[拚接圖電子遊戲|拚接圖電子遊戲]]

== 参考资料 ==
{{reflist|2}}

[[Category:3D渲染|Category:3D渲染]]