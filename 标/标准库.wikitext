{{NoteTA
|T=zh-hans:标准库; zh-hant:標準函式庫;
|G1=IT
|1=zh-hans:标准库; zh-hant:標準函式庫;
}}

[[编程语言|编程语言]]的'''标准库'''是该语言的每种实现中都按例提供的[[函式庫|函式庫]]。在某些情况下，编程语言规格说明中会直接提及该函式庫；另一些情况下，标准库的内容由编程社区中的非正式惯例决定。

根据宿主语言构成要素的不同，标准库可包含如下要素：
* [[子程序|子程序]]
* [[巨集|巨集]]定义
* [[全局变量|全局变量]]
* [[类_(计算机科学)|類別]]定义
* [[模板|模板]]

大多数标准库都至少含有如下常用组件的定义：
* [[算法|算法]]（例如[[排序算法|排序算法]]）
* [[数据结构|数据结构]]（例如[[表_(数据结构)|表]]、[[树_(数据结构)|树]]、[[哈希表|哈希表]]）
* 与宿主平台的交互，包括[[输入输出|输入输出]]和操作系统调用

== 哲学 ==
标准库设计的哲学多种多样。比如，C++的设计者[[比雅尼·斯特劳斯特鲁普|Bjarne Stroustrup]] 写道：

{{quote | C++标准库应该是什么？程序员的一个理想是在库中找到所有有趣、重要、适度通用的类、函数、模板等等。然而，这里我们问的不是“''某个''库里应该有什么？”而是“''标准''库里应该有什么”回答“所有！”对前者来说是一个合理的答案，而对后者不然。标准库是每一个实现者都必须提供的东西，以便让每一个程序员能够依赖于它。<ref>Bjarne Stroustrup.  ''The C++ Programming Language''.  3rd Ed.  Addison-Wesley, 1997</ref>}}

这就是相对较小的标准库，只包含“每一个程序员”在构建多种软件时都实际可能需要的要素。这就是[[C语言|C]]和[[C++|C++]]标准库中的哲学。

相对的，[[Python|Python]] 的设计者 Guido van Rossum 对标准库的看法要更倾向于包容，他在 Python 教程中写道：
{{quote | Python 有“已含电池”的哲学，这从它的庞大软件包复杂而又可靠的能力中就可以看出端倪。<ref>Guido van Rossum. [http://docs.python.org/tut/node12.html#SECTION00121200000000000000000 Python Tutorial] {{webarchive|url=https://web.archive.org/web/20080928122258/http://docs.python.org/tut/node12.html |date=2008-09-28 }}.</ref>}}

Van Rossum 于是列举了处理 [[XML|XML]]、[[XML-RPC|XML-RPC]]、电子邮件信息、和本地化的库，这些都是被 C++ 标准库所忽略的。这种哲学经常可以在[[脚本语言|脚本语言]]（如 [[Python|Python]] 和 [[Ruby|Ruby]]）和使用[[虚拟机|虚拟机]]的语言（如 [[Java|Java]] 和 [[.NET框架|.NET框架]] 语言）中找到。

== 标准库举例 ==
* [[C标准库|C标准库]]，[[C语言|C语言]]用
* [[C++标准库|C++标准库]]，[[C++|C++语言]]用
* [[标准模板库|标准模板库]]（STL），[[C++标准库|C++标准库]]的一部分
* [[Java类库|Java类库]]（JCL），[[Java|Java语言]] 和 [[Java平台|Java平台]] 用
* [[基础类库|基础类库]]（BCL），for the [[.NET框架|.NET框架]]
* [http://docs.factorcode.org/content/article-handbook-library-reference.html Factor标准库] {{Wayback|url=http://docs.factorcode.org/content/article-handbook-library-reference.html |date=20200511153453 }}, for the [[Factor语言|Factor语言]]

== 参考 ==
{{reflist}}

[[Category:编程库|Category:编程库]]
[[Category:程式語言標準|Category:程式語言標準]]