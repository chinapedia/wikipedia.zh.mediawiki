{{Infobox software
| name = Internet Communications Engine
| logo =
| screenshot =
| caption =
| collapsible =
| developer = ZeroC
| latest_release_version = 3.4.2
| latest_release_date = {{start date and age|2011|09|07}}
| latest_preview_version = 3.5b
| latest_preview_date = {{start date and age|2011|05|15}}
| operating_system =
| programming_language =
| genre = [[远程过程调用|远程过程调用]]框架
| license = [[GPL|GPL]] / 私有
| website = {{URL|http://www.zeroc.com/}}
}}

'''Internet Communications Engine'''，或'''Ice'''，是[[ZeroC|ZeroC]]开发的一个[[面向对象|面向对象]]的[[中间件|中间件]]平台。它提供了面向对象的[[远程过程调用|远程过程调用]]、[[网格计算|网格计算]]和[[发布/订阅|发布/订阅]]功能，并有基于[[GPL|GPL]]的[[多许可|双许可协议]]和一个私有许可协议。它支持[[Linux|Linux]]、[[Solaris_(操作系统)|Solaris]]、[[Windows|Windows]]和[[Mac_OS_X|Mac OS X]]等最主要的操作系统，和[[C++|C++]]、[[Java平台|Java]]、[[.NET框架|.NET语言]]（如[[C_Sharp_(编程语言)|C#]]或[[Visual_Basic|Visual Basic]]）、[[Objective-C|Objective-C]]、[[Python_(编程语言)|Python]]、[[PHP|PHP]]和[[Ruby|Ruby]]等语言<ref>{{Cite web|title=语言支持{{en}}|url=http://zeroc.com/languages.html|accessdate=2009-08-03|archive-date=2009-07-20|archive-url=https://web.archive.org/web/20090720064447/http://www.zeroc.com/languages.html|dead-url=no}}</ref>。Ice运行时的一个轻量变体叫做Ice-e，<ref>{{Cite web|title=Ice-E概述{{en}}|url=http://zeroc.com/icee/index.html|accessdate=2009-08-03|deadurl=yes|archiveurl=https://web.archive.org/web/20090726063054/http://www.zeroc.com/icee/index.html|archivedate=2009-07-26}}</ref>可以运行在[[移动电话|移动电话]]中。如它的名字所表明，该中间件可以被用于应用程序，而不需要使用[[HTTP|HTTP]]协议，并且有能力穿越[[防火墙|防火墙]]（这一点不同于当时的其它中间件）。

== 历史 ==
ZeroC于2002年成立于[[佛罗里达|佛罗里达]]。<ref>{{Cite web|title=Zeroc公司|work=公司概况{{en}}|publisher=Manta|url=http://www.manta.com/c/mmd9gxs/zeroc-inc|accessdate=2013-07-17|archive-date=2019-11-29|archive-url=https://web.archive.org/web/20191129051223/https://www.manta.com/c/mmd9gxs/zeroc-inc}}</ref>Ice的设计受到了[[CORBA|CORBA]]的影响，并且实际上也是由几位有影响力的CORBA开发者创立的，包括[[Michi_Henning|Michi Henning]]。不过，按照ZeroC的说法，它比CORBA更小更简洁，因为它是由一个富有经验的开发者小团体设计的，而不是难产于[[委员会设计|委员会设计]]。<ref>{{Cite web |title=Ice和CORBA的区别{{en}} |url=http://www.zeroc.com/iceVsCorba.html |deadurl=yes |archiveurl=https://web.archive.org/web/20130318043237/http://www.zeroc.com/iceVsCorba.html |archivedate=2013-03-18 |accessdate=2013-01-17 }}</ref>

2004年，有报道称，一家名为Mutable Realms的公司在一个叫做“Wish”的游戏中使用了Ice。<ref>{{Cite journal|title=大量游戏者中间件|author=Michi Henning{{en}}|publisher=ACM|work=队列|date=2004-02-01|url=http://queue.acm.org/detail.cfm?id=971591|accessdate=2013-07-17|archive-date=2013-10-04|archive-url=https://web.archive.org/web/20131004213730/http://queue.acm.org/detail.cfm?id=971591|dead-url=no}}</ref>2008年，有报道称，[[大熊湖太阳天文台|大熊湖太阳天文台]]从2005年起就在使用该软件。<ref>{{cite conference|author=Sergij Shumko|title=Ice中间件应用于新太阳望远镜的望远镜控制系统|booktitle=天文数据分析软件和系统XVII，ASP会议丛书，卷XXX，2008|place=加拿大魁北克市|date=2008-11-02|url=http://solar.njit.edu/preprints/shumko1395.pdf|accessdate=2013-07-17|deadurl=yes|archiveurl=https://web.archive.org/web/20120825045800/http://solar.njit.edu/preprints/shumko1395.pdf|archivedate=2012-08-25}}</ref>某些版本作为开放显微镜环境的一部分被发布到了[[GitHub|GitHub]]，直到2011年的3.4.2版本。<ref>{{Cite web|title=ome/zeroc-ice|publisher=GitHub|work=源码下载|url=https://github.com/ome/zeroc-ice|accessdate=2013-07-17|archive-date=2018-06-10|archive-url=https://web.archive.org/web/20180610233650/https://github.com/ome/zeroc-ice|dead-url=no}}</ref>

== 组件 ==
Ice的组件包括面向对象的远程对象调用、响应（replication<sup>还是复制？</sup>）、网格计算、故障转移、负载均衡、防火墙穿越和发布-订阅服务。为了访问这些服务，应用程序被连接到一个存根库或集合，该存根库或集合产生于一个语言无关的叫做''slice''的类[[IDL|IDL]]语法。

参见[[:en:File:ICEgrid.png|ICE示意图（英文）]]

=== IceStorm ===
是一个面向对象的发布和订阅框架，它还支持联盟（federation）和服务质量（quality-of-service）。不同于其它的发布-订阅框架如[[TIBCO软件公司|TIBCO软件公司]]的[[TIBCO_Rendezvous|Rendezvous]]或[[SmartSockets|SmartSockets]]，它的消息内容是由定义良好的类的对象组成的，而不是由结构化文本组成的。

=== IceGrid ===
是一套框架，它提供面向对象的[[负载均衡|负载均衡]]、[[故障转移|故障转移]]、对象发现和注册服务。

=== IcePatch ===
协助部署基于ICE的软件。例如，希望部署新功能和/或补丁到多台服务器的用户可以使用IcePatch。

===Glacier===
是一个基于[[代理服务器|代理]]的能够穿越防火墙的服务，因此使得ICE成为一个因特网通讯引擎。

=== IceBox ===
是一个[[面向服务架构|面向服务架构]]的容器，它包含可执行的由[[动态链接库|.dll]]或.so库实现的服务。这是一个更轻量的选择，可以对每个服务构建整个可执行服务。
2

=== Slice ===
Ice规范语言（Specification Language for Ice）是一个Zeroc私有的文件格式，程序员按照它来编辑独立于计算机语言的声明和类、接口、结构和枚举的定义。Slice定义文件被用来作为存根生成过程的输入。存根依次被连接到应用程序和服务器，它们应该基于由slice声明/定义的接口和类进行互相通讯。

不同于CORBA，这里的类和接口还支持继承和抽象类。此外，slice还在宏和属性的表单中提供配置选项来管理代码生成过程。一个例子是，指令可以生成[[STL|STL]]模板<code>list<double></code>，而不是默认地生成STL模板<code>vector<double></code>。

== 参见 ==
{{Portal|Free software}}
* [[ASN.1|ASN.1]]
* Caucho的{{link-en|Hessian|Hessian (protocol)}}
* [[Cisco|Cisco]]的{{link-en|Etch|Etch (protocol)}}
* [[Facebook|Facebook]]的[[Thrift|Thrift]]
* [[Google|Google]]的[[Protocol_Buffers|Protocol Buffers]]
* [[Microsoft|Microsoft]]的“{{link-en|M语言|M (programming language)|M}}”

== 注释 ==
<references/>

== 外部链接 ==
* http://zeroc.com/ice.html{{Wayback|url=http://zeroc.com/ice.html |date=20140326182658 }}

[[Category:进程间通信|Category:进程间通信]]
[[Category:网格计算产品|Category:网格计算产品]]
[[Category:应用层协议|Category:应用层协议]]
[[Category:远端程序呼叫|Category:远端程序呼叫]]
[[Category:对象请求代理|Category:对象请求代理]]