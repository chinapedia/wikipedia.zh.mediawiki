{{unreferenced|time=2018-10-01T07:23:34+00:00}}
{{NoteTA|G1=IT}}
{{Program execution}}
'''交叉编译器'''（{{lang-en|Cross compiler}}）是指一个在某个[[系统平台|系统平台]]下可以产生另一个[[系统平台|系统平台]]的-{zh-hans:[[可执行文件|可执行文件]];zh-hant:[[執行檔|執行檔]]}-的[[编译器|编译器]]。交叉编译器在目标[[系统平台|系统平台]]（开发出来的应用程-{zh-hans:序;zh-tw:式}-序所-{zh-hans:运行;zh-tw:執行}-的平台）难以或不容易[[编译|编译]]时非常有用。

交叉编译器的存在对于从一个开发主机为多个平台编译代码是非常有必要的。直接在平台上编译有时行不通，例如在一个[[嵌入式系统|嵌入式系统]]的[[单片机|单片机]] ，因为它们没有完整的现代操作系统环境，无法直接编译。

交叉编译器和[[源到源编译器|源代码至源代码编译器]]不同，交叉编译器用于二进制代码的跨平台软件开发，而源到源编译器是将某种[[编程语言|编程语言]]的程序[[源代码|源代码]]作为输入，生成以另一种编程语言构成的等效源代码的[[编译器|编译器]]，但两者都是[[软件开发工具|编程工具]]。

== 使用 ==
交叉编译器的基本用法就是将构建环境与目标环境分开。常在下面几种情况中使用：

* 嵌入式电脑。这种设备的资源有限，举例来说：微波炉有一个非常小的计算机来读取其触摸板和门传感器，并向数字显示器和扬声器提供输出，以控制用于烹饪食物。这台计算机不足以运行编译器，文件系统或开发环境，因为调试和测试需要更多的嵌入式系统资源，使得在目标机上编译变得更不可能。采用交叉编译，在资源足够的机器上完成构建工作，就可以解决这个问题。
* 编译多个目标库。举个例子，一个公司可能希望支持不同版本或不同种类的操作系统，有了交叉编译，便可以为每个目标设置一个编译环境进行编译。如：在Windows中为底层构造完全不同的Linux编译程序；在电脑上为移动端操作系统构建程序。
* 在服务器上编译。类似于在多个机器进行编译，一个复杂的编译可能会涉及到许多的编译操作，可以将这些编译操作放到空闲的机器上执行，无论其底层硬件或其运行的操作系统版本如何。
* {{tsl|en|Bootstrapping (compilers)||引导一个新平台}}（{{lang|en|Bootstrapping}}）。在为新平台开发软件，或者开发/使用未来平台的仿真器时，则使用交叉编译器来编译必要的工具，如操作系统和本机编译器。

[[虛擬機器#程序虚拟机|程序虚拟机]]（比如[[Java虚拟机|JVM]]）也借鉴了当初开发交叉编译器的理念。它可以用同一份输出在多个目标系统上运行，但是编译后的代码必须运行在虚拟机上。

== 参见 ==

*[[編譯器|編譯器]]
*[[MinGW|MinGW]]
*[[Scratchbox|Scratchbox]]
*[[Free_Pascal|Free Pascal]]
{{compu-soft-stub}}

[[Category:编译器软件|Category:编译器软件]]