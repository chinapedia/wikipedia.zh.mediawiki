{{NoteTA
|G1 = IT
|G2 = Math
}}
在[[数学|数学]]、[[逻辑|逻辑]]和[[计算机科学|计算机科学]]中，'''形式语言'''（{{lang-en|Formal language}}）是用精确的数学或机器可处理的公式定义的语言。

如[[语言学|语言学]]中语言一样，形式语言一般有两个方面：[[形式文法|语法]]和[[形式语义|语义]]。专门研究语言的语法的数学和计算机科学分支叫做'''形式语言理论'''，它只研究语言的语法而不致力于它的语义。在形式语言理论中，'''形式语言'''是一个[[字母表_(计算机科学)|字母表]]上的某些有限长[[字符串|字符串]]的[[集合_(数学)|集合]]。一个形式语言可以包含无限多个字符串。

== 语言的形式定义 ==

=== 字母表与字符串 ===
语言定义在某一个特定的'''字母表'''上，字母表（经常记作 '''Σ''' ）可以为任意有限集合。例如集合<math>\{a,b,c...,z\}</math>就表示所有小写字母构成的字母表。

'''字符串'''是字母表中的元素构成的有穷序列，以之前定义的小写字母表为例，“hello”，“wikipedia”,“abcjkg”都是上面的串，而“AbCd”就不是上面的串了。记号 '''ε''' 表示[[空串|空串]]——它是一个特殊的长度为0的串。

=== 语言 ===
直觉上，一个语言是字母表所能构成的所有串的集合的一个子集，具体来说：

对于任意一个字母表，记全体长度为 n 的子串为<math>\Sigma ^{n}</math>，特别的，规定<math>\Sigma ^{0}</math> 为{ε}，则还可以定义

<math>\Sigma ^ {*} = \Sigma ^{0}\cup \Sigma ^{1}\cup \cdots \cup \Sigma ^{n}\cup \cdots </math>

<math>\Sigma ^{*}</math>包含了字母表<math>\Sigma</math>所能构成的所有字符串。'''语言'''（一般记为 L ）定义为<math>\Sigma ^{*}</math>的任意子集。

下面给出一些语言的例子，<math>\{hello , world\}</math>是一个包含两个字符串的集合，也可以被视为小写字母构成的字母表上的一个语言。而实际上研究的语言的例子则常常更为复杂，例如所有合法的C语言程序串构成的集合也可以视作ASCII上的一个语言（假定编译器只支持英文符号）。

需要注意的一点是，<math>\Sigma ^{*}</math> 的[[空集|空子集]] ∅ 与只包含空串的语言 {ε} 是两个不同的语言。

== 语言间的运算 ==
语言间的运算就是 Σ<sup>*</sup>[[幂集|幂集]]上的运算。
* 字符串集合的[[交集|交集]]、[[并集|并集]]、[[补集|-{zh-cn:补集; zh-tw:差集;}-]]等运算。
* [[串接|连接]]运算：L<sub>1</sub>L<sub>2</sub> = { xy | x 属于L<sub>1</sub>并且 y 属于L<sub>2</sub> }。
* 幂运算：L<sup>n</sup> = L … L （共 n 个 L 连接在一起），L<sup>0</sup> = {ε}。
* [[Kleene星号|闭包]]运算：L<sup>*</sup> = L<sup>0</sup>∪L<sup>1</sup>∪…∪L<sup>n</sup>∪…。
* [[字符串运算#右商|右商]]运算：L<sub>1</sub>/L<sub>2</sub> = {x | 存在 y 属于L<sub>2</sub>使得 xy 属于L<sub>1</sub>}。
* 设 ''S'' ⊆ Σ<sup>*</sup> 是一个语言，''S'' 的补语言定义为集合 {ω | ω ∈ Σ<sup>*</sup> 且 ω ∉ ''S''}

== 语言的表示方法 ==
不像自然语言，一个形式语言作为一个集合，需要有某种明确的标准来定义一个字符串是否是它的元素。这可以通过多种方法来完成，下面将给出一些例子：

=== 枚举法 ===
如果一个形式语言的元素数目是有限的，那么可以通过枚举它的各个字串来严格地定义它。

=== 形式文法 ===
通过[[形式文法|形式文法]]来产生（参见[[乔姆斯基谱系|乔姆斯基谱系]]）。

=== 正则表达式 ===

{{Main|正则表达式|正则语言}}

正则表达式是一种很多编程语言和库都支持的语法，这种语法可以用于匹配符合一定条件的字符串，经常用于文本的搜索和过滤。从名称上来说，正则表达式应当是对应于正则语言的，在形式语言领域内所称的正则表达式确实如此。不过，在实际的编程语言中，很多正则表达式已经通过引入复杂的扩展，可以匹配正则表达式所不能描述的内容。形式语言中的正则表达式和一般编程语言中所称的正则表达式在语法上也有较大差异。

=== 自动机 ===
直觉上来说，自动机消耗输入符号，并在自身的不同状态间转移，可以通过状态机消耗完整个字符串之后是否达到某些特定状态来定义一个字符串是否属于某一个语言。语言可以通过某种自动机来识别，比如[[图灵机|图灵机]]、[[有限状态自动机|有限状态自动机]]。

== 參考文獻 ==
{{Reflist|2}}
{{refbegin}}
* {{cite book |first = A. G. |last = Hamilton |title = Logic for Mathematicians |url = https://archive.org/details/logicformathemat0000hami_g5m2 |publisher = Cambridge University Press |year = 1978 |isbn = 0-521-21838-1}}
* {{cite book |first = Seymour |last = Ginsburg |title = Algebraic and automata theoretic properties of formal languages |publisher = North-Holland |year = 1975 |isbn = 0-7204-2506-9}}
* {{cite book |first = Michael A. |last = Harrison |title = Introduction to Formal Language Theory |publisher = Addison-Wesley |year = 1978}}
* {{cite book |first = John E. |last = Hopcroft |coauthors = Jeffrey D. Ullman |title = Introduction to Automata Theory, Languages, and Computation |url = https://archive.org/details/trent_0116301269779 |publisher = Addison-Wesley Publishing |location = Reading, Massachusetts |year = 1979 |isbn = 0-201-02988-X}}
* {{cite book |first = Grzegorz |last = Rozenberg |coauthors = Arto Salomaa |title = Handbook of Formal Languages: Volume I-III |publisher = Springer |year = 1997 |isbn = 3-540-61486-9}}
* {{cite book |first = Patrick |last = Suppes |title = Introduction to Logic |url = https://archive.org/details/introductiontolo0000supp |publisher = D. Van Nostrand |year = 1957 |isbn = 0-442-08072-7}}
{{Refend}}

== 参见 ==
{{Portal box|语言|数学|计算机科学}}
* [[形式文法|形式文法]]
* [[形式方法|形式方法]] 
* [[形式科学|形式科学]]
* [[形式系统|形式系统]]
* [[数学符号|数学符号]]
* [[编程语言|编程语言]]
* [[本体语言|本体语言]]

== 外部链接 ==
* [http://www.csee.umbc.edu/help/theory/lang_def.shtml Formal Language Definitions] {{Wayback|url=http://www.csee.umbc.edu/help/theory/lang_def.shtml |date=20080216230918 }} website 1/24/04 
* James Power, [http://www.cs.nuim.ie/~jpower/Courses/parsing/ Notes on Formal Language Theory and Parsing] {{Wayback|url=http://www.cs.nuim.ie/~jpower/Courses/parsing/ |date=20071121142736 }}, 29 November 2002. 
* [http://www.cs.cmu.edu/~lkontor/noam/Mateescu-Salomaa.pdf Alexandru Mateescu and Arto Salomaa, "Preface" in Vol.1, pp. v-viii, and "Formal Languages: An Introduction and a Synopsis", Chapter 1 in Vol. 1, pp.1-39] {{Wayback|url=http://www.cs.cmu.edu/~lkontor/noam/Mateescu-Salomaa.pdf |date=20120612011121 }}
* [http://www.csd.uwo.ca/~syu/public/draft.ps Sheng Yu, "Regular Languages", Chapter 2 in Vol. 1] {{Wayback|url=http://www.csd.uwo.ca/~syu/public/draft.ps |date=20060519210749 }}
* [http://citeseer.ist.psu.edu/248295.html Jean-Michel Autebert, Jean Berstel, Luc Boasson, "Context-Free Languages and Push-Down Automata", Chapter 3 in Vol. 1] {{Wayback|url=http://citeseer.ist.psu.edu/248295.html |date=20080327061304 }}
* [https://web.archive.org/web/20110517111545/http://www.liafa.jussieu.fr/~cc/PUBLICATIONS/CKTUCS.PS.gz Christian Choffrut and Juhani Karhumäki, "Combinatorics of Words", Chapter 6 in Vol. 1]
* [https://web.archive.org/web/20090320000235/http://users.utu.fi/harju/articles/morph.pdf Tero Harju and Juhani Karhumäki, "Morphisms", Chapter 7 in Vol. 1, pp. 439 - 510]
* [http://www.liafa.jussieu.fr/~jep/PDF/HandBook.pdf Jean-Eric Pin, "Syntactic semigroups", Chapter 10 in Vol. 1, pp. 679-746] {{Wayback|url=http://www.liafa.jussieu.fr/~jep/PDF/HandBook.pdf |date=20110517111441 }}
* [https://web.archive.org/web/20110515223759/http://www-igm.univ-mlv.fr/~mac/REC/DOC/B4.ps M. Crochemore and C. Hancart, "Automata for matching patterns", Chapter 9 in Vol. 2]
* [https://web.archive.org/web/20071008170115/http://bruno.maitresdumonde.com/optinfo/Spe-MP/dmds1998/2dlang/giammaresi-restivo-paper.ps Dora Giammarresi, Antonio Restivo, "Two-dimensional Languages", Chapter 4 in Vol. 3, pp. 215 - 267] 
{{-}}
{{形式语言与形式文法}}
{{语义网}}

{{Authority control}}

[[Category:形式语言|]]
[[Category:编译原理|Category:编译原理]]