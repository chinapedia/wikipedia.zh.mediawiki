{{noteTA
|T = zh-cn:延迟加载; zh-tw:惰性載入;
|G1 = IT
}}

{{multiple image
| direction = vertical
| width = 200
| footer = 惰性載入是類似於[[卷軸|卷軸]]和[[瀑布|瀑布]]的概念
| image1 = Scroll.jpg
| image2 = Waterfall at Harlech Road 1.jpg
}}

'''惰性載入'''（{{lang-en|lazy loading、infinite scroll}}，又稱'''延遲載入'''<ref>{{cite web|title=Lazy Load 延遲圖片載入，讓網站更順暢|url=http://sofree.cc/lazy-load/|publisher=香腸炒魷魚|accessdate=2015-03-29}}</ref>、'''懶載入'''<ref>{{cite web|author=奧革士|title=慢網路的的聰明策略|url=https://medium.com/@augus/-d4cd908d3313|publisher=Medium|accessdate=2015-03-29}}</ref><ref>{{cite web|author=|title=WordPress 中部署真正的懒加载（Lazy Load）|url=http://devework.com/wordpress-truly-lazy-loading.html|publisher=DeveWork|accessdate=2015-03-29}}</ref>、'''無限捲動'''<ref name="TechOrange">{{cite web|title=無限滾動捲軸設計讓你看個沒完沒了，這是優點還是缺點？|url=http://buzzorange.com/techorange/2013/05/22/infinite-scrolling-lets-get-to-the-bottom-of-this/|publisher=TechOrange|accessdate=2015-03-29}}</ref>、'''瀑布流'''<ref name="TechOrange" />），是一種[[设计模式_(计算机)|設計模式]]，被運用在[[軟體設計|軟體設計]]和[[網頁設計|網頁設計]]當中<ref>{{cite web|title=Lazy Load|url=http://responsivedesign.is/resources/javascript-jquery/lazy-load|publisher=Responsive Web Design}}</ref>，对于网页界面，其特徵為使用者透過滑鼠或觸控，{{link-en|捲動|Scrolling}}瀏覽頁面，直到頁面下方時，才會依照Javascript等程式碼，發出連線請求，自動下載載入更多內容於同一網頁，以減少網路頻寬與裝置負擔；有多數網站採用這項網頁設計，例如[[Google圖片搜索|Google圖片搜索]]、[[Google+|Google+]]、[[Facebook|Facebook]]、[[Twitter|Twitter]]、[[Pinterest|Pinterest]]、[[Youtube|Youtube]]、部分論壇<ref>{{cite web|title=Pinterest: Pinboards, Infinite-Scrolling, Lazy Loading, Adaptive Layouts|url=https://www.youtube.com/watch?v=YK2RUC2biAk|publisher=Youtube|accessdate=2015-03-29}}</ref>和維基百科的[[Wikipedia:Flow|Flow]]討論系統。部分新聞網站會接續載入其他與原內容不相關的其他內容於同一網頁，也有結合無限捲動和多[[頁|頁]]，兩著特性的網頁設計，以便快速定位尋找內容<ref>{{cite web|title=Items|url=http://scrollsample.appspot.com/items|accessdate=2015-03-29}}</ref>。

此種設計的缺點是如果是比較後面的資料內容，就需要逐一等候載入，無法和傳統多頁式設計那樣，可以快速定位內容。

而对于数据结构而言，惰性載入是指从一个数据对象通过方法获得里面的一个属性对象时，这个对应对象实际并没有随其父数据对象创建时一起保存在运行空间中，而是在其读取方法第一次被调用时才从其他数据源中加载到运行空间中，这样可以避免过早地导入过大的数据对象但并没有使用的空间占用浪费。

== 實現 ==
實現惰性載入的設計模式，有多種方式：

=== 惰性初始模式 ===
{{main|惰性初始模式}}
<syntaxhighlight lang="csharp">
private int myWidgetID;
private Widget myWidget = null;
 
public Widget MyWidget 
{
    get 
    {
        if (myWidget == null) 
        {
            myWidget = Widget.Load(myWidgetID);
        }
        return myWidget;
        /* 也可使用 C# 的 null 联合运算子 ?? (x ?? y 相当于 x != null ? x : y):
         * return myWidget = myWidget ?? Widget.Load(myWidgetID);
         */
    }
}
</syntaxhighlight>

=== Virtual proxy ===
=== Ghost ===
=== Value holder ===
=== jQuery的插件 ===
[[JavaScript|JavaScript]][[函式庫|函式庫]]──[[jQuery|jQuery]]的一些[[插件|插件]]，有提供無限捲動的功能，例如Infinite Scroll插件<ref>{{cite web|title=jScroll – jQuery Plugin for Infinite Scrolling / Auto-Paging|url=http://plugins.jquery.com/jscroll/|publisher=jQuery|accessdate=2015-03-29}}</ref>。

== 參見 ==
{{Wiktionary|en:infinite scroll}}
* [[惰性求值|惰性求值]]

== 參考來源 ==
{{Reflist}}


{{软件设计模式}}
[[Category:軟體設計模式|Category:軟體設計模式]]