{{NoteTA
|G1 = IT
|1 = zh-cn:宏; zh-tw:巨集;
|2 = zh-cn:编程; zh-tw:程式設計;
}}
{{各地中文名
|cn = 可變參數宏
|tw = 可變參數巨集
}}
'''可变参数宏'''是[[C语言|C语言]]与[[C++语言|C++语言]]的[[函数宏|函数宏]]的参数个数可以是0个或多个。这一语言特性由[[C99|C99]]引入。[[C++11|C++11]]也开始支持。<ref>Working draft changes for C99 preprocessor synchronization – http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm {{Wayback|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm |date=20200731222757 }}</ref>

== 声明语法 ==
声明语法类似于[[可變參數函數|可變參數函數]]：逗号后面三个[[句点|句点]]"<tt>...</tt>"，表示一个或多个参数。但常见编译器也允许传递0个参数。<ref name="gcc">{{Cite web |url=https://gcc.gnu.org/onlinedocs/gcc/Variadic-Macros.html |title=Variadic Macros – Using the GNU Compiler Collection (GCC)<!-- Bot generated title --> |access-date=2017-04-01 |archive-date=2020-07-04 |archive-url=https://web.archive.org/web/20200704094843/http://gcc.gnu.org/onlinedocs/gcc/Variadic-Macros.html |dead-url=no |publisher=GNU Compiler Collection}}</ref><ref name="msvc">{{Cite web |url=http://msdn.microsoft.com/en-us/library/ms177415(v=vs.80).aspx |title=Variadic Macros (C++)<!-- Bot generated title --> |access-date=2017-04-01 |archive-date=2016-06-11 |archive-url=https://web.archive.org/web/20160611022622/https://msdn.microsoft.com/en-us/library/ms177415(v=vs.80).aspx |dead-url=no }}</ref>宏扩展时使用特殊标识符<tt>__VA_ARGS__</tt>表示所传递的参数的替换。

没办法访问可变参数列表内的单个参数，也不能获知多少个参数被传递。<ref>{{Cite web
 |author= Laurent Deniau
 |title= __VA_NARG__ - comp.std.c - Google Groups
 |date= 2006-01-16
 |website=groups.google.com
 |message-id= dqgm2f$ije$1@sunnews.cern.ch
 |url= http://groups.google.com/group/comp.std.c/browse_thread/thread/77ee8c8f92e4a3fb/346fc464319b1ee5
 |accessdate= 
 |archive-date= 2012-11-07
 |archive-url= https://web.archive.org/web/20121107083005/http://groups.google.com/group/comp.std.c/browse_thread/thread/77ee8c8f92e4a3fb/346fc464319b1ee5
 |dead-url= no
 }}</ref>

== 实现支持 ==

C/C++编译器支持：
*[[GNU_Compiler_Collection|GNU Compiler Collection]] 3.0,<ref name="gcc" /> 
*[[Clang|Clang]] ,<ref>Clang source code change that mentions __VA_ARGS__ support (2006-07-29), note that Clang was open-sourced in 2007. http://llvm.org/viewvc/llvm-project?view=revision&revision=38770{{Dead link}}</ref> 
*[[Visual_Studio_2005|Visual Studio 2005]],<ref name="msvc" /> 
*[[C++Builder|C++Builder]] 2006, 
*[[Oracle_Solaris_Studio|Oracle Solaris Studio]] (Sun Studio) Forte Developer 6 update 2 (C++ version 5.3).<ref>Sun Studio feature comparison – http://developers.sun.com/sunstudio/support/CCcompare.html {{Wayback|url=http://developers.sun.com/sunstudio/support/CCcompare.html |date=20120214174003 }}</ref> 

== 尾部逗号 ==
对于可变参数为空情形，Visual Studio<ref name="msvc" />直接去掉可变参数前面的逗号；GCC<ref name="gcc" />需要在__VA_ARGS__前面放上##以去除逗号。

<syntaxhighlight lang="c">
# define MYLOG(FormatLiteral, ...)  fprintf (stderr, "%s(%d): " FormatLiteral "\n", __FILE__, __LINE__, __VA_ARGS__)
</syntaxhighlight>

对于
<syntaxhighlight lang="c">
MYLOG("Too many balloons %u", 42);
</syntaxhighlight>
扩展为：
<syntaxhighlight lang="c">
fprintf (stderr, "%s(%u): " "Too many balloons %u" "\n", __FILE__, __LINE__, 42);
</syntaxhighlight>
它等价于：
<syntaxhighlight lang="c">
fprintf (stderr, "%s(%u): Too many balloons %u\n", __FILE__, __LINE__, 42);
</syntaxhighlight>

但对于例子：
<syntaxhighlight lang="c">
MYLOG("Attention!");
</syntaxhighlight>
扩展为
<syntaxhighlight lang="c">
fprintf (stderr, "%s(%u): " "Attention!" "\n", __FILE__, __LINE__, );
</syntaxhighlight>
GCC将会编译报错.

GCC支持下述不可移植的扩展:
<syntaxhighlight lang="c">
# define MYLOG(FormatLiteral, ...)  fprintf (stderr, "%s(%u): " FormatLiteral "\n", __FILE__, __LINE__, ##__VA_ARGS__)
</syntaxhighlight>
这将删除空的__VA_ARGS__尾部逗号。 

== 參見 ==
*[[可變參數函數|可變參數函數]]

== 参考文献 ==

{{reflist}}
 

[[Category:C语言|Category:C语言]]
[[Category:C++|Category:C++]]