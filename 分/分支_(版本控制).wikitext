在[[版本控制|版本控制]]與[[软件配置管理|软件配置管理]]中，'''分支'''（{{lang-en|Branching}}）是由某個版本的程式碼或軟體物件中建立複製版本，在分支出來後的兩個版本，可以獨立進行修改。

分支會形成樹狀結構，也被稱為{{lang|en|trees}}，{{lang|en|streams}}或{{lang|en|codelines}}。原始的版本，稱為父分支（parent branch）或是上游分支（upstream branch）。分支出來的複本，稱為子分支（Child branches）。作為最源頭，沒有父分支的分支，稱為[[主幹_(軟件)|主幹]]（trunk）或主線（mainline）<ref>{{cite book|url= http://www.scmpatterns.com/book|title= Software Configuration Management Patterns: Effective Teamwork, Practical Integration|first1= Steve|last1= Berczuk|first2= Brad|last2= Appleton|ISBN= 0-20174117-2|year= 2003|publisher= [[Addison-Wesley|Addison-Wesley]]|accessdate= 2007-05-24|archive-date= 2020-10-30|archive-url= https://web.archive.org/web/20201030014041/https://www.scmpatterns.com/book/|dead-url= no}}</ref>。

在[[分散式版本控制|分散式版本控制]]系統（例如{{le|Darcs|Darcs}}）中，分支和存放版本的[[仓库_(版本控制)|倉庫]]（repository）是一樣的。在這類系統，複製一份倉庫的複本和分支是一樣的。

軟體進行分支後，之後有可能會再將分支[[合并_(版本控制)|合并]]回父分支。常見的是將修改內容合併回主幹（有可能主幹不是父分支）。若某個分支不打算合併（例如曾由第三方授權，授權內容不相容，因此已{{le|重新授權|relicensing}}，或是用在不同用途上），會稱為[[分叉_(软件开发)|分叉]]（fork）。

== 使用分支的原因 ==
建立分支可以讓各部份的程式碼可以平行開發<ref>{{cite web | url = http://www.hillside.net/plop/plop98/final_submissions/P37.pdf | first1 = Brad | last1 = Appleton | first2 = Stephen | last2 = Berczuk | first3 = Ralph | last3 = Cabrera | first4 = Robert | last4 = Orenstein | title = Streamed Lines: Branching Patterns for Parallel Software Development | date = 1998-02-08 | publisher = Hillside | format = - PDF | accessdate = 2009-08-12 | archive-date = 2020-10-25 | archive-url = https://web.archive.org/web/20201025164434/https://hillside.net/plop/plop98/final_submissions/P37.pdf | dead-url = no }}</ref>。大型專案會有不同的參與者，例如開發人員、build管理者，以及[[软件质量保证|软件质量保证]]人員等。甚至需要維護針對不同作業系統的不同發行版。分支可以讓參與者在不破壞基礎代碼穩定性的情形下，將修改和基礎代碼隔離，再進行[[修補程式|程式錯誤修正]]、新{{le|機能 (軟體設計)|Feature (software design)|機能}}開發<ref>{{cite web | url=http://www.lostechies.com/blogs/derickbailey/archive/2009/07/15/branch-per-feature-source-control-part-1-why.aspx | first=Derick | last=Bailey | work=Branch-Per-Feature Source Control | title=Part 1: Why | date=2009-07-15 | publisher=Los techies | accessdate=2009-08-12 | archive-date=2020-07-29 | archive-url=https://web.archive.org/web/20200729094219/https://lostechies.com/blogs/derickbailey/archive/2009/07/15/branch-per-feature-source-control-part-1-why.aspx/ | dead-url=no }}</ref>、[[軟件版本號|軟件版本]][[系統整合|整合]]等。這些修改可以在測試完成後，再[[合并_(版本控制)|合併]]回主線。

== 開發分支 ==
開發分支（development branch）或開發樹（development tree）的程式碼是指正在[[软件开发|软件开发]]，但還沒有[[軟件版本週期|正式發行]]的程式碼。若在[[开放源代码|开放源代码]]社群中，「正式發行」不是那麼直覺，因為任何人隨時都可以取出（check out）需要的版本，不管是不是在開發分支中都可以取出。一般而言，最終會是下一個主要版本的分支就是開發分支。不過也常常同時開發多個機能，因此存在多個開發分支。

有些版本控制軟體會針對主要的開發分支有特殊的命名，例如在[[協作版本系統|CVS]]中稱為MAIN，在[[Git|Git]]中則稱為master<ref>{{Cite web |url=https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell |title=Git Branching Branches in a Nutshell |accessdate=2020-07-29 |archive-date=2020-12-20 |archive-url=https://web.archive.org/web/20201220123258/http://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell |dead-url=no }}</ref>。

== 陰影分支或魔術分支 ==
在{{le|cvc|cvc system}}（開源軟體，整合rPath開發的版本控制系統）及{{le|CVSNT|CVSNT}}中，可以針對上游的分支建立陰影分支或魔術分支，在小修改的維護上比較方便。

== 倉庫的複製 ==
在[[分散式版本控制|分散式版本控制]]中，可以複製整個倉庫（以及其中的分支），之後再進行開發。[[Monotone|Monotone]]（mtn）、[[Mercurial|Mercurial]]（hg）<ref>{{Cite web |url=https://tortoisehg.readthedocs.io/en/latest/clone.html |title=clone |accessdate=2020-07-29 |archive-date=2018-07-01 |archive-url=https://web.archive.org/web/20180701133937/http://tortoisehg.readthedocs.io/en/latest/clone.html |dead-url=no }}</ref>及[[Git|Git]]<ref>{{Cite web |url=https://git-scm.com/docs/git-clone |title=git-clone |accessdate=2020-07-29 |archive-date=2020-12-14 |archive-url=https://web.archive.org/web/20201214232543/https://git-scm.com/docs/git-clone |dead-url=no }}</ref>稱為clone。

==相關條目==
*[[主幹_(軟件)|主幹 (軟件)]]（trunk）
*[[修订标签|修订标签]]（tag）
==參考資料==
{{reflist}}

{{版本控制软件}}


[[Category:版本控制|Category:版本控制]]