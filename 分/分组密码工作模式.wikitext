{{noteTA
|G1=IT
|1=zh-hans:分组; zh-hant:區塊;
}}
[[密码学|密码学]]中，[[分组密码|區塊密码]]的'''工作模式'''（mode of operation）允许使用同一个區塊密码[[密钥|密鑰]]对多于一块的数据进行加密，并保证其安全性。<ref name="HAC">{{cite book
|authors=Alfred J. Menezes, Paul C. van Oorschot and Scott A. Vanstone
|title=应用密码学手册
|publisher=CRC Press
|year=1996
|isbn=0-8493-8523-7
|url=http://www.cacr.math.uwaterloo.ca/hac/
|access-date=2010-09-28
|archive-date=2005-03-07
|archive-url=https://web.archive.org/web/20050307081354/http://www.cacr.math.uwaterloo.ca/hac/
|dead-url=no
}}</ref><ref name="NIST-modes">{{cite web
|title=Block Cipher Modes
|publisher=[[NIST|NIST]]计算机安全资源中心
|url=http://csrc.nist.gov/groups/ST/toolkit/BCM/index.html
|accessdate=2010-09-28
|archive-date=2012-11-19
|archive-url=https://www.webcitation.org/6CIlOSiZI?url=http://csrc.nist.gov/groups/ST/toolkit/BCM/index.html
|dead-url=yes
}}</ref>
區塊密码自身只能[[加密|加密]]长度等于密码區塊长度的单块数据，若要加密变长数据，则数据必须先被划分为一些单独的密码块。通常而言，最后一块数据也需要使用合适[[填充_(密码学)|填充方式]]将数据扩展到符合密码块大小的长度。一种工作模式描述了加密每一数据块的过程，并常常使用基于一个通常称为[[初始化向量|初始化向量]]的附加输入值以进行随机化，以保证安全<ref name="HAC"/>。

工作模式主要用来进行加密和[[身份验证|认证]]。<ref name="HAC"/><ref name="NIST-DES-modes">{{cite web
 |title       = FIPS 81: DES的工作模式
 |publisher   = [[NIST|NIST]] Computer Security Resource Center
 |url         = http://www.itl.nist.gov/fipspubs/fip81.htm
 |deadurl     = yes
 |archiveurl  = https://web.archive.org/web/20090604131329/http://www.itl.nist.gov/fipspubs/fip81.htm
 |archivedate = 2009-06-04
 |accessdate  = 2010-09-28
}}</ref>
对加密模式的研究曾经包含数据的完整性保护，即在某些数据被修改后的情况下密码的[[#误差传播|误差传播]]特性。后来的研究则将[[数据完整性|完整性保护]]作为另一个完全不同的，与加密无关的密码学目标。部分现代的工作模式用有效的方法将加密和认证结合起来，称为[[认证加密模式|认证加密模式]]。<ref name="NIST-modes"/>

虽然工作模式通常应用于[[对称密钥算法|对称加密]]<ref name="NIST-modes"/>，它亦可以应用于[[公钥密码学|公钥加密]]，例如在原理上对[[RSA加密演算法|RSA]]进行处理，但在实用中，公钥密码学通常不用于加密较长的信息，而是使用结合对称加密和公钥加密的混合加密方案<ref name="HAC"/>。

==历史和标准化==
最早出现的工作模式，ECB，CBC，OFB和CFB可以追溯到1981年<ref>[http://www.itl.nist.gov/fipspubs/fip81.htm FIPS 81] {{Wayback|url=http://www.itl.nist.gov/fipspubs/fip81.htm |date=20090604131329 }}, "DES的工作模式"</ref>。2001年，NIST修订了其早先发布的工作模式工作列表，加入了[[高級加密標準|AES]]，并加入了CTR模式<ref>[http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf SP800-38A] {{Wayback|url=http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf |date=20170722092206 }}, “块密码工作模式的建议”</ref>。最后，在2010年1月，NIST加入了[[XTS-AES|XTS-AES]]<ref>[http://csrc.nist.gov/publications/nistpubs/800-38E/nist-sp-800-38E.pdf SP800-38E] {{Wayback|url=http://csrc.nist.gov/publications/nistpubs/800-38E/nist-sp-800-38E.pdf |date=20110813004749 }}, “对块密码工作模式的建议：用于机密性储存设备的XTS-AES模式”</ref>，而其余的可信模式并没有为NIST所认证。例如CTS是一种[[密文窃取|密文窃取]]的模式，许多常见的密码学运行库提供了这种模式。

ECB，CBC，OFB，CFB，CTR和[[XTS|XTS]]模式仅仅提供了机密性；为了保证加密信息没有被意外修改或恶意篡改，需要采用分离的[[消息验证码|消息验证码]]，例如[[CBC-MAC|CBC-MAC]]。密码学社群认识到了对专用的保证完整性的方法的需求，NIST因此提出了HMAC，CMAC和GMAC。[[HMAC|HMAC]]在2002年通过了认证<ref>[http://csrc.nist.gov/publications/fips/fips198/fips-198a.pdf FIPS 198] {{Wayback|url=http://csrc.nist.gov/publications/fips/fips198/fips-198a.pdf |date=20110408193908 }}, “基于哈希的消息验证代码（HMAC）”</ref>，[[CMAC|CMAC]]在2005年通过<ref>[http://csrc.nist.gov/publications/nistpubs/800-38B/SP_800-38B.pdf SP800-38B] {{Wayback|url=http://csrc.nist.gov/publications/nistpubs/800-38B/SP_800-38B.pdf |date=20120526004833 }}, “块密码工作模式的建议：用于认证的CMAC模式”</ref>，GMAC则在2007年被标准化<ref>[http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf SP800-38D] {{Wayback|url=http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf |date=20110805122754 }}, “块密码工作模式的建议：Galois/Counter Mode (GCM)和GMAC”</ref>。

在发现将认证模式与加密模式联合起来的难度之后，密码学社区开始研究结合了加密和认证的单一模式，这种模式被称为[[认证加密模式|认证加密模式]]（AE，Authenticated Encryption），或称为authenc。AE模式的例子包括[[CCM_mode|CCM]]<ref>{{Cite web |url=http://csrc.nist.gov/publications/nistpubs/800-38C/SP800-38C_updated-July20_2007.pdf |title=SP800-38C |accessdate=2010-09-28 |archive-date=2011-08-05 |archive-url=https://web.archive.org/web/20110805122526/http://csrc.nist.gov/publications/nistpubs/800-38C/SP800-38C_updated-July20_2007.pdf |dead-url=no }}</ref>，[[伽羅瓦/計數器模式|GCM]]<ref>{{Cite web |url=http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf |title=SP800-38D |accessdate=2010-09-28 |archive-date=2011-08-05 |archive-url=https://web.archive.org/web/20110805122754/http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf |dead-url=yes }}</ref>，[[Ciphertext_stealing|CWC]]，[[EAX模式|EAX]]，[[IAPM|IAPM]]和[[OCB|OCB]]。

现在，工作模式为许多国家和国内的标准认证实体所定义，其中最有影响力的来源是美国的[[NIST|NIST]]，而其它有影响力的组织包括[[ISO|ISO]]，[[IEC|IEC]]，[[IEEE|IEEE]]，美国的[[ANSI|ANSI]]，以及[[IETF|IETF]]。

==初始化向量（IV）==
{{Main|初始化向量}}

[[初始化向量|初始化向量]]（IV，Initialization Vector）是许多工作模式中用于将加密随机化的一个位块，由此即使同样的明文被多次加密也会产生不同的密文，避免了较慢的重新产生密钥的过程。

初始化向量与密钥相比有不同的安全性需求，因此IV通常无须保密，然而在大多数情况中，不应当在使用同一密钥的情况下两次使用同一个IV。对于CBC和CFB，重用IV会导致泄露明文首个块的某些信息，亦包括两个不同消息中相同的前缀。对于OFB和CTR而言，重用IV会导致完全失去安全性。另外，在CBC模式中，IV在加密时必须是无法预测的；特别的，在许多实现中使用的产生IV的方法，例如SSL2.0使用的，即采用上一个消息的最后一块密文作为下一个消息的IV，是不安全的<ref>{{cite|author=B. Moeller|title=SSL/TLS中CBC密码组的安全性：问题和反制措施|date=May 20, 2004|url=http://www.openssl.org/~bodo/tls-cbc.txt|accessdate=2010-09-28|archive-date=2012-06-30|archive-url=https://web.archive.org/web/20120630143111/http://www.openssl.org/~bodo/tls-cbc.txt|dead-url=yes}}</ref>。

==填充==
{{Main|填充 (密码学)}}
[[块密码|块密码]]只能对确定[[块长度|长度]]的数据块进行处理，而消息的长度通常是可变的。因此部分模式（即[[#电子密码本（ECB）|ECB]]和[[#密码块链接（CBC）|CBC]]）需要最后一块在加密前进行填充。有数种填充方法，其中最简单的一种是在[[明文|明文]]的最后填充空字符以使其长度为块长度的整数倍，但必须保证可以恢复明文的原始长度；例如，若明文是[[C语言|C语言]]风格的[[字符串|字符串]]，则只有串尾会有空字符。稍微复杂一点的方法则是原始的[[DES|DES]]使用的方法，即在数据后添加一个1[[位|位]]，再添加足够的0位直到满足块长度的要求；若消息长度刚好符合块长度，则添加一个填充块。最复杂的则是针对CBC的方法，例如[[密文窃取|密文窃取]]，[[残块终结|残块终结]]等，不会产生额外的密文，但会增加一些复杂度。[[布鲁斯·施奈尔|布鲁斯·施奈尔]]和[[尼尔斯·弗格森|尼尔斯·弗格森]]提出了两种简单的可能性：添加一个值为128的字节（[[十六进制|十六进制]]的80），再以0字节填满最后一个块；或向最后一个块填充''n''个值均为''n''的字节<ref>{{cite book
|authors=[[Bruce_Schneier|Bruce Schneier]]和[[Niels_Ferguson|Niels Ferguson]]
|title=实用密码，5.1节
}}</ref>。

CFB，OFB和CTR模式不需要对长度不为密码块大小整数倍的消息进行特别的处理。因为这些模式是通过对块密码的输出与明文进行[[异或|异或]]工作的。最后一个明文块（可能是不完整的）与[[密钥流|密钥流]]块的前几个字节异或后，产生了与该明文块大小相同的密文块。流密码的这个特性使得它们可以应用在需要密文和明文数据长度严格相等的场合，也可以应用在以流形式传输数据而不便于进行填充的场合。

== 常用模式 ==
=== 电子密码本（ECB） ===
最简单的加密模式即为'''电子密码本'''（Electronic codebook，ECB）模式。需要加密的消息按照块密码的块大小被分为数个块，并对每个块进行独立加密。

[[Image:Ecb_encryption.png|Image:Ecb encryption.png]]

[[Image:Ecb_decryption.png|Image:Ecb decryption.png]]

本方法的缺点在于同样的明文块会被加密成相同的密文块；因此，它不能很好的隐藏数据模式。在某些场合，这种方法不能提供严格的数据保密性，因此并不推荐用于密码协议中。下面的例子显示了ECB在密文中显示明文的模式的程度：该图像的一个位图版本（左图）通过ECB模式可能会被加密成中图，而非ECB模式通常会将其加密成右图。

{| border="0" cellspacing="0" cellpadding="4" align="center"
|- align="center" |
| [[Image:Tux.jpg|Image:Tux.jpg]]
| [[Image:Tux_ecb.jpg|Image:Tux ecb.jpg]]
| [[Image:Tux_secure.jpg|Image:Tux secure.jpg]]
|- align="center" |
| 原图
| 使用ECB模式加密
| 提供了伪随机性的非ECB模式
|-
|}

右图是使用CBC，CTR或任何其它的更安全的模式加密左图可能产生的结果——与随机噪声无异。注意右图看起来的随机性并不能表示图像已经被安全的加密；许多不安全的加密法也可能产生这种“随机的”输出。

ECB模式也会导致使用它的协议不能提供数据完整性保护，易受到[[重放攻击|重放攻击]]的影响，因為每个块是以完全相同的方式解密的。例如，“[[梦幻之星在线：蓝色脉冲|梦幻之星在线：蓝色脉冲]]”在线[[电子游戏|电子游戏]]使用ECB模式的[[Blowfish_(密码学)|Blowfish]]密码。在密钥交换系统被破解而产生更简单的破解方式前，作弊者通过重复发送加密的“杀死怪物”消息包以非法的快速增加[[经验值|经验值]]。

=== 密码块链接（CBC） ===
1976年，IBM发明了'''密码分组链接'''（CBC，Cipher-block chaining）模式<ref>William F. Ehrsam, Carl H. W. Meyer, John L. Smith, Walter L. Tuchman, “通过密码分组进行消息验证和传输错误检测”, US Patent 4074066, 1976</ref>。在CBC模式中，每个明文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有明文块。同时，为了保证每条消息的唯一性，在第一个块中需要使用初始化向量。

[[Image:Cbc_encryption.png|Image:Cbc encryption.png]]

[[Image:Cbc_decryption.png|Image:Cbc decryption.png]]

若第一个块的下标为1，则CBC模式的加密过程为

:<math>C_i = E_K(P_i \oplus C_{i-1}),</math>
:<math>C_0 = IV</math>

而其解密过程则为

:<math>P_i = D_K(C_i) \oplus C_{i-1},</math>
:<math>C_0 = IV</math>

CBC是最为常用的工作模式。它的主要缺点在于加密过程是串行的，无法被并行化，而且消息必须被填充到块大小的整数倍。解决后一个问题的一种方法是利用[[密文窃取|密文窃取]]。

注意在加密时，明文中的微小改变会导致其后的全部密文块发生改变，而在解密时，从两个邻接的密文块中即可得到一个明文块。因此，解密过程可以被并行化，而解密时，密文中一位的改变只会导致其对应的明文块完全改变和下一个明文块中对应位发生改变，不会影响到其它明文的内容。

=== 填充密码块链接（PCBC） ===
'''填充密码块链接'''（'''PCBC'''，Propagating cipher-block chaining）或称为'''明文密码块链接'''（Plaintext cipher-block chaining）<ref>{{Cite web |url=http://www.iks-jena.de/mitarb/lutz/security/cryptfaq/q84.html |title=填充密码块链接 |accessdate=2010-09-28 |archive-date=2012-07-16 |archive-url=https://web.archive.org/web/20120716222121/http://www.iks-jena.de/mitarb/lutz/security/cryptfaq/q84.html |dead-url=no }}</ref><ref>Kaufman, C., Perlman, R., & Speciner, M (2002). 网络安全. Upper Saddle River, NJ: Prentice Hall. Page 319 (2nd Ed.)</ref>，是一种可以使密文中的微小更改在解密时导致明文大部分错误的模式，并在加密的时候也具有同样的特性。

[[File:Pcbc_encryption.png|File:Pcbc encryption.png]]

[[File:Pcbc_decryption.png|File:Pcbc decryption.png]]

加密和解密算法如下：

:<math>C_i = E_K(P_i \oplus P_{i-1} \oplus C_{i-1}), P_0 \oplus C_0 = IV</math>

:<math>P_i = D_K(C_i) \oplus P_{i-1} \oplus C_{i-1}, P_0 \oplus C_0 = IV</math>

PCBC主要用于[[Kerberos|Kerberos v4]]和[[WASTE|WASTE]]中，而在其它场合的应用较少。对于使用PCBC加密的消息，互换两个邻接的密文块不会对后续块的解密造成影响<ref>Kohl, J. “Kerberos中用于网络认证的加密”, Proceedings, Crypto '89, 1989; published by Springer-Verlag; {{cite web |url=http://dsns.csie.nctu.edu.tw/research/crypto/HTML/PDF/C89/35.PDF |title=存档副本 |accessdate=2010-09-28 |deadurl=yes |archiveurl=https://web.archive.org/web/20090612060426/http://dsns.csie.nctu.edu.tw/research/crypto/HTML/PDF/C89/35.PDF |archivedate=2009-06-12 }}</ref>。正因为这个特性，Kerberos v5没有使用PCBC。

=== 密文反馈（CFB） ===
'''密文反馈'''（CFB，Cipher feedback）模式类似于CBC，可以将块密码变为自同步的[[流密码|流密码]]；工作过程亦非常相似，CFB的解密过程几乎就是颠倒的CBC的加密过程：

:<math>C_i = E_K (C_{i-1}) \oplus P_i</math>

:<math>P_i = E_K (C_{i-1}) \oplus C_i</math>

:<math>C_{0} = \ \mbox{IV}</math>

[[Image:cfb_encryption.png|Image:cfb encryption.png]]

[[Image:cfb_decryption.png|Image:cfb decryption.png]]

上述公式是描述的是最简单的CFB，在这种模式下，它的自同步特性仅仅与CBC相同，即若密文的一整块发生错误，CBC和CFB都仍能解密大部分数据，而仅有一位数据错误。若需要在仅有了一位或一字节错误的情况下也让模式具有自同步性，必须每次只加密一位或一字节。可以将[[移位寄存器|移位寄存器]]作为块密码的输入，以利用CFB的自同步性。

为了利用CFB制作一种自同步的，可以处理任意位情况错误的流密码，需要使用一个与块的大小相同的移位寄存器，并用IV将寄存器初始化。然后，将寄存器内容使用块密码加密，然后将结果的最高''x''位与明文的''x''进行异或，以产生密文的''x''位。下一步将生成的''x''位密文移入寄存器中，并对下面的''x''位明文重复这一过程。解密过程与加密过程相似，以IV开始，对寄存器加密，将结果的高''x''与密文异或，产生''x''位明文，再将密文的下面''x''位移入寄存器。

下式中S<sub>i</sub>是移位寄存器的第''i''个状态，a << x是指将''a''移位''x''位，head(a, x)是指''a''的高''x''位，''n''则是指IV的位数。

:<math>C_i = \mbox{head}(E_K (S_{i-1}), x) \oplus P_i</math>

:<math>P_i = \mbox{head}(E_K (S_{i-1}), x) \oplus C_i</math>

:<math>S_i = \ ((S_{i-1} << x) + C_i) \mbox{ mod } 2^n</math>

:<math>S_{0} = \ \mbox{IV}</math>

若密文的''x''位发生错误，则密码在移位寄存器恢复与加密时的状态相同之前，输出不正确的结果，而当寄存器状态恢复后，密码即可以重新同步，恢复正常输出，因此最多只有一块数据发生错误。

与CBC相似，明文的改变会影响接下来所有的密文，因此加密过程不能并行化；而同样的，与CBC类似，解密过程是可以并行化的。在解密时，密文中一位数据的改变仅会影响两个明文块：对应明文块中的一位数据与下一块中全部的数据，而之后的数据将恢复正常。

CFB拥有一些CBC所不具备的特性，这些特性与OFB和CTR的流模式相似：只需要使用块密码进行加密操作，且消息无需进行填充（虽然[[密文窃取|密文窃取]]也允许数据不进行填充）。

=== 输出反馈（OFB） ===
'''输出反馈'''模式（Output feedback, OFB）可以将块密码变成同步的流密码。它产生[[密钥流|密钥流]]的块，然后将其与明文块进行异或，得到密文。与其它流密码一样，密文中一个位的翻转会使明文中同样位置的位也产生翻转。这种特性使得许多[[前向错误更正|错误校正码]]，例如[[奇偶校验位|奇偶校验位]]，即使在加密前计算，而在加密后进行校验也可以得出正确结果。

由于XOR操作的对称性，加密和解密操作是完全相同的：

:<math>C_i = P_i \oplus O_i</math>

:<math>P_i = C_i \oplus O_i</math>

:<math>O_i = \ E_K (O_{i-1})</math>

:<math>O_{0} = \ \mbox{IV}</math>

[[Image:ofb_encryption.png|Image:ofb encryption.png]]

[[Image:ofb_decryption.png|Image:ofb decryption.png]]

每个使用OFB的输出块与其前面所有的输出块相关，因此不能并行化处理。然而，由于明文和密文只在最终的异或过程中使用，因此可以事先对IV进行加密，最后并行的将明文或密文进行并行的异或处理。

可以利用输入全0的CBC模式产生OFB模式的密钥流。这种方法十分实用，因为可以利用快速的CBC硬件实现来加速OFB模式的加密过程。

=== 计数器模式（CTR） ===
:注意：CTR模式（Counter mode，CM）也被称为ICM模式（Integer Counter Mode，整数计数模式）和SIC模式（Segmented Integer Counter）。

与OFB相似，CTR将[[块密码|块密码]]变为[[流密码|流密码]]。它通过递增一个加密计数器以产生连续的密钥流，其中，计数器可以是任意保证长时间不产生重复输出的函数，但使用一个普通的计数器是最简单和最常见的做法。使用简单的、定义好的输入函数是有争议的：批评者认为它“有意的将密码系统暴露在已知的、系统的输入会造成不必要的风险”<ref>Robert R. Jueneman. Analysis of certain aspects of output feedback mode. In Advances in Cryptology, Proceedings of CRYPTO 82, pages 99–127, 1982.</ref>。目前，CTR已经被广泛的使用了，由输入函数造成的问题被认为是使用的块密码的缺陷，而非CTR模式本身的弱点<ref>Helger Lipmaa, Phillip Rogaway, and David Wagner. Comments to NIST concerning AES modes of operation: CTR-mode encryption. 2000</ref>。无论如何，有一些特别的攻击方法，例如基于使用简单计数器作为输入的硬件差错攻击<ref>R. Tirtea and G. Deconinck. Specifications overview for counter mode of operation. security aspects in case of faults. In Electrotechnical Conference, 2004. MELECON 2004. Proceedings of the 12th IEEE Mediterranean, pages 769–773 Vol.2, 2004.</ref>。

CTR模式的特征类似于OFB，但它允许在解密时进行[[随机存取|随机存取]]。由于加密和解密过程均可以进行并行处理，CTR适合运用于多处理器的硬件上。

注意图中的“[[nonce|nonce]]”与其它图中的IV（初始化向量）相同。IV、随机数和计数器均可以通过连接，相加或异或使得相同明文产生不同的密文。

[[Image:Ctr_encryption.png|Image:Ctr encryption.png]]

[[Image:Ctr_decryption.png|Image:Ctr decryption.png]]

==误差传播==
在[[訊息鑑別碼|訊息鑑別碼]]和[[认证加密|认证加密]]的广泛应用之前，常常有人讨论块密码工作模式的“误差传播”特性，作为工作模式性能的一部分。例如，若密文传输中一个数据块的错误会导致采用ECB模式生成的明文中同样一个块的错误，而CBC模式中会导致两个明文块出错。

有人认为这样的特性在应对随机误差（例如传输噪声）时会是有益的，而还有人认为这样的特性使得攻击者更容易篡改消息的一部分。

无论如何，若使用了适当的完整性保护措施，这样的误差很可能会导致整个消息重发。若需要应对随机误差，则应当在发送密文之前增加[[前向錯誤更正|错误校正码]]。

==认证加密==
{{Main|认证加密}}
一些工作模式在设计中希望将保密性和认证性结合起来，例如[[XCBC|XCBC]]<ref>Virgil D. Gligor, Pompiliu Donescu, "Fast Encryption and Authentication: XCBC Encryption and XECB Authentication Modes". Proc. Fast Software Encryption, 2001: 92-108.</ref>，[[ACBC|ACBC]]，[[Apm_(香港)|APM]]<ref>Charanjit S. Jutla, "Encryption Modes with Almost Free Message Integrity", Proc. Eurocrypt 2001, LNCS 2045, May 2001.</ref>，{{le|OCB加密认证模式|OCB_mode|OCB}}，{{le|EAX加密认证模式|EAX_mode|EAX}}，{{le|CWC加密认证模式|CWC_mode|CWC}}，{{le|CCM加密认证模式|CCM_mode|CCM}}和{{le|GCM加密认证模式|Galois/Counter_Mode|GCM}}。[[认证加密|认证加密]]模式被可以分为单次处理和两次处理两种类型。然而，对密码学用户社群而言，不幸的是，许多单次处理的认证加密算法，例如OCB，是受专利所保护的。

另外，有的模式也允许为未加密的关联数据进行认证，因此被称为[[AEAD|AEAD]]（Authenticated-Encryption with Associated-Data，用于关联数据的认证加密）。例如，EAX是一种两次处理的AEAD方法，而OCB模式是单次的。

==其它模式和密码学概念==

除了上文中提到的模式以外，还有很多其它的块密码工作模式。有的被公众所接受，有其详细描述了，甚至被标准化了，并在使用中；而有的则被认为是不安全的，而从未使用过；另外一些则并没有被分类为保密，认证或签名加密，例如密钥反馈模式（KFM，Key Feedback Mode）和AES-hash。[[NIST|NIST]]维护着一张块密码工作模式列表<ref>{{Cite web |url=http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html |title=NIST: Modes Development |accessdate=2010-09-28 |archive-date=2017-09-04 |archive-url=https://web.archive.org/web/20170904011624/http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html |dead-url=no }}</ref><ref>{{Cite web |url=http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf |title=NIST: Recommendation for Block Cipher Modes of Operation |accessdate=2010-09-28 |archive-date=2017-07-22 |archive-url=https://web.archive.org/web/20170722092206/http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf |dead-url=no }}</ref>。

磁盘加密通常使用特殊目的、专门设计的模式。可以调节的小数据块加密模式（[[LRW|LRW]]，[[XEX|XEX]]和[[XTS|XTS]]）和大数据块的模式（[[CMC|CMC]]和[[EME|EME]]）是设计用于加密磁盘区块的。

块密码也可以用于其它[[加密协议|加密协议]]中，在这些协议中，块密码的使用方式与前述工作模式相似。在一切协议中，为了保证其安全性，必须在构建工作模式时特别注意。

有数种方法可以用块密码构建[[密码散列函数|密码散列函数]]，参见[[单向压缩函数|单向压缩函数]]。

[[消息认证码|消息认证码]]（MAC）通常由块密码得到，例如{{le|CBC-MAC消息认证码|CBC-MAC|CBC-MAC}}，{{le|OMAC消息认证码|One-key_MAC|OMAC}}和{{le|PMAC消息认证码|PMAC_(cryptography)|PMAC}}。

[[认证加密|认证加密]]也采用块密码作为其中的一部，其同时使用加密和MAC以提供保密性和数据完整性，例如{{le|IAPM加密认证模式|IAPM_(mode)|IAPM}}，{{le|CCM加密认证模式|CCM_mode|CCM}}，{{le|CWC加密认证模式|CWC_mode|CWC}}，{{le|EAX加密认证模式|EAX_mode|EAX}}，{{le|GCM加密认证模式|Galois/Counter_Mode|GCM}}和{{le|OCB加密认证模式|OCB_mode|OCB}}。

==参考文献==
{{Reflist|30em}}

{{分组密码}}

[[Category:密码算法|Category:密码算法]]
[[Category:分组密码工作模式|Category:分组密码工作模式]]