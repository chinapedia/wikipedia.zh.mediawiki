{{noteTA
|G1=IT
}}
在[[程式設計|程式設計]]中，'''分散式版本控制'''（{{lang-en|distributed revision control}} 或 {{lang|en|distributed version control}}，又譯為'''分布式版本控制'''），又稱'''去中心化版本控制'''（{{lang|en|decentralized version control}}），是一種[[版本控制|版本控制]]的方式，它允許[[軟體開發者|軟體開發者]]可以共同參與一個軟體開發專案，但是不必在相同的網路系統下工作。其作法是在每個開發者電腦中複製一份完整的[[代码库|代码库]]以及完整歷史<ref name="git-scm">{{cite book | chapter = Getting Started – About Version Control | chapter-url = https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control | title = Pro Git | first1 = Scott | last1 = Chacon | first2 = Ben | last2 = Straub | edition = 2nd | date = 2014 | publisher = Apress | at = Chapter 1.1 | access-date = 4 June 2019 | archive-date = 2020-12-20 | archive-url = https://web.archive.org/web/20201220123240/http://git-scm.com/book/en/v2/Getting-Started-About-Version-Control | dead-url = no }}</ref>。因此在無法連接網路時，仍可以進行軟體的[[分支_(版本控制)|分支]]及[[合并_(版本控制)|合并]]，可以加速大部份的作業，增加此情形可以進行的工作，而且系統的代码库可以在多家電腦上備份，不需靠單一位置的備份<ref name="git-scm"/><ref name="Joel 2010">{{cite web
  | url=http://joelonsoftware.com/items/2010/03/17.html
  | first=Joel
  | last=Spolsky
  | title=Distributed Version Control Is Here to Stay, Baby
  | work=Joel on Software
  | date=2010-03-17| access-date=4 June 2019
  | archive-date=2016-11-27
  | archive-url=https://web.archive.org/web/20161127024026/http://www.joelonsoftware.com/items/2010/03/17.html
  | dead-url=no
  }}</ref><ref>{{cite web|title=Intro to Distributed Version Control (Illustrated)|url=https://betterexplained.com/articles/intro-to-distributed-version-control-illustrated/|website=www.betterexplained.com|accessdate=7 January 2018|archive-date=2020-11-09|archive-url=https://web.archive.org/web/20201109043350/https://betterexplained.com/articles/intro-to-distributed-version-control-illustrated/|dead-url=no}}</ref><ref name="edureka.co">{{cite web|title=What Is Git ? – Explore A Distributed Version Control Tool|url=https://www.edureka.co/blog/what-is-git/|website=www.edureka.co|accessdate=7 January 2018|archive-date=2020-10-12|archive-url=https://web.archive.org/web/20201012021619/https://www.edureka.co/blog/what-is-git/|dead-url=no}}</ref>。而多個位置的代码库再透過其他機制來達到同步。

以分散式版本控制方法，作出的軟體版本控制系統，稱為'''分散式版本控制系統'''（distributed revision control system，縮寫為DRCS，或是distributed version control system，縮寫為DVCS）。著名的分散式版本控制系統有[[Monotone|Monotone]]、[[Git|Git]]等。

==分散式和集中式版本控制系統的比較==
分散式版本控制系統（DVCS）用[[對等網路|對等網路]]的作法來處理版本控制，而集中式版本控制系統則是用[[主從式架構|主從式架構]]的作法。分散式版本控制系統同步各[[软件存储库|软件存储库]]的方式是用對等網路的方式傳送[[Patch|Patch]]。在代码库中沒有單一的中央版本，每一個用戶都有工作複本以及完整的變更歷史。

和集中式版本控制系統相比，分散式版本控制系統的優點如下：
* 用戶在沒有網路的情形下，也可以存取其電腦中的软件存储库。
* DVCS下的常見工作（例如上傳、看修改履歷、回退變更）不需要和中央伺服器通訊即可達成，因此速度很快<ref name='OSullivan'>{{cite web
  | last = O'Sullivan
  | first = Bryan
  | title = Distributed revision control with Mercurial
  | url = http://hgbook.red-bean.com/hgbook.html  
  | accessdate = July 13, 2007
  | archive-date = 2009-02-20
  | archive-url = https://web.archive.org/web/20090220142903/http://hgbook.red-bean.com/hgbook.html
  | dead-url = no
  }}</ref>。DVCS下，只有要和其他人分享變更內容時才需要通訊。
* 允許個人作業，使用者可以將不希望公開的早期修改（甚至是草稿）上傳{{cn|date=August 2019|reason=這不是DVCS的特點。原始碼版本管理系統都可以允許「不公開工作」，不過有些需要變更個人存取檔案的權限}}
* 工作複本的作用類似遠端備份，因此不會依賴單一的實體機器，帶來單點失效的風險<ref name='OSullivan'/>
* 允許不同的開發模型，例如用[[分支_(版本控制)|分支]]或Commander/Lieutenant模型{{citation needed|date=January 2018}}。
* 在[[自由及开放源代码软件|自由及开放源代码软件]]專案中，若有管理上的衝突或是設計上的不一定，很容易可以從一專案中[[分叉_(软件开发)|分叉]]出新的專案。

和集中式版本控制系統相比，分散式版本控制系統的缺點如下：
* 一開始複製软件存储库會比較慢，因為預設設值會複製所有的分支以及版本歷史。
* 缺乏了集中式版本控制系統中有的鎖定機能，針對一些無法用版本控制系統合併的二進位檔案（例如圖形檔），或是太複雜的二進位或XML檔案（例如office文件、PowerBI檔、SQL Server Data Tools BI軟體等）{{citation needed|date=January 2018}}
* 每一個使用者都需要備份所有的資料、分支及版本歷史，因此需要額外的儲存空間<ref>{{cite web|title=What is version control: centralized vs. DVCS|url=https://www.atlassian.com/blog/software-teams/version-control-centralized-dvcs|website=www.atlassian.com|accessdate=7 January 2018|archive-date=2020-10-30|archive-url=https://web.archive.org/web/20201030034349/https://www.atlassian.com/blog/software-teams/version-control-centralized-dvcs|dead-url=no}}</ref>
* 各软件存储库內容不一定同步。

有些版本控制系統原來是集中式的，但也會加入一些分散式的特點。例如[[Subversion|Subversion]]的許多機能可以在沒有網路時執行<ref>{{cite web |author=OSDir.com |url=http://osdir.com/Article203.phtml |title=Subversion for CVS Users :: OSDir.com :: Open Source, Linux News & Software |publisher=OSDir.com |date= |accessdate=2013-07-22 |archive-url=https://web.archive.org/web/20160823014739/http://osdir.com/Article203.phtml |archive-date=2016-08-23 |url-status=dead |dead-url=no }}</ref>。[[Visual_Studio_Online|Visual Studio Online]]和Visual Studio Team Services除了集中式的版本管理外，也支援用Git進行的分散式版本控制。

也有些分散式版本控制系統設法要改善取出（checkout）時間以及儲存成本的問題，例如微軟開發的[[Git虚拟文件系统|Git虚拟文件系统]]就可以在很大的代碼庫下運作<ref>{{cite web|author=Jonathan Allen|url=https://www.infoq.com/news/2017/02/GVFS/|title=How Microsoft Solved Git's Problem with Large Repositories|date=2017-02-08|accessdate=2019-08-06|archive-date=2020-05-20|archive-url=https://web.archive.org/web/20200520220249/https://www.infoq.com/news/2017/02/GVFS/|dead-url=no}}</ref>，會提供一個虛擬檔案系統，只在有需要時才會下載檔案到電腦中。

==工作模式==
分散式版本控制比較適合大型專案，有一部份由獨立的工作者所開發，像是Linux核心計劃，因為開發者可以獨立工作，可以提交其合併修改（或是拒絕他人的合併修改）。分散式模型的靈活性可以配合客製化的程式碼產生工作流程。最常使用的是{{le|整合式工作流|integrator workflow}}。在集中型的模型中，開發者需要將其工作串列化，以避免不同版本之間的問題。

===中心存儲庫及分支存儲庫===
每一個專案都有中心存儲庫，一般也是官方的存儲庫，會用專案維護者管理。開發者會複製中心存儲庫的內容，建立本地存儲庫。開發者再定期確認中心存儲庫的修改內容，使本地存儲庫和中心存儲庫同步。

開發者在本地存儲庫建立新的分支，在分支上修改程式碼。在開發完成之後，再將修改內容整合到中心存儲庫。
===拉取請求===
在分散式版本控制的軟體中，若要修改軟體，一般會用「拉取請求」（pull request）來進行，也稱為「合併請求」（merge request）<ref name="gitlab-merge-req">{{cite web|last=Sijbrandij|first=Sytse|title=GitLab Flow|date=29 September 2014|accessdate=4 August 2018|website=GitLab|url=https://about.gitlab.com/2014/09/29/gitlab-flow/|archive-date=2019-09-26|archive-url=https://web.archive.org/web/20190926130340/https://about.gitlab.com/2014/09/29/gitlab-flow/|dead-url=no}}</ref>。貢獻者請專案維護者「拉取」修改的軟體內容（因此稱為拉取請求），若此修改內容應該成為正式代碼庫的一部份，就需要合併拉取請求中提到的軟體內容<ref name="ossw">{{cite web|last1=Johnson|first1=Mark|title=What is a pull request?|url=http://oss-watch.ac.uk/resources/pullrequest|website=Oaawatch|accessdate=27 March 2016|date=8 November 2013|archive-date=2020-06-16|archive-url=https://web.archive.org/web/20200616163507/http://oss-watch.ac.uk/resources/pullrequest|dead-url=no}}</ref>。

開發者在有新的軟體變更時，會提出「拉取請求」，告訢專案維護者有新的軟體變更。一般而言每一個拉取請求會有對應的討論串，可以針對軟體修改的內容進行討論（[[代码审查|代码审查]]）。可以存取存儲庫的人都可以看到提交的拉取請求。專案維護者可以接受或是拒絕拉取請求的內容<ref>{{cite web|title=Using pull requests|url=https://help.github.com/articles/using-pull-requests/|publisher=GitHub|accessdate=27 March 2016|archive-date=2019-01-28|archive-url=https://web.archive.org/web/20190128062903/https://help.github.com/articles/using-pull-requests/|dead-url=no}}</ref>。

若拉取請求經過審查，已被核可，就會合併到存儲庫中。依工作流程的不同，有可能在加入這段程式的軟體版本正式發行前，進行軟體的測試。因此，有些專案會有一個特殊的分支，合併未測試的拉取請求<ref name="ossw" /><ref>{{cite web|title=Making a Pull Request|url=https://www.atlassian.com/git/tutorials/making-a-pull-request|publisher=Atlassian|accessdate=27 March 2016|archive-date=2020-02-06|archive-url=https://web.archive.org/web/20200206081259/https://www.atlassian.com/git/tutorials/making-a-pull-request|dead-url=no}}</ref>。也有些專案會有自動化測試平台，執行並測試每一個拉取請求的內容，可能會用[[持續整合|持續整合]]工具（例如[[Travis_CI|Travis CI]]），再由審查者檢查新的程式碼測試覆蓋率是否足夠。

==歷史==
第一代的開源分散式版本控制系統有[[GNU_arch|GNU arch]]、[[Monotone|Monotone]]和{{le|Darcs|Darcs}}，不過開源的分散式版本控制系統不太流行，一直到[[Git|Git]]及[[Mercurial|Mercurial]]發佈後才流行。

在2002年至2005年時，[[Linux内核|Linux内核]]的開發是透過[[BitKeeper|BitKeeper]]<ref name=":0">{{Cite news|url=http://www.infoworld.com/article/2670360/operating-systems/linus-torvalds--bitkeeper-blunder.html|title=Linus Torvalds' BitKeeper blunder|last=McAllister|first=Neil|work=InfoWorld|access-date=2017-03-19|language=en|archive-date=2015-08-26|archive-url=https://web.archive.org/web/20150826064920/http://www.infoworld.com/article/2670360/operating-systems/linus-torvalds--bitkeeper-blunder.html|dead-url=no}}</ref>。[[Git|Git]]會推出的原因就是因為BitKeeper的公司收回了給Linus Torvalds及Linux核心開發者的免費軟體授權<ref name=":0" />。

==相關條目==
* [[版本控制|版本控制]]
* {{le|版本控制軟體列表|List of version control software}}
* [[版本控制软件比较|版本控制软件比较]]
* [[分支_(版本控制)|分支 (版本控制)]]
* [[Git|Git]]，分散式版本控制的[[开源软件|开源软件]]，一開始是為了開發Linux核心所設計。
* [[Mercurial|Mercurial]]，類似Git的跨平台分散式版本控制軟體。
* [[Fossil|Fossil]]，分散式版本控制系統、問題追蹤系統及wiki軟體
* [[BitKeeper|BitKeeper]]
* [[GNU_Bazaar|GNU Bazaar]]
* [[協作版本系統|協作版本系統]]，分散式版本控制系統的前身。
* [[TortoiseHg|TortoiseHg]]，有圖形化介面的Mercurial
* {{le|Code Co-op|Code Co-op}}，點對點的版本管理系統
== 参考文献 ==
{{Reflist}}

==外部連結==
* [http://www.dwheeler.com/essays/scm.html Essay on various revision control systems] {{Wayback|url=http://www.dwheeler.com/essays/scm.html |date=20201109022758 }}, especially the section "Centralized vs. Decentralized SCM"
* [https://web.archive.org/web/20090602084310/http://www.ibm.com/developerworks/aix/library/au-dist_ver_control/ Introduction to distributed version control systems] - IBM Developer Works article

{{-}}
{{版本控制软件}}

[[Category:版本控制|Category:版本控制]]
[[Category:分布式版本控制系统|]]