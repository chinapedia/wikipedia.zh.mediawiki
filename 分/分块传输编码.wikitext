{{HTTP}}
'''分块传输编码'''（'''Chunked transfer encoding'''）是超文本传输协议（HTTP）中的一种数据传输机制，允许[[HTTP|HTTP]]由[[網頁伺服器|網頁伺服器]]发送给[[客户端|客户端]][[应用软件|应用]]（ 通常是[[网页浏览器|网页浏览器]]）的数据可以分成多个部分。分块传输编码只在HTTP协议1.1版本（HTTP/1.1）中提供。

通常，HTTP应答消息中发送的数据是整个发送的，Content-Length消息头字段表示数据的长度。数据的长度很重要，因为客户端需要知道哪里是应答消息的结束，以及后续应答消息的开始。然而，使用分块传输编码，数据分解成一系列数据块，并以一个或多个块发送，这样服务器可以发送数据而不需要预先知道发送内容的总大小。通常数据块的大小是一致的，但也不总是这种情况。

==原理==
HTTP 1.1引入分块传输编码提供了以下几点好处：

# HTTP分块传输编码允许服务器为动态生成的内容维持[[HTTP持久链接|HTTP持久链接]]。通常，持久链接需要服务器在开始发送消息体前发送Content-Length消息头字段，但是对于动态生成的内容来说，在内容创建完之前是不可知的。<ref>{{cite news
 |author      = Roy T. Fielding
 |title       = Keep-Alive Notes
 |quote       = 
 |publisher   = HTTP Working Group (HTTP-WG) mailing list
 |date        = 10 Oct 1995
 |pages       = 
 |url         = http://ftp.ics.uci.edu/pub/ietf/http/hypermail/1995q4/0063.html
 |accessdate  = 
 |deadurl     = yes
 |archiveurl  = https://web.archive.org/web/20100705134953/http://ftp.ics.uci.edu/pub/ietf/http/hypermail/1995q4/0063.html
 |archivedate = 2010-07-05
}}</ref>
# 分块传输编码允许服务器在最后发送消息头字段。对于那些头字段值在内容被生成之前无法知道的情形非常重要，例如消息的内容要使用散列进行签名，散列的结果通过HTTP消息头字段进行传输。没有分块传输编码时，服务器必须缓冲内容直到完成后计算头字段的值并在发送内容前发送这些头字段的值。
# HTTP服务器有时使用[[数据压缩|压缩]] （[[gzip|gzip]]或[[DEFLATE|deflate]]）以缩短传输花费的时间。分块传输编码可以用来分隔压缩对象的多个部分。在这种情况下，块不是分别压缩的，而是整个负载进行压缩，压缩的输出使用本文描述的方案进行分块传输。在压缩的情形中，分块编码有利于一边进行压缩一边发送数据，而不是先完成压缩过程以得知压缩后数据的大小。

==格式==
如果一个HTTP消息（包括客户端发送的请求消息或服务器返回的应答消息）的<tt>Transfer-Encoding</tt>消息头的值为<tt>chunked</tt>，那么，消息体由数量未定的块组成，并以最后一个大小为0的块为结束。

每一个非空的块都以该块包含数据的[[字节|字节]]数（字节数以[[十六进制|十六进制]]表示）开始，跟随一个CRLF （[[回車鍵|回车]]及[[換行|換行]]），然后是数据本身，最后块CRLF结束。在一些实现中，块大小和CRLF之间填充有白空格（0x20）。

最后一块是单行，由块大小（0），一些可选的填充白空格，以及CRLF。最后一块不再包含任何数据，但是可以发送可选的尾部，包括消息头字段。

消息最后以CRLF结尾。

==例子==
=== 编码的数据 ===
<pre>
25
This is the data in the first chunk

1C
and this is the second one

3
con

8
sequence

0

</pre>

=== 编码数据的解释 ===
前两个块的数据中包含有显式的<tt>\r\n</tt>字符。
<pre>
"This is the data in the first chunk\r\n"      (37 字符 => 十六进制: 0x25)
"and this is the second one\r\n"               (28 字符 => 十六进制: 0x1C)
"con"                                          (3  字符 => 十六进制: 0x03)
"sequence"                                     (8  字符 => 十六进制: 0x08)
</pre>
编码的数据需要以0长度的块（ <tt>"0\r\n\r\n"</tt>.）结束。

=== 解码的数据 ===
<pre>
This is the data in the first chunk
and this is the second one
consequence
</pre>

==参见==
* [[HTTP|HTTP]]

==参考文献==
{{Reflist}}
{{refbegin}}
*更多细节请参见 RFC 2616 ,特别是[[:rfc:2616#section-3.6.1|3.6.1节]]。
{{refend}}

{{DEFAULTSORT:Chunked Transfer Encoding}}

[[分类:数据管理|分类:数据管理]]
[[Category:HTTP|Category:HTTP]]