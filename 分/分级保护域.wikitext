[[File:Priv_rings.svg|300px]][[保護模式|保护模式]]可用的特权级别]]

在[[计算机科学|计算机科学]]中, '''分级保护域'''（{{lang-en|hierarchical protection domains}}）,<ref>Paul A. Karger, Andrew J. Herbert, ''[http://doi.ieeecomputersociety.org/10.1109/SP.1984.10001 An Augmented Capability Architecture to Support Lattice Security and Traceability of Access]{{Dead link}}'', sp, p. 2,  1984 IEEE Symposium on Security and Privacy,  1984</ref><ref>Walter Binder, ''[http://doi.ieeecomputersociety.org/10.1109/SAINT.2001.905166 Design and Implementation of the J-SEAL2 Mobile Agent Kernel]{{Dead link}}'', saint, p. 35,  2001 Symposium on Applications and the Internet (SAINT'01),  2001</ref>，经常被叫作'''保护环'''（{{lang|en|Protection Rings}}），又称'''环型保护'''（{{lang|en|Rings Protection}}）、'''CPU环'''（{{lang|en|CPU Rings}}），简称{{lang|en|Rings}}。这是一种用来在发生故障时保护数据和功能，提升容错度，避免恶意操作 ，提升[[计算机安全|计算机安全]]的设计方式。这是一种与能力基础安全（capability-based security）完全相反的方式。{{Citation needed|reason=This is a strong claim.  Also unclear what _opposite_ means here.|date=September 2014}}

电脑操作系统提供不同的资源访问级别。在计算机体系结构中，Rings是由两个或更多的特权态组成。在一些硬件或者[[微碼|微代码]]级别上提供不同[[核心态|特权态]]模式的[[CPU|CPU]][[计算机系统结构|架构]]上，保护环通常都是硬件强制的。Rings是从最高特权级（通常被叫作0级）到最低特权级（通常对应最大的数字）排列的。在大多数操作系统中，Ring 0拥有最高特权，并且可以和最多的硬件直接交互（比如CPU，内存）。

Rings之间的特殊门是被提供用来允许外层Ring在预定义的方式内访问内层Ring的资源用的，内层Ring可以随便使用外层Ring的资源。正确使用Rings间的门可以阻止某个Ring或者特权级的程序故意滥用其他程序的资源，提升安全性。例如，某个[[间谍软件|间谍软件]]作为一个在Ring 3运行的用户程序，它在不通知用户的时候打开[[摄像头|摄像头]]应该会被阻止，因为访问硬件需要使用被[[驱动程序|驱动程序]]保留的Ring 1的方法。浏览器一类在高Ring级别运行的程序必须请求权限才能访问网络，也就是受低Ring级别限制的资源。

==实现==

多Rings保护机制是[[Multics|Multics]]操作系统提出的革命性概念之一，[[Multics|Multics]]是今天的[[Unix|Unix]]操作系统家族的一个高安全性的前任。 由于GE 645不支持硬件Rings， 所以Multics通过软件捕获Rings的转换<ref>{{cite web|title=A Hardware Architecture for Implementing Protection Rings|url=http://www.multicians.org/protection.html|accessdate=September 27, 2012|archive-date=2019-12-28|archive-url=https://web.archive.org/web/20191228115641/https://www.multicians.org/protection.html|dead-url=no}}</ref>。 它的继承者，Honeywell 6180，硬件实现了支持8个Rings。<ref>{{cite web|title=Multics Glossary - ring|url=http://www.multicians.org/mgr.html#ring|accessdate=September 27, 2012|archive-date=2020-11-08|archive-url=https://web.archive.org/web/20201108171506/https://www.multicians.org/mgr.html#ring|dead-url=no}}</ref> 不过，最通用的操作系统仅用了2个Rings，即使他们运行的硬件提供了更多的特权态。例如[[Windows_7|Windows 7]]和[[Windows_Server_2008_R2|Windows Server 2008 R2]]（还有之前版本的[[Windows|Windows]]）只用了2个Rings：Ring 0 对应内核模式，Ring 3对应[[使用者空間|用户模式]],<ref name="russinovich">{{cite book|last = Russinovich|first = Mark E.|author2 = David A. Solomon|title = Microsoft Windows Internals|url = https://archive.org/details/isbn_9780735619173|publisher = Microsoft Press|year = 2005|edition = 4|pages = [https://archive.org/details/isbn_9780735619173/page/16 16]|isbn = 978-0-7356-1917-3}}</ref> 原因是运行Windows早期版本的硬件只支持2个保护等级。<ref>{{cite book|last=Russinovich|first=Mark|title=Windows Internals Part 1. 6th Ed|year=2012|publisher=Microsoft Press|location=Redmond, Washington|isbn=978-0-7356-4873-9|page=17|quote=The reason Windows uses only two levels is that some hardware architectures that were supported in the past (such as [[DEC_Alpha|Compaq Alpha]] and [[MIPS_architecture|Silicon Graphics MIPS]]) implemented only two privilege levels.}}</ref>

大部分现代CPU架构（包括很流行的[[Intel_x86|Intel x86]]架构）中都有某种形式的保护环，但[[Windows_NT|Windows NT]]或者[[Unix|Unix]]这类操作系统没有完整地利用到这个特性。相比之下[[OS/2|OS/2]]使用的更多，它用了3个Rings级别<ref>{{Cite web |url=http://www.warpspeed.com.au/cgi-bin/inf2html.cmd?..%5Chtml%5Cbook%5Cddk%5CPDRREF.INF+5 |title=Presentation Device Driver Reference for OS/2 - 5. Introduction to OS/2 Presentation Drivers |accessdate=2017-11-25 |archive-date=2013-06-16 |archive-url=https://web.archive.org/web/20130616221644/http://www.warpspeed.com.au/cgi-bin/inf2html.cmd?..%5Chtml%5Cbook%5Cddk%5CPDRREF.INF+5 |dead-url=no }}</ref>：Ring 0用于内核代码和驱动程序， Ring 2用于某些需要特权的代码（例如需要I/O权限的用户程序），Ring 3用于非特权代码（几乎所有的用户程序都在这一级别）。在[[DOS|DOS]]下，内核、驱动和应用程序都运行在Ring 3（然而。这也是保护模式驱动和DOS扩展专用的级别；实模式的操作系统没有有效的保护措施），而像[[EMM386|EMM386]]这样的386内存管理程序运行在Ring 0。特别的，[[DR-DOS|DR-DOS]]的[[EMM386|EMM386]] 3.xx可以可选地在Ring 1运行某些模块。[[OpenVMS|OpenVMS]]使用内核模式、管理模式、监督模式和用户模式四种模式（为了递减特权）。

== {{Anchor|SUPERVISOR-MODE}}监控模式 ==
计算机术语中，监控模式是一个可以通过运行在系统级的软件代码变更的硬件标志。系统级任务或线程会在它们运行时设置这个标志，而用户空间应用程序不会。这个标志决定程序是否能否执行一些诸如修改关于各种描述符表的寄存器，或禁止中断一类的机器码。监控模式下的程序应该永远不会挂掉，因为他们一挂掉整个系统就崩溃了。

在某些处理器上监控模式能够执行的所有指令，包括特权指令，也能访问到不同的地址空间，存储器管理硬件和其他外围设备，操作系统通常运行在该模式。<ref>FOLDOC [http://foldoc.org/index.cgi?query=supervisor+mode&action=Search supervisor mode]</ref>

==x86虛擬化==
Intel和AMD的CPU都提供了能使[[hypervisor|hypervisor]]存取Ring 0硬件的[[x86虚拟化|x86虚拟化]]指令集。x86虛擬化创建了一个叫Ring -1的Ring，所以虛擬機操作系统可以直接运行在Ring 0上而不影响其他虛擬機或者宿主系统。<ref>{{cite web | last=Dornan | first=Andy | date=1 November 2005 | url=http://www.informationweek.com/intel-vt-vs-amd-pacifica/172302134 | archiveurl=https://web.archive.org/web/20130530214041/http://www.informationweek.com/intel-vt-vs-amd-pacifica/172302134 | title=Intel VT vs. AMD Pacifica | publisher=CMP | accessdate=11 November 2012 | archivedate=2013-05-30 | deadurl=yes }}</ref>

== 参见 ==
{{Portal|计算机科学|Computing}}

* [[系统调用|系统调用]]
* [[保护模式|保护模式]] (80286系列以及之后的x86兼容CPU)
* [[I/O_Privilege_Level|I/O Privilege Level]] (x86 CPU上的[[IOPL|IOPL]])
* [[Current_Privilege_Level|Current Privilege Level]] (x86 CPU上的[[CPL0|CPL0]], [[CPL1|CPL1]], [[CPL2|CPL2]], [[CPL3_(x86)|CPL3]])
* [[系統管理模式|系統管理模式]] (SMM)
* [[x86虛擬化|x86虛擬化]]

==引用==
{{Reflist|30em}}

==延伸阅读==
{{Div col||30em}}
* David T. Rogers: [http://theses.nps.navy.mil/03Jun_Rogers_David.pdf<cite> A FRAMEWORK FOR DYNAMIC SUBVERSION</cite>]{{dead link|date=2017年11月 |bot=InternetArchiveBot |fix-attempted=yes }} Thesis, June 2003 (pdf)
* Glossary of [[Multics|Multics]] [[acronyms|acronyms]] and terms: [ftp://ftp.stratus.com/vos/multics/tvv/mgr.html#ring <cite>Ring</cite>] {{Wayback|url=ftp://ftp.stratus.com/vos/multics/tvv/mgr.html#ring |date=20160117053818 }}
* William J. Caelli: [http://cisse.info/archives/category/25-papers?download=241:cael-2002<cite>Relearning "Trusted Systems" in an Age of NIIP: Lessons from the Past for the Future.</cite>]{{dead link|date=2018年5月 |bot=InternetArchiveBot |fix-attempted=yes }} 2002 (pdf)
* Haruna R. Isa, William R. Shockley, Cynthia E. Irvine: [https://web.archive.org/web/20060725091322/http://cisr.nps.navy.mil/downloads/99paper_multithread.pdf <cite>A Multi-threading Architecture for Multilevel Secure Transaction Processing</cite>] 1999 (pdf)
* Ivan Kelly: [http://minixonxen.skynet.ie <cite>Report Porting MINIX to Xen</cite>]{{Wayback|url=http://minixonxen.skynet.ie/ |date=20171207145854 }} 2006
* Paul Barham, Boris Dragovic, Keir Fraser, Steven Hand, Tim Harris, Alex Ho, Rolf Neugebauer, Ian Pratt, Andrew Warfield: [http://www.cl.cam.ac.uk/netos/papers/2003-xensosp.pdf <cite>Xen and the Art of Virtualization</cite>] {{Wayback|url=http://www.cl.cam.ac.uk/netos/papers/2003-xensosp.pdf |date=20220117063835 }} 2003 (pdf)
* Marcus Peinado, Yuqun Chen, Paul England, and John Manferdelli: [http://research.microsoft.com/~yuqunc/papers/ngscb.pdf <cite>NGSCB: A Trusted Open System</cite>]{{Wayback|url=http://research.microsoft.com/~yuqunc/papers/ngscb.pdf |date=20050304033047 }} (pdf)
* [[Michael_D._Schroeder|Michael D. Schroeder]], [[Jerome_H._Saltzer|Jerome H. Saltzer]]: [http://www.multicians.org/protection.html <cite>A Hardware Architecture for Implementing Protection Rings</cite>] {{Wayback|url=http://www.multicians.org/protection.html |date=20191228115641 }} 1972
*[http://download.intel.com/design/PentiumII/manuals/24319202.pdf <cite>Intel Architecture Software Developer's Manual Volume 3: System Programming</cite>]{{Wayback|url=http://download.intel.com/design/PentiumII/manuals/24319202.pdf |date=20090219054818 }} (Order Number 243192) Chapter 4 Protection; section 4.5 Privilege levels. (pdf)
* Tzi-cker Chiueh, Ganesh Venkitachalam, Prashant Pradhan: [http://portal.acm.org/ft_gateway.cfm?id=319161&type=pdf&coll=portal&dl=ACM&CFID=15151515&CFTOKEN=6184618 <cite>Integrating segmentation and paging protection for safe, efficient and transparent software extensions</cite>] 1999 Chapter 3: Protection hardware features in Intel X86 architecture; section 3.1   Protection checks. (pdf)
* Takahiro Shinagawa, Kenji Kono, Takashi Masuda: [https://web.archive.org/web/20050904152601/http://www.is.s.u-tokyo.ac.jp/tech-reports/TR00-02-a4.pdf <cite>Exploiting Segmentation Mechanism for Protecting Against Malicious Mobile Code</cite>] 2000 chapter 3 Implementation; section 3.2.1 Ring Protection (pdf)
*Boebert, William Earl and R. Kain. ''A Practical Alternative to Hierarchical Integrity Policies''. Proceedings of the 8th National Computer Security Conference, 1985.
*Gorine, Andrei and Krivolapov, Alexander. [http://www.ddj.com/database/207401567 Kernel Mode Databases: A DBMS technology for high-performance applications] {{Wayback|url=http://www.ddj.com/database/207401567 |date=20091120195612 }}, ''Dr. Dobb's Journal'', May, 2008.
{{Div col end}}

{{操作系统}}

{{DEFAULTSORT:Ring (计算机科学)}}
[[Category:中央处理器|Category:中央处理器]]
[[Category:计算机安全|Category:计算机安全]]
[[Category:操作系统技术|Category:操作系统技术]]