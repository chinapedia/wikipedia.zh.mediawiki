在[[逻辑|逻辑]]中，'''子句'''是[[文字_(数理逻辑)|文字]]的[[逻辑析取|析取]]，在[[命题逻辑|命题逻辑]]中，子句通常写做如下，这里的符号 <math>l_i</math>是文字:

:<math>l_1 \vee \cdots \vee l_n</math>

在某些情况下，子句被写为文字的集合，所以上述子句将被写为 <math>\{l_1, \ldots, l_n\}</math>。从上下文中得到提示把这个集合解释为它的元素的析取。子句可以为空；在这种情况下，它是文字的空集。空字句被指示为各种符号比如 <math>\empty</math>、<math>\bot</math> 或 <math>\Box</math>。空字句的真值求值总是 <math>false</math>。

在[[一阶逻辑|一阶逻辑]]中，子句是对文字的无量词析取的所有自由变量的全称量化。形式上说，一阶文字是 <math>P(t_1,\ldots,t_n)</math> 种类的公式，这里的 <math>P</math> 是 <math>n</math> 元谓词而每个 <math>t_i</math> 都是可能包含变量的一个任意的[[一阶逻辑#語法|项]]。如果<math>L_1,\ldots,L_m</math> 是文字，而 <math>x_1,\ldots,x_k</math> 是它们的(自由)变量，则 <math>\forall x_1,\ldots,x_k . L_1,\ldots,L_m</math> 是子句。一阶子句有时省略量词书写，所以上述子句将被写为 <math>L_1,\ldots,L_m</math>。这种省略由文字的析取作为一个子句必须使所有变量被全称量化的事实来证实。在子句是有效的或被查实有效性的情况下，这个全称量化也暗含了这个语义。但是，满足性定义假定了自由变量要被存在量化，所以这种量词省略被接受为约定而不是如何处理自由变量的语义的结论。

在[[逻辑编程|逻辑编程]]中，子句通常被写为从体部到头部的蕴涵。在最简单的情况下，体部是文字的合取而头部是一个单一的文字。更一般的，头部必须是文字的析取。如果 <math>b_1,\ldots,b_m</math> 是在子句体中的文字而 <math>h_1,\ldots,h_n</math> 是子句头中的文字，则子句通常写为:

:<math>h_1,\ldots,h_n :- b_1,\ldots,b_m</math>

==参见==

* [[合取范式|合取范式]]
* [[Horn子句|Horn子句]]

[[Category:數理邏輯|Z]]