{{noteTA
|G1 = IT
}}
{{多态}}

在[[编程语言理论|编程语言理论]]中，'''子类型'''（[[动名词|动名词]]，{{lang-en|subtyping}}）是一种[[多态_(计算机科学)|类型多态]]的形式。这种形式下，'''子类型'''（[[名词|名词]]，{{lang-en|subtype}}）可以[[里氏替换原则|替换]]另一种相关的[[数据类型|数据类型]]（'''超类型'''，{{lang-en|supertype}}）。也就是说，针对超类型元素进行操作的[[子程序|子程序]]、函数等程序元素，也可以操作相应的子类型。如果 S 是 T 的子类型，这种子类型[[二元关系|关系]]通常写作 S <: T，意思是在任何需要使用 T 类型对象的''环境中，都可以安全地使用'' S 类型的对象。子类型的准确语义取决于具体的[[编程语言|编程语言]]中「X 环境中，可以安全地使用 Y」的意义。编程语言的[[类型系统|类型系统]]定义了各自不同的子类型关系。

由于子类型关系的存在，某个对象可能同时属于多种类型，因此，子类型（{{lang-en|subtyping}}）是一种[[多态_(计算机科学)|类型多态]]的形式，也被称作'''子类型多态'''（{{lang-en|subtype polymorphism}}）或者'''包含多态'''（{{lang-en|inclusion polymorphism}}）。在[[面向对象程序设计|面向对象程序设计]]中，[[多态|多态]]一般仅指这里所说的「子类型多态」，而「[[参数多态|参数多态]]」则一般被称作[[泛型编程|泛型编程]]。

子类型与面向对象语言中（类或对象）的[[继承_(计算机科学)|继承]]是两个概念。子类型反映了类型（即面向对象中的接口）之间的关系；而继承反映了一类对象可以从另一类对象创造出来，是语言特性的实现。因此，子类型也称'''接口继承'''；继承称作'''实现继承'''。

== 例子 ==
[[File:Inheritance.gif|thumb]]

右图中给出了子类型的一个简单实际例子。一般性对象“鸟”（或超类型）引发了三个派生对象（或子类型）“鸭子”、“杜鹃”和“鸵鸟”。每个都以自己的方式改变了基本的“鸟”的概念，但仍继承了很多“鸟”的特征。一个数据对象可以被声名为这四种类型中任何一个。这个图中使用了 [[UML|UML]] 符号，箭头指示方向和超类型和它的子类型之间的联系。

在多数基于类的[[面向对象编程语言|面向对象编程语言]]中，[[子类|子类]]引出子类型：如果 ''A'' 是 ''B'' 的子类，则类 ''A'' 的实例可以用在期望类 ''B'' 的实例的任何上下文中；所以我们称 ''A'' 是 ''B'' 的子类型。一个结论就是声明有类型 ''B'' 的任何变量或形式参数在运行时间可以持有类 ''A'' 的一个值；在这种情况下很多面向对象编程者会声称 ''B'' 是这个变量的“静态类型”而 ''A'' 是它的“动态类型”。这个规则的例外包括 [[C++|C++]]语言中的[[私有继承|私有继承]]（它不建立子类型），和 [[Eiffel|Eiffel]] 语言中在派生类型上特定运算，在其中继承自基类的特征可以用违反子类型规则的方式去除或修改。

另一个例子是可以允许整数值被用在期望浮点数值的地方，或可以定义包含整数和实数二者的一个类型 <tt>number</tt> 的语言。在第一种情况下，整数类型将是浮点数类型的子类型；在第二种情况下，这两个类型都是 <tt>number</tt> 的子类型而相互之间无子类型关系。

编程者可利用子类型来以比没有它更抽象的方式来写代码。考虑下面的例子:

 function max (x as number, y as number) is
   if x < y then
     return y
   else
     return x
 end

如果整数和实数都是 <code>number</code> 的子类型，则二者任何类型都可以传递给这个函数。为此，子类型经常被认为是一种形式的[[多态性|多态性]]。上述例子也可以比较于 C++ 语言的[[模板_(C++)|模板]]。

在[[类型论|类型论]]中，子类型关系经常写为 <tt><:</tt>，有着 ''A''<tt><:</tt>''B'' 意味着 ''A'' 是 ''B'' 的子类型。在类型论中子类型可用如下事实来特征化，如果 ''A''<tt><:</tt>''B''，类型 ''A'' 的任何表达式也可被给予类型 ''B''；立法这个特征化的形式[[推理规则|类型规则]]叫做“包容”规则。

== 子类型方案 ==
类型理论研究者区分两类类型系统：
*'''{{tsl|en|nominal type system|名义类型系统|名义子类型}}'''，在其中只有类型声明的名字相同才算是相同类型，子类型关系必须被显式声明。[[C语言|C]], [[C++|C++]], [[C♯|C#]], [[Java|Java]], [[Objective-C|Objective-C]]等语言均属于这类。
*'''{{tsl|en|structural type system|结构类型系统|结构子类型}}'''，在其中两种类型的结构组成决定了一种类型是否是另一种类型的子类型。
上面描述的基于类的面向对象子类型描述是名义的；面向对象的结构子类型规则可以声称，如果类型 ''A'' 的一个对象能处理类型 ''B'' 的对象能处理的所有消息（就是说，如果它们定义都同样的[[方法|方法]]），则 ''A'' 是 ''B'' 的子类型，不管二者任何一个是否从继承自其他对象。不是对象类型的类型的健壮的结构子类型规则也是周知的。

带有子类型的编程语言实现可分为两大类: 
*如果 ''A''<tt><:</tt>''B''，类型 ''A'' 的任何值的表示也表示类型 ''B'' 的相同值，则为“包含实现”（inclusive implementation）。
*类型 ''A'' 的值可自动的转换成类型 ''B'' 的值，则为“强制实现”（ coercive implementation）。即类型强制转换之意。
在面向对象语言中子类型所导致的子类型通常是包含的；联系整数和浮点数的子类型关系，它们有不同表示，通常是强制的。

在定义子类型关系的几乎所有类型系统中，它是自反的（意味着对于任何类型 ''A'' 有 ''A''<tt><:</tt>''A''）和传递的（意味着如果 ''A''<tt><:</tt>''B'' 并且 ''B''<tt><:</tt>''C'' 则 ''A''<tt><:</tt>''C''）。这得到了在类型上的[[预序|预序]]。

== 记录类型 ==
记录是命名的域（field）的集合。记录类型（types of records）的子类型化包括宽度与深度两种方式。
* 宽度子类型化（width subtyping）：给记录增加更多的域。
* 深度子类型化（depth subtyping）：把超类型（supertype）的域替换为域的子类型。这仅能用于只读（immutable）记录。

==函数类型== 
对于函数类型T<sub>1</sub> → T<sub>2</sub>，其子类型为S<sub>1</sub> → S<sub>2</sub>，则T<sub>1</sub> <: S<sub>1</sub>且S<sub>2</sub> <: T<sub>2</sub>。参数类型S<sub>1</sub> → S<sub>2</sub>为[[协变与逆变|逆变]]，返回类型为[[协变与逆变|协变]]。 

允许副作用的语言，如大部分面向对象语言，子类型化还不足以保证安全在另一个上下文中使用。[[行为子类型化|行为子类型化]]要求保持[[不变条件|不变]]。<ref name="LSP">Barbara Liskov, Jeannette Wing, ''[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.39.1223 A behavioral notion of subtyping] {{Wayback|url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.39.1223 |date=20090610011642 }}'', ACM Transactions on Programming Languages and Systems (TOPLAS), Volume 16, Issue 6 (November 1994), pp. 1811 - 1841. An updated version appeared as CMU technical report: {{cite web|url=http://reports-archive.adm.cs.cmu.edu/anon/1999/CMU-CS-99-156.ps|title=Behavioral Subtyping Using Invariants and Constraints|last=Liskov|first=Barbara|authorlink=Barbara Liskov|author2=Wing, Jeannette|authorlink2=Jeannette Wing|date=July 1999|format=[[PostScript|PS]]|accessdate=2006-10-05|archive-date=2012-08-30|archive-url=https://www.webcitation.org/6AJYItV9g?url=http://reports-archive.adm.cs.cmu.edu/anon/1999/CMU-CS-99-156.ps|dead-url=no}}</ref>

可变引用（mutable reference）的子类型化类似于函数参数与返回值的处理。只写引用是逆变的；只读引用是协变的；可变引用是不变的。 

== 类型强制 ==
在强制子类型化系统（coercive subtyping system），子类型通过从子类型到超类型的隐式[[类型转换|类型转换]]函数得以定义。对于每个子类型关系 (''S'' <: ''T'')，一个强制关系''coerce'': ''S'' → ''T''，使得任何对象''s'' 为类型''S''，可以视作对象''coerce''<sub>''S'' → ''T''</sub>(''s'')具有类型''T''。类型强制函数可以复合：如果''S'' <: ''T''且''T'' <: ''U''，难么''s'' 可以看作类型''u''在复合强制关系(''coerce''<sub>''T'' → ''U''</sub> ∘ ''coerce''<sub>''S'' → ''T''</sub>)。类型到其自身的''coerce''<sub>''T'' → ''T''</sub>是[[同一函数|同一函数]]''id''<sub>T</sub>

== 参考文献 ==
=== 引用 ===
{{Reflist}}

=== 来源 ===
* ''Object-Oriented Software Construction'' by [[Bertrand_Meyer|Bertrand Meyer]]

== 外部链接 ==

== 参见 ==
{{Portal box|计算机科学}}
* [[派生类型|派生类型]]是给出新类型但结构上同于最初类型的[[类型|类型]]。依赖于类型系统，它可以是也可以不是子类型。
* [[基于类的编程|基于类的编程]]有混淆了子类型和[[子类|子类]]导致的问题的一个例子。


{{数据类型}}

[[Category:数据类型|Category:数据类型]]
[[Category:类型论|Category:类型论]]