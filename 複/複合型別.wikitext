{{noteTA|G1=IT}}
在[[電腦科學|電腦科學]]中，'''複合型別'''是一種[[資料型別|資料型別]]，它可以[[原始型別|原始型別]]和其它的複合型別所構成。構成一個複合型別的動作，又稱作[[物件組合|組合]]。

==C/C++==
{{main|C++类}}

<code>struct</code>是 [[C語言|C]] 和 [[C++|C++]] 的複合型別概念，是一個將'''欄位'''或'''成員'''以一定組合方式所組成的資料型別。因為在宣告時，使用了關鍵字 <code>struct</code>，所以它簡稱為''結構''，或者更精確地說''使用者定義的資料結構''。

在 C++ 裡，<code>struct</code> 與<code>class</code>的唯一區別是預設的[[存取等級|存取等級]]，<code>class</code>是''私有的''，<code>struct</code> 則是''公有的''。

注意尽管[[类_(计算机科学)|类]]的概念和[[關鍵字|關鍵字]]<code>class</code>是C++新引入的，[[C語言|C語言]]也已具備粗糙的 <code>struct</code> 型別。對於所有的意圖和目的， C++ 的<code>struct</code>是 C <code>struct</code> 的[[超集|超集]]：几乎所有合法的 C <code>struct</code> 也是合法的 C++ <code>struct</code>，並有著相同的語義。

<code>struct</code> 宣告組成一個欄位清單，其中的每一個可以是任意型別。對於 <code>struct</code> 物件所需的儲存區，即為全部欄位的總合，再加上內部的補白。

例如：
<syntaxhighlight lang="c">
 struct Account {
    int account_number;
    char *first_name;
    char *last_name;
    float balance;
 };
</syntaxhighlight>

定義一個稱為 <code>struct Account</code> 的型別。若要建立此型別的新變數，可以寫為 <code>struct Account myAccount;</code>，它有一個以 <code>myAccount.account_number</code> 存取的整數組件，且有一個以 <code>myAccount.balance</code> 存取的浮點數組件，以及 <code>first_name</code> 和 <code>last_name</code> 組件。<code>myAccount</code> 包含這四個數值，且這四個欄位可各自改變。由于 <code>struct account</code> 的寫法有些累贅，在 C 代碼中，<code>typedef</code> 語句並不罕見，其為 <code>struct</code> 提供一個更簡便的同義詞。例如：
<syntaxhighlight lang="c">
 typedef struct Account_ {
    int    account_number;
    char   *first_name;
    char   *last_name;
    float  balance;
 } Account;
</syntaxhighlight>

在 C++ 中，並不需要 <code>typedef</code>，因為使用了 <code>struct</code> 的型別定義，已是命名空間的一部分，所以該型別可稱作 <code>struct Account</code> 或較簡單的 <code>Account</code>。

其它例子，一個使用了浮點數資料型別的三維向量複合型別，可如此建立：
<syntaxhighlight lang="cpp">
 struct Vector {
   float x;
   float y;
   float z;
 };
</syntaxhighlight>

一個以 <code>Vector</code> 複合型別為型別的變數名 <code>velocity</code>，可以宣告為 <code>Vector velocity;</code>，可以用點运算符(.)存取 <code>velocity</code> 的成員。例如，<code>velocity.x = 5;</code>，會使 <code>velocity</code> 的組件 <code>x</code> 等於 5。

同樣地，一個顏色結構可如此建立：
<syntaxhighlight lang="cpp">
 struct Color {
   int red;
   int green;
   int blue;
 };
</syntaxhighlight>

在三維圖像中，必須經常不斷追蹤每一個頂點的位置和顏色。可以使用之前所建立的 <code>Vector</code> 和 <code>Color</code> 複合型別來建立 <code>Vertex</code> 複合型別：
<syntaxhighlight lang="cpp">
 struct Vertex {
   Vector position;
   Color color;
 };
</syntaxhighlight>

以同樣的格式建立一個 <code>Vertex</code> 型別的變數：<code>Vertex v;</code>，並以如下方式指派數值給 <code>v</code> ：

<syntaxhighlight lang="cpp">
   v.position.x = 0.0;
   v.position.y = 1.5;
   v.position.z = 0.0;
   v.color.red = 128;
   v.color.green = 0;
   v.color.blue = 255;
</syntaxhighlight>

==原始子型別檢查==
剛開始使用的 <code>struct</code>，是用來建構組合資料型別，不過有時它是用來避開標準 C 協定，以建立原始[[子型別|子型別]]檢查（primitive subtyping）。例如，共同的網路協議依賴於以下事實，C 編譯器以可預料的方法，在結構欄位之間補白；因此代碼
<syntaxhighlight lang="c">
 struct ifoo_old_stub {
    long x, y;
 };
 struct ifoo_version_42 {
    long x, y, z;
    char *name;
    long a, b, c;
 };
 void operate_on_ifoo(struct ifoo_old_stub *);
 struct ifoo_version_42 s;
 . . .
 operate_on_ifoo(&s);
</syntaxhighlight>
將可正確運作。

==參閱==
*[[物件組合|物件組合]]

{{数据类型}}

[[Category:資料結構|Category:資料結構]]