{{noteTA
|1=zh-cn:国际象棋;zh-hk:國際象棋;zh-tw:西洋棋;
|G1=IT
}}
{{Hide in print|[[Image:Knight's_tour_anim_2.gif|right]]}}
{{Only in print|[[Image:Knight's_tour.svg|right]]}}
{{Hide in print|[[Image:Knights-Tour-Animation.gif|right]]|[[Image:knightstour5x5.svg|right]]}}

'''騎士巡邏'''（{{lang-en|Knight's tour}}）是指在按照[[国际象棋|国际象棋]]中[[马_(国际象棋)|骑士]]的规定走法走遍整个[[棋盘|棋盘]]的每一个方格，而且每个网格只能夠经过一次。假若騎士能夠從走回到最初位置，則稱此巡邏為「封閉巡邏」，否則，稱為「開巡邏」。對於8*8棋盤，一共有26,534,728,821,064種封閉巡邏，有19,591,828,170,979,904種開巡邏。<ref>{{cite journal
 | author=Martin Loebbing; Ingo Wegener
 | title=The Number of Knight's Tours Equals 33,439,123,484,294 — Counting with Binary Decision Diagrams
 | journal=The Electronic Journal of Combinatorics
 | volume=3
 | issue=1
 | pages=R5
 | year=1996
 | url=http://www.combinatorics.org/Volume_3/Abstracts/v3i1r5.html
}} '''Remark:''' The authors later [http://www.combinatorics.org/Volume_3/Comments/v3i1r5.html admitted] that the announced number is incorrect. According to McKay's report, the correct number is 13,267,364,410,532 and this number is repeated in Wegener's 2000 book.</ref><ref>{{cite journal
 |authorlink  = Brendan McKay
 |author      = Brendan McKay
 |title       = Knight's Tours on an 8x8 Chessboard
 |journal     = Technical Report TR-CS-97-03
 |publisher   = Department of Computer Science, Australian National University
 |year        = 1997
 |url         = http://www.combinatorics.org/Volume_3/Comments/v3i1r5.01.ps
 |deadurl     = yes
 |archiveurl  = https://web.archive.org/web/20120127042807/http://www.combinatorics.org/Volume_3/Comments/v3i1r5.01.ps
 |archivedate = 2012-01-27
}}</ref><ref name="#1">{{cite book
 | author= Wegener, I.
 | title=Branching Programs and Binary Decision Diagrams
 | publisher=Society for Industrial & Applied Mathematics
 | year=2000
 | isbn=0-89871-458-3
 | url=http://books.google.com/?id=-DZjVz9E4f8C&pg=PA369&dq=532}}</ref>

由骑士巡逻引申出了一个著名的数学问题 ：'''骑士巡逻问题'''--找出所有的骑士巡逻路径。编写一个程序来找出骑士巡逻路径经常在计算机系的学生的练习中出现。骑士巡逻问题的变种包括各种尺寸的棋盘甚至非正方形的棋盘。

==历史==
[[Image:Turk-knights-tour.svg|left]]执行的骑士巡逻。由于其路线是一条闭路，因此从棋盘上任何一点开始都能完成巡逻。<ref>Standage, 30–31.</ref>]]
已知的最早的骑士巡逻问题可以追溯到[[九世紀|九世紀]]的古印度[[恰圖蘭卡|恰圖蘭卡]]。<ref>
{{cite book
|author =  Satyadev, Chaudhary
|title =   Kavyalankara of Rudrata (Sanskrit Text, with [[Hindi|Hindi]] translation);
|publisher = Parimal Sanskrit Series No. 30
|location = Delhitraversal
}}
</ref>

[[欧拉|欧拉]]是最早研究骑士巡逻的数学家中的一员，而H. C. von Warnsdorff在1823年提出了第一个系统化解决骑士巡逻问题的方法--Warnsdorff规则。

在20世纪，一批{{link-en|乌力波|Oulipo}}的作家将这个问题用在了其它的地方。最明显的例子：[[乔治·佩雷克|乔治·佩雷克]]的小说''{{link-en|Life: A User's Manual}}''的章节顺序就是按照{{nowrap|10×10}}棋盘的骑士巡逻路径来编排的。在[[2010年国际象棋世界冠军对抗赛|2010年国际象棋世界冠军对抗赛]]的第六场比赛中，棋手[[维斯瓦纳坦·阿南德|阿南德]]连续13次移动骑士（使用了两个骑士），在线评论员打趣地说阿南德试图在游戏过程中解决骑士巡逻问题。

{{clear}}

==实质==
[[Image:Knight's_graph_showing_number_of_possible_moves.svg|left]]
骑士巡逻问题实际上是[[哈密顿路径问题|哈密顿路径问题]]的一种特殊形式，寻找骑士巡逻的闭巡逻路径的个数实际上也是[[哈密顿路径问题|哈密顿循环问题]]的一种特殊形式。但是和一般的[[哈密顿路径问题|哈密顿路径问题]]不同，骑士巡逻问题可以在[[线性时间|线性时间]]内解决。<ref name=Conrad1994>{{Cite journal |first=A. |last=Conrad |first2=T. |last2=Hindrichs |first3=H. |last3=Morsy |lastauthoramp=yes |first4=I. |last4=Wegener |title=Solution of the Knight's Hamiltonian Path Problem on Chessboards |journal=Discrete Applied Mathematics |volume=50 |issue=2 |pages=125–134 |year=1994 |doi=10.1016/0166-218X(92)00170-Q }}</ref>
{{clear}}

==路径的个数==
*在一个{{nowrap|8×8}}的棋盘中，有26,534,728,821,064中[[有向|有向]]封闭巡逻路径（相互对称的巡逻路径被视为不同的巡逻路径）。<ref>{{cite journal
 | authorlink=Brendan McKay
 | author=Brendan McKay
 | title=Knight's Tours on an 8x8 Chessboard
 | journal=Technical Report TR-CS-97-03
 | publisher=Department of Computer Science, Australian National University
 | year=1997
 | url=http://www.combinatorics.org/ojs/index.php/eljc/article/downloadSuppFile/v3i1r5/mckay
 | access-date=2014-03-24
 | archive-url=https://web.archive.org/web/20130928001649/http://www.combinatorics.org/ojs/index.php/eljc/article/downloadSuppFile/v3i1r5/mckay
 | archive-date=2013-09-28
 | dead-url=yes
 }}</ref><ref name="#1"/>
*在{{nowrap|6×6}}的棋盘中，共有9862个闭巡逻。<ref>{{MathWorld|urlname=KnightsTour|title=Knight's Tour}}</ref>
*{{nowrap|8×8}}棋盘中开巡逻的个数为19,591,828,170,979,904。对于<math>n\times n</math>（''n''=1，2……）的棋盘中开巡逻的个数是：
: 1, 0, 0, 0, 1728, 6637920, 165575218320,19591828170979904,……（{{oeis|A165134}}）
*Schwenk证明了，除了以下3種情況外，任何的{{nowrap|m×n}}（m<math>\le</math>n）棋盘都至少有1个闭巡逻，。<ref>{{cite journal
 | author=Allen J. Schwenk
 | title=Which Rectangular Chessboards Have a Knight’s Tour?
 | journal=Mathematics Magazine
 | year=1991
 | pages=325–332
}}</ref>
#m和n都为奇数
#m= 1, 2, 4
#m= 3且n= 4, 6, 8
*Cull和Conrad证明了对于任何一个{{nowrap|m×n}}（5<math>\le</math>m<math>\le</math>n）棋盘，至少有一个（可能是开巡逻）骑士巡逻路径。<ref name=Cull1978>{{cite journal|last = Cull|first = P.|coauthors=De Curtins, J.|title = Knight's Tour Revisited|journal = Fibonacci Quarterly|volume = 16|year = 1978|pages = 276–285 |url=http://www.fq.math.ca/Scanned/16-3/cull.pdf}}</ref><ref name=Conrad1994>{{Cite journal |first=A. |last=Conrad |first2=T. |last2=Hindrichs |first3=H. |last3=Morsy |lastauthoramp=yes |first4=I. |last4=Wegener |title=Solution of the Knight's Hamiltonian Path Problem on Chessboards |journal=Discrete Applied Mathematics |volume=50 |issue=2 |pages=125–134 |year=1994 |doi=10.1016/0166-218X(92)00170-Q }}</ref>

==解决方法==
[[Image:Knight's_Tour_24x24.svg|right]]的方法在{{nowrap|24 × 24}}的棋盘中寻找到的一条闭巡逻。]]
借助计算机的帮助，人们已经发现了很多种寻找骑士巡逻路径的方法。其中一部分依靠[[算法|算法]]，而另外一些则依靠[[启发法|启发法]]。
===穷举法===
用[[暴力搜索|穷举法]]来寻找骑士巡逻路径适用于格数较小的棋盘，因为当方格数过多时，可能的路径过多。例如，8×8棋盘中大约有4×10^51种可能的路径。<ref>{{cite web |url=http://www.josiahland.com/?p=781 |title = Enumerating the Knight's Tour}}</ref>如此大的运算量已经超出了现代计算机的运算能力。

===分治法===
利用[[分治法|分治法]]将棋盘分成很多小块，计算出每一小块中的所有可能路径，然后将这些小块合并再计算所有可能的路径。
===人工神经网络方法===
骑士巡逻问题同样可以使用[[人工神经网络|人工神经网络]]来解决。<ref>Y. Takefuji, K. C. Lee. "Neural network computing for knight's tour problems." ''Neurocomputing'', 4(5):249–254, 1992.</ref>
===Warnsdorff规则===
Warnsdorff规则指在所有可走且未经过的方格中，马只可能走这样一个方格：从该方格出发,马能跳的方格数最少；如果可跳的方格数相等，则从当前位置看,方格序号小的优先。依照这一规则往往可以找到一条路径但是并不一定能够成功。

==參考資料==
{{reflist}}

== 外部連結 ==
* [http://www.ktn.freeuk.com/ Knight's Tour Notes]
* [https://web.archive.org/web/20051219005826/http://www.borderschess.org/KnightTour.htm Knight's Tour](Javascript)
* [http://episte.math.ntu.edu.tw/java/jav_knight/ JAVA：Knight's tour]

[[Category:數學遊戲|Category:數學遊戲]]
[[Category:图论|Category:图论]]
[[Category:图算法|Category:图算法]]
[[Category:数学问题|Category:数学问题]]
[[Category:國際象棋棋謎|Category:國際象棋棋謎]]