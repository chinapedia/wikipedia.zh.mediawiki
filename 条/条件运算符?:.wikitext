{{NoteTA |G1=IT}}
在许多[[程序设计语言|程序设计语言]]中，'''条件运算符'''（'''conditional operator''', '''<code>?:</code>'''）是一个基本的[[条件语句|条件语句]]。条件运算符最初起源于[[BCPL|BCPL]]程序设计语言。

==用法==

<code>?:</code>的一般形式为

 <表达式1> ? <表达式2> : <表达式3> 

其中表达式1为布尔表达式，或真或为假。若表达式1为真，则返回表达式2的值作为整个条件表达式的值。若条件为假，则返回表达式3的值。例如
 max =(a > b)? a : b ;
的执行结果就是将a和b中最大值赋给max. 
=== Actionscript 3 ===
<source lang=actionscript3>
condition ? value_if_true : value_if_false
</source>

===[[C语言|C语言]]变种===
GNU允许C语言省略条件表达式中的表达式2省略，此时表示表达式2与表达式1相同。例如：
 a = x ? : y;
等价于
 a = x ? x : y;
但是如果x是一个表达式，仅求值一次。[[C♯|C#]]提供了类似的特性
 a = x ?? y;
与"x?:y"的用法不同，??只判断x是否为null，而不是判断真假。

===[[C++|C++]]===
在C++中，由于C++明确区分[[初始化|初始化]]和[[赋值|赋值]]，有时使用''if-else''的条件赋值语句并不可行。在这种情形下总是可能使用函数调用，但是这样做会显得很笨重而且不简洁。例如，如果你想要根据条件传递不同的值作为构造函数的参数，单纯使用''if-else''语句根本不可能;在这种情况下，可以使用条件赋值表达式，或函数调用。注意有些类型允许初始化，但不允许赋值，或者赋值运算与构造函数不全相同。对于引用类型后者为真，例如：
<source lang="cpp">
#include <iostream>
#include <fstream>
#include <string>

using namespace std;

int main(int argc, char** argv)
{
    string name;
    ofstream fout;
    if(argc > 1 && argv[1])
    {
        name = argv[1];
        fout.open(name.c_str(), ios::out | ios::app);
    }

    ostream& sout = name.empty() ? cout : fout;
}
</source>

在这种情况下，用'''if-else'''语句替换条件运算符（? :）变得不可能。（虽然可以用包含''if-else''语句的函数调用替换? :）。

进一步，三目运算符能够作为一个可以被赋值的左值。例如

<source lang="cpp">
0: #include <iostream>
1: int main () {
2:    int a=0, b=0;
3:
4:    const bool cond = ...;
5:(cond ? a : b) = 1;
6:    std::cout << "a=" << a << ','
7:              << "b=" << b << '\n';
8:}
</source>

在此例中，如果第5行的布尔变量'''cond'''为真，值'''1'''会赋给变量'''a'''，否则赋值给'''b'''.

===[[Python|Python]]===

Python程序设计语言使用一种不同的语法处理条件表达式：
<source lang="python">value_when_true if condition else value_when_false</source>
这一特性在Python 2.5以前的版本并不可用。

===[[Common_Lisp|Common Lisp]]===
Common Lisp的每个表达式都有返回值：
<source lang="lisp">
(if (> a b) x y)
</source>
[[Category:控制流程|Category:控制流程]]
[[Category:三元運算|Category:三元運算]]
[[Category:运算符_(编程)|Category:运算符_(编程)]]
[[Category:带有代码示例的条目|Category:带有代码示例的条目]]