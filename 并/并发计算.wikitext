{{multiple issues|
{{cleanup-jargon|time=2013-04-03T01:57:19+00:00}}
{{expert|subject=计算机科学|time=2013-04-03T01:57:19+00:00}}
{{weasel|time=2013-04-03T01:57:19+00:00}}
}}
{{NoteTA
|G1 = IT
|1 = zh-cn:并发; zh-tw:並行;
|2 = zh-cn:并行; zh-tw:平行;
}}
{{编程范式}}
{{他用
|subject='''concurrent computing'''（中國大陆译名：'''并-{}-发计算'''，台湾译名：'''並-{}-行計算'''）
|other=<br/>'''parallel computing'''（中國大陆译名：'''并-{}-行计算'''，台湾译名：'''平-{}-行計算'''）
|并行计算
}}
'''并发计算'''（{{lang-en|Concurrent computing}}，或譯為'''並行處理'''、'''共時計算'''），是一種程式計算的形式，在系統中，至少有兩個以上的計算在同時運作，計算結果可能同時發生。用來實作[[并发性|並行系統]]（Concurrent system）的[[程式語言|程式語言]]與各種[[演算法|演算法]]，統稱為並行計算。

並行程式通常被設計為互動式的運算過程，因為它的運算過程是不確定的，在設計上的難度較高。設計[[并发性|並行]]程式最大的挑戰，在於確保不同運算執行步驟間的互動或是通訊，能以正確的順序進行，同時，也要確保在不同執行步驟間共享的資源，能夠正確被存取。在這個領域的先驅人物有[[艾兹赫尔·戴克斯特拉|艾兹赫尔·戴克斯特拉]]、[[東尼·霍爾|東尼·霍爾]]與[[泊·派克·漢森|泊·派克·漢森]]等人。

==概論==
並行計算，簡單來說，就是將一個計算任務，分割成幾個小的部份，讓它們同時被計算，之後再匯整計算結果，以完成任務。它跟平行計算（Parallel computing）與分散式計算，有重疊之處，在概念上不同，但常會讓人混淆。

並行計算是一種程式運算的特性，可以被視為是[[平行運算|平行運算]]的進一步[[抽象化_(計算機科學)|抽象]]，它包涵了[[时间片|时间片]]這種可以被用來實作虛擬平行運算（pseudoparallelism）的技術，因此在實際的物理運作中，計算過程可能是[[平行運算|平行]]，或非平行的。

平行計算是指，當並行計算的程式，在機器平台上同時被執行的狀況，因此，平行計算是一種機器運算的形式之一。[[分散式計算|分散式計算]]（Distributed computing）則是平行計算的一個特例，它採用計算機網路來進行同步。

實作[[并发性|並行]]程式有許多方式，依[[程式語言|程式語言]]與[[作業系統|作業系統]]的支援，可以用[[行程|行程]]，或是[[執行緒|執行緒]]來實作。它可以執行在單一[[處理器|處理器]]上，將不同的執行步驟分散在不同[[时间片|时间片]]中執行，以非[[平行運算|平行]]方式循序運算；它也可以用[[平行計算|平行計算]]來實現，將每個行程指定給處理器組中的某個處理器，以單晶片[[多處理器|多處理器]]平台，或是透過網路連結的[[分布式计算|分散]]平台來實做。

依照硬體與作業系統的支援，並行計算可以在同一個行程中完成，在同一個行程中以多執行緒來完成，以多個行程來達成，甚至可以分成數個程式來執行。可以用單處理器的循序計算來實作，也可以採平行計算或分散式計算方式實做。

但以平行方式來運作並行程式，並不必然會增進執行效率。因為執行結果可能會因為平台特性而改變，也增加它在設計上的難度。

==技術優點==
*並行計算可以增加產出 － 讓並行程式以平行方式執行，在某個特定時間內，可以讓數個行程同時完成計算任務，增加了產出。
*輸入/輸出的反應時間加快 － 密集進行輸入/輸出（I/O）操作的應用程式，多數的時間，都在等待輸入或輸出操作完成。在等待的時間中，並行計算編程可以讓另外的行程來運作。
*更適當的程式架構 － 某些計算問題或問題的領域，特別適合以並行計算來解決。

==並行互動與通訊==
並行計算中，不同計算單元之間，需要進行通訊以保持同步。這些通訊方式，在某些並行程式語言中，是被隱藏起來的（例如，利用future方式）。以外顯方式來進行通訊，可分成兩種主要方式：
*[[共享記憶體|共享記憶體]]通訊
:經由改變共享記憶體位址內的資料內容，讓不同的並行單元間進行通訊，如[[Java|Java]]與[[C♯|C#]]都支援這個方式。使用這種通訊類型的並行程式，通常需要應用某種鎖定的方式來達成執行緒間的[[同步|同步]]，這些鎖定技術包括[[mutex|mutex]]，[[semaphore|semaphore]]，或[[監視器_(程序同步化)|monitor]]等。
*[[訊息傳遞_(軟體)|訊息傳遞]]通訊
:透過訊息的交換，使不同的並行單元間同步，如[[Scala|Scala]]，[[Erlang|Erlang]]與[[occam|occam]]。

==並行計算模型==
*[[演员模型|演员模型]]
*[[Petri网|Petri网]]
*[[交談循序程式|交談循序程式]]

==並行性程式語言==

并发性编程语言使用编程语言结构特性进行并发。这些结构涉及到多线程，分布式计算，消息传递，资源共享（包括内存共享）。有时候我们也称这些语言是面向并发的编程语言（COPL）。
如今很多常用的语言都拥有并发的特性，例如：Java和C#。这两种语言底层都是通过内存共享以及锁监听机制的并发模型来实现（尽管消息传递模型如今也是基于内存共享模型实现的）。在消息传递的并发模型世界中，Erlang最具代表性并被广泛使用至今。

很多并发性编程语言更多的是被用作研究（例如：Pict）而非生产用途。尽管如此，在最近20年，还是有很多语言例如 Erlang，Limbo和Occam被用于生产工业。类似这些并发性编程语言还包括：
{{div col|colwidth=15em}}
*[[Ada|Ada]] 
*[[Alef|Alef]]
*[[Alice_(programming_language)|Alice]]
*[[Ateji_PX|Ateji PX]]
*[[Axum|Axum]]
*[[Chapel|Chapel]]
*[[Charm++|Charm++]]
*[[Cilk|Cilk]]
*[[Cω|Cω]]
*[[C_Sharp|C#]]
*[[Clojure|Clojure]]
*[[Clean_(编程语言)|Clean]]
*[[Concurrent_Collections|Concurrent Collections]]
*[[Concurrent_Haskell|Concurrent Haskell]]
*[[Concurrent_ML|Concurrent ML]]
*[[Concurrent_Pascal|Concurrent Pascal]]
*[[Curry|Curry]]
*[[D語言|D]]
*[[E语言|E]]
*[[ECMAScript|ECMAScript]]
*[[Eiffel|Eiffel]]
*[[Elixir|Elixir]]
*[[Erlang|Erlang]]
*[[FAUST_(programming_language)|Faust]]
*[[Fortran|Fortran]]
*[[Go|Go]]
*[[Hume_(programming_language)|Hume]]
*[[Io_(编程语言)|Io]]
*[[Janus_(programming_language)|Janus]]
*[[JoCaml|JoCaml]]
*[[Join_Java|Join Java]]
*[[Joule_(programming_language)|Joule]]
*[[Joyce_(programming_language)|Joyce]]
*[[LabVIEW|LabVIEW]]
*[[Limbo_(编程语言)|Limbo]]
*[[MultiLisp|MultiLisp]]
*[[Modula-2|Modula-2]]
*[[Modula-3|Modula-3]]
*[[Newsqueak|Newsqueak]]
*[[occam|occam]]
**[[Occam-Pi|occam-π]]
*[[Orc_(programming_language)|Orc]]
*[[Oz_(编程语言)|Oz]]
**[[Mozart_Programming_System|Mozart Programming System]]
*[[ParaSail_(programming_language)|ParaSail]]
*[[Pict_(programming_language)|Pict]]
*[[Perl|Perl]]中的AnyEvent<ref>[https://metacpan.org/module/AnyEvent AnyEvent] {{Wayback|url=https://metacpan.org/module/AnyEvent |date=20130828045538 }}</ref>和Coro<ref>[https://metacpan.org/module/Coro Coro] {{Wayback|url=https://metacpan.org/module/Coro |date=20130806215449 }}</ref>
*[[Python|Python]]中的Twisted<ref>[http://twistedmatrix.com/ Twisted] {{Wayback|url=http://twistedmatrix.com/ |date=20080827192443 }}</ref>, greenlet<ref>[https://web.archive.org/web/20100306171307/http://codespeak.net/py/0.9.2/greenlet.html greenlet]</ref>和gevent<ref>[http://www.gevent.org gevent] {{Wayback|url=http://www.gevent.org/ |date=20200916085654 }}</ref>.
* [[Reia_(programming_language)|Reia]]
*[[Rust|Rust]]
*[[SALSA_(programming_language)|SALSA]]
*[[Scala|Scala]]
* [[SequenceL|SequenceL]]
*[[SR_language|SR]]
*[[Stackless_Python|Stackless Python]]
*[[StratifiedJS|StratifiedJS]]
*[[SuperPascal|SuperPascal]]
*[[Unicon_(编程语言)|Unicon]]
* [[Termite_Scheme|Termite Scheme]]
*[[TNSDL|TNSDL]]
*[[VHDL|VHDL]]
*[[XC_(编程语言)|XC]]
{{div col end}}

==相關條目==
*[[平行計算|平行計算]]

==引用==
{{reflist}}

{{编程语言类别}}

[[Category:操作系统技术|Category:操作系统技术]]
[[Category:并发计算|Category:并发计算]]
[[Category:并发编程语言|*]]
[[Category:需要计算机科学专家关注的页面|Category:需要计算机科学专家关注的页面]]