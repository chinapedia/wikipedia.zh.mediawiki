{{roughtranslation|time=2015-01-09T01:18:18+00:00}}
'''树-邻接文法'''(TAG)是 [[Aravind_Joshi|Aravind Joshi]] 定义的文法形式化。树-邻接（adjoining）文法在某种意义上类似于[[上下文无关文法|上下文无关文法]]，但是基本的重写单位是树而不是符号。上下文无关文法有把符号重写为其他符号的规则，而树-毗连文法有把树的节点重写为其他树的规则。

==文法規則==
TAG 中的规则是带有叫做“足节点”的特殊叶子的树，它们锚接（anchor）到一个字。在 TAG 中有两个种类的基本树：“初始”树（经常被表示为 '<math>\alpha</math>'）和“辅助”树（'<math>\beta</math>'）。初始树表示基本的价（valency）关系，而辅助树允许[[递归|递归]]。<ref name="jurafsky-martin2000">{{cite book
 | last = Jurafsky
 | first = Daniel
 | coauthors = James H. Martin
 | title = Speech and Language Processing
 | url = https://archive.org/details/speechlanguagepr00djur
 | year = 2000
 | pages = [https://archive.org/details/speechlanguagepr00djur/page/n378 354]
 | publisher = Prentice Hall
 | location = Upper Saddle River, NJ }}</ref>
辅助树有标记（label）上同样符号的根（顶）节点和足节点。推导开始于初始树，通过要么“代换”要么“附加”来结合。代换把末梢节点替换为其顶节点有同样符号的另一个树。附加把一个辅助树插入到另一个树的中心。<ref name="joshi-rambow2003">{{cite conference
 | last = Joshi
 | first = Aravind
 | coauthors = Owen Rambow
 | title = A Formalism for Dependency Grammar Based on Tree Adjoining Grammar
 | year = 2003
 | booktitle = Proceedings of the Conference on Meaning-Text Theory
 | url = http://www1.cs.columbia.edu/~rambow/papers/joshi-rambow-2003.pdf
 | access-date = 2007-10-19
 | archive-date = 2020-11-29
 | archive-url = https://web.archive.org/web/20201129203347/http://www1.cs.columbia.edu/~rambow/papers/joshi-rambow-2003.pdf
 | dead-url = no
 }}</ref>
辅助树的根／足标记必须匹配它所邻接的节点的标记。其他 TAG 的变体允许多种成分的树，带有多个足节点的树，和其他扩展。

树-邻接文法经常被描述为“[[适度上下文有关语言|适度上下文有关]]的”，这意味着它们有（在[[弱生成能力|弱生成能力]]方面上）特定性质使其有比上下文无关文法更强力，但有比[[附标文法|附标文法]]或[[上下文有关文法|上下文有关文法]]更弱的能力。适度上下文有关文法被推测为足够强力可以建模[[自然语言|自然语言]]，而仍保持在一般情况下有效[[解析器|解析]]。<ref name="joshi1985">{{cite book
 | last = Joshi
 | first = Aravind
 | chapter = How much context-sensitivity is necessary for characterizing structural descriptions
 | year = 1985
 | publisher = Cambridge University Press
 | pages = 206–250
 | title = Natural Language Processing: Theoretical, Computational, and Psychological Perspectives
 | editor = D. Dowty, L. Karttunen, and A. Zwicky, (eds.)
| location = New York, NY }} </ref> 由于它们的形式特性，TAG 经常被用于[[计算语言学|计算语言学]]和[[自然语言处理|自然语言处理]]。

==文法緣起==
TAG 起源于 Joshi 和他的学生对附加文法（AG）家族和 [[Zellig_Harris|Zellig Harris]] 的“字符串文法”的研究 <ref name="JoshiKosarajuYamada1969">{{cite paper
 | last = Joshi
 | first = Aravind
 | coauthors =  S. R. Kosaraju, H. Yamada
 | title = String Adjunct Grammars
 | year = 1969
 | publisher = Proceedings Tenth Annual Symposium on Automata Theory, Waterloo, Canada }}</ref> 
。AG 以自然和高效的方式处理语言的{{le|向心及離心 (語言)|Endocentric and exocentric|向心}}性质，但是没有对离心构造的好特征描述；[[重写规则|重写文法]]或[[短语-结构文法|短语-结构文法]]（PSG）正好反过来。在 1969 年，Joshi 通过混合两种类型的规则介入了开拓出这种补足的文法家族。一些非常简单的重写规则足够生成附加规则的字符串的词汇表。这个家族不同于[[乔姆斯基谱系|乔姆斯基层级]]，但是有所交叠。<ref name="Joshi1969">{{cite paper
 | last = Joshi
 | first = Aravind
 | title = Properties of Formal Grammars with Mixed Types of Rules and Their Linguistic Relevance
 | year = 1969
 | publisher = Proceedings Third International Symposium on Computational Linguistics, Stockholm, Sweden }}</ref>

TAG 可以描述有平方的语言（在其中某个任意字符串被重复），和语言 <math>\{ a^n b^n c^n d^n | n \ge 1 \} </math>，有立方的语言（就是三倍的字符串）或有相等长度的多于四个不同字符的字符串的语言不可以被树-邻接文法所生成。为此，树-毗连文法生成的语言被称为“适度上下文有关语言”。

==引用==
{{reflist|2}}

==外部链接==
*[http://www.cis.upenn.edu/~xtag/ The XTAG project] {{Wayback|url=http://www.cis.upenn.edu/~xtag/ |date=20210126024844 }}，which uses a TAG for natural language processing.
*[http://www.let.rug.nl/~vannoord/papers/diss/diss/node59.html A tutorial on TAG] {{Wayback|url=http://www.let.rug.nl/~vannoord/papers/diss/diss/node59.html |date=20200711043627 }}
*[http://wiki.loria.fr/wiki/SemConst/Documentation#Background SemConst Documentation] {{Wayback|url=http://wiki.loria.fr/wiki/SemConst/Documentation#Background |date=20061123095945 }} A quick survey on Syntax and Semantic Interface problematic within the TAG framework.

{{形式语言与形式文法}}
[[Category:文法框架|Category:文法框架]]