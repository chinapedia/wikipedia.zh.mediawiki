{{Expand|time=2015-05-14T05:58:36+00:00}}
{{NoteTA
|G1 = IT
|1 = zh-cn:实现; zh-tw:實作;
}}
'''技术负债'''（{{lang-en|Technical debt}}），又譯'''技術債'''，也稱為'''設計負債'''（{{lang|en|design debt}}）、'''程式碼負債'''（{{lang|en|code debt}}），是[[程式設計|程式設計]]及[[軟體工程|軟體工程]]中的一個比喻。指开发人员为了加速软件开发，在应该采用最佳方案时进行了妥协，改用了短期内能加速软件开发的方案，从而在未来给自己带来的额外开发负担。這種技術上的選擇，就像一筆[[債務|債務]]一樣，雖然眼前看起來可以得到好處，但必須在未來償還。軟體工程師必須付出额外的時間和精力持續修復之前的妥协所造成的問題及副作用，或是進行[[代码重构|重構]]，把架構改善為最佳實作方式。

1992年，[[沃德·坎宁安|沃德·坎宁安]]首次将技术的复杂比作为[[负债|负债]]。

{{quotation|
第一次发布-{zh-hans:代码; zh-hant:程式碼}-，就好比借了一笔钱。只要通过不断重写来偿还债务，小额负债可以加速开发。但久未偿还债务会引发危险。复用马马虎虎的代码，类似于负债的利息。整个部门有可能因为松散的实现，不完全的[[面向对象的程序设计|面向对象]]的设计或其他诸如此类的负债而陷入窘境<ref name='oopsla92'>{{cite web|url=http://c2.com/doc/oopsla92.html|title=The WyCash Portfolio Management System|date=1992-03-26|accessdate=2008-09-26|author=[[沃德·坎宁安|Ward Cunningham]]|archive-date=2008-12-23|archive-url=https://web.archive.org/web/20081223060932/http://c2.com/doc/oopsla92.html|dead-url=no}}</ref>。
}}

==技术债务的分类==
{| class="wikitable" style="float:right; text-align:center"
|+ 技术债务的四象限分类
!
! style=" border-right: medium solid" | 鲁莽Reckless
! style="" | 谨慎Prudent
|-
! <BR>故意Deliberate<BR> 
| style="border-right:medium solid"| 我们没有时间做设计
|| 我们必须马上交付，后果以后再说
|- style="border-top: medium solid"
! <BR>疏忽Inadvertent<BR> 
| style="border-right: medium solid"| 什么是分层（设计）？
|| 现在我们才知道该如何做了
|}
[[马丁·福勒|马丁·福勒]]提出了把技术负债分为四个象限<ref>{{cite web|last1=Fowler|first1=Martin|title=Technical Debt Quadrant|url=http://martinfowler.com/bliki/TechnicalDebtQuadrant.html|accessdate=20 November 2014|archive-date=2013-02-02|archive-url=https://web.archive.org/web/20130202111651/http://martinfowler.com/bliki/TechnicalDebtQuadrant.html|dead-url=yes}}</ref>。

常见的技术债务的原因有：
* 不充足的事前定义，从而需求仍然在开发过程中被定义，开发在设计之前就已经开始。这种做法的目的是节约时间，但常不得不以后返工。
* 商务压力。商务角度需要在必须的改变完成之前就发布产品。因此开发的技术债务包括那些待完成的改变。{{r|SuryanarayanaSamarthyam2014|p=4}}{{r|Sterling2010|p=22}}
* 缺少流程或理解，从而商务上对技术债务不了解，不考虑后果就做出决策。 
* 紧耦合组件。功能不是模块化，软件不够灵活应对商务上的变化。
* 缺乏测试套件。这刺激了快速高风险“凑活式”的修复bug。
* 缺少文档。写代码但没有必要的支撑性文档。<ref name="SuryanarayanaSamarthyam2014">{{cite book|author1=Girish Suryanarayana|author2=Ganesh Samarthyam|author3=Tushar Sharma|title=Refactoring for Software Design Smells: Managing Technical Debt|url=https://books.google.com/books?id=1SaOAwAAQBAJ&pg=PA3|date=11 November 2014|publisher=Elsevier Science|isbn=978-0-12-801646-6|page=3|access-date=2019-02-19|archive-date=2021-05-26|archive-url=https://web.archive.org/web/20210526161227/https://books.google.com/books?id=1SaOAwAAQBAJ&pg=PA3}}</ref>
* 缺乏合作。知识没有得到共享，对新手缺乏监督辅导。 
* 在两个或多个分支上平行开发而累积了技术债务。由于工作最终需要合并两个分支的代码，拖延越晚，需要工作代价越大。 
* 拖延做重构 – 重构拖延越晚，需要修改的代码越多。{{r|Sterling2010|p=29}}
* 缺少与标准对齐。工业标准的特性、框架、技术被忽视。最终也必将遵从标准，做得越早代价越小。{{r|SuryanarayanaSamarthyam2014|p=7}}
* 缺少知识。开发者并不知道如何写精致的代码。<ref name="Sterling2010">{{cite book|author=Chris Sterling|title=Managing Software Debt: Building for Inevitable Change (Adobe Reader)|url=https://books.google.com/books?id=LYQlOaRwpnEC&pg=PA17|date=10 December 2010|publisher=Addison-Wesley Professional|isbn=978-0-321-70055-1|page=17}}</ref>
* 缺少所有权。外包的软件最终要让自己的工程师去重构或重写源代码。 
* 技术领导力差，未深思熟虑的命令通过命令链传达下来，增加了技术债务，而不是减少它。
* 最后一分钟规范改变。这有可能渗透到整个项目中，没有时间或预算通过文档或检查来发现它们。

==参见==
*[[大泥球_(编程)|大泥球 (编程)]]

==参考资料==
{{reflist}}

[[Category:信息技术|Category:信息技术]]
[[Category:软件架构|Category:软件架构]]
[[Category:軟體維護|Category:軟體維護]]