{{Unreferenced|time=2021-01-21T11:15:23+00:00}}
{{NoteTA
|G1 = IT
}}
{{Dablink|此為電腦用詞，關於娛樂節目用詞参见：[[call_in|call in]]}}
[[File:Linux_kernel_System_Call_Interface_and_glibc.svg|thumb]], [[GNU_C函式庫|GNU C函式庫]]（glibc）.]]
在[[電腦|電腦]]中，'''系统调用'''（{{lang-en|system call}}），指運行在[[使用者空間|使用者空間]]的[[程序|程序]]向[[操作系统|操作系统]][[内核|内核]]請求需要更高權限運行的服務。系統調用提供用戶程序與[[操作系统|操作系统]]之間的接口。大多數系統交互式操作需求在內核態執行。如设备IO操作或者进程间通信。

==用户空间（用户态）和内核空间（内核态）==
[[操作系统|操作系统]]的进程空间可分为[[用户空间|用户空间]]和[[内核空间|内核空间]]，它们需要不同的执行权限。其中系统调用运行在[[内核空间|内核空间]]。

==库函数==
系统调用和普通库函数调用非常相似，只是系统调用由操作系统[[内核|内核]]提供，运行于内核核心态，而普通的库函数调用由函数库或用户自己提供，运行于用户态。

==典型实现（Linux）==
Linux 在x86上的系统调用通过 int 80h 实现，用[[系统调用号|系统调用号]]来区分入口函数。操作系统实现系统调用的基本过程是： 
#	应用程序调用库函数（API）；
#	API 将系统调用号存入 EAX，然后通过中断调用使系统进入内核态；
#	内核中的中断处理函数根据系统调用号，调用对应的内核函数（系统调用）；
#	系统调用完成相应功能，将返回值存入 EAX，返回到中断处理函数；
#	中断处理函数返回到 API 中；
#	API 将 EAX 返回给应用程序。
应用程序调用系统调用的过程是：
#	把系统调用的编号存入 EAX；
#	把函数参数存入其它通用寄存器；
#	触发 0x80 号中断（int 0x80）。

[[Category:操作系统技术|Category:操作系统技术]]
[[Category:应用程序接口|Category:应用程序接口]]