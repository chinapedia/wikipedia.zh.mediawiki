{{Multiple issues|
{{unreferenced|time=2012-06-28}}
{{Copy edit|time=2022-03-07T23:53:41+00:00}}
}}
{{NoteTA|G1=IT}}
[[File:Float_mantissa_exponent.png|thumb]]

在[[計算機科學|計算機科學]]中，'''浮點'''（{{lang-en|floating point}}，縮寫為FP）是一種對於[[實數|實數]]的近似值數值表現法，由一个[[有效數字|有效數字]]（即'''[[尾数|尾数]]'''）加上[[冪數|冪數]]來表示，通常是乘以某个[[基数_(对数)|基数]]的整数次[[指數|指數]]得到。以這種表示法表示的數值，稱為'''浮点數'''（{{lang|en|floating-point number}}）。利用浮點進行運算，稱為'''浮点计算'''，這種运算通常伴随着因为无法精确表示而进行的近似或[[数值修约|舍入]]。

計算機使用浮點數運算的主因，在於電腦使用二進位制的運算。例如：4÷2=2，4=100<sub>(2)</sub>、2=010<sub>(2)</sub>，在二進位相當於退一位數。則1.0÷2=0.5=0.1<sub>(2)</sub>也就是<math>\frac{1}{2}</math>。依此類推二進位的0.01<sub>(2)</sub>就是十進位<math>\frac{1}{2^{2}}</math>=<math>\frac{1}{4}</math>=0.25。由於十進位制無法準確換算成二進位制的部分小數，如0.1，因此只能使用近似值的方式表達。

这种表示方法类似于基数为10的[[科学记数法|科学记数法]]，在計算機上，通常使用2為基數的幂數來表示。一个浮点数''a''由两个数''m''和''e''来表示：''a = m × b<sup>e</sup>''。在任意一个这样的系统中，我们选择一个[[基數_(進位記數法)|基數]]''b''（记数系统的基）和[[精度|精度]]''p''（即使用多少位来存储）。''m''（即[[尾数|尾数]]）是形如±d'''.'''ddd...ddd的p位数（每一位是一个介于0到b-1之间的整数，包括0和b-1）。如果''m''的第一位是非0整数，''m''称作'''正规化'''的。有一些描述使用一个单独的符号位（''s'' 代表+或者-）来表示正负，这样''m''必须是正的。''e''是指数。

這種表示法的設計，來自於對於值的表現範圍，與[[精密度|精密度]]之間的取捨：可以在某个固定长度的存储空间内表示出某個實數的近似值。例如，一个指数范围为±4的4位[[十进制|十进制]]浮点数可以用来表示43210，4.321或0.0004321，但是没有足够的精度来表示432.123和43212.3（必须近似为432.1和43210）。当然，实际使用的位数通常远大于4。

此外，浮点数表示法通常还包括一些特别的数值：+∞和−∞（正负无穷大）以及NaN（'Not a Number'）。无穷大用于数太大而无法表示的时候，NaN则指示非法操作或者无法定义的结果。

其中，无穷大，可表示为inf，在内存中的值是阶码为全1，尾数全0。而NaN在内存中的值则是阶码全1，尾数不全0。

== 计算机的浮点数 ==
浮点指的是带有小数的数值，浮点运算即是小数的四则运算，常用来测量电脑运算速度。大部份计算机采用二進制（b=2）的表示方法。[[位|位]]（bit）是衡量浮点数所需存储空间的单位，通常为32位或64位，分别被叫作[[单精确浮点数|单精度]]和[[雙倍精確浮點數|双精度]]。有一些计算机提供更大的浮点数，例如[[英特尔|英特尔]]公司的浮点运算单元Intel[[8087协处理器|8087协处理器]]（以及其被集成进x86处理器中的后代产品）提供80位长的浮点数，用于存储浮点运算的中间结果。还有一些系统提供128位的浮点数（通常用软件实现）。

== 浮点数的標準 ==
{{main|IEEE_754}}
在電腦使用的浮点数被[[电气电子工程师协会|电气电子工程师协会]]（IEEE）規範化為[[IEEE_754|IEEE 754]]。

== 举例 ==
[[圓周率|π]]的值可以表示为π = 3.1415926...<sub>10</sub>（十进制）。当在一个支持17位尾数的计算机中表示时，它会变为0.11001001000011111 × 2<sup>2</sup>。

==准确性==
由于浮点数不能表达所有[[实数|实数]]，浮点运算与相应的数学运算有所差异，有时此差异极为显著。

比如，二进制浮点数不能表达0.1和0.01，0.1的平方既不是准确的0.01，也不是最接近0.01的可表达的数。单精度（24比特）浮点数表示0.1的结果为<math>e=-4</math>,<math>s=110011001100110011001101_{(2)}</math>，即
:0.100000001490116119384765625
此数的平方是
:0.010000000298023226097399174250313080847263336181640625
<!-- Squaring it with single-precision floating-point hardware (with rounding) gives
:0.010000000707805156707763671875 exactly. -->
但最接近0.01的可表达的数是
:0.009999999776482582092285156250

浮点数也不能表达圆周率<math>\pi</math>，所以<math>\tan\frac{\pi}{2}</math>不等于正无穷，也不会溢出。<!--It is simply not possible for standard floating-point hardware to attempt to compute tan(π/2), because π/2 cannot be represented exactly.-->下面的C语言代码
<syntaxhighlight lang="c">
double pi = 3.1415926535897932384626433832795;
double z = tan(pi/2.0);
</syntaxhighlight>
的计算结果为16331239353195370.0，如果用单精度浮点数，则结果为−22877332.0。同样的，<math>\sin \pi\neq 0</math>。

由于浮点数计算过程中丢失了精度，浮点运算的性质与数学运算有所不同。浮点加法和乘法不符合[[结合律|结合律]]和[[分配律|分配律]]。

===事故===
[[奔騰|Intel Pentium CPU]]早期的60-100MHz P5版本在浮點運算單元有一個問題，在極少數情況下，會導致除法運算的精確度降低。這個缺陷於1994年被發現，變成如今廣為人知的[[Pentium_FDIV_bug|Pentium FDIV bug]]，同時這一事件導致[[英特爾|Intel]]陷入巨大的窘態，建立召回計畫來回收有問題的處理器。

==相關條目==
*[[IEEE_754|IEEE二進位浮點數算術標準]]（IEEE 754）
*[[單精度浮點數|單精度浮點數]]
*[[雙精度浮點數|雙精度浮點數]]
*[[MIPS|MIPS]]
*[[TOP500|TOP500]]
*[[灾难性抵消|灾难性抵消]]

{{数据类型}}

[[Category:計算機算術|Category:計算機算術]]
[[Category:数据类型|Category:数据类型]]