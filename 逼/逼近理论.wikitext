[[數學|數學]]中的'''逼近理论'''是如何將一[[函數|函數]]用較簡單的函數來找到最佳[[逼近|逼近]]，且所產生的[[逼近误差|误差]]可以有[[量_(物理)|量化]]的{{link-en|数学表征|Characterization (mathematics)|表征}}，以上提及的「最佳」及「較簡單」的實際意義都會隨著應用而不同。

數學中有一個相關性很高的主題，是用{{link-en|廣義傅立葉級數|generalized Fourier series}}進行函數逼近，也就是用以[[正交多項式|正交多項式]]為基礎的級數來進行逼近。

[[計算機科學|計算機科學]]中有一個問題和逼近理论有關，就是在數學[[函式庫|函式庫]]中如何用計算機或計算器可以執行的功能（例如乘法和加法）儘可能的逼近某一數學函數<ref>{{cite book 
 |author = M. J. D. Powell
 |title = Approximation Theory and Methods
 |year = 1981
 |publisher = Cambridge University Press
 |isbn = 0521295149
 |pages = p.3
 |url = http://books.google.com.tw/books?id=ODZ1OYR3w4cC&printsec=frontcover&hl=zh-TW#v=onepage&q&f=false
}}</ref>，一般會用[[多項式|多項式]]或[[有理函數|有理函數]]（二多項式的商）來進行。

逼近理论的目標是儘可能地逼近實際的函數，一般精度會接近電腦[[浮點運算|浮點運算]]的精度，一般會用高次的多項式，以及（或者）縮小多項式逼近函數的區間。縮小區間可以針對要逼近的函數，利用許多不同的係數及增益來達到。現在的數學函式庫會將區間劃分為許多的小區間，每個區間搭配一個次數不高的多項式。

{|style="float:right"
| [[File:Logerror.png|thumb]]
| [[File:Experror.png|thumb]]
|}

== 最佳多項式 ==
只要選定了多項式的次數及逼近的範圍，就可以用以使最壞情形誤差最小化的原則，來選擇逼近多項式，其目的為最小化<math>\mid P(x)-f(x)\mid</math>的絕對值，其中''P''(''x'')為逼近多項式，而''f''(''x'')為實際的函數。對於一個[[良態|良態]]的函數，存在一個''N''次的多項式，使誤差曲線的大小在<math>+\varepsilon</math>和<math>-\varepsilon</math>之間震盪至多''N''+2次，其最壞情形的誤差為<math>\varepsilon</math>。一個''N''次的多項式可以內插曲線中的''N''+1個點。當然也有可能製造一些極端的函數，使得滿足上述條件的多項式不存在，但在實務上很少需要為這様的函數進行逼近。

例如右圖中的紅線就是用''N'' = 4情形下用多項式逼近log(x)及exp(x)的誤差。誤差在<math>+\varepsilon</math>和<math>-\varepsilon</math>之間震盪。每一個例子中的極端有''N''+2個，也就是6個。極值出現在區間的端點，也就是圖的最左邊及最右邊。

== 切比雪夫近似 ==
[[File:chebyshev.png|frame]]

切比雪夫近似是利用將函數展開為由[[切比雪夫多项式|切比雪夫多项式]]組成的各項，依需要的逼近程度決定展開的項次，可以得到很接近多項式的結果。此作法類似進行函數的[[傅立葉分析|傅立葉分析]]，只是用切比雪夫多项式代替分析中用到的三角函數。

若計算一函數切比雪夫展開的係數：

:<math>f(x) \sim \sum_{i=0}^\infty c_i T_i(x)</math>

只展開到<math>T_N</math>項為止，可以得到一個逼近''f''(''x'')的''N''次多項式。

對於一個有快速收斂幂級數的函數而言，若展開到一定項次後截止不再展開，截止產生的誤差接近截止後的第一項，因此誤差可以由截止後的第一項代表。若是用切比雪夫多项式展開，也會有一様的結果。若切比雪夫展開只展開到<math>T_N</math>，後面截止，其誤差會接近<math>T_{N+1}</math>的整數倍。切比雪夫多项式的特點是在[−1, 1]區間以內．其數值會在+1和−1之間震盪。<math>T_{N+1}</math>有''N''+2個極點。因此''f''(''x'')和切比雪夫展開的誤差接近一個有''N''+2個極點的函數，因此為近似最佳的''N''次多項式<ref>{{cite book 
 |author = 冯有前
 |title = 数值分析
 |year = 2005
 |publisher = 清华大学出版社有限公司
 |isbn = 9787810824958
 |pages = p.89
 |url = http://books.google.com.tw/books?id=FB87g6AP-kEC&pg=PA89&lpg=PA89
}}</ref>。

在上面中，可以看到藍色線（切比雪夫近似的誤差）有時比紅色線（最佳多項式的誤差）接近x軸，但有時藍色線反而離x軸較遠，因此切比雪夫近似和最佳多項式畢竟還是有差異。不過exp函數是快速收斂的函數，切比雪夫近似的誤差會比log函數要好。

切比雪夫近似是[[數值積分|數值積分]]方法{{link-en|Clenshaw–Curtis正交法|Clenshaw–Curtis quadrature}}的基礎。

== 雷米兹演算法 ==
[[雷米兹演算法|雷米兹演算法]]是在1934年由蘇俄數學家{{link-en|雷米兹|Evgeny Yakovlevich Remez}}提出的演算法<ref>E. Ya. Remez, "Sur la détermination des polynômes d'approximation de degré donnée", Comm. Soc. Math. Kharkov '''10''', 41 (1934);<br>"Sur un procédé convergent d'approximations successives pour déterminer les polynômes d'approximation, Compt. Rend. Acad. Sc. '''198''', 2063 (1934);<br>"Sur le calcul effectiv des polynômes d'approximation des Tschebyscheff", Compt. Rend. Acade. Sc. '''199''', 337 (1934).</ref>。可用來產生在一定區間內逼近函數''f''(''x'')的最佳多項式''P''(''x'')。雷米兹演算法是一種迭代式的演算法，最後會收斂到使誤差函數''N''+2個極值的多項式。<!---By the theorem above, that polynomial is optimal.-->

雷米兹演算法是用以下的事實為基礎：可以在有''N''+2個測試點的情形下，創建一個''N''次多項式，其誤差函數在0附近震盪。

假設''N''+2個測試點<math>x_1</math>, <math>x_2</math>, ... <math>x_{N+2}</math>（其中<math>x_1</math>和<math>x_{N+2}</math>假設是區間的二個端點），需求解以下的多項式：

:<math>P(x_1) - f(x_1) = + \varepsilon\,</math>
:<math>P(x_2) - f(x_2) = - \varepsilon\,</math>
:<math>P(x_3) - f(x_3) = + \varepsilon\,</math>
:<math>\vdots</math>
:<math>P(x_{N+2}) - f(x_{N+2}) = \pm \varepsilon.\,</math>

等式右側的正負號交替出現。因此可以得到下式：

:<math>P_0 + P_1 x_1 + P_2 x_1^2 + P_3 x_1^3 + \dots + P_N x_1^N - f(x_1) = + \varepsilon\,</math>
:<math>P_0 + P_1 x_2 + P_2 x_2^2 + P_3 x_2^3 + \dots + P_N x_2^N - f(x_2) = - \varepsilon\,</math>
:<math>\vdots</math>

既然<math>x_1</math>, ..., <math>x_{N+2}</math>給定，其各次方的幂次也是已知，而<math>f(x_1)</math>, ..., <math>f(x_{N+2})</math>也是已知。上式就變成由''N''+2的線性方程組成的聯立方程．有''N''+2個變數，分別是<math>P_0</math>, <math>P_1</math>, ..., <math>P_N</math>及<math>\varepsilon</math>。可以解出上式的多項式''P''及誤差<math>\varepsilon</math>。

下圖產生一個在[−1, 1]區間內逼近<math>e^x</math>的四階多項式，六個測試點為
−1, −0.7, −0.1, +0.4, +0.9和1。在圖中將二端點以外的測試點標示綠色，其誤差<math>\varepsilon</math>為 is 4.43 x 10<sup>−4</sup>。

[[File:Remesdemo.png|thumb]]

注意到上圖在六個測試點上的誤差的確是<math>\pm \varepsilon</math>，但極值不是在測試點上。若極值在測試點上（''P''(''x'')-''f''(''x'')在測試點上有最大值或最小值），在此這個區間的誤差都不會超過<math>\pm \varepsilon</math>，此多項式即為最佳多項式。

雷米兹演算法的第二步就是將測試點移到誤差函數有最大值或最小值，例如上圖中−0.1的測試點需移到−0.28。移動的方式可以進行一輪牛頓法，來取新的測試點位置，由於知道''P''(''x'')−''f''(''x'')的一階及二階導數，因此可以大略計算測試點要移到哪裡才能使誤差函數的微分為零。計算多項式''P''(''x'')的一階及二階導數並不困難，但雷米兹演算法需要可以計算''f''(''x'')的一階及二階導數，而且需要很高的精度，其精度需求要比雷米兹演算法輸出期望的精度要高。

在移動測試點後，會產生新的線性聯立方程，求解後得到新的多項式，再利用牛頓法去找下一組測試點……，一直到結果收斂到需要的精度為止。雷米兹演算法收斂速度很快，對於良態的函數，雷米兹演算法是二次收斂，若測試點是在正確位置的<math>10^{-15}</math>誤差範圍內，下次測試點是在正確位置的<math>10^{-30}</math>誤差範圍內。

使用雷米兹演算法時，一般會選切比雪夫多項式<math>T_{N+1}</math>的零點為初始測試點，因為最後的誤差函數會類似切比雪夫多項式。

== 相關條目 ==
* [[切比雪夫多项式|切比雪夫多项式]]
* {{link-en|廣義傅立葉級數|generalized Fourier series}}
* [[正交多項式|正交多項式]]
* [[正交基|正交基]]
* [[傅里叶级数|傅里叶级数]]
* {{link-en|邵德尔基|Schauder basis}}
* [[帕德逼近|帕德逼近]]
* {{link-en|函數逼近|Function approximation}}
* [[樣條函數|樣條函數]]

== 参考文献 ==
{{Reflist}}

[[Category:逼近理论|]]
[[Category:数值分析|Category:数值分析]]