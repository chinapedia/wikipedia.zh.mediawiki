'''返回值优化'''（Return value optimization，缩写为'''RVO'''）是[[C++|C++]]的一项编译优化技术。即删除保持函数返回值的临时对象。这可能会省略两次[[复制构造函数|复制构造函数]]，即使复制构造函数有副作用。<ref name="moreeffcpp">{{cite book  | last = Meyers | first = Scott | title = More Effective C++ | publisher = [[Addison_Wesley|Addison Wesley]] | year = 1996}}</ref> <ref name="andrei">{{cite web|url=http://www.ddj.com/cpp/184403855|title=Move Constructors|last=Alexandrescu|first=Andrei|date=2003-02-01|publisher=[[Dr._Dobbs_Journal|Dr. Dobbs Journal]]|accessdate=2009-03-25|archive-date=2013-07-14|archive-url=https://www.webcitation.org/6I7G2qiKh?url=http://www.drdobbs.com/move-constructors/184403855|dead-url=no}}</ref> 

典型地，当一个函数返回一个对象实例，一个临时对象将被创建并通过复制构造函数把目标对象复制给这个临时对象。C++标准允许省略这些复制构造函数，即使这导致程序的不同行为，即使编译器把两个对象视作同一个具有副作用。 <ref>C++98标准的节12.8.“Copying class objects”第15段</ref> 
<syntaxhighlight lang="cpp">
#include <iostream>

struct C {
  C() {}
  C(const C&) { std::cout << "A copy was made.\n"; }
};

C f() {
  return C();
}

int main() {
  std::cout << "Hello World!\n";
  C obj = f();
}
</syntaxhighlight>  

对于函数返回类对象，一种实现办法是在函数调用语句前在[[stack_frame|stack frame]]上声明一个隐藏对象，把该对象的地址隐蔽传入被调用函数，函数的返回对象直接构造或者复制构造到该地址上。<ref name="efficient">{{cite book|last=Bulka|first=Dov|coauthors=David Mayhew|title=Efficient C++|publisher=[[Addison-Wesley|Addison-Wesley]]|year=2000|isbn=0-201-37950-3}}</ref>例如：

<syntaxhighlight lang="cpp">
struct Data { 
  char bytes[16]; 
};

Data f() {
  Data result = {};
  // generate result
  return result;
}

int main() {
  Data d = f();
}
</syntaxhighlight>

可能产生的代码如下：

<syntaxhighlight lang="cpp">
struct Data { 
  char bytes[16]; 
};

Data * f(Data * _hiddenAddress) {
  Data result = {};
  // copy result into hidden object
  *_hiddenAddress = result;
  return _hiddenAddress;
}

int main() {
  Data _hidden; // create hidden object
  Data d = *f(&_hidden); // copy the result into d
}
</syntaxhighlight>

这引起了<code>Data</code>对象被复制两次。

另一种技术是'''命名返回值优化'''（Named return value optimization，NRVO）。<ref name="d20">{{cite web|url=http://www.digitalmars.com/d/2.0/glossary.html|title=Glossary D Programming Language 2.0|publisher=[[Digital_Mars|Digital Mars]]|accessdate=2009-03-23|archive-date=2013-07-14|archive-url=https://www.webcitation.org/6I7G5Gj9L?url=http://dlang.org/glossary.html|dead-url=no}}</ref>NRVO去除了基于栈的返回值的构造与析构。虽然这会导致优化与未优化的程序的不同行为。 

<syntaxhighlight lang="cpp">
struct Data { 
  char bytes[16]; 
};

void f(Data *p) {
  // generate result directly in *p
}

int main() {
  Data d;
  f(&d);
}
</syntaxhighlight>
 
大部分C++编译器均支持返回值优化。<ref name="moreeffcpp"/><ref name="vc8">{{cite web|url=http://msdn.microsoft.com/en-us/library/ms364057(VS.80).aspx|title=Named Return Value Optimization in Visual C++ 2005|last=Shoukry|first=Ayman B.|publisher=[[Microsoft|Microsoft]]|accessdate=2009-03-20|archive-date=2013-07-14|archive-url=https://www.webcitation.org/6I7G6F1mK?url=http://msdn.microsoft.com/en-us/library/ms364057(VS.80).aspx|dead-url=no}}</ref><ref name="gcc">{{cite web|url=http://gcc.gnu.org/onlinedocs/gcc-2.95.3/gcc_2.html#SEC5|title=Options Controlling C++ Dialect|date=2001-03-17|publisher=[[GNU_Compiler_Collection|GCC]]|accessdate=2009-03-20|archive-date=2013-07-14|archive-url=https://www.webcitation.org/6I7G6w097?url=http://gcc.gnu.org/onlinedocs/gcc-2.95.3/gcc_2.html#SEC5|dead-url=no}}</ref>在某些环境下，编译器不能执行此优化。一个常见情形是当函数依据执行路径返回不同的命名对象，或者命名对象在asm内联块中被使用：<ref name="efficient"/><ref name="vc8"/><ref name="n1377">{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1377.htm|title=N1377: A Proposal to Add Move Semantics Support to the C++ Language|last=Hinnant|first=Howard|coauthors=et al.|date=2002-09-10|publisher=WG21|accessdate=2009-03-25|archive-date=2009-03-01|archive-url=https://web.archive.org/web/20090301135147/http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1377.htm|dead-url=no}}</ref>

<syntaxhighlight lang="cpp">
#include <iostream>

struct C {
	C(int j) { i = j; }
	C(const C&) { std::cout << "A copy was made.\n"; }

	int i;
};

C  f(bool cond = false) {
	C first(101);
	C second(102);
	// the function may return one of two named objects
	// depending on its argument. RVO might not be applied
	return cond ? first : second;
}

int main() {
	std::cout << "Hello World!\n";
	C obj = f(true);
}
</syntaxhighlight>

== 参见 ==
*[[复制省略|复制省略]]

== 参考文献 ==
{{reflist}}

[[Category:C++|Category:C++]]