'''约定优于配置'''（'''convention over configuration'''）<ref>也译作惯例优于配置，惯例优先原则</ref>，也称作'''按约定编程'''<ref>Coding by convention</ref>，是一种软件{{le|设计范式|Design paradigm}}，旨在减少[[软件设计师|软件开发人员]]需做决定的数量，获得简单的好处，而又不失灵活性。

本质是说，开发人员仅需规定应用中不符约定的部分。例如，如果模型中有个名为Sale的类，那么数据库中对应的表就会默认命名为sales。只有在偏离这一约定时，例如将该表命名为"products_sold"，才需写有关这个名字的配置。

如果所用工具的约定与期待相符，便可省去配置；反之，可以配置来达到所期待的方式。

==动机==
设计不好的框架通常需要多个配置文件，每一个都有许多设置。这些配置文件为每一个项目提供像是URL，或是将类映射到[[数据库表|数据库表]]的各种信息。大量包含太多参数的配置文件通常是过度复杂的应用设计（[[代码坏味道|代码坏味道]]）。<ref name="toomany">C2 Wiki (2009-09-01). Too Many Parameters. C2 Wiki, 1 September 2009. Retrieved from http://c2.com/cgi/wiki$?TooManyParameters{{dead link|date=2018年4月 |bot=InternetArchiveBot |fix-attempted=yes }}.</ref>

例如，在知名的Java[[对象关系映射|对象关系映射]]框架[[Hibernate|Hibernate]]的早期版本中，将类及其属性映射到数据库上需要是在XML文件中的描述，其中大部分信息都应能够按照约定得到，如将类映射到同名的[[数据库|数据库]]表，将属性分别映射到表上的字段。后续的版本抛弃了[[XML|XML]]配置文件，而是使用这些恰当的约定，对于不符合这些约定的情形，可以使用[[Java_标注|Java 标注]]来说明（参见下面提供的JavaBeans规范）。

==使用==
[[File:Maven_CoC.svg|thumb]]

许多新的框架使用了约定优于配置的方法，包括：[[Spring_Framework|Spring]]<ref name="spring">Chapter 13.11 describes the application in the context of spring model/view/controller http://static.springsource.org/spring/docs/2.0.x/reference/mvc.html {{Wayback|url=http://static.springsource.org/spring/docs/2.0.x/reference/mvc.html |date=20130827191442 }}</ref>，[[Ruby_on_Rails|Ruby on Rails]]<ref name="ruby">http://rubyonrails.org/ {{Wayback|url=http://rubyonrails.org/ |date=20200922065643 }}, advertises the paradigm right from 'home'</ref>，Kohana PHP，{{le|Grails|Grails (Framework)}}<ref name="grails">a description of configuration with the goal of convention http://grails.org/Unified+Configuration {{Wayback|url=http://grails.org/Unified+Configuration |date=20140715122015 }}, and relationship to bean referencing from spring {{cite web |url=http://grails.org/doc/latest/guide/14.%20Grails%20and%20Spring.html |title=存档副本 |accessdate=2010-09-29 |deadurl=yes |archiveurl=https://web.archive.org/web/20101028025319/http://www.grails.org/doc/latest/guide/14.%20Grails%20and%20Spring.html |archivedate=2010-10-28 }}</ref>，{{le|Grok|Grok (web framework)}}，[[Zend_Framework|Zend Framework]]，{{le|CakePHP|CakePHP}}，[[symfony|symfony]]，[[Apache_Maven|Maven]]，[[ASP.NET_MVC|ASP.NET MVC]]，[[Web2py|Web2py]]（MVC），[[Wicket|Apache Wicket]]。

这是一个古老的概念, 甚至在[[Java|Java]]类库中也可以找出这一概念的踪迹。例如，[[JavaBean|JavaBean]]规范非常多的依赖这一概念。下面摘录[[JavaBean|JavaBean]]s 1.1版规范的一段:<ref>Sun (no date). JavaBeans specification, section 1.4. Retrieved from http://java.sun.com/javase/technologies/desktop/javabeans/docs/spec.html {{Wayback|url=http://java.sun.com/javase/technologies/desktop/javabeans/docs/spec.html |date=20090301001230 }}.</ref>
<blockquote>一般来说，我们不希望造出一个硕大无朋的java.beans.everything类用来派生其他类，而是希望[[JavaBean|JavaBean]]s运行时为一般的对象提供缺省的行为特征，但是允许对象通过继承特定的java.beans.something接口来覆盖缺省的行为特征的一部分。<ref>"As a general rule we don't want to invent an enormous java.beans.everything class that people have to inherit from. Instead we'd like the [[JavaBean|JavaBean]]s runtimes to provide default behaviour for 'normal' objects, but to allow objects to override a given piece of default behaviour by inheriting from some specific java.beans.something interface."</ref></blockquote>

==参考文献==
{{Reflist}}

==外部链接==
*[https://web.archive.org/web/20100124145107/http://softwareengineering.vazexqi.com/files/pattern.html Detailed information on CoC]
*[http://msdn.microsoft.com/en-us/magazine/dd419655.aspx Convention Over Configuration] {{Wayback|url=http://msdn.microsoft.com/en-us/magazine/dd419655.aspx |date=20191105090509 }}

==参见==
*[[Ruby_on_Rails|Ruby on Rails]]
*[[KISS原则|KISS原则]]
*[[一次且仅一次|一次且仅一次]]

{{DEFAULTSORT:Convention Over Configuration}}
[[Category:面向对象的程序设计|Category:面向对象的程序设计]]
[[Category:软体设计|Category:软体设计]]