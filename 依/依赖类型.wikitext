{{NoteTA
|1=zh-cn:类型;zh-tw:型別;
|G1=IT
}}{{Type systems}}
在[[计算机科学|计算机科学]]和[[逻辑|逻辑]]中，'''依赖类型'''（或'''依存类型'''，'''dependent type'''）是指依赖于值的[[类型|类型]]，其理论同时包含了[[数学基础|数学基础]]中的[[类型论|类型论]]和计算机编程中用以减少[[程序错误|程序错误]]的[[类型系统|类型系统]]两方面。在 [[Per_Martin-Löf|Per Martin-Löf]] 的[[直觉类型论|直觉类型论]]中，依赖类型可对应于[[谓词逻辑|谓词逻辑]]中的[[全称量词|全称量词]]和[[存在量词|存在量词]]；在依赖类型[[函数式编程语言|函数式编程语言]]如 [[自動列車停止裝置|ATS]]、[[Agda|Agda]]、[[Dependent_ML|Dependent ML]]、[[Epigram|Epigram]]、[[F*|F*]] 和 [[Idris|Idris]] 中，依赖类型系统通过极其丰富的类型表达能力使得程序规范得以借助类型的形式被检查，从而有效减少程序错误。

依赖类型的两个常见实例是'''依赖函数类型'''（又称'''依赖乘积类型'''、'''Π-类型'''）和'''依赖值对类型'''（又称'''依赖总和类型'''、'''Σ-类型'''）。一个依赖类型函数的返回值类型可以依赖于某个参数的具体值，而非仅仅参数的类型，例如，一个输入参数为整型值n的函数可能返回一个长度为n的数组；一个依赖类型值对中的第二个值可以依赖于第一个值，例如，依赖类型可表示这样的类型：它由一对整数组成，其中的第二个数总是大于第一个数。

依赖类型增加了类型系统的复杂度。由于确定两个依赖于值的类型的等价性需要涉及具体的计算，若允许在依赖类型中使用任意值的话，其[[类型检查|类型检查]]将会成为[[不可判定问题列表|不可判定问题]]；换言之，无法确保程序的类型检查一定会停机。

由于[[Curry-Howard同构|Curry-Howard同构]]揭示了程序语言的[[类型论|类型论]]与证明论的[[直觉逻辑|直觉逻辑]]之间的紧密关联性，以依赖类型系统为基础的编程语言大多同时也作为构造证明与可验证程序的辅助工具而存在，如 Coq 和 Agda（但并非所有证明辅助工具都以类型论为基础）；近年来，一些以通用和系统编程为目的的编程语言被设计出来，如 Idris。

一些以证明辅助为主要目的的编程语言采用[[强函数式编程|强函数式编程]]（total functional programming），这消除了停机问题，同时也意味着通过它们自身的核心语言无法实现任意无限递归，不是[[图灵完全|图灵完全]]的，如 Coq 和 Agda；另外一些依赖类型编程语言则是图灵完全的，如 Idris、由 [[ML语言|ML]] 衍生而来的 ATS 和 由 [[F♯|F#]] 衍生而来的 F*。

== 形式化定义 ==

=== Π-类型 ===
在全类（论域中全部类型构成的类型） <math>\mathcal{U}</math> 中给定一个类型 <math>A:\mathcal{U}</math>，存在着'''类型族''' <math>B:A\to\mathcal{U}</math> 为每一项 <math>a:A</math> 赋予一个类型 <math>B(a):\mathcal{U}</math>。一个值域依赖于其参数的函数，称之为一个'''依赖类型函数'''，该函数的类型则称之为'''依赖类型'''、'''依赖乘积类型'''或'''Π-类型'''。在此例子中，依赖类型可以写作
:<math>\Pi_{(x:A)}B(x)</math>
或
:<math>\Pi (x:A),B(x)</math>
若''B''为常数，则依赖类型退化成一般形态的函数 <math>A\to B</math>。即 <math>\Pi_{(x:A)}B</math> 等价于函数类型 <math>A\to B</math>。

被称之为“Π-类型”的原因是它可以被看作是类型的[[笛卡尔积|笛卡尔积]]。Π-类型同时也可被看作是[[全称量词|全称量词]]的模型。

例如，<math>\mbox{Vec}({\mathbb R},n)</math>表示[[实数|实数]]的<math>n</math>-元组类型，则 <math>\Pi_{(n:{\mathbb N})} \mbox{Vec}({\mathbb R},n)</math> 表示这样的函数类型：给定一个[[自然数|自然数]]''n''，该函数返回一个大小为n的实数元组。一般的函数空间可以看作依赖型函数的一个特例，当函数返回值类型实质上并不依赖于输入时，如 <math>\Pi_{(n:{\mathbb N})}\; {\mathbb R}</math> 即为从自然数到实数的函数类型，它可以在[[简单类型lambda演算|简单类型lambda演算]]中被写作 <math>{\mathbb N}\to{\mathbb R}</math>。

多态是依赖类型函数的一个重要实例。给定一个类型，函数作用于该类型的元素之上。一个返回元素类型为''C''的多态函数可能拥有如下的多态类型：
:<math>\Pi_{(A:\mathcal{U})} A\to C</math>

=== Σ-类型 ===
依赖函数类型的对偶是'''依赖值对类型'''（或'''依赖总和类型'''、'''Σ-类型'''）。它与[[余积|余积]]或[[不交并|不交并]]的概念相类似。Σ-类型可以被理解成[[存在量词|存在量词]]的模型。写作：
:<math>\Sigma_{(x:A)} B(x)</math>
依赖值对类型表示一个值对，其中第二项的类型依赖于第一项的值。若
:<math>(a,b):\Sigma_{(x:A)} B(x)</math>
则 <math>a:A</math> 且 <math>b:B(a)</math>。若''B''为常数，则依赖值对类型退化为一般的乘积类型，即笛卡尔积 <math>A\times B</math>。

== Lambda 立方 ==

Henk Barendregt 提出了 Lambda 立方模型，用于对不同的类型系统的表达能力加以区分。Lambda 立方的八个顶点分别对应各自的类型系统，[[简单类型lambda演算|简单类型lambda演算]]位于表达能力最低的顶点上，而[[构造演算|构造演算]]（calculus of constructions）则位于表达能力最强的顶点上。

=== 一阶依赖类型 ===
一阶依赖类型 <math>\lambda \Pi</math>，对应于[[逻辑框架|逻辑框架]] LF，是通过把[[简单类型lambda演算|简单类型lambda演算]]的函数空间一般化为依赖乘积类型而获得的。

=== 二阶依赖类型 ===

二阶依赖类型 <math>\lambda \Pi 2</math>，通过允许对 <math>\lambda \Pi</math> 类型构造子的量化得到。此时，依赖乘积类型涵括了[[简单类型lambda演算|简单类型lambda演算]]中的<math>\to</math>与 [[系统F|系统F]] 中的<math>\forall</math>。

=== 高阶依赖类型多态 lambda 演算 ===

高阶类型系统 <math>\lambda \Pi \omega</math> 扩充了 <math>\lambda \Pi 2</math>，使之支持 Lambda 立方中的全部四种表达形式：从项到项的函数、从类型到类型的函数、从项到类型的函数、以及从类型到项的函数。这对应于[[构造演算|构造演算]]（calculus of constructions），而构造演算则是证明辅助器 [[Coq|Coq]] 所基于的构造归纳演算<ref name='CIC'>{{cite web|url=https://coq.inria.fr/refman/language/cic.html|title=Announce:Calculus of Inductive Constructions|accessdate=2019-04-12|archive-date=2020-11-11|archive-url=https://web.archive.org/web/20201111202834/https://coq.inria.fr/refman/language/cic.html|dead-url=no}}</ref>理论的基础。

== 依赖类型编程语言 ==
{| class="wikitable sortable"
|-
! 语言 !! 是否活跃开发中 !! 范式{{#tag:ref|这里专指''核心''语言之编程范式，而非任何 tactic 或代码生成子语言的范式。|group=脚注}} !! 策略（tactics） !! 证明项 !! 终止检查 !! 类型允许依赖于{{#tag:ref|受到语义约束，诸如全类（universe）的约束。|group=脚注}} !! [[全集|全类]] !! 证明无关性 !! 是否支持程序抽取 !! 程序抽取是否消除无关项
|-
| [[Agda|Agda]] || {{yes}}<ref>{{cite web|url=http://wiki.portal.chalmers.se/agda/pmwiki.php?n=Main.Download|title=Agda download page|accessdate=2014-08-24|archive-date=2019-06-27|archive-url=https://web.archive.org/web/20190627225915/https://wiki.portal.chalmers.se/agda/pmwiki.php?n=Main.Download|dead-url=no}}</ref> || 纯函数式 || 少且有限{{#tag:ref|[[环_(代数)|环]]求解器。<ref>{{cite web|url=http://www.cs.nott.ac.uk/~nad/listings/lib/Algebra.RingSolver.html|title=Agda Ring Solver|accessdate=2014-08-24|archive-date=2009-04-17|archive-url=https://web.archive.org/web/20090417050817/http://www.cs.nott.ac.uk/~nad/listings/lib/Algebra.RingSolver.html|dead-url=no}}</ref>|group=脚注}} || {{yes}} || {{yes}}（可选） || 任意项 || {{yes}}（可选）{{#tag:ref|可选的全类、可选的全类多态、可选的显式全类指定。|group=脚注}} || 证明无关性参数<ref name='agda-2.2.8'>{{cite web|url=http://permalink.gmane.org/gmane.comp.lang.agda/2051|title=Announce: Agda 2.2.8|access-date=2014-08-24|archive-url=https://web.archive.org/web/20110718034319/http://permalink.gmane.org/gmane.comp.lang.agda/2051|archive-date=2011-07-18|dead-url=yes}}</ref> || {{yes|[[Haskell|Haskell]]、[[JavaScript|JavaScript]]}} || {{yes}}<ref name='agda-2.2.8'/>
|-
| [[ATS语言|ATS]] || {{yes}}<ref>{{cite web|url=http://www.ats-lang.org/CHANGELOG/changelog.html|title=ATS Changelog|deadurl=yes|archiveurl=https://web.archive.org/web/20120302041151/http://www.ats-lang.org/CHANGELOG/changelog.html|archivedate=2012-03-02|accessdate=2014-08-24}}</ref> || 函数式 / 命令式 || {{no}}<ref>{{cite web|url=http://sourceforge.net/mailarchive/message.php?msg_id=27050673|title=email from ATS inventor Hongwei Xi|accessdate=2014-08-24|archive-date=2013-02-04|archive-url=https://web.archive.org/web/20130204032951/http://sourceforge.net/mailarchive/message.php?msg_id=27050673|dead-url=no}}</ref> || {{yes}} || {{yes}} || {{dunno}} || {{dunno}} || {{dunno}} || {{yes}} || {{dunno}}
|-
| [[Cayenne|Cayenne]] || {{no}} || 纯函数式 || {{no}} || {{yes}} || {{no}} || 任意项 || {{no}} || {{no}} || {{dunno}} || {{dunno}}
|-
| [[Coq|Coq]] || {{yes}}<ref>{{cite web|url=https://gforge.inria.fr/scm/viewvc.php/trunk/CHANGES?root=coq&view=log|title=Coq CHANGES in Subversion repository|accessdate=2014-08-24|archive-date=2018-09-29|archive-url=https://web.archive.org/web/20180929120531/https://gforge.inria.fr/scm/viewvc.php/trunk/CHANGES?root=coq&view=log|dead-url=no}}</ref> || 纯函数式 || {{yes}} || {{yes}} || {{yes}} || 任意项 || {{yes}}{{#tag:ref|全类，由全类约束自动推导（不同于 Agda 的全类多态）和可选的全类约束回显。|group=脚注}} || {{no}} || {{yes|Haskell、[[Scheme|Scheme]]、[[OCaml|OCaml]]}} || {{yes}}
|-
| [[Dependent_ML|Dependent ML]] || {{No}}{{#tag:ref|已由 ATS 取代。|group=脚注}} || {{dunno}} || {{dunno}} || {{yes}} || {{dunno}} || 自然数 || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}}
|-
| [http://code.google.com/p/guru-lang/ Guru] {{Wayback|url=http://code.google.com/p/guru-lang/ |date=20110807123913 }} || {{no}}<ref>{{cite web|url=https://code.google.com/p/guru-lang/source/list|title=Guru SVN|accessdate=2014-08-24|archive-date=2015-11-18|archive-url=https://web.archive.org/web/20151118085940/https://code.google.com/p/guru-lang/source/list|dead-url=no}}</ref> || 纯函数式<ref name='guru-book'>{{cite web|url=http://guru-lang.googlecode.com/svn/branches/1.0/doc/book.pdf|title=Verified Programming in Guru|author=Aaron Stump|date=6 April 2009|accessdate=28 September 2010|deadurl=yes|archiveurl=https://web.archive.org/web/20091229234011/http://guru-lang.googlecode.com/svn/branches/1.0/doc/book.pdf|archivedate=2009年12月29日}}</ref> || {{yes|hypjoin}}<ref name='hypjoin-paper'>{{cite web|url=http://www.cs.uiowa.edu/~astump/papers/petcher-thesis.pdf|title=Deciding Joinability Modulo Ground Equations in Operational Type Theory|author=Adam Petcher|date=1 April 2008|accessdate=14 October 2010|archive-date=2010-07-19|archive-url=https://web.archive.org/web/20100719115330/http://www.cs.uiowa.edu/~astump/papers/petcher-thesis.pdf|dead-url=no}}</ref> || {{yes}}<ref name='guru-book'/> || {{yes}} || 任意项 || {{no}} || {{yes}} || {{yes|Carraway}} || {{yes}}
|-
| [[Idris|Idris]] || {{yes}}<ref>{{cite web|url=http://github.com/edwinb/Idris|title=Idris git repository}}{{dead link|date=2017年11月 |bot=InternetArchiveBot |fix-attempted=yes }}</ref> || 纯函数式<ref>{{cite web|url=http://www.cs.st-andrews.ac.uk/~eb/drafts/ifl08.pdf|title=Idris, a language with dependent types - extended abstract|deadurl=yes|archiveurl=https://web.archive.org/web/20110716082621/http://www.cs.st-andrews.ac.uk/~eb/drafts/ifl08.pdf|archivedate=2011-07-16|accessdate=2014-08-24}}</ref> || {{yes}}<ref name='idris-compare'>{{cite web|url=http://www.quora.com/How-does-Idris-compare-to-other-dependently-typed-programming-languages|title=How does Idris compare to other dependently-typed programming languages?|author=Edwin Brady}}</ref> || {{yes}} || {{yes}}（可选） || 任意项 || {{yes}} || {{no}} || {{yes}} || {{yes}}<ref name='idris-compare'/>
|-
| [[Matita|Matita]] || {{yes}}<ref>{{cite web|url=http://helm.cs.unibo.it/websvn/listing.php?repname=helm&path=%2F&sc=0|title=Matita SVN|access-date=2014-08-24|archive-url=https://web.archive.org/web/20060508150758/http://helm.cs.unibo.it/websvn/listing.php?repname=helm&path=%2F&sc=0|archive-date=2006-05-08|dead-url=yes}}</ref> || 纯函数式 || {{yes}} || {{yes}} || {{yes}} || 任意项 || {{yes}} || {{yes}} || {{yes|OCaml}} || {{yes}}
|-
| [[NuPRL|NuPRL]] || {{yes}} || 纯函数式 || {{yes}} || {{yes}} || {{yes}} || 任意项 || {{yes}} || {{dunno}} || {{yes}} || {{dunno}}
|-
| [[F*|F*]] || {{yes}} || 函数式 / 命令式 || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}}
|-
| [[PVS|PVS（Prototype Verification System）]] || {{yes}} || {{dunno}} || {{yes}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}}
|-
| [http://sage.soe.ucsc.edu/ Sage] {{Wayback|url=http://sage.soe.ucsc.edu/ |date=20201109032232 }} || {{dunno}} || 混合类型检查 || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}}
|-
| [[Twelf|Twelf]] || {{yes}} || 逻辑式 || {{dunno}} || {{yes}} || {{yes}}（可选） || 任意（LF）项 || {{no}} || {{no}} || {{dunno}} || {{dunno}}
|-
| [http://www.cs.bu.edu/~hwxi/Xanadu/Xanadu.html {{Wayback|url=http://www.cs.bu.edu/~hwxi/Xanadu/Xanadu.html |date=20200221043405 }} Xanadu]] || {{no}}<ref>{{cite web|url=http://www.cs.bu.edu/~hwxi/Xanadu/Xanadu.html|title=Xanadu home page|accessdate=2007-11-05|archive-date=2020-02-21|archive-url=https://web.archive.org/web/20200221043405/http://www.cs.bu.edu/~hwxi/Xanadu/Xanadu.html|dead-url=no}}</ref> || 命令式 || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}} || {{dunno}}
|}

== 脚注 ==
<references group="脚注"/>

== 参见 ==
* [[Lambda立方体|Lambda立方体]]  
* [[有类型lambda演算|有类型lambda演算]]
* [[直觉类型论|直觉类型论]]

== 参考文献 ==
{{reflist|2}}

== 延伸阅读 ==
*[http://www.cs.nott.ac.uk/~txa/publ/ydtm.pdf Why Dependent Types Matter] {{Wayback|url=http://www.cs.nott.ac.uk/~txa/publ/ydtm.pdf |date=20150409203034 }} T. Altenkirch, C. McBride, J. McKinna

[[Category:数理逻辑|Category:数理逻辑]]
[[Category:计算机逻辑|Category:计算机逻辑]]
[[Category:类型论|Category:类型论]]
[[Category:编程语言比较|Category:编程语言比较]]