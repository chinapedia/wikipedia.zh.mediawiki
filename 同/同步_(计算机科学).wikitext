[[计算机科学|计算机科学]]中, '''同步'''（synchronization）是指两个不同但有联系的概念：进程同步与数据同步。进程同步指多个进程在特定点会合（join up）或者[[握手_(技术)|握手]]使得达成协议或者使得操作序列有序。数据同步指一个数据集的多份拷贝一致以维护[[完整性|完整性]]。常用进程同步原语实现数据同步。

==线程或进程同步==
[[File:Multiple_Processes_Accessing_the_shared_resource.png|thumb]])]]

多个线程（或进程）要执行同一个特定的不可重入的程序代码块（称为临界区），这就需要适当的并发控制同步技术<ref>{{cite conference
  |   title=More than you ever wanted to know about synchronization: Synchrobench, measuring the impact of the synchronization on concurrent algorithms
  |   author=Gramoli, V.
  |   conference=Proceedings of the 20th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming
  |   pages=1–10
  |   year=2015
  |   publisher=ACM
  |   url=http://sydney.edu.au/engineering/it/~gramoli/doc/pubs/gramoli-synchrobench.pdf
  |   access-date=2016-08-15
  |   archive-date=2016-03-04
  |   archive-url=https://web.archive.org/web/20160304120734/http://sydney.edu.au/engineering/it/~gramoli/doc/pubs/gramoli-synchrobench.pdf
  |   dead-url=no
  }}</ref>。否则，可能会发生[[竞态条件|竞态条件]]。


[[File:Shared_Resource_access_in_synchronization_environment.png|thumb]]

另一种同步要求产生于特定的操作顺序，如应该先买机票然后登机。<ref>{{cite web|last1=Fatheisian|first1=Halleh|last2=Rosenberger|first2=Eric|title=Synchronization|url=http://www.cs.gmu.edu/cne/itcore/processes/Sync.html|website=Department of Computer Science, George Mason University|accessdate=23 November 2014|archive-url=https://web.archive.org/web/20150128023801/http://www.cs.gmu.edu/cne/itcore/processes/Sync.html|archive-date=2015-01-28|dead-url=yes}}</ref>

同步还需处理:
* [[死锁|死锁]]
* {{tsl|en|Resource starvation|资源饿死}}
* [[优先级翻转|优先级翻转]]
* [[忙等待|忙等待]]

===经典同步问题===

* [[生产者消费者问题|生产者消费者问题]] (有限缓存区问题);
* {{tsl|en|Readers–writers problem|读写问题}};
* [[哲学家就餐问题|哲学家就餐问题]].

<!--- 
===Hardware synchronization===
Many systems provide hardware support for [[critical_section|critical section]] code.

A single processor or [[uniprocessor_system|uniprocessor system]] could disable [[interrupt|interrupt]]s by executing currently running code without [[Preemption_(computing)|preemption]], which is very inefficient on [[Multiprocessing|multiprocessor]] systems.<ref name="Wiley2014">{{cite book|last1=Silberschatz|first1=Abraham|last2=Gagne|first2=Greg|last3=Galvin|first3=Peter Baer|title=Operating System Concepts|date=July 11, 2008|publisher=John Wiley & Sons.|isbn=978-0-470-12872-5|edition=Eighth|chapter=Chapter 6: Process Synchronization}}</ref>
"The key ability we require to implement synchronization in a multiprocessor is a set of hardware primitives with the ability to atomically read and modify a memory location. Without such a capability, the cost of building basic synchronization primitives will be too high and will increase as the processor count increases. There are a number of alternative formulations of the basic hardware primitives, all of which provide the ability to atomically read and modify a location, together with some way to tell if the read and write were performed atomically. These hardware primitives are the basic building blocks that are used to build a wide variety of user-level synchronization operations, including things such as [[Lock_(computer_science)|locks]] and [[Barrier_(computer_science)|barriers]]. In general, architects do not expect users to employ the basic hardware primitives, but instead expect that the primitives will be used by system programmers to build a synchronization library, a process that is often complex and tricky."<ref name="Morgan2011">{{cite book|last1=Hennessy|first1=John L.|last2=Patterson|first2=David A.|title=Computer Architecture: A Quantitative Approach|date=September 30, 2011|publisher=Morgan Kaufmann|isbn=978-0-123-83872-8|edition=Fifth|chapter=Chapter 5: Thread-Level Parallelism}}</ref> Many modern hardware provides special atomic hardware instructions by either [[test-and-set|test-and-set]] the memory word or [[compare-and-swap|compare-and-swap]] contents of two memory words.

===Synchronization strategies in programming languages===
In [[Java|Java]], to prevent thread interference and memory consistency errors, blocks of code are wrapped into '''synchronized''' ''(lock_object)'' sections.<ref name=CoryJanssen /> This forces any thread to acquire the said lock object before it can execute the block. The lock is automatically released when thread leaves the block or enter the waiting state within the block. Any variable updates, made by the thread in synchronized block, become visible to other threads whenever those other threads similarly acquires the lock. 

In addition to mutual exclusion and memory consistency, Java ''synchronized'' blocks enable signaling, sending events from those threads, which have acquired the lock and execute the code block to those which are waiting for the lock within the block. This means that Java synchronized sections combine functionality of mutexes and events. Such primitive is known as [[Monitor_(synchronization)|synchronization monitor]].

Any object is fine to be used as a lock/monitor in Java. The declaring object is implicitly implied as lock object when the whole method is marked with ''synchronized''. 

The [[.NET_framework|.NET framework]] has synchronization primitives. "Synchronization is designed to be cooperative, demanding that every thread or process follow the synchronization mechanism before accessing protected resources (critical section) for consistent results." In .NET, locking, signaling, lightweight synchronization types, spinwait and interlocked operations are some of mechanisms related to synchronization.<ref>{{cite web|title=Synchronization Primitives in .NET framework|url=http://msdn.microsoft.com/en-us/library/ms228964%28v=vs.110%29.aspx|website=MSDN, The Microsoft Developer Network|publisher=Microsoft|accessdate=23 November 2014}}</ref>

===Synchronization examples===
Following are some synchronization examples with respect to different platforms.<ref name="Wiley2012">{{cite book|last1=Silberschatz|first1=Abraham|last2=Gagne|first2=Greg|last3=Galvin|first3=Peter Baer|title=Operating System Concepts|date=December 7, 2012|publisher=John Wiley & Sons.|isbn=978-1-118-06333-0|edition=Ninth|chapter=Chapter 5: Process Synchronization}}</ref>

====Synchronization in Windows====
[[Windows|Windows]] provides:
* [[Interrupt|interrupt masks]], which protect access to global resources (critical section) on uniprocessor systems;
* [[spinlock|spinlock]]s, which prevent, in multiprocessor systems, spinlocking-thread from being preempted;
* [[dispatcher|dispatcher]]s, which act like [[mutex|mutex]]es, [[Semaphore_(programming)|semaphores]], [[Even_(computing)|event]]s, and [[timer|timer]]s.

====Synchronization in Linux====
[[Linux|Linux]] provides:
* semaphores;
* spinlocks;
* [[readers–writer_lock|readers–writer lock]]s, for the longer section of codes which are accessed very frequently but don't change very often.

Enabling and disabling of kernel preemption replaced spinlocks on uniprocessor systems. Prior to kernel version 2.6, [[Linux|Linux]] disabled interrupt to implement short critical sections. Since version 2.6 and later, Linux is fully preemptive.

====Synchronization in Solaris====
[[Solaris_(operating_system)|Solaris]] provides:
* semaphores;
* [[condition_variable|condition variable]]s;
* [[adaptive_mutex|adaptive mutex]]es, binary semaphores that are implemented differently depending upon the conditions;
* readers–writer locks:
* [[turnstiles|turnstiles]], queue of threads which are waiting on acquired lock.

====Pthreads synchronization====
[[Pthreads|Pthreads]] is a platform-independent [[API|API]] that provides:
* mutexes;
* condition variables;
* readers–writer locks;
* spinlocks;
* [[barrier_(computer_science)|barrier]]s.

==Data synchronization==
{{main|Data synchronization}}
[[File:Data_Synchronization.png|thumb]]

A distinctly different (but related) concept is that of [[data_synchronization|data synchronization]]. This refers to the need to keep multiple copies of a set of data coherent with one another or to maintain [[data_integrity|data integrity]], Figure 3. For example, database replication is used to keep multiple copies of data synchronized with database servers that store data in different locations.

Examples include:
* [[file_synchronization|file synchronization]], such as syncing a hand-held MP3 player to a desktop computer;
* [[cluster_file_system|cluster file system]]s, which are [[file_system|file system]]s that maintain data or indexes in a coherent fashion across a whole [[computing_cluster|computing cluster]];
* [[cache_coherency|cache coherency]], maintaining multiple copies of data in sync across multiple [[cache_(computing)|cache]]s;
* [[RAID|RAID]], where data is written in a redundant fashion across multiple disks, so that the loss of any one disk does not lead to a loss of data;
* [[database_replication|database replication]], where copies of data on a [[database|database]] are kept in sync, despite possible large geographical separation;
* [[Journaling_file_system|journaling]], a technique used by many modern file systems to make sure that file metadata are updated on a disk in a coherent, consistent manner.

===Challenges in data synchronization===
Some of the challenges which user may face in data synchronization:<ref>{{cite web|title=Data Synchronization|url=http://www.dataintegration.info/data-synchronization/|website=Javlin Inc.|accessdate=23 November 2014}}</ref>
* data formats complexity;
* real-timeliness;
* data security;
* data quality;
* performance.

====Data formats complexity====
When we start doing something, the data we have usually is in a very simple format. It varies with time as the organization grows and evolves and results not only in building a simple interface between the two applications (source and target), but also in a need to transform the data while passing them to the target application. [[Extract,_transform,_load|ETL]] (extraction transformation loading) tools can be very helpful at this stage for managing data format complexities..

====Real-timeliness====
This is an era of real-time systems. Customers want to see the current status of their order in e-shop, the current status of a parcel delivery—a real time parcel tracking—, the current balance on their account, etc. This shows the need of a real-time system, which is being updated as well to enable smooth manufacturing process in real-time, e.g., ordering material when enterprise is running out stock, synchronizing customer orders with manufacturing process, etc. From real life, there exist so many examples where real-time processing gives successful and competitive advantage.

====Data security====
There are no fixed rules and policies to enforce data security. It may vary depending on the system which you are using. Even though the security is maintained correctly in the source system which captures the data, the security and information access privileges must be enforced on the target systems as well to prevent any potential misuse of the information. This is a serious issue and particularly when it comes for handling secret, confidential and personal information. So because of the sensitivity and confidentiality, data transfer and all in-between information must be encrypted.

====Data quality====
Data quality is another serious constraint. For better management and to maintain good quality of data, the common practice is to store the data at one location and share with different people and different systems and/or applications from different locations. It helps in preventing inconsistencies in the data.

====Performance====
There are five different phases involved in the data synchronization process:
* data extraction from the source (or master, or main) system;
* data transfer;
* data transformation;
* data load to the target system.

Each of these steps is very critical. In case of large amounts of data, the synchronization process needs to be carefully planned and executed to avoid any negative impact on performance.

==Mathematical foundations==
Synchronization was originally a process-based concept whereby a lock could be obtained on an object. Its primary usage was in databases. There are two types of (file) [[File_locking|lock]]; read-only and read–write. Read-only locks may be obtained by many processes or threads. Readers–writer locks are exclusive, as they may only be used by a single process/thread at a time.

Although locks were derived for file databases, data is also shared in memory between processes and threads. Sometimes more than one object (or file) is locked at a time. If they are not locked simultaneously they can overlap, causing a deadlock exception.

[[Java|Java]] and [[Ada_(programming_language)|Ada]] only have exclusive locks because they are thread based and rely on the [[compare-and-swap|compare-and-swap]] processor instruction.

An abstract mathematical foundation for synchronization primitives is given by the [[history_monoid|history monoid]]. There are also many higher-level theoretical devices, such as [[process_calculi|process calculi]] and [[Petri_net|Petri net]]s, which can be built on top of the history monoid.
--->

==参见==
* {{tsl|en|Futures and promises}}, 纯函数式编程中的同步机制

==参考文献==
{{reflist}}
* {{cite book | last=Schneider | first=Fred B. | title=On concurrent programming | url=https://archive.org/details/onconcurrentprog0000schn | publisher=Springer-Verlag New York, Inc.| date=1997 | isbn=0-387-94942-9}}

==外部链接==
* [https://web.archive.org/web/20090209170415/http://ibm.com/developerworks/linux/library/l-linux-synchronization.html Anatomy of Linux synchronization methods] at IBM developerWorks
* [http://greenteapress.com/semaphores/ ''The Little Book of Semaphores'']{{Wayback|url=http://greenteapress.com/semaphores/ |date=20160614065933 }}, by Allen B. Downey

{{并行计算}}

[[Category:并发计算|Category:并发计算]]
[[Category:通信|Category:通信]]
[[Category:同步|Category:同步]]