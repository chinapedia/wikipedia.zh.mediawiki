{{noteTA
|G1=IT
}}
{{unreferenced|time=2009-07-21T03:23:11+00:00}}
'''近似算法'''（{{lang-en|Approximation algorithm}}）是[[计算机科学|计算机科学]]中[[算法|算法]]研究的一个重要方向。所谓“近似”，就是指结果不一定是最优的，但是也在可以承受的范围内，而且可以比精确求解消耗更少的资源。这里的资源是[[计算复杂性理论|计算复杂性理论]]中的标准，可以是时间，空间或者询问次数等。

== 背景 ==

在计算复杂性理论中的某些假设下，比如最著名的<math>P\neq NP</math>假设下，对于一些可已被证明为[[NP_(复杂度)|NP]]完全的优化问题，无法在[[多项式时间|多项式时间]]内精确求到最优解，然而在现实或理论研究中，这类问题都有广泛的应用，在精确解无法得到的情况下，转而依靠高效的近似算法求可以接受的近似解。近似算法的研究也是当今[[计算机科学|计算机科学]]研究的一个主要方向。

== 近似比 ==
对于一个最大化问题的实例，设其最优解是<math>OPT</math>，某个近似算法的解是<math>x</math>，若下式成立，

<math>\alpha\cdot OPT\le x\le OPT</math>

其中<math>0<\alpha<1</math>则定义此近似算法的近似比为<math>\alpha</math>。

相应的，对于一个最小化问题的实例，设其最优解是<math>OPT</math>，某个近似算法的解是<math>x</math>，若下式成立，

<math>OPT\le x\le \alpha\cdot OPT</math>

其中<math>\alpha>1</math>则定义此近似算法的近似比为<math>\alpha</math>。

== 分类 ==
按照可以达到近似比的不同，可以将近似算法大致按以下分类：

# [[FPTAS|FPTAS]]
# [[PTAS|PTAS]]
# 常数近似
# [[对数的多项式|对数的多项式]]
# [[多项式|多项式]]

其中对数的多项式和多项式都是对应于输入规模的。

== 设计方法 ==
近似算法的常用设计方法有[[贪心法|贪心法]]，[[线性规划|线性规划]]、[[半正定规划|半正定规划]]的[[松弛和取整|松弛和取整]]，[[随机算法|随机算法]]等。

== 近似的困难性 ==
对于一些问题，近似算法的近似比也会有一定的局限性，一个最大化问题（最小化问题类似）最好的近似算法可以达到的近似比不能比某个特定的值更高。20世纪90年代发展起来的[[PCP|PCP]]理论为证明近似的困难性提供了一套系统的工具。例如，对于常见的[[MAX3SAT|MAX3SAT]]问题，一个简单的随机算法可以满足7/8的子句，但是可以证明，找到一个能保证满足高于<math>7/8+\epsilon(\forall\epsilon>0)</math>比例子句的问题是[[NP困难|NP困难]]的。所以在<math>P\neq NP</math>的假设下，这个问题我们可以得到的最优近似比是7/8。进入21世纪之后，计算机科学家为了近似困难性更往前一步，提出了[[唯一性游戏假设|唯一性游戏假设]]，在这一假设下，一些重要的问题如[[MAX-CUT|MAX-CUT]]、[[MAX2SAT|MAX2SAT]]也被证明了可能达到的最优近似比。

== 參見 ==
*[[P/NP問題|P/NP問題]]

{{算法}}
{{Authority control}}
[[Category:計算複雜性理論|Category:計算複雜性理論]]