{{Unreferenced|time=2014-08-22T14:43:15+00:00}}
{{NoteTA
|G1 = IT
}}
{{循环结构}}
在[[程式語言|程式語言]]中，'''While迴圈'''（{{lang-en|while loop}}）是一種[[控制流程|控制流程]]的[[陳述_(程式)|陳述]]。利用一個返回結果為[[布爾_(數據類型)|布林]]值(Boolean)的表達式作為循環條件，當這個表達式的返回值為“真”(true)時，則反覆執行迴圈內的程式碼；若表達式的返回值為“假”(false)，則結束執行迴圈內的代碼，繼續執行迴圈下面的代碼。

因為While迴圈在區塊內代碼被執行之前，先檢查[[陳述_(程式)|陳述]]是否成立，因此這種[[控制流程|控制流程]]通常被稱為是一種前測試迴圈(pre-test loop)。相對而言[[do-while迴圈|Do While迴圈]]，是在迴圈區塊執行結束之後，再去檢查[[陳述_(程式)|陳述]]是否成立，被稱為是後測試迴圈。

==程式範例==
[[File:While-loop-diagram.svg|thumb]]

===[[Visual_Basic|VB]]===
<syntaxhighlight lang="VB">
'這是一個用While迴圈的例子
dim counter as Integer
dim Tick as Integer
counter=5
tick=1
Print "Start"
while counter>0
counter=counter-tick
'迴圈語句
Wend
Print "End"
</syntaxhighlight>
<br>

===[[C語言|C]]/[[C++|C++]]===
<syntaxhighlight lang="c">
unsigned int counter = 5;
unsigned long factorial = 1;

while (counter > 0)
{
  factorial *= counter--;    /*當滿足迴圈條件（本例為：counter > 0）時會反覆執行該條語句 */
} 

printf("%lu", factorial);   
</syntaxhighlight>
<br>

=== [[Java|Java]] ===
<syntaxhighlight lang="java">
public static void main(str args[]){
    while true{
        System.out.println("Hello World!") //因為條件已經固定為常量true，所以就會不斷執行迴圈內的語句
    }
    int counter = 0 ;
    while counter<5{
        System.out.println("已經運行了"+counter+"次")  //因為條件限定為counter不大於5，所以在counter不大於5的情況下會不斷重複迴圈中的内容
        counter++;
    }
}
</syntaxhighlight>
<br>

===[[Python語言|Python語言]]===
<syntaxhighlight lang="Python">
a = 0
while a <= 10 :   #如果a沒有大於10就執行
    a = a+1
    print(a)
     
</syntaxhighlight>
<br>

== 另见 ==

* [[for循环|for循环]]
* [[迭代器|迭代]]
{{DEFAULTSORT:While Loop}}
[[Category:控制流程|Category:控制流程]]
[[Category:计算机编程|Category:计算机编程]]