{{noteTA
|G1=IT
}}
在[[計算複雜性理論|計算複雜性理論]]，一個被稱為'''線性時間'''或 [[大O符號|Ο]](''n'')時間的[[演算法|演算法]]，表示此演算法解題所需時間與輸入資料的大小成正比，通常以''n''表示。換句話說，執行時間與輸入資料大小為線性比例。例如將一列數字加總的所需時間，正比於串列的長度。

然而實際情況常有差距，真實的執行時間很可能與預期的比率相差甚大，尤其在n的值很小時。在技術討論時，在足夠大的量n之下演算法的執行時間從<math>an</math>到<math>bn</math>（a、ｂ為正[[實數|實數]]）時，就可稱線性時間。詳情請看[[大O符號|大O符號]]。

{{Fact|達到線性時間的執行效能通常是一個演算法的最佳目標|time=2013-05-01T16:53:32+00:00}}。很多學者研究並創造了許多接近線性或更佳的演算法，包括了軟體或硬體方面的研究。硬體方面，藉由諸如[[並行計算|平行運算]]的硬體架構，使得某些數學認為無法在標準計算模型下達到線性時間的演算法，現在都可以在線性時間內執行完畢。例如{{link-en|內容可定址記憶體|Content-addressable memory}}）。

某些排序演算法可以在特殊的資料結構及排列下擁有線性時間的效率。但在一般情況下以比較元素大小來排序的演算法，最多只能到達Ο(''n''log(''n''))。最低限度複雜性的證明已被小O符號含括；通用排序演算法被認為是Ω(''n'' log(''n''))。另外，要找到一個集合中最大的元素是 Ω(''n'')，因為演算法必須至少比較過（''n-1''）次才能找到最大元素。

任何必須依賴全部輸入內容才能得解的問題，它'''最少'''也得要線性時間才能得解，因為它至少得花線性時間來讀取輸入資料。

== 參閱 ==
* [[常數時間|常數時間]]
* [[多項式時間|多項式時間]]
* [[指數時間|指數時間]]

[[Category:計算複雜性理論|Category:計算複雜性理論]]