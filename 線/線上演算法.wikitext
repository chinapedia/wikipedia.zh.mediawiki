{{Expand |time=2010-05-04T07:59:20+00:00 }}
{{Unreferenced |time=2010-05-04T07:59:20+00:00 }}  
{{NoteTA|G1=IT}}
在電腦科學中，'''線上演算法'''是一種處理輸入資料的獨特形式，其演算過程中並不要求所有輸入資料在演算法開始運始之一刻即完備，反而可對逐步輸入的資料加以處理並在輸入完最後一項資料之後輸出運算結果。與之相對的稱為離線演算法，則假設輸入資料在運算開始前已完備。舉例：[[選擇排序|選擇排序]]是離線演算法，而[[插入排序|插入排序]]則為線上演算法。

注意：[[插入排序|插入排序]]始终生成一个最优的结果，也就是说一个正确排序的列表。然而对于很多问题，'''線上演算法'''的性能比不上离线算法（即无法取得最优的结果）。如果对于同一个问题的在线算法和最优化的离线算法的性能比率是有界的，那么这个在线算法被称作是'''competitive。'''

并非所有在线算法都有与之对应的离线算法。

== 例子 ==
以下是一些在线算法的例子
* [[插入排序|插入排序]]
* [[感知器|感知器]]
* [[水塘抽样|水塘抽样]]
* [[贪心算法|贪心算法]]
* {{tsl|en|Adversary model|Adversary model}}
* {{tsl|en|Metrical task systems|Metrical task systemsl}}
* {{tsl|en|Odds algorithm|Odds算法}}
* [[高速缓存文件置换机制|缓存置换算法]]
* {{tsl|en|Algorithms for calculating variance|方差计算算法}}
* {{tsl|en|Ukkonen's algorithm|Ukkonen's算法}}
[[Category:演算法|Category:演算法]]