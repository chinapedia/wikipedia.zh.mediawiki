在[[编码理论|编码理论]]中，'''多项式码'''（{{lang-en|'''polynomial code'''}}）是有效{{le|码字|codeword}}集合是由[[多項式|多項式]]（通常是固定长度的多项式）可以被特定多项式（长度较短，称为''生成多项式''）[[多项式长除法|整除]]的一种{{le|线性码|linear code}}。

== 定义 ==

对于[[有限域|有限域]] <math>GF(q)</math>，其元素我们称作''码元''。为了建立多项式码，我们要确定一个 <math>n</math> 个码元的序列 <math>a_{n-1}\ldots a_0</math> 其多项式为

:<math>a_{n-1}x^{n-1} + \cdots + a_1x + a_0.\,</math>

对于整数 <math>m \leq n</math>，令 <math>g(x)</math> 为 <math>m</math> 阶多项式，称为''生成多项式''。由 <math>g(x)</math> 生成的多项式码其码字都是阶数低于 <math>n</math>，并且可以被 <math>g(x)</math> [[多项式长除法|整除]]（没有余式）的多项式。

== 例子 ==

考虑 <math>GF(2)=\{0,1\}</math> 上，<math>n=5</math>、<math>m=2</math>、生成多项式为 <math>g(x)=x^2+x+1</math> 的多项式码。此码由下列码字组成：

:<math>0\cdot g(x),\quad 1\cdot g(x),\quad x\cdot g(x), \quad (x+1) \cdot g(x),</math>

:<math>x^2 \cdot g(x),\quad (x^2+1)\cdot g(x),\quad (x^2+x)\cdot g(x), \quad (x^2+x+1) \cdot g(x).</math>

或直接写成：

:<math>0,\quad x^2+x+1,\quad x^3+x^2+x,\quad x^3+2x^2+2x+1,</math>

:<math>x^4+x^3+x^2,\quad x^4+x^3+2x^2+x+1,\quad x^4+2x^3+2x^2+x,\quad x^4+2x^3+3x^2+2x+1.</math>

由于多项式码定义在二元伽罗华域 <math>GF(2)=\{0,1\}</math> 中，多项式元素用[[模算术|模]]q求和表示，于是最终多项式为：
:<math>0,\quad x^2+x+1,\quad x^3+x^2+x,\quad x^3+1,</math>

:<math>x^4+x^3+x^2,\quad x^4+x^3+x+1,\quad x^4+x,\quad x^4+x^2+1.</math>

等价地，用二进制位的序列表示，这些码字就是：

:<math>00000,\quad 00111,\quad 01110,\quad 01001,</math>

:<math>11100,\quad 11011,\quad 10010,\quad 10101.</math>

注意到如所有多项式码一样，这个码确实是一个{{le|线性码|linear code}}，即码字的线性组合还是码字。在域为 GF(2) 的情形，可以通过对二进制形式的两个码字取XOR（如00111 XOR 10010 = 10101）得到其线性组合。

== 编码 ==

在 <math>GF(q)</math> 上长度为 <math>n</math>、生成多项式为 <math>m</math> 阶多项式 <math>g(x)</math> 的多项式码中，会有 <math>q^{n-m}</math> 个码字。事实上，根据定义，当且仅当一个码字形式为 <math>p(x) = g(x)\cdot q(x)</math>（其中 <math>q(x)</math> 的阶小于 <math>n-m</math>）时，<math>p(x)</math> 才是一个码元。因为会有 <math>q^{n-m}</math> 个商，所以也会有相同数量的码字。
未编码的数据字长度应为 <math>n-m</math>。

一些作者，如（Lidl & Pilz, 1999），仅讨论了从数据字到码字赋值的映射 <math>q(x) \mapsto g(x)\cdot q(x)</math>。但在数据字不是码字的一部分时会存在缺陷。

相反，常用下面的方法来建立{{le|系统码|systematic code}}：给定长度为 <math>n-m</math> 的数据字 <math>d(x)</math>，先把 <math>d(x)</math> 乘以 <math>x^m</math>，这样的效果就是将 <math>d(x)</math> 向左移 <math>m</math> 位。<math>x^md(x)</math> 一般不能被 <math>g(x)</math> 整除，也就不是一个有效的码字。不过，调整 <math>x^md(x)</math> 的最右面 <math>m</math> 个符号可以得到唯一的码字。
要求它，需要计算 <math>x^md(x)</math> 除以 <math>g(x)</math> 的余式：

:<math>x^md(x) = g(x)\cdot q(x) + r(x),\,</math>

其中 <math>r(x)</math> 的阶数小于 <math>m</math>。于是对应于数据字 <math>d(x)</math> 的码字定义为

:<math>p(x) := x^md(x) - r(x),\,</math>

注意以下性质：
# <math>p(x) = g(x)\cdot q(x)</math> 可以被 <math>g(x)</math> 整除。特别地，<math>p(x)</math> 是一个有效码字。
# 由于 <math>r(x)</math> 的阶数小于 <math>m</math>，<math>p(x)</math> 最左面的 <math>n-m</math> 个符号与 <math>x^md(x)</math> 中对应符号相同。换句话说，码字的前 <math>n-m</math> 个符号与原数据字相同。剩下的 <math>m</math> 个符号称为''校验位''。

=== 例子 ===

对于 <math>n=5</math>、<math>m=2</math>、生成多项式为 <math>g(x)=x^2+x+1</math> 的上述码，我们的带下列从数据字到码字的赋值：
* 000 {{mapsto}} '''000'''00
* 001 {{mapsto}} '''001'''11
* 010 {{mapsto}} '''010'''01
* 011 {{mapsto}} '''011'''10
* 100 {{mapsto}} '''100'''10
* 101 {{mapsto}} '''101'''01
* 110 {{mapsto}} '''110'''11
* 111 {{mapsto}} '''111'''00

== 译码 ==

错误消息可以直接通过多项式除以生成多项式得到非零余式而检测出来。

假设码字没有差错，系统码可以通过剥离 <math>m</math> 个检验位译码。

如果存在差错，则应在译码前纠错。有些多项式码（如[[BCH码|BCH码]]）会有高效的译码算法。

== 多项式码的性质 == 

对于所有数字码来说，多项式码的[[误差检测与校正|误差检测与校正]]能力取决于该码的最小[[汉明距离|汉明距离]]。由于多项式码是线性码，最小汉明距离等于任何非零码字的最小重量。在上面的例子中，最小汉明距离是2，因为01001是一个码字，并且没有非零码字只有一位是1的。

多项式码更具体的性质往往取决于它的生成多项式的特定的代数性质。这里有此类性质的一些例子：

* 一个多项式码当且仅当生成多项式能够整除 <math>x^n-1</math> 时为[[循环码|循环码]]。
* 如果生成多项式是{{le|本原多项式 (域论)|Primitive polynomial (field theory)|本原多项式}}，若 <math>n\leq 2^m-1</math>，则得到的码的汉明距离最小为3。
* 在[[BCH码|BCH码]]中，生成多项式在扩展域中有能够得到很大汉明距离的特定的根。

巧妙选取生成多项式的多项式码的代数性质可以用来寻找有效的误差校正算法。[[BCH码|BCH码]]就属于这种情况。

== 特定多项式码 ==

* [[循环码|循环码]]；所有循环码都是多项式码；如[[循環冗餘校驗|CRC]]码。
* [[BCH码|BCH码]]；一类汉明距离很大、有代数纠错算法的循环码。
* [[里德-所罗门码|里德-所罗门码]]；BCH码的一个重要子集，有特别高效的结构。

== 参考文献 ==
* W.J. Gilbert and W.K. Nicholson: ''Modern Algebra with Applications'', 2nd edition, Wiley, 2004.
* R. Lidl and G. Pilz. Applied Abstract Algebra, 2nd edition. Wiley, 1999.
{{Reflist}}
[[Category:编码理论|Category:编码理论]]